{"version":3,"sources":["store/Reducer.js","store/Store.js","components/Header/DateComponent.js","shared/constants.js","components/Location/Map.js","components/Location/AutoComplete.js","components/Location/LocationToggle.js","components/Location/MapContext.js","components/Location/Location.js","components/Location/WeatherConditions.js","components/Location/WeatherModal.js","components/Location/SoilCondition.js","components/Header/Greenbar/Greenbar.js","components/Header/ForecastComponent.js","components/Header/header.js","components/Landing/Landing.js","shared/ProgressButtonsInner.js","shared/ProgressButtons.js","shared/ProgressBar.js","components/GoalsSelector/GoalTag.js","components/GoalsSelector/GoalsSelector.js","components/Location/LocationConfirmation.js","components/CropSelector/GrowthWindow.js","components/InformationSheet/SoilDrainageTimeline.js","components/InformationSheet/PhotoComponent.js","components/InformationSheet/DictionaryContent.js","components/InformationSheet/InformationSheetDictionary.js","components/InformationSheet/InformationSheetContent.js","components/CropSelector/CropDetailsModal.js","components/CropSelector/CropLegendModal.js","components/CropSelector/CropTable.js","components/MyCoverCropList/MyCoverCropCardsComponent.js","components/MyCoverCropList/MyCoverCropComparisonComponent.js","components/MyCoverCropList/MyCoverCropList.js","components/CropSelector/CropCalendarView.js","shared/keys.js","components/CropSelector/Filters/CoverCropType.js","components/CropSelector/Filters/EnvironmentalTolerance.js","components/CropSelector/Filters/Seeds.js","components/CropSelector/Filters/SeedingMethods.js","components/CropSelector/Filters/Growth.js","components/CropSelector/Filters/TerminationMethods.js","components/CropSelector/Filters/Weeds.js","components/CropSelector/Filters/Beneficials.js","components/CropSelector/Filters/Roots.js","components/CropSelector/Filters/SoilConditions.js","components/MyCoverCropList/ComparisonBar/RenderFilters.js","components/MyCoverCropList/ComparisonBar/RenderGoals.js","components/MyCoverCropList/ComparisonBar/ComparisonBar.js","components/CropSelector/CropSidebar.js","components/CropSelector/CropSelector.js","App.js","serviceWorker.js","index.js","components/Footer/footer.js","components/About/About.js","components/SeedingRateCalculator/SeedingRateCalculator.js","components/MixMaker/MixMaker.js","components/CoverCropExplorer/ExplorerCardView.js","components/CoverCropExplorer/CoverCropExplorer.js","components/InformationSheet/InformationSheet.js","components/Help/Help.js","components/Feedback/Feedback.js"],"names":["Reducer","state","action","type","data","progress","weatherDataReset","markers","address","showAddressChangeBtn","zoneText","zone","selectedGoals","addressVerified","markersCopy","zipCode","addressSearchPreference","selectedCrops","soilData","Map_Unit_Name","Drainage_Class","Flooding_Frequency","Ponding_Frequency","soilDataOriginal","weatherData","averageFrost","firstFrostDate","month","day","lastFrostDate","averagePrecipitation","thisMonth","annual","frostFreeDays","myCoverCropActivationFlag","speciesSelectorActivationFlag","cashCropData","name","dateRange","startDate","endDate","snackOpen","snackMessage","allGoals","cropData","ajaxInProgress","cropDetailModal","isSoilDataLoading","selectedCheckboxes","selectedStars","for","filterString","filterKeys","activeGrowthPeriod","comparisonKeys","cropDataFormatter","tjson","filter","crop","map","val","fields","monthStringBuilder","img","Notes","Directory","desc","loremText","vals","forEach","param","valStart","moment","valEnd","str","valuesArray","isSameOrBefore","get","push","format","add","key","prev","split","splice","join","z6AllCrops","z6crops","z5AllCrops","z5crops","z7CropData","z7crops","initialState","zip","zoom","snackVertical","snackHorizontal","modalOpen","modalSize","modalBody","addToCartBtnText","greenbarExpanded","zone7CropData","zone6CropData","zone5CropData","zone7Dictionary","z7Dict","zone6Dictionary","z6Dict","zone5Dictionary","z5Dict","Context","createContext","Store","children","useReducer","dispatch","Provider","value","setTodaysDate","now","tzdata","tz","guess","DateComponent","useState","date","setDate","useEffect","ReferenceTooltip","require","props","sourceURL","url","sourceName","source","content","hasLink","Tooltip","title","href","target","rel","interactive","arrow","Info","fontSize","dangerouslySetInnerHTML","placement","Typography","variant","DataTooltip","className","zoneIcon","w","h","height","width","viewBox","fill","xmlns","d","UnderConstructionText","withStyles","thumb","backgroundColor","track","input","color","Switch","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","abbrRegion","to","i","regions","concat","replace","txt","charAt","toUpperCase","substr","toLowerCase","length","LightButton","root","borderRadius","padding","borderColor","Button","getRating","ratng","parseInt","weatherApiURL","allMonths","localeData","monthsShort","greenBarExpansionPanelHeight","trimString","stringFull","size","isNaN","substring","RenderSeedPriceIcons","MonetizationOn","opacity","CropImage","present","src","alt","view","onClick","lazyHeight","imageStyle","maxWidth","maxHeight","fallback","flipCoverCropName","cropName","cropNames","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","editableLayers","FeatureGroup","drawPluginOptions","position","draw","polygon","allowIntersection","drawError","message","shapeOptions","polyline","circle","rectangle","marker","circlemarker","edit","featureGroup","remove","Control","Draw","useStyles","makeStyles","theme","formControl","margin","minWidth","selectEmpty","marginTop","modal","display","justifyContent","paper","palette","background","border","boxShadow","shadows","AutoCompleteComponent","classes","useContext","open","setOpen","setAddress","suggestedAddress","setSuggestedAddress","handleOpen","handleClose","checkAddresses","query","a","fetch","response","json","Modal","onClose","BackdropProps","timeout","BackdropComponent","Backdrop","Fade","in","id","index","Link","component","parseFloat","lat","lon","display_name","console","log","setBoundingBoxAndAddress","FormControl","TextField","label","onChange","event","fullWidth","aria-haspopup","InputProps","endAdornment","InputAdornment","IconButton","alert","then","addressData","Search","LocationToggleComponent","defaultValue","setDefaultValue","ToggleButton","selected","ToggleButtonGroup","exclusive","e","MapContext","LayersControl","BaseLayer","Overlay","minzoom","maxzoom","from","show","setShow","mapCenter","setMapCenter","isPoly","setIsPoly","showEditControl","setShowEditControl","updateGlobalMarkers","markersArray","editableFG","setEditableFG","minZoom","maxZoom","center","getPolyCenter","ref","featureGroupRef","onEdited","onCreated","drawnItems","leafletElement","_layers","Object","keys","layerid","layer","removeLayer","layerType","_latlng","lng","latlngs","_latlngs","latlngArr","latlng","onDeleted","line","showArea","metric","Polygon","positions","Marker","TileLayer","attribution","arr","x","y","Math","min","max","LocationComponent","align","InputLabel","Select","labelId","textAlign","MenuItem","keuy","AutoComplete","LocationToggle","textField","marginLeft","marginRight","WeatherConditions","months","setMonths","currentMonthFull","setCurrentMonthFull","setDidChange","anyValuesChanged","setAnyValuesChanged","React","setCaller","weatherDataShadow","setWeatherDataShadow","lastFrostDayHelper","setLastFrostDayHelper","firstFrostDayHelper","setFirstFrostDayHelper","firstFrostDayError","setFirstFrostDayError","lastFrostDayError","setLastFrostDayError","firstFrostMonth","setFirstFrostMonth","firstFrostDay","setFirstFrostDay","lastFrostMonth","setLastFrostMonth","lastFrostDay","setLastFrostDay","setAveragePrecipitation","setFrostFreeDays","caller","modalBtnDisabled","cursor","Opacity","AcUnit","WbSunnyOutlined","aria-labelledby","aria-describedby","closeAfterTransition","FormGroup","htmlFor","native","inputProps","multiline","helperText","error","maxLength","step","disabled","broadcastObject","SoilCondition","switchBase","grey","transform","common","white","primary","main","checked","tilingCheck","setTilingCheck","getSSURGOData","longLatString","soilDataQuery","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","result","mapUnitString","stringSplit","el","indexOf","elm","floodingClasses","drainageClasses","catch","updateDrainageClass","drainages","updateFloodingFrequency","floodings","RenderFloodingOptions","flooding","Chip","includes","RenderDrainageClasses","drainage","showTiling","setShowTiling","some","window","localStorage","setItem","JSON","stringify","Terrain","LocalDrinkOutlined","arrayEquals","InvertColors","soilDrainCopy","drainSet","Set","has","delete","WavesOutlined","b","sort","Array","isArray","every","expansionPanelBaseStyle","greenBarWrapperBackground","Greenbar","expansionPanelComponent","setExpansionPanelComponent","greenBarParent","document","getElementById","addEventListener","evt","targetElement","parentNode","closeExpansionPanel","greenbarExpansionElement","handleAddressBtnClick","handleSoilBtnClick","handleWeatherBtnClick","handleConfirmationChoice","clearCoverCrops","defaultMarkers","setConfirmationOpen","confirmationOpen","restartPrompt2","setRestartPrompt2","location","pathname","LocationOn","toString","currentMonth","getWeatherData","Refresh","Location","bottom","Dialog","disableBackdropClick","disableEscapeKeyDown","DialogContent","dividers","DialogActions","autoFocus","ForecastComponent","showTempIcon","setShowTempIcon","unit","iconURL","iconDescription","temp","setTemp","setShowFeatures","trace","callWeatherApi","iconId","weather","icon","String","description","tempObj","temp_min","temp_max","reverseGEO","localityInfo","informative","lastInfo","addressString","city","postcode","makeURLString","fetchData","jsonData","params","Number","toFixed","Header","useTheme","history","useMediaQuery","breakpoints","up","between","useHistory","collapse","setCollapse","isRoot","setIsRoot","redirectToRoot","isActive","getUSDAZone","getAverageFrostDates","Axios","resp","totalYears","mostRecentYearData","maxDate","minDate","averageFrostObject","revAPIURL","locality","principalSubdivision","frostFreeDaysURL","frostFreeDatesURL","frostFreeDaysObject","hasOwnProperty","obj","currentMonthInt","averageRainForAMonthURL","fiveYearAvgRainURL","averagePrecipitationForCurrentMonth","status","fiveYearAvgRainAnnual","z7Formattedgoal","zone7Goal","goal","z6Formattedgoal","zone6Goal","z5Formattedgoal","zone5Goal","Include","setmyCoverCropActivationFlag","setSpeciesSelectorActivationFlag","activeClassName","onContextMenu","NavLink","exact","Badge","badgeContent","light","fluid","isOpen","navbar","active","Landing","bgImage","bg","backgroundSize","paddingBottom","marginBottom","gutterBottom","fontWeight","incVal","ProgressButtonsInner","isDisabled","changeProgress","renderProgressButtons","ProgressButtons","setIsDisabled","disableLogic","goalsLength","checkProgressStatus","actualProgress","expectedProgress","ProgressBar","GoalTag","goalDescription","goalTitle","goaltTitle","getElementsByClassName","classList","enterDelay","enterNextDelay","avatar","Avatar","goals","updateSelectedGoals","flexWrap","goalSkeletonStyle","GoalsSelector","setAllGoals","Skeleton","LocationConfirmation","GrowthWindowComponent","cropLegendObj","Early","Mid","class","isCashCropMonth","fullMonth","setMonthVals","cropDataLegendLabel_Early","cropDataLegendLabel_Mid","borderLeft","v","borderRight","SoilDrainageTimeline","Timeline","drainageClass","fullLength","TimelineItem","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","PhotoComponent","imageData","imagesApiUrl","imageList","setImageList","getImages","LuminousGallery","querySelectorAll","arrowNavigation","caption","trigger","dataset","strippedUrl","startsWith","data-caption","getPhotoCredits","fileName","baseName","fileNameArray","last","secondLast","year","path","separator","windowsSeparator","slice","lastIndexOf","DictionaryContent","dictData","groupedCats","setGroupedCats","allCats","useMemo","dict","property","groupedCategories","reduce","acc","cur","RenderCats","borderBottom","innerCat","index2","InformationSheetDictionary","dictionary","setDictionary","borderTopLeftRadius","borderTopRightRadius","Accordion","expanded","MuiAccordion","AccordionSummary","MuiAccordionSummary","heading","typography","pxToRem","fontWeightRegular","InformationSheetContent","currentSources","setCurrentSources","regex","removeDoubleQuotes","relevantZones","sources","zones","Zone","trim","coverCrops","overflowX","whiteSpace","WebkitOverflowScrolling","getMonthDayString","GrowthWindow","FiberManualRecord","defaultExpanded","expandIcon","ExpandMore","AccordionDetails","activeMonths","textDecoration","top","left","overflow","AccordionSummaryIcon","CropDetailsModalComponent","modalData","setModalData","Taxonomy","Environmental","Growth","Planting","Termination","Weeds","handleModalClose","setModalOpen","Close","paddingRight","paddingLeft","CropLegendModal","legendModal","handleLegendModal","CloseRounded","CropTableComponent","inactiveCropData","activeCropData","useSnackbar","enqueueSnackbar","closeSnackbar","setSelectedCropsIds","selectedBtns","showGrowthWindow","setShowGrowthWindow","setLegendModal","selectedIds","getCardFlex","indexKey","TableCell","cropId","btnId","cropArray","removeIndex","selectedCropsCopy","addCropToBasket","handleModalOpen","activeCropPresent","inactiveCropPresent","RenderActiveInactiveCropData","TableRow","colSpan","fontStyle","flexDirection","maxTableHeight","tbodyHeight","setTbodyHeight","theadHeight","setTheadHeight","querySelector","theadComputedHeight","getBoundingClientRect","nameSortFlag","setNameSortFlag","selectedCropsSortFlag","setSelectedCropsSortFlag","TableContainer","Table","stickyHeader","TableHead","visibility","sortPreference","sortAllCrops","Sort","startIcon","AddCircle","zIndex","activeCropDataShadow","inactiveCropDataShadow","firstCropName","secondCropName","setActiveCropData","setInactiveCropData","reverse","lastIndex","wordBreak","selectedCropsShadow","selectedCropIds","newActiveShadow","newInactiveShadow","inCart","TableBody","CropDetailsModal","CircularProgress","card","media","MyCoverCropCardsComponent","cardNo","Card","CardMedia","image","CardContent","CardActionArea","removeCrop","lightBorder","borderBottomLeftRadius","lightBG","RenderRelevantData","filterKey","RenderSeedingData","GetAverageGoalRating","goalRating","MyCoverCropComparisonComponent","sidebarDefinitionsz7","sidebarDefs","setSidebarDefs","sidebarDefinitionsz6","sidebarDefinitionsz5","getTooltipData","keyName","exactObject","find","Variable","Description","borderTop","Cancel","titleAccess","MyCoverCropList","comparisonView","redirectToSpeciesSelector","TopBar","pdf","csv","Add","itemNo","growthIcon","CropCalendarViewComponent","currentYear","Date","getFullYear","fetchRecordsIfUnavailable","Promise","resolve","reject","records","lineHeight","LocalFlorist","WbSunny","Eco","growthMonth","checkIfGrowthMonth","growthMonthSeparator","getAverageGoalRating","contains","textContent","innerHTML","CoverCropType","forwardRef","setSelected","setSidebarFilterOptions","sidebarFilterOptions","useImperativeHandle","resetFilters","filters","values","removed","chipVals","added","handleClick","EnvironmentalTolerance","__html","alternateName","newVal","newValue","Seeds","SeedingMethods","handleChange","selections","FormControlLabel","control","Checkbox","Duration","RenderChips","subFilter","filtername","filtered","roots","handleChipClick","borderBottomRightRadius","TerminationMethods","setProps","Persistence","Roots","areCommonElements","arr1","arr2","arr2Set","SoilConditions","filterSidebarItems","newActives","newInactives","RenderFilters","filterValues","setFilterValues","toggleSidebarFilterItems","ListItem","button","ListItemText","ExpandLess","Collapse","List","disablePadding","subNested","comparisonKeysCopy","indexOfValue","updateCheckboxStatus","RenderGoals","goalsOpen","setGoals","setGoalsOpen","ComparisonBar","filteredVals","filterData","filteredGoals","listRoot","subheader","ListSubheader","listSubHeaderRoot","newSidebarFilterVals","_","listItemRoot","formControlLabel","nested","CropSidebarComponent","isListView","cropFiltersOpen","setCropFiltersOpen","showFilters","setShowFilters","cashCropOpen","setCashCropOpen","cashCropVisible","setCashCropVisible","dateRangeOpen","setDateRangeOpen","setDateRange","sidebarFilters","setSidebarFilters","sidebarFiltersOpen","setSidebarFiltersOpen","seedingMethodRef","useRef","coverCropTypeRef","growthRef","rootsRef","seedsRef","weedsRef","terminationRef","envTolRef","setResetFilters","firstUpdate","current","crop_data","nonZeroKeys2","nonZeroKeys","growthArray","arrayKeys","booleanKeys","totalActiveFilters","keyObject","intersection","inactives","filtersSelected","setFiltersSelected","newSidebarFiltersOpen","resetAllFilters","withRef","filterTitles","cropDataChanged","zoneToggle","setZoneToggle","growthWindowVisible","keysArray","keysArrChanged","toISOString","setGrowthWindow","sortEnvTolCropData","tableHeight","setTableHeight","totalHt","btnHt","toggleComparisonView","Compare","toggleListView","CalendarToday","coverCropName","onInput","covercropsNamesFilter","unmountOnExit","oldIndex","newIndex","newGoalArr","newGoals","arrayMove","renderList","isDragged","undefined","renderItem","isSelected","disableTypography","readOnly","CalendarTodayRounded","definedRanges","range","cashCropDateRange","parse","getItem","handleZone","searchValue","handleSearchChange","right","ScrollTop","useScrollTrigger","disableHysteresis","threshold","Zoom","anchor","ownerDocument","scrollIntoView","behavior","block","role","CropSelector","setSortAllGoals","setSortPreference","disabledIds","starDisabledIds","setCoverCropName","setIsListView","setComparisonView","setCropData","setDisabledIdsTextNodes","setCropDataChanged","allIds","disabledIdssTextNodes","innerText","ele","CropSidebar","objDataArr","objData","updatedCropData","sortBy","activeObjKeys","orderBy","crops","CropTable","sortAllGoals","activeCropDataCopy","inactiveCropDataCopy","updatedInactives","CropCalendarView","Fab","aria-label","KeyboardArrowUp","LoadRelevantRoute","calcHeight","App","setCalcHeight","parentDocHeight","headerHeight","logo","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","RouteNotFound","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","WrappedComponent","Footer","monthYear","setMonthYear","fetchDate","auth","username","password","lastCommitDate","commit","committer","lastCommitDateFormatted","getMonth","flexGrow","tabs","divider","About","setValue","RenderContent","SeedingRateCalculator","Box","MixMaker","ExplorerCardView","CoverCropExplorer","setCropName","crop_name","scientific_name","InformationSheet","BasicCrop","setCrop","createRef","getElementsByTagName","print","removeItem","PictureAsPdf","FormatListBulleted","Print","closeModal","_id","$oid","Synonyms","Origin","__id","Drought","Flood","Heat","Salinity","Shade","HelpComponent","FeedbackComponent","frameBorder","createMuiTheme","secondary","overrides","MuiTooltip","tooltip","MuiChip","colorSecondary","colorPrimary","sizeSmall","csTheme","responsiveFontSizes","WrapperWithFooter","maxSnack","ReactDOM","render","URL","process","origin","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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BACE,+CACA,+LAMF,4BACA,2BACE,4CACA,gSAOF,4BACA,2BACE,+CACA,oHAKF,4BACA,2BACE,4CACA,kTAQF,4BACA,2BACE,4CACA,oGAKF,4BACA,2BACE,4CACA,wNAMF,4BACA,2BACE,4CACA,+GAKF,4BACA,2BACE,4CACA,kHAKF,4BACA,2BACE,gDACA,kXASF,4BACA,2BACE,4CACA,8MAMF,4BACA,2BACE,yCACA,yEAEF,4BACA,2BACE,yCACA,qKAMF,4BACA,2BACE,2CACA,6EAEF,4BACA,2BACE,6CACA,0FAIF,2BACE,0CACA,+GAKF,4BACA,2BACE,4CACA,yJAKF,4BACA,2BACE,uCACA,wIAKF,4BACA,2BACE,0CACA,sGAKF,4BACA,2BACE,2CACA,mCAAe,IACf,6FAIF,4BACA,2BACE,2CACA,uIAKF,4BACA,2BACE,4CACA,qHAKF,4BACA,2BACE,4CACA,iHAKF,4BACA,2BACE,2CACA,wIAKF,4BACA,2BACE,6CACA,geAWF,4BACA,2BACE,6CACA,ufAWF,4BACA,2BACE,sDACA,8NAOF,4BACA,2BACE,6CACA,0HAE2B,KAE3B,uBAAGZ,KAAK,uBACN,+DAEF,kWASF,4BACA,2BACE,gDACA,sGAKF,4BACA,2BACE,2CACA,0GAKF,4BACA,2BACE,0CACA,qZASF,4BACA,2BACE,4CACA,8EAEF,4BACA,2BACE,6CACA,yFAIF,4BACA,2BACE,6CACA,uJAKF,4BACA,2BACE,2CACA,oGAKF,4BACA,2BACE,8CACA,2JAKF,4BACA,2BACE,0CACA,8BACG,IADH,0kBAcF,2BACE,6BACA,gDACA,iXAYV,QACE,OAAO,kBAACS,EAAA,EAAD,CAAYC,QAAQ,Y,WCj2ClB2hC,GATe,WAC5B,OACE,yBAAKzhC,UAAU,kBACb,kBAAC,GAAD,CAAQ4+B,KAAK,kCACb,kBAAC8C,GAAA,EAAD,KAAMhhC,KCKGihC,GATE,WACf,OACE,yBAAK3hC,UAAU,kBACb,kBAAC,GAAD,CAAQ4+B,KAAK,kCACb,kBAAC8C,GAAA,EAAD,KAAMhhC,KCMN+F,GAAYC,aAAW,CAC3B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","file":"static/js/main.be95884f.chunk.js","sourcesContent":["const Reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_PROGRESS\": {\n      if (action.data.type === \"INCREMENT\") {\n        return { ...state, progress: state.progress + 1 };\n      } else if (action.data.type === \"DECREMENT\") {\n        return { ...state, progress: state.progress - 1 };\n      } else if (action.data.type === \"HOME\") {\n        return { ...state, progress: 0 };\n      } else {\n        break;\n      }\n    }\n    case \"WEATHER_DATA_RESET\": {\n      return { ...state, weatherDataReset: action.data.weatherDataReset };\n    }\n    case \"CHANGE_ADDRESS_BY_TYPING\": {\n      if (action.data.markers) {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn,\n          markers: action.data.markers,\n        };\n      } else {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn,\n        };\n      }\n    }\n    case \"UPDATE_ZONE_TEXT\": {\n      return {\n        ...state,\n        zoneText: action.data.zoneText,\n        zone: action.data.zone,\n        selectedGoals: [],\n      };\n    }\n    case \"UPDATE_ZONE\": {\n      return {\n        ...state,\n        zoneText: action.data.zoneText,\n        zone: action.data.zone,\n      };\n    }\n    case \"CHANGE_ADDRESS\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified,\n      };\n    }\n    case \"RESET\": {\n      return {\n        ...state,\n        progress: 0,\n        address: \"\",\n        markers: action.data.markers,\n        addressVerified: false,\n        markersCopy: [],\n        zipCode: 0,\n        addressSearchPreference: \"address\",\n        selectedCrops: action.data.selectedCrops,\n        selectedGoals: [],\n        soilData: {\n          Map_Unit_Name: \"\",\n          Drainage_Class: [],\n          Flooding_Frequency: [],\n          Ponding_Frequency: \"\",\n        },\n        soilDataOriginal: {\n          Map_Unit_Name: \"\",\n          Drainage_Class: [],\n          Flooding_Frequency: [],\n          Ponding_Frequency: \"\",\n        },\n        weatherData: {\n          averageFrost: {\n            firstFrostDate: {\n              month: \"October\",\n              day: 21,\n            },\n            lastFrostDate: {\n              month: \"April\",\n              day: 20,\n            },\n          },\n          averagePrecipitation: {\n            thisMonth: 3.6, //inches\n            annual: 43, //inches\n          },\n          frostFreeDays: 173,\n        },\n        myCoverCropActivationFlag: false,\n        speciesSelectorActivationFlag: true,\n        cashCropData: {\n          name: \"\",\n          dateRange: {\n            startDate: \"\",\n            endDate: \"\",\n          },\n        },\n      };\n    }\n\n    case \"UPDATE_MARKER\": {\n      return {\n        ...state,\n        markers: action.data.markers,\n      };\n    }\n    case \"UPDATE_MARKER_COPY\": {\n      return {\n        ...state,\n        markersCopy: action.data.markersCopy,\n      };\n    }\n    case \"UPDATE_ADDRESS_ON_MAP_CLICK\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n    case \"TOGGLE_ADDRESS_CHANGE_BUTTON\": {\n      return {\n        ...state,\n        showAddressChangeBtn: action.data.showAddressChangeBtn,\n      };\n    }\n    case \"ADD_GOALS\": {\n      return {\n        ...state,\n        allGoals: action.data,\n      };\n    }\n\n    case \"SNACK\": {\n      return {\n        ...state,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"UPDATE_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data,\n      };\n    }\n    case \"ADD_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: [...state.selectedGoals, action.data],\n      };\n    }\n\n    case \"DRAG_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data.selectedGoals,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"PULL_CROP_DATA\": {\n      return {\n        ...state,\n        cropData: action.data,\n      };\n    }\n\n    case \"SELECTED_CROPS_MODIFIER\": {\n      return {\n        ...state,\n        selectedCrops: action.data.selectedCrops,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"ACTIVATE_MY_COVER_CROP_LIST_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag:\n          action.data.speciesSelectorActivationFlag,\n      };\n    }\n\n    case \"ACTIVATE_SPECIES_SELECTOR_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag:\n          action.data.speciesSelectorActivationFlag,\n      };\n    }\n\n    case \"UPDATE_WEATHER_CONDITIONS\": {\n      return {\n        ...state,\n        weatherData: action.data.weatherData,\n      };\n    }\n\n    case \"UPDATE_FROST_FREE_DAYS\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          frostFreeDays: action.data.frostFreeDays,\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_FROST_DATES\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averageFrost: action.data.averageFrost,\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            thisMonth: action.data.thisMonth,\n          },\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_ANNUAL\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            annual: action.data.annual,\n          },\n        },\n      };\n    }\n\n    case \"SET_AJAX_IN_PROGRESS\": {\n      return {\n        ...state,\n        ajaxInProgress: action.data,\n      };\n    }\n    case \"TOGGLE_CROP_DETAIL_MODAL\": {\n      return {\n        ...state,\n        cropDetailModal: action.data.cropDetailModal,\n      };\n    }\n\n    case \"TOGGLE_SOIL_LOADER\": {\n      return {\n        ...state,\n        isSoilDataLoading: action.data.isSoilDataLoading,\n      };\n    }\n    case \"UPDATE_SELCTED_CHECKBOXES\": {\n      return {\n        ...state,\n        selectedCheckboxes: action.data.selectedCheckboxes,\n      };\n    }\n\n    case \"UPDATE_SELECTED_STARS\": {\n      return {\n        ...state,\n        selectedStars: action.data.selectedStars,\n      };\n    }\n\n    case \"UPDATE_SOIL_DATA\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Map_Unit_Name: action.data.Map_Unit_Name,\n          Drainage_Class: action.data.Drainage_Class,\n          Flooding_Frequency: action.data.Flooding_Frequency,\n          Ponding_Frequency: action.data.Ponding_Frequency,\n          for: action.data.for,\n        },\n      };\n    }\n    case \"UPDATE_SOIL_DATA_ORIGINAL\": {\n      return {\n        ...state,\n        soilDataOriginal: {\n          ...state.soilDataOriginal,\n          Map_Unit_Name: action.data.Map_Unit_Name,\n          Drainage_Class: action.data.Drainage_Class,\n          Flooding_Frequency: action.data.Flooding_Frequency,\n          Ponding_Frequency: action.data.Ponding_Frequency,\n          for: action.data.for,\n        },\n      };\n    }\n\n    case \"UPDATE_DATE_RANGE\": {\n      return {\n        ...state,\n        cashCropData: {\n          ...state.cashCropData,\n          dateRange: {\n            startDate: action.data.startDate,\n            endDate: action.data.endDate,\n          },\n        },\n      };\n    }\n\n    case \"UPDATE_ADDRESS_SEARCH_PREFERENCE\": {\n      return {\n        ...state,\n        addressSearchPreference: action.data.addressSearchPreference,\n      };\n    }\n\n    case \"UPDATE_ZIP_CODE\": {\n      return {\n        ...state,\n        zipCode: action.data.zipCode,\n      };\n    }\n\n    case \"UPDATE_FILTER_STRING\": {\n      return {\n        ...state,\n        filterString: action.data.filterString,\n      };\n    }\n    case \"UPDATE_FILTER_KEYS\": {\n      return {\n        ...state,\n        filterKeys: action.data.filterKeys,\n      };\n    }\n    case \"UPDATE_ACTIVE_GROWTH_PERIOD\": {\n      return {\n        ...state,\n        activeGrowthPeriod: action.data.activeGrowthPeriod,\n      };\n    }\n\n    case \"UPDATE_DRAINAGE_CLASS\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Drainage_Class: action.data,\n        },\n      };\n    }\n\n    case \"UPDATE_FLOODING_FREQUENCY\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Flooding_Frequency: action.data,\n        },\n      };\n    }\n\n    case \"UPDATE_COMPARISON_KEYS\": {\n      return {\n        ...state,\n        comparisonKeys: action.data.comparisonKeys,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","import React, { createContext, useReducer } from \"react\";\nimport Reducer from \"./Reducer\";\nimport crops from \"../shared/crop-data.json\";\nimport z7crops from \"../shared/json/zone7/crop-data.json\";\nimport z6crops from \"../shared/json/zone6/crop-data.json\";\nimport z5crops from \"../shared/json/zone5/crop-data.json\";\nimport moment from \"moment-timezone\";\nimport img from \"../shared/image-dictionary.json\";\nimport desc from \"../shared/crop-descriptions.json\";\n\nimport z7Dict from \"../shared/json/zone7/data-dictionary.json\";\nimport z6Dict from \"../shared/json/zone6/data-dictionary.json\";\nimport z5Dict from \"../shared/json/zone6/data-dictionary.json\";\n\nconst cropDataFormatter = (cropData = [{}]) => {\n  let tjson = cropData.filter((crop) => {\n    if (\n      crop[\"Zone Decision\"] !== \"Include\" ||\n      crop[\"Cover Crop Name\"] === \"__Open Discussion Row\"\n    ) {\n      return false;\n    } else return true;\n  });\n\n  return tjson.map((crop) => {\n    // val[\"fields\"] = val;\n\n    // remove open discussion row and zone decision !== include\n\n    let val = { fields: crop };\n\n    val = monthStringBuilder(val);\n\n    val.fields[\"inBasket\"] = false;\n\n    val.fields[\"Image Data\"] = img[val.fields[\"Cover Crop Name\"]]\n      ? img[val.fields[\"Cover Crop Name\"]]\n      : {\n          \"Cover Crop\": val.fields[\"Cover Crop Name\"],\n          \"Key Thumbnail\": null,\n          Notes: null,\n          Directory: null,\n        };\n\n    val.fields[\"Crop Description\"] = desc[val.fields[\"Cover Crop Name\"]]\n      ? desc[val.fields[\"Cover Crop Name\"]]\n      : loremText();\n\n    val.fields[\"Discourages Nematodes\"] = val.fields[\"Disoucrages Nematodes\"];\n    val.fields[\"id\"] = val.fields[\"__id\"];\n    val.fields[\"Drought\"] = val.fields[\"Drought Tolerance\"];\n    val.fields[\"Flood\"] = val.fields[\"Flood Tolerance\"];\n    val.fields[\"Heat\"] = val.fields[\"Heat Tolerance\"];\n    val.fields[\"Low Fertility\"] = val.fields[\"Low Fertility Tolerance\"];\n    val.fields[\"Salinity\"] = val.fields[\"Salinity Tolerance\"];\n    val.fields[\"Shade\"] = val.fields[\"Shade Tolerance\"];\n    val.fields[\"Tillage at Vegetative\"] =\n      val.fields[\"Tillage Termination at Vegetative\"];\n    val.fields[\"Tillage at Flowering\"] =\n      val.fields[\"Tillage Termination at Flowering\"];\n\n    val.fields[\"Freezing at Flowering\"] =\n      val.fields[\"Freezing Termination at Flowering\"];\n\n    val.fields[\"Freezing at Vegetative\"] =\n      val.fields[\"Freezing Termination at Vegetative\"];\n    val.fields[\"Chemical at Vegetative\"] =\n      val.fields[\"Chemical Termination at Vegetative\"];\n    val.fields[\"Chemical at Flowering\"] =\n      val.fields[\"Chemical Termination at Flowering\"];\n\n    val.fields[\"Mow at Flowering\"] = val.fields[\"Mow Termination at Flowering\"];\n    val.fields[\"Roller Crimp at Flowering\"] =\n      val.fields[\"Roller Crimp Tolerance at Flowering\"];\n\n    if (!val.fields[\"Frost Seeding\"]) {\n      val.fields[\"Frost Seeding\"] = false;\n    } else {\n      val.fields[\"Frost Seeding\"] = true;\n    }\n    if (!val.fields[\"Can Aerial Seed\"]) {\n      val.fields[\"Aerial Seeding\"] = false;\n    } else {\n      val.fields[\"Aerial Seeding\"] = true;\n    }\n\n    //TODO: not using anymore\n    if (!val.fields[\"Pollinator Habitat\"]) {\n      val.fields[\"Pollinator Habitat\"] = 0;\n    }\n    if (!val.fields[\"Pollinator Food\"]) {\n      val.fields[\"Pollinator Food\"] = 0;\n    }\n\n    // not mutating\n\n    // delete val.fields[\"Drought Tolerance\"];\n    // delete val.fields[\"Flood Tolerance\"];\n    // delete val.fields[\"Heat Tolerance\"];\n    // delete val.fields[\"Low Fertility Tolerance\"];\n    // delete val.fields[\"Salinity Tolerance\"];\n    // delete val.fields[\"Shade Tolerance\"];\n\n    return val;\n  });\n};\n\nconst monthStringBuilder = (vals) => {\n  const params = [\n    \"Reliable Establishment/Growth\",\n    \"Temperature/Moisture Risk to Establishment\",\n    \"Late Fall/Winter Planting Date\",\n    \"Early Fall/ Winter Seeding Rate\",\n    \"Second Reliable Establishment/Growth\",\n    \"Standard Fall/Winter Seeding Rate Date\",\n    \"Standard Spring Seeding Rate Date\",\n  ];\n  let val = vals;\n  params.forEach((param) => {\n    if (val.fields[param + \" Start\"]) {\n      const valStart = moment(val.fields[param + \" Start\"], \"YYYY-MM-DD\");\n      const valEnd = val.fields[param + \" End\"]\n        ? moment(val.fields[param + \" End\"], \"YYYY-MM-DD\")\n        : moment(val.fields[param + \" Stop\"], \"YYYY-MM-DD\");\n      let str = \"\";\n      let valuesArray = [];\n      while (valStart.isSameOrBefore(valEnd)) {\n        if (valStart.get(\"D\") <= 15 && valStart.get(\"D\") >= 1) {\n          str = \"Early\";\n        } else {\n          str = \"Mid\";\n        }\n\n        valuesArray.push([`${valStart.format(\"MMMM\")}, ${str}`]);\n        valStart.add(\"15\", \"days\");\n      }\n\n      valuesArray.forEach((key) => {\n        const prev = val.fields[key] || [];\n        if (param.split(\" \")[0] === \"Second\") {\n          // console.log(param.split(\" \")[0]);\n\n          prev.push(param.split(\" \").splice(1).join(\" \"));\n        } else {\n          // console.log(param.split(\" \")[0]);\n          prev.push(param);\n        }\n        val.fields[key] = prev;\n      });\n    }\n  });\n  return val;\n};\n\nconst loremText = () => {\n  return \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. At imperdiet dui accumsan sit. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Porta non pulvinar neque laoreet suspendisse interdum. Malesuada fames ac turpis egestas integer eget. Eget arcu dictum varius duis at consectetur lorem donec massa. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Enim praesent elementum facilisis leo vel fringilla est ullamcorper. Neque viverra justo nec ultrices dui sapien eget mi proin. Egestas maecenas pharetra convallis posuere. Tortor condimentum lacinia quis vel eros donec. Ultricies integer quis auctor elit sed. Nisi scelerisque eu ultrices vitae auctor eu. Eget felis eget nunc lobortis mattis aliquam faucibus. Mattis aliquam faucibus purus in massa tempor nec.\";\n};\nconst z7AllCrops = z7crops;\nconst z6AllCrops = z6crops;\nconst z5AllCrops = z5crops;\n\nconst z7CropData = cropDataFormatter(z7AllCrops);\nconst z6CropData = cropDataFormatter(z6AllCrops);\nconst z5CropData = cropDataFormatter(z5AllCrops);\n\n// console.log(tjs);\n\n// const StoreContext = createContext();\n\nconst initialState = {\n  progress: 0,\n  // progress: 4,\n  // progress: 5,\n  address: \"\",\n  addressSearchPreference: \"address\",\n  zip: 0,\n  zipCode: 0,\n  markersCopy: [],\n  markers: [[40.78489145, -74.80733626930342]],\n  // markers: [[39.0255, -76.924]],\n  // markers: [\n  //   [42.43893008983507, -71.6220123358556],\n  //   [42.437694893227764, -71.6226775236913],\n  //   [42.4370772857936, -71.62188358982289],\n  //   [42.43746131164466, -71.62125058849537],\n  //   [42.438162053781895, -71.621003825266],\n  //   [42.4387044307342, -71.62120767315113],\n  // ],\n  showAddressChangeBtn: false,\n  selectedCheckboxes: [],\n  selectedStars: {},\n  allGoals: [],\n  cropData: z7CropData,\n  selectedCrops: [],\n  // selectedCrops: [\n  //   {\n  //     id: \"recsmwaDr74UFoFDi\",\n  //     cropName: \"Sorghum-sudangrass\",\n  //     btnId: \"cartBtn1\",\n  //     data: {\n  //       _id: {\n  //         $oid: \"5f2a3349c570132255af5929\",\n  //       },\n  //       \"Cover Crop Name\": \"Sorghum-sudangrass\",\n  //       \"Scientific Name\": \"Sorghum bicolor x Sorghum bicolor var. Sudanense\",\n  //       Synonyms: \"Sudex\",\n  //       \"cv, var, or ssp to specify\": \"non BMR varieties\",\n  //       Origin: \"MCCC Species tool\",\n  //       \"Drought Tolerance\": 5,\n  //       \"Shade Tolerance\": 1,\n  //       \"Flood Tolerance\": 2,\n  //       \"Low Fertility Tolerance\": 3,\n  //       \"Salinity Tolerance\": 2,\n  //       \"Winter Survival\": [\"Never\"],\n  //       \"Active Growth Period\": [\"Summer\"],\n  //       Duration: [\"Annual\"],\n  //       \"Shape & Orientation\": [\"Erect\"],\n  //       \"Review Status\": \"Zone Team Start\",\n  //       \"Soil Drainage\": [\n  //         \"Somewhat poorly drained\",\n  //         \"Moderately well drained\",\n  //         \"Well drained\",\n  //         \"Excessively drained\",\n  //         \"Well drained muck\",\n  //       ],\n  //       \"Min Germination Temp (F)\": 65,\n  //       \"Seeds per Pound\": 15000,\n  //       \"Inoculant Type (Legumes Only)\": [\"none\"],\n  //       \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"19-45\",\n  //       \"Seeding Rate: Drilled/Cultipack and Cultivation (lbs/A)\": \"15-35\",\n  //       \"Seeding Rate: Aerial (lbs/A)\": \"Not Recommended\",\n  //       \"Drilled Depth Min\": 0.5,\n  //       Harvestability: 5,\n  //       \"Loosens Topsoil\": 3,\n  //       \"Frees P & K\": 2,\n  //       \"Growing Window\": \"Short\",\n  //       \"Ease of Establishment\": 4,\n  //       \"Family Common Name\": \"Grass family\",\n  //       \"Family Scientific Name\": \"Poaceae\",\n  //       \"Soil Textures\": [\"Coarse\", \"Medium\", \"Fine\"],\n  //       \"Minimum Tolerant Soil pH\": 6,\n  //       \"Maximum Tolerant Soil pH\": 8,\n  //       \"Soil Moisture Use\": \"High\",\n  //       \"Cover Crop Group\": \"Grass\",\n  //       \"Heat Tolerance\": 5,\n  //       \"Seed Price per Pound\": 1,\n  //       \"USDA Symbol\": \"SOBI5\",\n  //       \"Zone Decision\": \"Include\",\n  //       \"Zone Use\": \"Common\",\n  //       \"Flooding Frequency Tolerance\": \"Poor\",\n  //       \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Min (lbs/A/y)\": 4000,\n  //       \"C to N Ratio\": 5,\n  //       \"Loosens Subsurface Soil\": 2,\n  //       \"Supports Mycorrhizae\": 4,\n  //       \"Flowering Trigger\": [\"Plant Size\"],\n  //       \"Establishes Quickly\": 2,\n  //       \"Root Architecture\": [\"Fibrous\"],\n  //       \"Root Depth\": \"Medium\",\n  //       \"Notes: Growth, Roots, and Nutrients\":\n  //         \"Minimum Germination Temp. ~ 62-65˚F\",\n  //       \"Tillage Termination at Vegetative\": 1,\n  //       \"Pollinator Habitat\": 1,\n  //       \"Grazing Value\": 4,\n  //       \"Pollinator Food\": 1,\n  //       \"Grazing Tolerance\": 4,\n  //       \"Tillage Termination at Flowering\": 1,\n  //       \"Freezing Termination at Vegetative\": 5,\n  //       \"Freezing Termination at Flowering\": 5,\n  //       \"Chemical Termination at Flowering\": 5,\n  //       \"Mow Termination at Flowering\": 5,\n  //       \"Chemical Termination at Vegetative\": 5,\n  //       \"Mow Termination at Vegetative\": 1,\n  //       \"Roller Crimp Termination at Flowering\": 1,\n  //       \"Roller Crimp Tolerance at Vegetative\": 1,\n  //       \"Volunteer Establishment - MW Tool Data\": 4,\n  //       Persistence: 2,\n  //       \"Notes: Weeds\": \"Mature, frost-killed plants become quite woody\",\n  //       \"Seed price per acre: Drilled/Cultipack and Cultivation\": 1,\n  //       \"Seed price per acre: Broadcast (w/cultivation)\": 1,\n  //       \"Dry Matter Rating\": 3,\n  //       \"June, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"June, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"May, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"May, Early\": [\n  //         \"Temperature/moisture risk to establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //         \"Temperature/Moisture Risk to Establishment\",\n  //       ],\n  //       \"August, Early\": [\"Late seeding rate\"],\n  //       \"July, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"July, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"Seeding Rate Calculator\": [\"recOKcyzaTLGqL3Mq\"],\n  //       \"Base Seeding Rate Min (lbs/A)\": 15,\n  //       \"Base Seeding Rate Max (lbs/A)\": 35,\n  //       \"Seed Price Calculator\": [\"recwqPQb3QmzxiCYv\"],\n  //       \"Base Seed Price Per Acre Min\": 1,\n  //       \"Base Seed Price Per Acre Max\": 1,\n  //       \"Reliable Establishment/Growth Start\": \"2020-05-15\",\n  //       \"Reliable Establishment/Growth End\": \"2020-07-31\",\n  //       \"Temperature/Moisture Risk to Establishment Start\": \"2020-05-01\",\n  //       \"Temperature/Moisture Risk to Establishment End\": \"2020-05-15\",\n  //       \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Max (lbs/A/y)\": 8000,\n  //       \"Drilled Depth Max\": 1.5,\n  //       \"Promotes Nematodes\": 3,\n  //       \"C to N Ratio 3-star\": 3,\n  //       \"Suppresses Cash Crop Disease\": 3,\n  //       \"Promotes Cash Crop Disease\": 4,\n  //       \"Discourages Pest Insects\": 3,\n  //       \"Promotes Pest Insects\": 3,\n  //       \"Outcompetes Summer Annual Weeds\": 5,\n  //       \"Allelopathic to Weeds\": 4,\n  //       \"Standard Summer Seeding Rate Start\": \"2020-06-01\",\n  //       \"Standard Summer Seeding Rate End\": \"2020-08-01\",\n  //       \"Late Summer Seeding Rate Start\": \"2020-08-01\",\n  //       \"Late Summer Seeding Rate End\": \"2020-08-10\",\n  //       \"Improve Soil Organic Matter\": 5,\n  //       \"Lasting Residue\": 5,\n  //       \"Increase Soil Aggregation\": 5,\n  //       \"Prevent Fall Soil Erosion\": 5,\n  //       \"Promote Water Quality\": 4,\n  //       \"Prevent Spring Soil Erosion\": 4,\n  //       \"Penetrates Plow Pan\": 5,\n  //       \"Reduces Surface Compaction\": 5,\n  //       \"Nitrogen Scavenging\": 4,\n  //       \"Good Grazing\": 4,\n  //       \"Forage Harvest Value\": 5,\n  //       \"Residue Suppresses Summer Annual Weeds\": 2,\n  //       \"Outcompetes Winter Annual Weeds\": 4,\n  //       \"Suppresses Winter Annual Weeds\": 2,\n  //       \"Volunteer Establishment\": 5,\n  //       \"Reduces Crusting\": 3,\n  //       Notes:\n  //         \"Excellent forage; not as winterhardy as other perennial forage grasses but establishes quickly so may still be useful as a cover crop.\",\n  //       \"Notes: Nematodes\":\n  //         \"Supports reproduction of some root-knot nematode species/races.\",\n  //       \"Improve Soil Aggregation - Formula\": 4,\n  //       \"Improve Soil Organic Matter - Formula\": 1,\n  //       \"Lasting Residue - Formula\": 1,\n  //       \"Prevent soil erosion - formula\": 2,\n  //       \"Promote water quality - formula\": 2,\n  //       \"Reduces subsurface compaction - formula\": 1,\n  //       \"Nitrogen fixation - formula\": 2,\n  //       \"Nitrogen scavenging - formula\": 2,\n  //       \"Good grazing - formula\": 4,\n  //       \"Forest harvest value - formula\": 5,\n  //       \"Pollinator support - formula\": 1,\n  //       \"Weed suppression - formula\": 3,\n  //       \"Reduces topsoil compaction- formula\": 2,\n  //       \"v Base Seed Price Per Acre Min\": 15,\n  //       \"Base Seed Price Per Acre\": 15,\n  //       \"f Base Seed Price Per Acre Min\": 1,\n  //       \"Average Seeding Rate Min\": [27.57894736842105],\n  //       \"Average Seeding Rate Max\": [56.026315789473685],\n  //       \"f Base Seed Price Per Acre Max\": 1,\n  //       __id: \"recsmwaDr74UFoFDi\",\n  //       inBasket: false,\n  //       \"Image Data\": {\n  //         \"Cover Crop\": \"Sorghum Sudangrass\",\n  //         \"Key Thumbnail\": \"Sorghum sudangrass_mature_Larson_2020.JPG\",\n  //         Notes: null,\n  //         Directory: \"Sorghum Sudangrass\",\n  //       },\n  //       \"Crop Description\":\n  //         \"Also known as: Sudex, Sudax. Excellent summer grass choice. Needs heat. Fast-grower that reaches 6-12 ft tall, big biomass potential in the presence of lots of soil N. Regrows well after mowing/grazing. Excellent subsoiler with thicker roots than most grasses. Excellent weed suppressor due to competition and allelopathy (caution if next crop is small-seeded). Good forage, but prussic acid and nitrate content can be a problem. Huge biomass and reseeding and weed potential can overwhelm: mow or kill in a timely fashion. Improved forage types available, cultivars may vary widely. Can substitute forage sorghum or sudangrass. Mix with cowpea, sunn hemp.\",\n  //       id: \"recsmwaDr74UFoFDi\",\n  //       Drought: 5,\n  //       Flood: 2,\n  //       Heat: 5,\n  //       \"Low Fertility\": 3,\n  //       Salinity: 2,\n  //       Shade: 1,\n  //       \"Tillage at Vegetative\": 1,\n  //       \"Tillage at Flowering\": 1,\n  //       \"Freezing at Flowering\": 5,\n  //       \"Freezing at Vegetative\": 5,\n  //       \"Chemical at Vegetative\": 5,\n  //       \"Chemical at Flowering\": 5,\n  //       \"Mow at Flowering\": 5,\n  //       \"Frost Seeding\": false,\n  //       \"Aerial Seeding\": false,\n  //     },\n  //   },\n  //   {\n  //     id: \"recHxsFkhn7kEhF1r\",\n  //     cropName: \"Sudangrass\",\n  //     btnId: \"cartBtn2\",\n  //     data: {\n  //       _id: {\n  //         $oid: \"5f2a3349c570132255af592b\",\n  //       },\n  //       \"Cover Crop Name\": \"Sudangrass\",\n  //       \"Scientific Name\": \"Sorghum X drummondii\",\n  //       \"cv, var, or ssp to specify\":\n  //         \"Use non BMR (less expensive) varieties in summer cover crop mixes, use BMR varieties for feed/forage properties.\",\n  //       Origin: \"Zone Team Leaders\",\n  //       \"Drought Tolerance\": 5,\n  //       \"Shade Tolerance\": 1,\n  //       \"Flood Tolerance\": 2,\n  //       \"Low Fertility Tolerance\": 3,\n  //       \"Salinity Tolerance\": 2,\n  //       \"Winter Survival\": [\"Never\"],\n  //       \"Active Growth Period\": [\"Summer\"],\n  //       Duration: [\"Annual\"],\n  //       \"Shape & Orientation\": [\"Erect\"],\n  //       \"Review Status\": \"Zone Team Start\",\n  //       \"Soil Drainage\": [\n  //         \"Somewhat poorly drained\",\n  //         \"Moderately well drained\",\n  //         \"Well drained\",\n  //         \"Excessively drained\",\n  //         \"Well drained muck\",\n  //       ],\n  //       \"Min Germination Temp (F)\": 65,\n  //       \"Seeds per Pound\": 44240,\n  //       \"Inoculant Type (Legumes Only)\": [\"none\"],\n  //       \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"45-52\",\n  //       \"Seeding Rate: Drilled/Cultipack and Cultivation (lbs/A)\": \"35-40\",\n  //       \"Seeding Rate: Aerial (lbs/A)\": \"Not Recommended\",\n  //       \"Drilled Depth Min\": 0.5,\n  //       Harvestability: 5,\n  //       \"Loosens Topsoil\": 3,\n  //       \"Frees P & K\": 2,\n  //       \"Growing Window\": \"Short\",\n  //       \"Ease of Establishment\": 4,\n  //       \"Family Common Name\": \"Grass family\",\n  //       \"Family Scientific Name\": \"Poaceae\",\n  //       \"Soil Textures\": [\"Coarse\", \"Fine\", \"Medium\"],\n  //       \"Minimum Tolerant Soil pH\": 5.7,\n  //       \"Maximum Tolerant Soil pH\": 6.8,\n  //       \"Soil Moisture Use\": \"Low\",\n  //       \"Cover Crop Group\": \"Grass\",\n  //       \"Heat Tolerance\": 5,\n  //       \"Seed Price per Pound\": 2,\n  //       \"USDA Symbol\": \"SOBID\",\n  //       \"Zone Decision\": \"Include\",\n  //       \"Zone Use\": \"Common\",\n  //       \"Flooding Frequency Tolerance\": \"Poor\",\n  //       \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Min (lbs/A/y)\": 4000,\n  //       \"C to N Ratio\": 5,\n  //       \"Loosens Subsurface Soil\": 1,\n  //       \"Supports Mycorrhizae\": 4,\n  //       \"Establishes Quickly\": 3,\n  //       \"Root Architecture\": [\"Fibrous\"],\n  //       \"Root Depth\": \"Medium\",\n  //       \"Notes: Growth, Roots, and Nutrients\":\n  //         \"Minimum Germination Temp. ~ 62- 65˚F\",\n  //       \"Tillage Termination at Vegetative\": 1,\n  //       \"Pollinator Habitat\": 1,\n  //       \"Grazing Value\": 5,\n  //       \"Pollinator Food\": 1,\n  //       \"Grazing Tolerance\": 5,\n  //       \"Tillage Termination at Flowering\": 1,\n  //       \"Freezing Termination at Vegetative\": 5,\n  //       \"Freezing Termination at Flowering\": 5,\n  //       \"Chemical Termination at Flowering\": 5,\n  //       \"Mow Termination at Flowering\": 5,\n  //       \"Chemical Termination at Vegetative\": 5,\n  //       \"Mow Termination at Vegetative\": 1,\n  //       \"Roller Crimp Termination at Flowering\": 1,\n  //       \"Roller Crimp Tolerance at Vegetative\": 1,\n  //       \"Volunteer Establishment - MW Tool Data\": 4,\n  //       Persistence: 2,\n  //       \"Seed price per acre: Drilled/Cultipack and Cultivation\": 2,\n  //       \"Seed price per acre: Broadcast (w/cultivation)\": 2,\n  //       \"Dry Matter Rating\": 3,\n  //       \"June, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"June, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"May, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"May, Early\": [\n  //         \"Temperature/moisture risk to establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //         \"Temperature/Moisture Risk to Establishment\",\n  //       ],\n  //       \"August, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Late seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"July, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"July, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"Seeding Rate Calculator\": [\"rec9a5EV7MAfqklHk\"],\n  //       \"Base Seeding Rate Min (lbs/A)\": 35,\n  //       \"Base Seeding Rate Max (lbs/A)\": 40,\n  //       \"Seed Price Calculator\": [\"recwqPQb3QmzxiCYv\"],\n  //       \"Base Seed Price Per Acre Min\": 2,\n  //       \"Base Seed Price Per Acre Max\": 2,\n  //       \"Reliable Establishment/Growth Start\": \"2020-05-15\",\n  //       \"Reliable Establishment/Growth End\": \"2020-08-15\",\n  //       \"Temperature/Moisture Risk to Establishment Start\": \"2020-05-01\",\n  //       \"Temperature/Moisture Risk to Establishment End\": \"2020-05-15\",\n  //       \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Max (lbs/A/y)\": 8000,\n  //       \"Drilled Depth Max\": 1,\n  //       \"Promotes Nematodes\": 2,\n  //       \"C to N Ratio 3-star\": 3,\n  //       \"Suppresses Cash Crop Disease\": 3,\n  //       \"Promotes Cash Crop Disease\": 4,\n  //       \"Discourages Pest Insects\": 3,\n  //       \"Promotes Pest Insects\": 3,\n  //       \"Outcompetes Summer Annual Weeds\": 5,\n  //       \"Allelopathic to Weeds\": 4,\n  //       \"Standard Summer Seeding Rate Start\": \"2020-06-01\",\n  //       \"Standard Summer Seeding Rate End\": \"2020-08-01\",\n  //       \"Late Summer Seeding Rate Start\": \"2020-08-01\",\n  //       \"Late Summer Seeding Rate End\": \"2020-08-10\",\n  //       \"Improve Soil Organic Matter\": 5,\n  //       \"Lasting Residue\": 5,\n  //       \"Increase Soil Aggregation\": 5,\n  //       \"Prevent Fall Soil Erosion\": 5,\n  //       \"Promote Water Quality\": 4,\n  //       \"Prevent Spring Soil Erosion\": 4,\n  //       \"Penetrates Plow Pan\": 4,\n  //       \"Reduces Surface Compaction\": 5,\n  //       \"Nitrogen Scavenging\": 4,\n  //       \"Good Grazing\": 4,\n  //       \"Forage Harvest Value\": 5,\n  //       \"Residue Suppresses Summer Annual Weeds\": 2,\n  //       \"Outcompetes Winter Annual Weeds\": 4,\n  //       \"Suppresses Winter Annual Weeds\": 2,\n  //       \"Volunteer Establishment\": 5,\n  //       \"Reduces Crusting\": 3,\n  //       Notes:\n  //         \" Bloat risk and other animal health risks, similar to brassicas.\",\n  //       \"Notes: Nematodes\": \"Host for lesion nematode.\",\n  //       \"Improve Soil Aggregation - Formula\": 4,\n  //       \"Improve Soil Organic Matter - Formula\": 1,\n  //       \"Lasting Residue - Formula\": 1,\n  //       \"Prevent soil erosion - formula\": 2,\n  //       \"Promote water quality - formula\": 3,\n  //       \"Reduces subsurface compaction - formula\": 1,\n  //       \"Nitrogen fixation - formula\": 2,\n  //       \"Nitrogen scavenging - formula\": 3,\n  //       \"Good grazing - formula\": 4,\n  //       \"Forest harvest value - formula\": 5,\n  //       \"Pollinator support - formula\": 1,\n  //       \"Weed suppression - formula\": 5,\n  //       \"Reduces topsoil compaction- formula\": 2,\n  //       \"v Base Seed Price Per Acre Min\": 70,\n  //       \"Base Seed Price Per Acre\": 70,\n  //       \"f Base Seed Price Per Acre Min\": 2,\n  //       \"Average Seeding Rate Min\": [27.57894736842105],\n  //       \"Average Seeding Rate Max\": [56.026315789473685],\n  //       \"f Base Seed Price Per Acre Max\": 2,\n  //       __id: \"recHxsFkhn7kEhF1r\",\n  //       inBasket: false,\n  //       \"Image Data\": {\n  //         \"Cover Crop\": \"Sudangrass\",\n  //         \"Key Thumbnail\": \"Sudangrass_mature_Ziegler_2020b.jpg\",\n  //         Notes: null,\n  //         Directory: \"Sudangrass\",\n  //       },\n  //       \"Crop Description\":\n  //         \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. At imperdiet dui accumsan sit. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Porta non pulvinar neque laoreet suspendisse interdum. Malesuada fames ac turpis egestas integer eget. Eget arcu dictum varius duis at consectetur lorem donec massa. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Enim praesent elementum facilisis leo vel fringilla est ullamcorper. Neque viverra justo nec ultrices dui sapien eget mi proin. Egestas maecenas pharetra convallis posuere. Tortor condimentum lacinia quis vel eros donec. Ultricies integer quis auctor elit sed. Nisi scelerisque eu ultrices vitae auctor eu. Eget felis eget nunc lobortis mattis aliquam faucibus. Mattis aliquam faucibus purus in massa tempor nec.\",\n  //       id: \"recHxsFkhn7kEhF1r\",\n  //       Drought: 5,\n  //       Flood: 2,\n  //       Heat: 5,\n  //       \"Low Fertility\": 3,\n  //       Salinity: 2,\n  //       Shade: 1,\n  //       \"Tillage at Vegetative\": 1,\n  //       \"Tillage at Flowering\": 1,\n  //       \"Freezing at Flowering\": 5,\n  //       \"Freezing at Vegetative\": 5,\n  //       \"Chemical at Vegetative\": 5,\n  //       \"Chemical at Flowering\": 5,\n  //       \"Mow at Flowering\": 5,\n  //       \"Frost Seeding\": false,\n  //       \"Aerial Seeding\": false,\n  //     },\n  //   },\n  //   {\n  //     id: \"recTvoW3IW6QsNWQd\",\n  //     cropName: \"Triticale, Winter\",\n  //     btnId: \"cartBtn3\",\n  //     data: {\n  //       _id: {\n  //         $oid: \"5f2a3349c570132255af5931\",\n  //       },\n  //       \"Cover Crop Name\": \"Triticale, Winter\",\n  //       \"Scientific Name\": \"X Triticosecale\",\n  //       \"cv, var, or ssp to specify\": \"Winter\",\n  //       Origin: \"MCCC Species tool\",\n  //       \"Drought Tolerance\": 3,\n  //       \"Shade Tolerance\": 3,\n  //       \"Flood Tolerance\": 3,\n  //       \"Low Fertility Tolerance\": 4,\n  //       \"Salinity Tolerance\": 2,\n  //       \"Winter Survival\": [\"Expected\"],\n  //       \"Active Growth Period\": [\"Winter\"],\n  //       Duration: [\"Annual\"],\n  //       \"Shape & Orientation\": [\"Erect\"],\n  //       \"Review Status\": \"Zone Team Start\",\n  //       \"Soil Drainage\": [\n  //         \"Somewhat poorly drained\",\n  //         \"Moderately well drained\",\n  //         \"Well drained\",\n  //         \"Well drained muck\",\n  //       ],\n  //       \"Min Germination Temp (F)\": 38,\n  //       \"Seeds per Pound\": 12000,\n  //       \"Inoculant Type (Legumes Only)\": [\"none\"],\n  //       \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"65-156\",\n  //       \"Planting green\":\n  //         'Utilizing a roller-crimper is suggested when planting corn into material greater than 12\" tall as un-rolled cover may impact emergence.',\n  //       \"Seeding Rate: Drilled/Cultipack and Cultivation (lbs/A)\": \"50-120\",\n  //       \"Seeding Rate: Aerial (lbs/A)\": \"75-180\",\n  //       \"Drilled Depth Min\": 0.75,\n  //       Harvestability: 3,\n  //       \"Loosens Topsoil\": 3,\n  //       \"Frees P & K\": 3,\n  //       \"Growing Window\": \"Medium\",\n  //       \"Ease of Establishment\": 5,\n  //       \"Family Common Name\": \"Grass family\",\n  //       \"Family Scientific Name\": \"Poaceae\",\n  //       \"Soil Textures\": [\"Coarse\", \"Medium\", \"Fine\"],\n  //       \"Minimum Tolerant Soil pH\": 5.5,\n  //       \"Maximum Tolerant Soil pH\": 8,\n  //       \"Soil Moisture Use\": \"Medium\",\n  //       \"Cover Crop Group\": \"Grass\",\n  //       \"Heat Tolerance\": 3,\n  //       \"Seed Price per Pound\": 1,\n  //       \"Can Aerial Seed\": true,\n  //       \"USDA Symbol\": \"TRITI2\",\n  //       \"Zone Decision\": \"Include\",\n  //       \"Zone Use\": \"Common\",\n  //       \"Flooding Frequency Tolerance\": \"Moderate\",\n  //       \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Min (lbs/A/y)\": 2000,\n  //       \"C to N Ratio\": 4,\n  //       \"Notes: Termination [Goal: Method: Timing]\":\n  //         \"Flowering and freezing temps unlikely to co-occur.\",\n  //       \"Loosens Subsurface Soil\": 2,\n  //       \"Supports Mycorrhizae\": 4,\n  //       \"Early Spring Growth\": 4,\n  //       \"Flowering Trigger\": [\"Vernalization\"],\n  //       \"Establishes Quickly\": 4,\n  //       \"Root Architecture\": [\"Fibrous\"],\n  //       \"Root Depth\": \"Medium\",\n  //       \"Notes: Growth, Roots, and Nutrients\":\n  //         \"Minimum Germination Temp. 38˚F \",\n  //       \"Tillage Termination at Vegetative\": 1,\n  //       \"Pollinator Habitat\": 1,\n  //       \"Grazing Value\": 5,\n  //       \"Pollinator Food\": 1,\n  //       \"Grazing Tolerance\": 5,\n  //       \"Tillage Termination at Flowering\": 1,\n  //       \"Freezing Termination at Vegetative\": 1,\n  //       \"Freezing Termination at Flowering\": 2,\n  //       \"Chemical Termination at Flowering\": 5,\n  //       \"Mow Termination at Flowering\": 5,\n  //       \"Chemical Termination at Vegetative\": 5,\n  //       \"Mow Termination at Vegetative\": 1,\n  //       \"Roller Crimp Termination at Flowering\": 5,\n  //       \"Roller Crimp Tolerance at Vegetative\": 2,\n  //       \"Volunteer Establishment - MW Tool Data\": 4,\n  //       Persistence: 1,\n  //       \"Seed price per acre: Drilled/Cultipack and Cultivation\": 2,\n  //       \"Seed price per acre: Aerial\": 2,\n  //       \"Seed price per acre: Broadcast (w/cultivation)\": 2,\n  //       \"Dry Matter Rating\": 2,\n  //       \"September, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"September, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"August, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"August, Early\": [\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"November, Early\": [\n  //         \"Temperature/moisture risk to establishment/growth\",\n  //         \"Temperature/Moisture Risk to Establishment\",\n  //       ],\n  //       \"October, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Late seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"October, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"Seeding Rate Calculator\": [\"recZBVMlAAosVNoMv\"],\n  //       \"Base Seeding Rate Min (lbs/A)\": 50,\n  //       \"Base Seeding Rate Max (lbs/A)\": 120,\n  //       \"Seed Price Calculator\": [\"recwqPQb3QmzxiCYv\"],\n  //       \"Base Seed Price Per Acre Min\": 3,\n  //       \"Base Seed Price Per Acre Max\": 3,\n  //       \"Reliable Establishment/Growth Start\": \"2020-08-15\",\n  //       \"Reliable Establishment/Growth End\": \"2020-10-31\",\n  //       \"Temperature/Moisture Risk to Establishment Start\": \"2020-11-01\",\n  //       \"Temperature/Moisture Risk to Establishment End\": \"2020-11-15\",\n  //       \"Early Fall/Winter Seeding Rate Start\": \"2020-08-01\",\n  //       \"Early Fall/Winter Seeding Rate Stop\": \"2020-09-20\",\n  //       \"Standard Fall/Winter Seeding Rate Start\": \"2020-09-20\",\n  //       \"Standard Fall/Winter Seeding Rate End\": \"2020-10-05\",\n  //       \"Late Fall/Winter Seeding Rate Start\": \"2020-10-05\",\n  //       \"Late Fall/Winter Seeding Rate End\": \"2020-10-20\",\n  //       \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 0,\n  //       \"Dry Matter Max (lbs/A/y)\": 5000,\n  //       \"Drilled Depth Max\": 1.5,\n  //       \"Promotes Nematodes\": 1,\n  //       \"C to N Ratio 3-star\": 3,\n  //       \"Suppresses Cash Crop Disease\": 2,\n  //       \"Promotes Cash Crop Disease\": 2,\n  //       \"Discourages Pest Insects\": 1,\n  //       \"Promotes Pest Insects\": 1,\n  //       \"Outcompetes Summer Annual Weeds\": 3,\n  //       \"Allelopathic to Weeds\": 3,\n  //       \"Improve Soil Organic Matter\": 5,\n  //       \"Lasting Residue\": 5,\n  //       \"Increase Soil Aggregation\": 5,\n  //       \"Prevent Fall Soil Erosion\": 5,\n  //       \"Promote Water Quality\": 3,\n  //       \"Prevent Spring Soil Erosion\": 5,\n  //       \"Penetrates Plow Pan\": 2,\n  //       \"Reduces Surface Compaction\": 5,\n  //       \"Nitrogen Scavenging\": 5,\n  //       \"Good Grazing\": 4,\n  //       \"Forage Harvest Value\": 5,\n  //       \"Residue Suppresses Summer Annual Weeds\": 5,\n  //       \"Outcompetes Winter Annual Weeds\": 3,\n  //       \"Suppresses Winter Annual Weeds\": 5,\n  //       \"Volunteer Establishment\": 5,\n  //       \"Cover Crop Description\":\n  //         \"A cross between rye and wheat, with characteristics intermediate between the two. High biomass yield potential is similar to wheat and rye. Matures later than rye, a little later than wheat. Plant height at heading shorter than rye. Therefore, spring residue is easier to manage than rye and (assuming same kill date) C:N ratio will be slightly lower than rye. Triticale feed quality generally better than rye, but not as good as wheat (chop triticale for silage at boot stage). Descr. modified from C. Lawrence, VA NRCS Cover Crop Planning Manual.\\n\",\n  //       \"Cover Crop Description References\":\n  //         \"A cross between rye and wheat, with characteristics intermediate between the two. High biomass yield potential is similar to wheat and rye. Matures later than rye, a little later than wheat. Plant height at heading shorter than rye. Therefore, spring residue is easier to manage than rye and (assuming same kill date) C:N ratio will be slightly lower than rye. Triticale feed quality generally better than rye, but not as good as wheat (chop triticale for silage at boot stage). Descr. modified from C. Lawrence, VA NRCS Cover Crop Planning Manual.\\n\",\n  //       \"Reduces Crusting\": 5,\n  //       Notes:\n  //         \" Bloat risk and other animal health risks, similar to brassicas.\",\n  //       \"Improve Soil Aggregation - Formula\": 4,\n  //       \"Improve Soil Organic Matter - Formula\": 1,\n  //       \"Lasting Residue - Formula\": 1,\n  //       \"Prevent soil erosion - formula\": 3,\n  //       \"Promote water quality - formula\": 4,\n  //       \"Reduces subsurface compaction - formula\": 1,\n  //       \"Nitrogen fixation - formula\": 4,\n  //       \"Nitrogen scavenging - formula\": 4,\n  //       \"Good grazing - formula\": 5,\n  //       \"Forest harvest value - formula\": 4,\n  //       \"Pollinator support - formula\": 1,\n  //       \"Weed suppression - formula\": 4,\n  //       \"Reduces topsoil compaction- formula\": 2,\n  //       \"v Base Seed Price Per Acre Min\": 50,\n  //       \"Base Seed Price Per Acre\": 50,\n  //       \"f Base Seed Price Per Acre Min\": 3,\n  //       \"Average Seeding Rate Min\": [27.57894736842105],\n  //       \"Average Seeding Rate Max\": [56.026315789473685],\n  //       \"f Base Seed Price Per Acre Max\": 3,\n  //       __id: \"recTvoW3IW6QsNWQd\",\n  //       inBasket: false,\n  //       \"Image Data\": {\n  //         \"Cover Crop\": \"Triticale, Winter\",\n  //         \"Key Thumbnail\": \"Triticale_mature_Salon_2020.JPG\",\n  //         Notes: null,\n  //         Directory: \"Triticale, Winter\",\n  //       },\n  //       \"Crop Description\":\n  //         \"A cross between rye and wheat, with characteristics intermediate between the two. High biomass yield potential is similar to wheat and rye. Matures later than rye, a little later than wheat. Plant height at heading is shorter than rye. Therefore, spring residue is easier to manage than rye and (assuming same kill date) C:N ratio will be slightly lower than rye. Triticale feed quality is generally better than rye, but not as good as wheat (i.e. chop triticale for silage at boot stage). Spring triticale varieties do not require vernalization (overwintering) to flower and may be less cold hardy than winter triticale varieties if planted in the fall.\",\n  //       id: \"recTvoW3IW6QsNWQd\",\n  //       Drought: 3,\n  //       Flood: 3,\n  //       Heat: 3,\n  //       \"Low Fertility\": 4,\n  //       Salinity: 2,\n  //       Shade: 3,\n  //       \"Tillage at Vegetative\": 1,\n  //       \"Tillage at Flowering\": 1,\n  //       \"Freezing at Flowering\": 2,\n  //       \"Freezing at Vegetative\": 1,\n  //       \"Chemical at Vegetative\": 5,\n  //       \"Chemical at Flowering\": 5,\n  //       \"Mow at Flowering\": 5,\n  //       \"Frost Seeding\": false,\n  //       \"Aerial Seeding\": true,\n  //     },\n  //   },\n  //   {\n  //     id: \"recKtaYjD61VgzVlZ\",\n  //     cropName: \"Clover, Red\",\n  //     btnId: \"cartBtn14\",\n  //     data: {\n  //       _id: {\n  //         $oid: \"5f2a3349c570132255af591a\",\n  //       },\n  //       \"Cover Crop Name\": \"Clover, Red\",\n  //       \"Scientific Name\": \"Trifolium pratense\",\n  //       \"cv, var, or ssp to specify\": \"Medium red clover\",\n  //       Origin: \"MCCC Species tool\",\n  //       \"Drought Tolerance\": 3,\n  //       \"Shade Tolerance\": 4,\n  //       \"Flood Tolerance\": 3,\n  //       \"Low Fertility Tolerance\": 3,\n  //       \"Salinity Tolerance\": 1,\n  //       \"Winter Survival\": [\"Expected\"],\n  //       \"Active Growth Period\": [\"Spring\", \"Summer\", \"Fall\"],\n  //       Duration: [\"Short-lived Perennial\"],\n  //       \"Shape & Orientation\": [\"Erect\"],\n  //       \"Frost Seeding\": true,\n  //       \"Review Status\": \"Zone Team Start\",\n  //       \"Soil Drainage\": [\n  //         \"Poorly drained\",\n  //         \"Somewhat poorly drained\",\n  //         \"Moderately well drained\",\n  //         \"Well drained\",\n  //       ],\n  //       \"Min Germination Temp (F)\": 41,\n  //       \"Seeds per Pound\": 272160,\n  //       \"Inoculant Type (Legumes Only)\": [\"red clover\", \"white clover\"],\n  //       \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"10-13\",\n  //       \"Seeding Rate: Drilled/Cultipack and Cultivation (lbs/A)\": \"8-10\",\n  //       \"Seeding Rate: Aerial (lbs/A)\": \"12-15\",\n  //       \"Drilled Depth Min\": 0.25,\n  //       \"Notes: Planting\":\n  //         \"Can be frost seeded into wheat and other winter annual small grains. Can be included in mixes with other winter annuals but the seed should be separated and put in the small seed box.  Organic Farmers have used this for years throughout the Northeast to spin on corn at layby time during last cultivation. In conventional farming we have used this planted with the interseeder to interseed into corn at layby time. \",\n  //       Harvestability: 5,\n  //       \"Loosens Topsoil\": 3,\n  //       \"Frees P & K\": 5,\n  //       \"Growing Window\": \"Long\",\n  //       \"Ease of Establishment\": 3,\n  //       \"Family Common Name\": \"Pea family\",\n  //       \"Family Scientific Name\": \"Fabaceae\",\n  //       \"Soil Textures\": [\"Coarse\", \"Fine\", \"Medium\"],\n  //       \"Minimum Tolerant Soil pH\": 6,\n  //       \"Maximum Tolerant Soil pH\": 7.2,\n  //       \"Soil Moisture Use\": \"Low\",\n  //       \"Cover Crop Group\": \"Legume\",\n  //       \"Heat Tolerance\": 4,\n  //       \"Seed Price per Pound\": 3,\n  //       \"USDA Symbol\": \"TRPR2\",\n  //       \"Zone Decision\": \"Include\",\n  //       \"Zone Use\": \"Common\",\n  //       \"Flooding Frequency Tolerance\": \"Moderate\",\n  //       \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 70,\n  //       \"Dry Matter Min (lbs/A/y)\": 2000,\n  //       \"C to N Ratio\": 1,\n  //       \"Notes: Termination [Goal: Method: Timing]\":\n  //         \"If using herbicides to terminate use a tank mixture (e.g., glyphosate + dicamba or 2,4-d)\",\n  //       \"Loosens Subsurface Soil\": 3,\n  //       \"Supports Mycorrhizae\": 3,\n  //       \"Early Spring Growth\": 4,\n  //       \"Flowering Trigger\": [\"Vernalization\"],\n  //       \"Establishes Quickly\": 4,\n  //       \"Root Architecture\": [\"Tap\"],\n  //       \"Root Depth\": \"Deep\",\n  //       \"Notes: Growth, Roots, and Nutrients\":\n  //         \"Minimum Germination Temp. 41˚F   Medium Red Clover seed is a small seed, for successful Red Clover establishment the soil should be firm (packed). Being a small seed, it should not be planted too deep, only up to ¼ inch deep. Most establishment problems have resulted from planting the seed to deep. In mixes, include this in the small box of the drill or adjust the drill accordingly that the seed is not placed too deep. \",\n  //       \"Tillage Termination at Vegetative\": 1,\n  //       \"Pollinator Habitat\": 4,\n  //       \"Grazing Value\": 5,\n  //       \"Pollinator Food\": 5,\n  //       \"Grazing Tolerance\": 5,\n  //       \"Tillage Termination at Flowering\": 1,\n  //       \"Freezing Termination at Vegetative\": 1,\n  //       \"Freezing Termination at Flowering\": 1,\n  //       \"Chemical Termination at Flowering\": 5,\n  //       \"Mow Termination at Flowering\": 3,\n  //       \"Chemical Termination at Vegetative\": 3,\n  //       \"Mow Termination at Vegetative\": 3,\n  //       \"Roller Crimp Termination at Flowering\": 3,\n  //       \"Roller Crimp Tolerance at Vegetative\": 1,\n  //       \"Volunteer Establishment - MW Tool Data\": 5,\n  //       Persistence: 5,\n  //       \"Seed price per acre: Drilled/Cultipack and Cultivation\": 1,\n  //       \"Seed price per acre: Aerial\": 2,\n  //       \"Seed price per acre: Broadcast (w/cultivation)\": 1,\n  //       \"Dry Matter Rating\": 2,\n  //       \"Total N Fixed Rating\": true,\n  //       \"February, Early\": [\"Frost Seeding\"],\n  //       \"February, Mid\": [\"Frost Seeding\"],\n  //       \"March, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"March, Early\": [\"Frost Seeding\", \"Reliable Establishment/Growth\"],\n  //       \"June, Mid\": [\"Can interseed\"],\n  //       \"June, Early\": [\"Can interseed\"],\n  //       \"May, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"April, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"April, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"September, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Late seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"August, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"August, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\",\n  //         \"Reliable Establishment/Growth\",\n  //       ],\n  //       \"July, Mid\": [\"Can interseed\"],\n  //       \"July, Early\": [\"Can interseed\"],\n  //       \"Seeding Rate Calculator\": [\"recTXujRQV7QGYQkE\"],\n  //       \"Base Seeding Rate Min (lbs/A)\": 8,\n  //       \"Base Seeding Rate Max (lbs/A)\": 10,\n  //       \"Seed Price Calculator\": [\"recwqPQb3QmzxiCYv\"],\n  //       \"Base Seed Price Per Acre Min\": 1,\n  //       \"Base Seed Price Per Acre Max\": 1,\n  //       \"Frost Seeding Start\": \"2020-02-01\",\n  //       \"Frost Seeding End\": \"2020-03-15\",\n  //       \"Reliable Establishment/Growth Start\": \"2020-03-15\",\n  //       \"Reliable Establishment/Growth End\": \"2020-05-15\",\n  //       \"Second Reliable Establishment/Growth Start\": \"2020-08-01\",\n  //       \"Second Reliable Establishment/Growth End\": \"2020-09-15\",\n  //       \"Can Interseed Start\": \"2020-06-01\",\n  //       \"Can Interseed End\": \"2020-08-15\",\n  //       \"Early Fall/Winter Seeding Rate Start\": \"2020-08-01\",\n  //       \"Early Fall/Winter Seeding Rate Stop\": \"2020-08-15\",\n  //       \"Standard Fall/Winter Seeding Rate Start\": \"2020-08-15\",\n  //       \"Standard Fall/Winter Seeding Rate End\": \"2020-09-01\",\n  //       \"Late Fall/Winter Seeding Rate Start\": \"2020-09-01\",\n  //       \"Late Fall/Winter Seeding Rate End\": \"2020-09-07\",\n  //       \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 150,\n  //       \"Dry Matter Max (lbs/A/y)\": 5000,\n  //       \"Drilled Depth Max\": 0.5,\n  //       \"Early Spring Seeding Rate Start\": \"2020-04-15\",\n  //       \"Early Spring Seeding Rate End\": \"2020-06-01\",\n  //       \"Promotes Nematodes\": 3,\n  //       \"C to N Ratio 3-star\": 1,\n  //       \"Suppresses Cash Crop Disease\": 1,\n  //       \"Promotes Cash Crop Disease\": 3,\n  //       \"Discourages Pest Insects\": 1,\n  //       \"Promotes Pest Insects\": 1,\n  //       \"Outcompetes Summer Annual Weeds\": 3,\n  //       \"Allelopathic to Weeds\": 2,\n  //       \"Improve Soil Organic Matter\": 3,\n  //       \"Lasting Residue\": 2,\n  //       \"Increase Soil Aggregation\": 3,\n  //       \"Prevent Fall Soil Erosion\": 3,\n  //       \"Promote Water Quality\": 1,\n  //       \"Prevent Spring Soil Erosion\": 4,\n  //       \"Penetrates Plow Pan\": 3,\n  //       \"Reduces Surface Compaction\": 3,\n  //       \"Nitrogen Fixation\": 4,\n  //       \"Nitrogen Scavenging\": 1,\n  //       \"Good Grazing\": 4,\n  //       \"Forage Harvest Value\": 5,\n  //       \"Residue Suppresses Summer Annual Weeds\": 2,\n  //       \"Outcompetes Winter Annual Weeds\": 3,\n  //       \"Suppresses Winter Annual Weeds\": 3,\n  //       \"Volunteer Establishment\": 5,\n  //       \"Cover Crop Description\":\n  //         \"Short-lived perennial. Slower growing, must be seeded earlier, killed later than winter pea, crimson clover, hairy vetch. Establishes readily, shade tolerant, very winter-hardy, inexpensive. Moderate N fixation. Best on good soils with high fertility; tolerates some wetness. Use\\nmulti-cut medium or one-cut mammoth varieties. Consider spring oat nurse or wheat/triticale companion. Inoculate! Cross inoculates with crimson or white clover. Descr. modified from C. Lawrence, VA NRCS Cover Crop Planning Manual.\\n\",\n  //       \"Cover Crop Description References\":\n  //         \"Short-lived perennial. Slower growing, must be seeded earlier, killed later than winter pea, crimson clover, hairy vetch. Establishes readily, shade tolerant, very winter-hardy, inexpensive. Moderate N fixation. Best on good soils with high fertility; tolerates some wetness. Use\\nmulti-cut medium or one-cut mammoth varieties. Consider spring oat nurse or wheat/triticale companion. Inoculate! Cross inoculates with crimson or white clover. Descr. modified from C. Lawrence, VA NRCS Cover Crop Planning Manual.\\n\",\n  //       \"Reduces Crusting\": 3,\n  //       Notes:\n  //         \"Manage for bloat when grazing. When the crop is stressed it can produce phytoestrogens, so do not graze breeding/pregnant sheep on red clover.\",\n  //       \"Notes: Pollinators\":\n  //         \"Delay termination until at least 30-50% bloom to maximize value to pollinators.\",\n  //       \"Notes: Nematodes\": \"Host for root-knot nematode.\",\n  //       \"Improve Soil Aggregation - Formula\": 2,\n  //       \"Improve Soil Organic Matter - Formula\": 1,\n  //       \"Lasting Residue - Formula\": 1,\n  //       \"Prevent soil erosion - formula\": 2,\n  //       \"Promote water quality - formula\": 4,\n  //       \"Reduces subsurface compaction - formula\": 3,\n  //       \"Nitrogen fixation - formula\": 5,\n  //       \"Nitrogen scavenging - formula\": 3,\n  //       \"Good grazing - formula\": 5,\n  //       \"Forest harvest value - formula\": 5,\n  //       \"Pollinator support - formula\": 5,\n  //       \"Weed suppression - formula\": 3,\n  //       \"Reduces topsoil compaction- formula\": 2,\n  //       \"v Base Seed Price Per Acre Min\": 24,\n  //       \"Base Seed Price Per Acre\": 24,\n  //       \"f Base Seed Price Per Acre Min\": 1,\n  //       \"Average Seeding Rate Min\": [27.57894736842105],\n  //       \"Average Seeding Rate Max\": [56.026315789473685],\n  //       \"f Base Seed Price Per Acre Max\": 1,\n  //       __id: \"recKtaYjD61VgzVlZ\",\n  //       inBasket: false,\n  //       \"Image Data\": {\n  //         \"Cover Crop\": \"Clover, Red\",\n  //         \"Key Thumbnail\": \"Clover_red_flowering_Ackroyd_2020_crop.JPG\",\n  //         Notes: null,\n  //         Directory: \"Clover, Red\",\n  //       },\n  //       \"Crop Description\":\n  //         \"Short-lived upright perennial, often lasts two years. Often grown for hay. Best on good soils with high fertility; tolerates some wetness. Establishes readily, shade tolerant, very winter-hardy, inexpensive. Resists some problem nematodes, good taproot. Moderate to xcellent N fixation depending on planting timing. Excellent forage, blooms for pollinators. For fall-seeding, use multi-cut medium or one-cut mammoth varieties. Multi-cut “medium” types best for spring planting. Keep hayed (¼-⅓ bloom) or clipped high to avoid seed set, keep stand vegetative. Mix with grasses like orchardgrass or fescue to moderate C:N ratio at termination. Consider seeding with spring oat nurse crop at low rate in fall or small grain that will be harvested/mowed to “release” clover understory. Inoculate with appropriate Rhizobium spp.; cross inoculates with crimson or white clover. Slower growing, must be seeded earlier and killed later than other fall-seeded legumes.\",\n  //       id: \"recKtaYjD61VgzVlZ\",\n  //       Drought: 3,\n  //       Flood: 3,\n  //       Heat: 4,\n  //       \"Low Fertility\": 3,\n  //       Salinity: 1,\n  //       Shade: 4,\n  //       \"Tillage at Vegetative\": 1,\n  //       \"Tillage at Flowering\": 1,\n  //       \"Freezing at Flowering\": 1,\n  //       \"Freezing at Vegetative\": 1,\n  //       \"Chemical at Vegetative\": 3,\n  //       \"Chemical at Flowering\": 5,\n  //       \"Mow at Flowering\": 3,\n  //       \"Aerial Seeding\": false,\n  //     },\n  //   },\n  // ],\n  selectedGoals: [],\n  // selectedGoals: [\n  //   \"Improve Soil Organic Matter\",\n  //   \"Increase Soil Aggregation\",\n  //   \"Lasting Residue\",\n  // ],\n  zoom: 13,\n  addressVerified: false,\n  snackOpen: false,\n  snackVertical: \"bottom\",\n  snackHorizontal: \"right\",\n  snackMessage: \"\",\n  modalOpen: false,\n  modalSize: \"lg\", //sm,md,lg,fluid\n  modalBody: {},\n  addToCartBtnText: \"add to list\",\n  zoneText: \"Zone 7\",\n  // zone: 7,\n  zone: \"\",\n  soilData: {\n    Map_Unit_Name: \"\",\n    Drainage_Class: [],\n    Flooding_Frequency: [],\n    Ponding_Frequency: \"\",\n  },\n  soilDataOriginal: {\n    Map_Unit_Name: \"\",\n    Drainage_Class: [],\n    Flooding_Frequency: [],\n    Ponding_Frequency: \"\",\n  },\n\n  weatherData: {\n    averageFrost: {\n      firstFrostDate: {\n        month: \"October\",\n        day: 21,\n      },\n      lastFrostDate: {\n        month: \"April\",\n        day: 20,\n      },\n    },\n    averagePrecipitation: {\n      thisMonth: 3.6, //inches\n      annual: 43, //inches\n    },\n    frostFreeDays: 173,\n  },\n  // myCoverCropActivationFlag: true,\n  myCoverCropActivationFlag: false,\n  // speciesSelectorActivationFlag: false,\n  speciesSelectorActivationFlag: true,\n  ajaxInProgress: false,\n  cropDetailModal: false,\n  greenbarExpanded: false,\n  isSoilDataLoading: false,\n  cashCropData: {\n    name: \"\",\n    dateRange: {\n      startDate: \"\",\n      endDate: \"\",\n    },\n  },\n  zone7CropData: z7CropData,\n  zone6CropData: z6CropData,\n  zone5CropData: z5CropData,\n  zone7Dictionary: z7Dict,\n  zone6Dictionary: z6Dict,\n  zone5Dictionary: z5Dict,\n  weatherDataReset: false,\n  filterString: \"\",\n  filterKeys: [],\n  activeGrowthPeriod: [],\n  comparisonKeys: [],\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\nexport const Context = createContext(initialState);\nexport default Store;\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n\nconst DateComponent = () => {\n  const [date, setDate] = useState(null);\n\n  useEffect(() => {\n    setDate(setTodaysDate);\n  }, []);\n\n  return date;\n};\n\nconst setTodaysDate = () => {\n  let now = moment();\n  let tzdata = moment.tz.guess();\n  return now.tz(tzdata).format(\"LL\");\n};\n\nexport default DateComponent;\n","import React, { useContext, Fragment, Suspense } from \"react\";\nimport {\n  withStyles,\n  Button,\n  Switch,\n  Grid,\n  Typography,\n  Tooltip,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { Info, MonetizationOn } from \"@material-ui/icons\";\nconst JSZip = require(\"jszip\");\nconst JSZipUtils = require(\"jszip-utils\");\nconst saveAs = require(\"save-as\");\n\nexport const airtableAPIURL = {\n  Z5: \"https://api.airtable.com/v0/appASoBfIRYbb8V7o\",\n  Z7: \"https://api.airtable.com/v0/app2q3UaKHXutMQyt\",\n  Z6: \"https://api.airtable.com/v0/appC47111lCOTaMYe\",\n};\n\nexport const ReferenceTooltip = (props) => {\n  let sourceURL = props.url;\n  let sourceName = props.source;\n  let type = props.type || \"link\";\n  let content = props.content || \"\";\n  let hasLink = props.hasLink ? true : false;\n  return type === \"link\" ? (\n    <Tooltip\n      title={\n        <div>\n          Source{\": \"}\n          <a href={sourceURL} target=\"_blank\" rel=\"noreferrer\">\n            {sourceName}\n          </a>\n        </div>\n      }\n      interactive\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  ) : type === \"html\" ? (\n    <Tooltip interactive arrow dangerouslySetInnerHTML={props.content}>\n      {\" \"}\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  ) : hasLink ? (\n    <Tooltip title={props.title} placement=\"right\" interactive arrow>\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  ) : (\n    <Tooltip\n      title={\n        <div>\n          <Typography variant=\"body1\">{content}</Typography>\n        </div>\n      }\n      placement=\"right\"\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  );\n};\n\nexport const DataTooltip = ({\n  data,\n  interactive = true,\n  placement = \"top-start\",\n}) => {\n  return (\n    <Tooltip\n      title={<div className=\"text-center\">{data}</div>}\n      interactive={interactive}\n      placement={placement}\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  );\n};\n\nexport const locationIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 14 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7 0C3.13 0 0 3.13 0 7C0 12.25 7 20 7 20C7 20 14 12.25 14 7C14 3.13 10.87 0 7 0ZM7 9.5C5.62 9.5 4.5 8.38 4.5 7C4.5 5.62 5.62 4.5 7 4.5C8.38 4.5 9.5 5.62 9.5 7C9.5 8.38 8.38 9.5 7 9.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\nexport const zoneIcon = (w, h) => {\n  return (\n    <svg\n      height={h}\n      width={w}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM6 15.5C4.62 15.5 3.5 14.38 3.5 13C3.5 11.62 4.62 10.5 6 10.5C7.38 10.5 8.5 11.62 8.5 13C8.5 14.38 7.38 15.5 6 15.5ZM7.5 6C7.5 4.62 8.62 3.5 10 3.5C11.38 3.5 12.5 4.62 12.5 6C12.5 7.38 11.38 8.5 10 8.5C8.62 8.5 7.5 7.38 7.5 6ZM14 15.5C12.62 15.5 11.5 14.38 11.5 13C11.5 11.62 12.62 10.5 14 10.5C15.38 10.5 16.5 11.62 16.5 13C16.5 14.38 15.38 15.5 14 15.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport const cloudIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 24 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M19.35 6.04C18.67 2.59 15.64 0 12 0C9.11 0 6.6 1.64 5.35 4.04C2.34 4.36 0 6.91 0 10C0 13.31 2.69 16 6 16H19C21.76 16 24 13.76 24 11C24 8.36 21.95 6.22 19.35 6.04Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n\nexport const GreenSwitch = withStyles({\n  thumb: {\n    backgroundColor: \"rgb(138, 188, 98, 1)\",\n  },\n  track: {\n    backgroundColor: \"rgb(138, 188, 98, 0.5)\",\n  },\n  input: {\n    \"&:checked\": {\n      color: \"rgb(240, 247, 235)\",\n    },\n  },\n  // \"&:checked\": {\n  //   color: \"rgb(240, 247, 235)\",\n  // },\n})(Switch);\n\nexport const GetMonthString = (month) => {\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return months[month].toUpperCase();\n};\n\nexport const UnderConstructionText = () => {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Grid item xs={3}>\n        <Typography variant=\"h3\">Under Construction</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport const abbrRegion = (input, to) => {\n  var states = [\n    [\"Alabama\", \"AL\"],\n    [\"Alaska\", \"AK\"],\n    [\"American Samoa\", \"AS\"],\n    [\"Arizona\", \"AZ\"],\n    [\"Arkansas\", \"AR\"],\n    [\"Armed Forces Americas\", \"AA\"],\n    [\"Armed Forces Europe\", \"AE\"],\n    [\"Armed Forces Pacific\", \"AP\"],\n    [\"California\", \"CA\"],\n    [\"Colorado\", \"CO\"],\n    [\"Connecticut\", \"CT\"],\n    [\"Delaware\", \"DE\"],\n    [\"District Of Columbia\", \"DC\"],\n    [\"Florida\", \"FL\"],\n    [\"Georgia\", \"GA\"],\n    [\"Guam\", \"GU\"],\n    [\"Hawaii\", \"HI\"],\n    [\"Idaho\", \"ID\"],\n    [\"Illinois\", \"IL\"],\n    [\"Indiana\", \"IN\"],\n    [\"Iowa\", \"IA\"],\n    [\"Kansas\", \"KS\"],\n    [\"Kentucky\", \"KY\"],\n    [\"Louisiana\", \"LA\"],\n    [\"Maine\", \"ME\"],\n    [\"Marshall Islands\", \"MH\"],\n    [\"Maryland\", \"MD\"],\n    [\"Massachusetts\", \"MA\"],\n    [\"Michigan\", \"MI\"],\n    [\"Minnesota\", \"MN\"],\n    [\"Mississippi\", \"MS\"],\n    [\"Missouri\", \"MO\"],\n    [\"Montana\", \"MT\"],\n    [\"Nebraska\", \"NE\"],\n    [\"Nevada\", \"NV\"],\n    [\"New Hampshire\", \"NH\"],\n    [\"New Jersey\", \"NJ\"],\n    [\"New Mexico\", \"NM\"],\n    [\"New York\", \"NY\"],\n    [\"North Carolina\", \"NC\"],\n    [\"North Dakota\", \"ND\"],\n    [\"Northern Mariana Islands\", \"NP\"],\n    [\"Ohio\", \"OH\"],\n    [\"Oklahoma\", \"OK\"],\n    [\"Oregon\", \"OR\"],\n    [\"Pennsylvania\", \"PA\"],\n    [\"Puerto Rico\", \"PR\"],\n    [\"Rhode Island\", \"RI\"],\n    [\"South Carolina\", \"SC\"],\n    [\"South Dakota\", \"SD\"],\n    [\"Tennessee\", \"TN\"],\n    [\"Texas\", \"TX\"],\n    [\"US Virgin Islands\", \"VI\"],\n    [\"Utah\", \"UT\"],\n    [\"Vermont\", \"VT\"],\n    [\"Virginia\", \"VA\"],\n    [\"Washington\", \"WA\"],\n    [\"West Virginia\", \"WV\"],\n    [\"Wisconsin\", \"WI\"],\n    [\"Wyoming\", \"WY\"],\n  ];\n\n  // So happy that Canada and the US have distinct abbreviations\n  var provinces = [\n    [\"Alberta\", \"AB\"],\n    [\"British Columbia\", \"BC\"],\n    [\"Manitoba\", \"MB\"],\n    [\"New Brunswick\", \"NB\"],\n    [\"Newfoundland\", \"NF\"],\n    [\"Northwest Territory\", \"NT\"],\n    [\"Nova Scotia\", \"NS\"],\n    [\"Nunavut\", \"NU\"],\n    [\"Ontario\", \"ON\"],\n    [\"Prince Edward Island\", \"PE\"],\n    [\"Quebec\", \"QC\"],\n    [\"Saskatchewan\", \"SK\"],\n    [\"Yukon\", \"YT\"],\n  ];\n\n  var regions = states.concat(provinces);\n\n  var i; // Reusable loop variable\n  if (to === \"abbr\") {\n    input = input.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][0] === input) {\n        return regions[i][1];\n      }\n    }\n  } else if (to === \"name\") {\n    input = input.toUpperCase();\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][1] === input) {\n        return regions[i][0];\n      }\n    }\n  }\n};\n\nexport const CustomStyles = () => {\n  return {\n    progressColor: \"#2b7b79\",\n    darkGreen: \"#598444\",\n    defaultFontSize: \"1em\",\n    lighterGreen: \"#598445\",\n    lightGreen: \"#add08f\",\n    greenishWhite: \"#f0f7eb\",\n    primaryProgressBtnColor: \"#49a8ab\",\n    primaryProgressBtnBorderColor: \"#62b8bc\",\n    secondaryProgressBtnColor: \"#e3f2f4\",\n    secondaryProgressBtnBorderColor: \"#e3f2f4\",\n    fullyRoundedRadius: \"200px\",\n    semiRoundedRadius: \"10px\",\n    _10pxRoundedRadius: \"10px\",\n    _5pxRoundedRadius: \"5px\",\n    mildlyRoundedRadius: \"5px\",\n    nonRoundedRadius: \"0px\",\n    defaultButtonPadding: \"10px 20px 10px 20px\",\n  };\n};\n\nexport const LightButton = withStyles({\n  root: {\n    backgroundColor: CustomStyles().secondaryProgressBtnBorderColor,\n    borderRadius: CustomStyles().fullyRoundedRadius,\n    color: \"#000\",\n    padding: CustomStyles().defaultButtonPadding,\n    borderColor: CustomStyles().secondaryProgressBtnBorderColor,\n    \"&:hover\": {\n      borderColor: CustomStyles().primaryProgressBtnBorderColor,\n      backgroundColor: CustomStyles().primaryProgressBtnColor,\n      color: \"#fff\",\n    },\n  },\n})(Button);\n\nexport const getRating = (ratng) => {\n  let rating = parseInt(ratng);\n\n  switch (rating) {\n    case 0:\n      return (\n        <div className=\"rating-0\">\n          <span></span>\n        </div>\n      );\n    case 1:\n      return (\n        <div className=\"rating-1\">\n          <span></span>\n        </div>\n      );\n    case 2:\n      return (\n        <div className=\"rating-2\">\n          <span></span>\n        </div>\n      );\n    case 3:\n      return (\n        <div className=\"rating-3\">\n          <span></span>\n        </div>\n      );\n    case 4:\n      return (\n        <div className=\"rating-4\">\n          <span></span>\n        </div>\n      );\n    case 5:\n      return (\n        <div className=\"rating\">\n          <span></span>\n        </div>\n      );\n    default:\n      return (\n        <div className=\"rating-0\">\n          <span></span>\n        </div>\n      );\n  }\n};\nexport const weatherApiURL = \"https://weather.aesl.ces.uga.edu\";\nexport const allMonths = moment().localeData().monthsShort();\nexport const cropDataURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))\";\n\n// const cropDataURL =\n// \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Zone Decision},'Exclude',''))\";\n\nexport const allGoalsURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crop%20Goals?maxRecords=300\";\n\nexport const greenBarExpansionPanelHeight = {\n  large: \"600px\",\n  medium: \"600px\",\n  small: \"600px\",\n};\n\nexport const trimString = (stringFull, size) => {\n  if (!isNaN(size)) {\n    let postStr = \"...\";\n\n    return (\n      stringFull.substring(0, size) + `${stringFull.length > 25 ? \"...\" : \"\"}`\n    );\n  } else return stringFull;\n};\n\nexport const sidebarFilters = [\n  {\n    category: \"Taxonomy\",\n    data: [\n      {\n        Variable: \"Cover Crop Group\",\n        Description: \"Common name for categories of cover crops\",\n        \"Data Source\": [\"ZTL Team\"],\n        Values: \"[Legume, Grass, Brassica, Broadleaf]\",\n        Category: \"Taxonomy\",\n        \"Cover Crop Goals\": [\"rech7T61et0rrvgOc\", \"recxUYrkzT3lNknLR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Family Common Name\",\n        Description: \"Family common name\",\n        \"Data Source\": [\"ZTL Team\"],\n        \"USDA.PLANTS Term\": \"Family.Common.Name\",\n        Values:\n          \"[Grass family, Nonlegumes, Legumes, Mustard family, Aster family, Pea family, Buckwheat family, Flax family, Borage family]\",\n        Category: \"Taxonomy\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Environmental Tolerances\",\n    data: [\n      {\n        Variable: \"Shade Tolerance\",\n        Description: \"Ability to tolerate shade relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Shade.Tolerance\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flood Tolerance\",\n        Description: \"Ability to tolerate flood relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Heat Tolerance\",\n        Description: \"Ability to tolerate heat relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Winter Survival\",\n        Description: \"Likelihood of cover crop survival over the winter.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          \"Can we indicate winter kill temp for diff maturity? or comments?\",\n        Values: \"[Never, Seldom, Expected]\",\n        Category: \"Environmental Tolerances\",\n        \"Cover Crop Goals\": [\"reccbLXAvA9tM3TT1\", \"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Salinity Tolerance\",\n        Description:\n          \"Ability to tolerate high salinity relative to other species. Scale 1-5\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Salinity.Tolerance\",\n        \"Team Notes\":\n          \"[Low = tolerant to 2.1-4.0 dS/m; Medium = tolerant to 4.1-8.0 dS/m; High = tolerant to greater than 8.0 dS/m.]\",\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Low Fertility Tolerance\",\n        Description:\n          \"Ability to tolerate poor fertility in general (an amalgamation of low pH soils and/or below-optimum soil tests for N, P, and/or K, sandy soil)\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Fertiility Requirement\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drought Tolerance\",\n        Description: \"Ability to tolerate drought relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Droght Tolerance\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Basic Agronomics\",\n    data: [\n      {\n        Variable: \"Shape & Orientation\",\n        Description: \"Growth form or predominant shape of an individual plant.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Erect, Semi-Erect, Climbing, Prostrate, Columnar, Decumbent]\",\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recJcA1wm7sdCHzQl\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Hessian Fly-Free Date\",\n        Description:\n          \"Hessian Fly-Free Date, after which wheat and other plants can be planted to avoid cereal rust.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"Yes, No\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"check box\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Dry Matter Min (lbs/A/y)\",\n        Description:\n          \"Amount of dry biomass the cover crop produces in a year, lbs/A.\\n\\nImpacts the following cover cropping goals: improve soil organic matter, lasting residue, prevent soil eriosion, promote water quality, nitrogen fixation, nitrogen scavanging, and weed suppression.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<1000, 1000<Med<3000, High>3000]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Duration\",\n        Description:\n          \"Some plants have different Durations depending on environment or location, so a plant can have more than one value. Multiple values are reported in order of increasing longevity in nature.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Duration\",\n        Values: \"[Annual, Perennial, Short-lived Perennial, Biennial]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Active Growth Period\",\n        Description: \"Season in which plants have active growth.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Active Growth Period\",\n        Values: \"[Spring, Summer, Winter, Fall]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\",\n        Description:\n          \"Amount of N a legume species contains, lbs/A. This is combined nitrogen fixed plus nitrogen taken up from the soil.\\n\\nImpacts the following cover cropping goals: nitrogen source\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<50; 50<Med<100; High>100]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\"rech7T61et0rrvgOc\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"C to N Ratio\",\n        Description:\n          \"C:N ratio is the percentage of organic carbon divided by the percentage of total nitrogen in organic material. Note that the C:N ratio of grasses (warm season annuals) is lower at the vegetative state then at the flowering state.\\n\\n1 to 5 rating. General guide for cover crops at flowering, but there are exceptions:\\n1 - Legumes\\n2 - Succulent broadleafs\\n3 - Woodier broadleafs (sunflowers, annual rye grass)\\n4 - Cereal grains\\n5 - Warm season annuals\\n\\n\\nImpacts following goals: Improve soil organic matter, lasting residue, prevent soil erosion, weed suppression\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"CN Ratio\",\n        \"Team Notes\":\n          \"Team must define the values, range, and options. Proposed Baseline: [0<Low<12; 12<Medium<20; High>20]\",\n        Values:\n          \"1 - Legumes, 2 - Succulent broadleafs, 3 - Woodier broadleafs (sunflowers, annual rye grass), 4 - Cereal grains, 5 - Warm season annuals\",\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Zone Use\",\n        Description:\n          \"Is it commonly used in the zone or only beginning to gain adoption?\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"????\",\n        Values: \"[Common, Emerging]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Dry Matter Max (lbs/A/y)\",\n        Description:\n          \"Amount of dry biomass the cover crop produces in a year, lbs/A.\\n\\nImpacts the following cover cropping goals: improve soil organic matter, lasting residue, prevent soil eriosion, promote water quality, nitrogen fixation, nitrogen scavanging, and weed suppression.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<1000, 1000<Med<3000, High>3000]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\",\n        Description:\n          \"Amount of N a legume species contains, lbs/A. This is combined nitrogen fixed plus nitrogen taken up from the soil.\\n\\nImpacts the following cover cropping goals: nitrogen source\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<50; 50<Med<100; High>100]',\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Soil Conditions\",\n    data: [\n      {\n        Variable: \"Soil Drainage\",\n        Description:\n          \"Level of soil drainage needed for acceptable cover crop growth given regular rainfall.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"[Very poorly drained, Poorly drained, Somewhat poorly drained, Moderately well drained, Well drained, Excessively drained, Saturated muck, Well drained muck]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Soil Textures\",\n        Description:\n          \"Ability to establish and grow in soil with coarse, medium, and fine textured soils given regular rainfall.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Adapted to X Soils\",\n        Values: \"[Coarse, Medium, Fine]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Minimum Tolerant Soil pH\",\n        Description:\n          \"The minimum soil pH, of the top 12 inches of soil, within the plant’s known geographical range.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"pH Min\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"decimal (1.0)\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Maximum Tolerant Soil pH\",\n        Description:\n          \"The maximum soil pH, of the top 12 inches of soil, within the plant’s known geographical range.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"pH Max\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"decimal (1.0)\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Soil Moisture Use\",\n        Description:\n          \"Ability to use (i.e., remove) available soil moisture relative to other species.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Moisture Use\",\n        Values: \"[Low, Medium, High]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flooding/Ponding Tolerance\",\n        Description: \"Cover crop survival under flooding/ponding conditions\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Poor, Moderate, Good]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Loosens Topsoil\",\n        Description:\n          \"Relative ability of cover crop to loosen topsoil (0 to 6 inches).\\n\\nImpacts the following cover cropping goals: reduces topsoil compaction\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recPxyjmEenzGEvZj\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Supports Mycorrhizae\",\n        Description:\n          \"Relative activity of mycorrhizal fungi in the rhizosphere.\\n\\nImpacts the following goals: Increase soil aggregation, promote water quality\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recu78NjkZLLgegx0\", \"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Loosens Subsurface Soil\",\n        Description:\n          \"Relative ability of cover crop to break up subsurface soil compaction (6 to 12 inches). Including management induced compaction.\\n\\nImpacts the following cover cropping goals: reduces subsurface soil compaction\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recFKZEppkGOSk8qE\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Growth\",\n    data: [\n      {\n        Variable: \"Innoculant Type (Legumes Only)\",\n        Description:\n          \"Type of inoculant that needs to applied to legume seed to promote N fixation\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"[none, alfalfa, berseem clover, cowpea, crimson clover, lespedeza, lima bean, pea/vetch, pea/vetch/lentil, peanut, red clover, soybean, sweetclover, white clover]\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flowering Trigger\",\n        Description:\n          \"Details about when flowering occurs, triggers for flowering\",\n        Values:\n          \"[Requires vernalization (spring), Intermediate day (11-13 hrs), Long day (>14 hrs), Based on plant size]\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Early Spring Growth\",\n        Description:\n          \"Speed in the spring at which the cover crop breaks dormancy and grows. No star means that early spring growth is not applicable.\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Root Depth\",\n        Description:\n          \"How deeply rooted is this cover crop? Consider the relative ability of the roots to go deeper the previous crop was (where residual nitrogen lies).\\n\\nImpacts the following goals: Promote water quality, reduces topsoil compaction, nitrogen scavenging\",\n        Values: \"[Shallow, Medium, Deep]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recNAKTF4fwK3CONR\",\n          \"recFKZEppkGOSk8qE\",\n          \"recPxyjmEenzGEvZj\",\n          \"recxUYrkzT3lNknLR\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Establishes Quickly\",\n        Description:\n          \"Speed at which the cover crop establishes once planted.\\n1 - slow to establish\\n5 - quick to establish\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recRlVowCsSXpRXN2\",\n          \"recNAKTF4fwK3CONR\",\n          \"recxUYrkzT3lNknLR\",\n          \"recDewfUdf5fLOAVC\",\n          \"recJcA1wm7sdCHzQl\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Root Architecture\",\n        Description:\n          \"What is the primary root structure: tap or fibrous?\\n\\nImpacts the following goals:  Increase soil aggregation, prevent soil erosion, proote water quality, reduces subsurface soil compaction, reduces topsoil compaction\",\n        Values: \"[Tap, Fibrous]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recu78NjkZLLgegx0\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recFKZEppkGOSk8qE\",\n          \"recPxyjmEenzGEvZj\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Growing Window\",\n        Description:\n          \"Relative length of time that is suitable for growing and terminating a cover crop. For example, cover crops with a very short growing window may be suitable for growing and terminating during a very short period (e.g., 6-8 weeks) between cash crops.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Very Short, Short, Medium, Long, Very Long]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Ease of Establishment\",\n        Description:\n          \"Degree of difficulty in getting cover crop established.\\n1 - difficult to establish\\n5 - very easy to establish\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Planting\",\n    data: [\n      {\n        Variable: \"Min Germination Temp (F)\",\n        Description:\n          \"Minimum temperature required for cover crop seed to germinate within 5 days.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"F\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Seeds per Pound\",\n        Description: \"Average number of cover crop seeds in a pound of seed\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Seeds.per.Pound\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rounded to the nearest tens\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drilled Depth Min\",\n        Description: \"Depth to plant seed in fractions of an inch\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"inches, down to quarter, half, and eigths\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Broadcast Frost Seeding\",\n        Description: \"Cover crop can be seeded when ground is frozen.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"Yes, No\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"checkbox\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Seed Price per Pound\",\n        Description:\n          \"Relative cost of seed per pound. One star is least expensive, 3 stars is most expensive. Rating is relative.\",\n        \"Data Source\": [\"Green Cover Crop Seed\"],\n        \"Team Notes\":\n          \"Each team should recommend a data source for pricing, e.g. green cover crop seed\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-3\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Can Aerial Seed?\",\n        Description: \"Can aerial seeding methods be used for this crop?\",\n        \"Data Source\": [\"Paul Salon\"],\n        Values: \"Yes, No\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"checkbox\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Base Seeding Rate Min (lbs/A)\",\n        Description:\n          \"The base seeding rate (PLS) represents optimal planting time, optimal termination time, optimal planting method (drilled/cultivate and cultipack), conventional tillage method, no planting green, and no interseeding in a monoculture context. Lower limit (min) is approx 30% ground coverage.\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Base Seeding Rate Max (lbs/A)\",\n        Description:\n          \"The base seeding rate (PLS)  represents optimal planting time, optimal termination time, optimal planting method (drilled/cultivate and cultipack), conventional tillage method, no planting green, and no interseeding in a monoculture context. Upper limit (Max) is for intensive activity such as weed suppression or forage.\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drilled Depth Max\",\n        Description: \"Depth to plant seed in fractions of an inch\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"inches, down to quarter, half, and eigths\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Termination\",\n    data: [\n      {\n        Variable: \"Tillage Termination at Vegetative\",\n        Description:\n          \"Likelihood that tillage (i.e. destructive mechanical operations that disturb the soil, as with disking or rotovating) will successfully terminate the cover crop while it is in the vegetative stage. The expert group premises that all cover crops can be terminated with tillage, but that 1 represents hard to terminate with tillage and requires an aggressive technique, where as 5 is easy to terminate with tillage and requires the least aggressive technique. The techniques are categoriezed as follows.\\n\\n5-light disk\\n4-heavy disk\\n3-chisel plow\\n2-rototill\\n1-moldboard\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"5-light disk 4-heavy disk 3-chisel plow 2-rototill 1-moldboard\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Planting Green\",\n        Description:\n          \"Planting cash crop then immediately terminating cover crop (prior to cash crop emergence). Note: any crop can be planted green with the correct equipment; this column represents general considerations.\",\n        \"Data Source\": [\"Paul Salon\"],\n        Values: \"Yes, No\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Freezing Termination at Flowering\",\n        Description:\n          \"Likelihood that conditions below 32 degrees F will successfully terminate the cover crop while it is in the flowering stage.\",\n        Values:\n          \"5. Likely to terminate in mild freeze 1. Requires a very significant freeze to terminate\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Chemical Termination at Vegetative\",\n        Description:\n          \"Likelihood that herbicide application will successfully terminate the cover crop while it is in the vegetative stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Tillage Termination at Flowering\",\n        Description:\n          \"Likelihood that tillage (i.e. destructive mechanical operations that disturb the soil, as with disking or rotovating) will successfully terminate the cover crop while it is in the flowering stage. The expert group premises that all cover crops can be terminated with tillage, but that 1 represents hard to terminate with tillage and requires an aggressive technique, where as 5 is easy to terminate with tillage and requires the least aggressive technique. The techniques are categoriezed as follows.\\n\\n5-light disk\\n4-heavy disk\\n3-chisel plow\\n2-rototill\\n1-moldboard\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"5-light disk 4-heavy disk 3-chisel plow 2-rototill 1-moldboard\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Freezing Termination at Vegetative\",\n        Description:\n          \"Likelihood that conditions below 32 degrees F will successfully terminate the cover crop while it is in the vegetative stage.\",\n        Values:\n          \"5 likely to terminate in mild freeze  1 requires a very significant freeze to terminate\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Chemical Termination at Flowering\",\n        Description:\n          \"Likelihood that herbicide application will successfully terminate the cover crop while it is in the flowering stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Mow Termination at Flowering\",\n        Description:\n          \"Likelihood that mowing (i.e. destructive mechanical operations that do not disturb the soil) will successfully terminate the cover crop while it is in the flowering stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Roller Crimp Termination at Flowering\",\n        Description:\n          \"Likelihood that roller-crimping will successfully terminate the cover crop while it is in the flowering stage. Termination is most successful at higher crop densities (3+ tons of drymatter per acre).\\n\\nRoller crimping is usually used in tandem with chemical termination outside of organic systems.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Grazers & Pollinators\",\n    data: [\n      {\n        Variable: \"Pollinator Habitat\",\n        Description:\n          \"Extent to which the cover crop can serve as habitat for pollinators.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Grazers & Pollinators\",\n        \"Cover Crop Goals\": [\"recdbvSJ6Q8iT2haq\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Pollinator Food\",\n        Description:\n          \"Extent to which the cover crop provides food (i.e. leaves, nectar, pollen) for pollinators.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Grazers & Pollinators\",\n        \"Cover Crop Goals\": [\"recdbvSJ6Q8iT2haq\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Weeds\",\n    data: [\n      {\n        Variable: \"Volunteer Establishment\",\n        Description:\n          \"Risk of previous cover crop volunteering in current cash crop due to management (i.e. the previous cover crop setting seed that became part of the soil weed seedbank). 1=rarely volunteers, 5=frequently volunteers\\nShorter-term issue, relies more on management. May be positive if you want it to re-seed. Impact depends on crop rotation.\",\n        Category: \"Weeds\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Persistence\",\n        Description:\n          'Indicator of likelihood that the cover crop seed, once planted, will sit in the soil for an extended time then germinate at an inopportune moment (e.g., during cash crop growth). 1= rarely has hard seed, 5=hard seed is a frequent concern. \\n\"Hardseedness\" in MW tool \"Risk is in the CC seedbag\", long-term issue.',\n        Category: \"Weeds\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Disease & Non-Weed Pests\",\n    data: [\n      {\n        Variable: \"Discourages Nematodes\",\n        Description:\n          \"Ability of a cover crop to decrease nematode populations (e.g., trap crop). 1=poor choice for discouraging nematodes, 5=excellent choice\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Nematodes\",\n        Description:\n          \"Ability of a cover crop to increase nematode populations. \\n1=does not support nematode populations, 5=excellent for increasing nematode populations\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Discourages Pest Insects\",\n        Description:\n          \"Ability of a cover crop to decrease insect pest populations. 1=poor choice for discouraging insect pests, 5=excellent choice\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Pest Insects\",\n        Description:\n          \"Ability of a cover crop to increase insect pest populations. 1=does not promote insect populations, 5=frequently promotes pest insects\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Suppresses Cash Crop Disease\",\n        Description:\n          \"Relative ranking of cover crop's impact in suppressing disease in the following cash crop. \\n1 - does not suppress disease in following cash crop.\\n5 - very likely to suppress disease in following cash crop.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Cash Crop Disease\",\n        Description:\n          \"Relative ranking of cover crop's impact on promoting disease in the following cash crop. \\n1 - does not promote disease in following cash crop.\\n5 - very likely to promote disease in following cash crop.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n];\n\nexport const downloadAllPDF = (selectedCropNames) => {\n  let zip = new JSZip();\n  let count = 0;\n  var zipFilename = \"Information-Sheets.zip\";\n  selectedCropNames.forEach((val) => {\n    let filename = val.name + \".pdf\";\n    JSZipUtils.getBinaryContent(val.pdf, (err, data) => {\n      if (err) {\n        throw err; // or handle the error\n      }\n      zip.file(filename, data, { binary: true });\n      count++;\n      if (count === selectedCropNames.length) {\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\n          saveAs.saveAs(content, zipFilename);\n        });\n      }\n    });\n  });\n};\nexport const downloadAllCSV = (selectedCropNames) => {\n  let zip = new JSZip();\n  let count = 0;\n  var zipFilename = \"Information-Sheets-CSV.zip\";\n  selectedCropNames.forEach((val) => {\n    let filename = val.name + \".csv\";\n    JSZipUtils.getBinaryContent(val.csv, (err, data) => {\n      if (err) {\n        throw err; // or handle the error\n      }\n      zip.file(filename, data, { binary: true });\n      count++;\n      if (count === selectedCropNames.length) {\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\n          saveAs.saveAs(content, zipFilename);\n        });\n      }\n    });\n  });\n};\n\nexport const RenderSeedPriceIcons = ({ val }) => {\n  switch (parseInt(val)) {\n    case 1:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n    case 2:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n    case 3:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n  }\n};\n\nexport const CropImage = ({\n  present = true,\n  src = \"\",\n  alt = \"\",\n  view = \"\",\n  className = \"\",\n  onClick = () => {},\n}) => {\n  const placeholder = \"//placehold.it/100x100\";\n  const lazyHeight =\n    view === \"calendar\" ? 50 : view === \"information-sheet\" ? 250 : 100;\n\n  let imageStyle = {};\n\n  switch (view) {\n    case \"calendar\":\n      imageStyle = {\n        width: \"50px\",\n        height: \"50px\",\n        maxWidth: \"50px\",\n        maxHeight: \"50px\",\n      };\n      break;\n    case \"information-sheet\":\n      imageStyle = {\n        width: \"255px\",\n        height: \"250px\",\n      };\n      break;\n    case \"photo-grid\":\n      imageStyle = {\n        width: \"200px\",\n        height: \"200px\",\n      };\n      break;\n    default:\n      imageStyle = {\n        width: \"100px\",\n        height: \"100px\",\n        maxWidth: \"100px\",\n        maxHeight: \"100px\",\n      };\n  }\n\n  return (\n    <Suspense\n      fallback={\n        <img\n          height={lazyHeight}\n          width={lazyHeight}\n          src={placeholder}\n          alt={\"Placeholder image\"}\n        />\n      }\n    >\n      <img\n        className={className ? className : `image-for-${alt}`}\n        onClick={onClick}\n        src={present ? src : placeholder}\n        alt={present ? alt : \"Placeholder\"}\n        style={imageStyle}\n      />\n    </Suspense>\n  );\n};\n\nexport const flipCoverCropName = (cropName = \"\") => {\n  let cropNames = cropName.split(\",\");\n\n  if (cropNames.length > 1) {\n    return `${cropNames[1]} ${cropNames[0]}`;\n  } else {\n    return cropName;\n  }\n};\n","import React, { useEffect, useContext, useState, Fragment } from \"react\";\nimport {\n  Map,\n  TileLayer,\n  Marker,\n  Popup,\n  Polygon,\n  FeatureGroup,\n  Circle,\n  LayersControl,\n  LayerGroup,\n} from \"react-leaflet\";\n// import { EditControl } from \"react-leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Context } from \"../../store/Store\";\nimport axios from \"axios\";\nimport StateAbbreviations from \"./StateAbbreviations\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { Button } from \"@material-ui/core\";\n\nimport \"../../styles/map.scss\";\nimport { CustomStyles } from \"../../shared/constants\";\n\n// work around broken icons when using webpack, see https://github.com/PaulLeCam/react-leaflet/issues/255\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n});\n\nconst editableLayers = new L.FeatureGroup();\nconst drawPluginOptions = {\n  position: \"topright\",\n  draw: {\n    polygon: {\n      allowIntersection: false, // Restricts shapes to simple polygons\n      drawError: {\n        color: \"#e1e100\", // Color the shape will turn when intersects\n        message: \"<strong>Oh snap!<strong> you can't draw that!\", // Message that will show when intersect\n      },\n      shapeOptions: {\n        color: \"#97009c\",\n      },\n    },\n    // disable toolbar item by setting it to false\n    polyline: false,\n    circle: false, // Turns off this drawing tool\n    rectangle: false,\n    marker: true,\n    circlemarker: false,\n  },\n  edit: {\n    featureGroup: editableLayers, //REQUIRED!!\n    remove: true,\n  },\n};\nlet drawControl = new L.Control.Draw(drawPluginOptions);\n\nconst MapComponent = ({ width, height, minzoom, maxzoom }) => {\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    console.log(\"---Map.js---\");\n    var container = L.DomUtil.get(\"map\");\n    if (container != null) {\n      container._leaflet_id = null;\n    }\n    // get default marker\n\n    let center = state.markers[0];\n    // console.log(center)\n    let map;\n    let polygon = null;\n    let myMarker = null;\n    // Create the map\n    if (state.progress === 2) {\n      map = L.map(\"map\", { zoomControl: false }).setView(center, maxzoom - 4);\n    } else {\n      map = L.map(\"map\").setView(center, maxzoom - 4);\n    }\n    // Initialise the FeatureGroup to store editable layers\n    // map.eachLayer((layer) => {\n    //   map.removeLayer(layer);\n    //   // console.log(layer);\n    // });\n    // Set up the ESRI layer\n\n    // L.tileLayer(\"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\", {\n    //   maxZoom: 20,\n    //   subdomains: [\"mt0\", \"mt1\", \"mt2\", \"mt3\"],\n    //   attribution: \"Google\",\n    // }).addTo(map);\n\n    var mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    var wholink =\n      \"i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\";\n\n    L.tileLayer(\n      \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n      {\n        attribution: \"&copy; \" + mapLink + \", \" + wholink,\n        maxZoom: 18,\n      }\n    ).addTo(map);\n\n    // L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    //   attribution:\n    //     'Data © <a href=\"http://osm.org/copyright\">OpenStreetMap</a>',\n    //   maxZoom: 18,\n    // }).addTo(map);\n\n    // add a default marker in the given location\n    // let marker = L.marker(center).addTo(map);\n\n    L.EditToolbar.Delete.include({\n      enable: function () {\n        this.options.featureGroup.clearLayers();\n      },\n    });\n    // click\n\n    // .addLayer(editableLayers);\n    map.addLayer(editableLayers);\n\n    if (state.markers.length > 1) {\n      // window.polygon.remove()\n      // L.polygon().remove();\n      if (polygon === null) {\n        polygon = L.polygon(state.markers, {\n          color: CustomStyles().lighterGreen,\n        }).addTo(map);\n        polygon.bindPopup(\"Your Field\");\n      } else {\n        map.removeLayer(polygon);\n      }\n      // zoom the map to the polygon\n      map.fitBounds(polygon.getBounds());\n    }\n\n    if (state.markers.length === 1) {\n      // show marker\n      if (myMarker === null) {\n        myMarker = L.marker(state.markers[0], {\n          title: state.address,\n          draggable: true,\n          riseOnHover: true,\n        })\n          .addTo(map)\n          .on(\"dragend \", function (e) {\n            console.log(e);\n            var coord = String(myMarker.getLatLng()).split(\",\");\n            console.log(\"Got new coords via Map.js drag event\");\n            var lat = coord[0].split(\"(\");\n            // console.log(\"Latitude\", lat[1]);\n            var lng = coord[1].split(\")\");\n            // console.log(\"Longitude\", lng[0]);\n            myMarker.bindPopup(\"Moved to: \" + lat[1] + \", \" + lng[0] + \".\");\n            dispatch({\n              type: \"UPDATE_MARKER\",\n              data: {\n                markers: [[parseFloat(lat[1]), parseFloat(lng[0])]],\n              },\n            });\n            dispatch({\n              type: \"SNACK\",\n              data: {\n                snackOpen: true,\n                snackMessage: \"Marker Saved\",\n              },\n            });\n          });\n      } else {\n        map.removeLayer(myMarker);\n      }\n    }\n    // else {\n    //   // show polygon with selected area\n    // }\n\n    // Initialise the draw control and pass it the FeatureGroup of editable layers\n\n    if (state.progress !== 2) {\n      map.addControl(drawControl);\n      // var editableLayers = new L.FeatureGroup();\n      // map.addLayer(editableLayers);\n      map.on(\"draw:created\", function (e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        if (type === \"marker\") {\n          layer.bindPopup(\"A popup!\");\n        }\n\n        // console.log(layer._latlngs);\n        let markers = [];\n        if (layer._latlng) {\n          // single marker\n          queryGEORevAPI(layer._latlng.lat, layer._latlng.lng);\n          L.marker([layer._latlng.lat, layer._latlng.lng]).addTo(\n            editableLayers\n          );\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: [[layer._latlng.lat, layer._latlng.lng]],\n            },\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your point has been saved.\",\n            },\n          });\n        } else {\n          // editableLayers.remove().addLayer(layer);\n          // editableLayers.layer\n          editableLayers.addLayer(layer);\n          layer._latlngs.map((latlngArr, index) => {\n            latlngArr.map((latlng, index) => {\n              // console.log(latlng);\n              markers.push([latlng.lat, latlng.lng]);\n            });\n          });\n          queryGEORevAPI(markers[0][0], markers[0][1]);\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: markers,\n            },\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your field has been saved.\",\n            },\n          });\n        }\n        // console.log(polygon.getBounds().getCenter());\n      });\n    }\n  }, [state.markers]);\n\n  const addMarker = (e) => {\n    const { markers } = state;\n\n    markers.pop();\n    markers.push(e.latlng);\n\n    // console.log(markers);\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[markers[0].lat, markers[0].lng]],\n      },\n    });\n    // this.setState({ markers });\n    // console.log(markers[0]);\n    let lon = markers[0].lng;\n    let lat = markers[0].lat;\n    queryGEORevAPI(lat, lon);\n  };\n  const queryGEORevAPI = async (lat, lon) => {\n    const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;\n\n    await axios\n      .get(url)\n      .then((response) => {\n        let data = response.data;\n        let fullAddress = data.display_name;\n        console.log(\"geoorev\", data);\n        // set county, state (abbr) and zip to global state\n        let county = data.address.county;\n        let state = data.address.state;\n        let zip = data.address.postcode;\n        let stateAbbreviation = new StateAbbreviations();\n        let abbr = stateAbbreviation.getAbbreviation(state);\n        // console.log(\"Abbreviation: \", abbr);\n        // console.log(data.address.postcode);\n        // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n        setZoneState(data.address.postcode);\n        return fullAddress;\n      })\n      .then((fullAddress) => {\n        dispatch({\n          type: \"CHANGE_ADDRESS\",\n          data: { address: `${fullAddress}`, addressVerified: true },\n        });\n      })\n      .catch((error) => {\n        console.error(\"nominatim error code\", error.response.code);\n      });\n  };\n\n  const setZoneState = async (zip) => {\n    // console.log(zip);\n    await axios\n      .get(`https://phzmapi.org/${zip}.json`)\n      .then((response) => {\n        let data = response.data;\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n            // alert(zone);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then((zone) => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: \"Zone 2 & 3\",\n                zone: 2,\n              },\n            });\n          } else {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: `Zone ${zone}`,\n                zone: parseInt(zone),\n              },\n            });\n          }\n        } else {\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: \"Zone 7\",\n              zone: 7,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(\"phzmapi.org error: \", error);\n\n        // TODO:: Try anyther zip ?\n        // recursive zip trials\n        // if (error.response.status === 404) {\n        //   dispatch({\n        //     type: \"SNACK\",\n        //     data: {\n        //       snackOpen: true,\n        //       snackMessage: `Zone not found for ZIP: ${zip}`\n        //     }\n        //   });\n        // }\n      });\n  };\n  return <div id=\"map\" style={{ height: height, width: width }}></div>;\n};\n\nexport default MapComponent;\n","// TODO: Autocomplete feature is not yet implemented\n// WHY: https://operations.osmfoundation.org/policies/nominatim/ Doesn't allow the API usage for building auto-complete\n// Lancaster, Pennsylvania as default for PASA\n\nimport React, {\n  useState,\n  useEffect,\n  useContext,\n  useRef,\n  Fragment,\n} from \"react\";\n\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormControl,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  Link,\n} from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\nimport { Search } from \"@material-ui/icons\";\nimport Axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst AutoCompleteComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(false);\n  const [address, setAddress] = useState(state.address);\n  const [suggestedAddress, setSuggestedAddress] = useState({});\n\n  useEffect(() => {\n    if (state.zip === 0) {\n      setAddress(state.address);\n    } else setAddress(state.zip);\n  }, [state.address, state.addressSearchPreference, state.zip]);\n  const setBoundingBoxAndAddress = (val) => {\n    // set the polygon bounding box? OR lat long and address, then close the modal\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[parseFloat(val.lat), parseFloat(val.lon)]],\n      },\n    });\n    dispatch({\n      type: \"CHANGE_ADDRESS\",\n      data: {\n        address: val.display_name,\n        addressVerified: true,\n      },\n    });\n\n    handleClose();\n    console.log(val);\n  };\n\n  const handleToggle = () => {\n    // check if zip or address\n\n    if (state.addressSearchPreference === \"zip\") {\n      if (isNaN(address)) {\n        alert(\"Invalid ZIP Code\");\n      } else {\n        checkAddresses(address).then((data) => {\n          console.log(data[0]);\n          // let dataFloat = data[0].boundingbox.map((val) => {\n          //   return parseFloat(val);\n          // });\n\n          dispatch({\n            type: \"UPDATE_ZIP_CODE\",\n            data: {\n              zip: parseInt(address),\n            },\n          });\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: [[parseFloat(data[0].lat), parseFloat(data[0].lon)]],\n            },\n          });\n        });\n        // Axios.get(`https://geocode.xyz/${address}?geoit=json`).then(\n        //   (response) => {\n        //     console.log(response);\n        //     let val = response.data.standard;\n\n        //     // dispatch({\n        //     //   type: \"UPDATE_MARKER\",\n        //     //   data: {\n        //     //     markers: [[parseFloat(val.latt), parseFloat(val.lont)]],\n        //     //   },\n        //     // });\n        //   }\n        // );\n      }\n    } else {\n      if (address.length > 3) {\n        handleOpen();\n        // setOpen(true);\n        checkAddresses(address).then((addressData) => {\n          setSuggestedAddress(addressData);\n          console.log(addressData);\n        });\n      }\n    }\n  };\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleChange = (event) => {\n    setAddress(event.target.value);\n  };\n\n  const checkAddresses = async (query) => {\n    let url = `https://nominatim.openstreetmap.org/search?q=${query}&country=United%20States&format=json`;\n    let response = await fetch(url);\n    response = response.json();\n    return response;\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        BackdropComponent={Backdrop}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Suggested Locations</h2>\n            <div>\n              <p variant=\"body2\">\n                Server suggested {suggestedAddress.length}{\" \"}\n                {suggestedAddress.length > 1 ? \"addresses\" : \"address\"}\n              </p>\n              {suggestedAddress.length > 0 ? (\n                <ul>\n                  {suggestedAddress.map((val, index) => (\n                    <li key={index}>\n                      {\" \"}\n                      <Link\n                        component=\"button\"\n                        variant=\"body2\"\n                        color=\"secondary\"\n                        onClick={() => setBoundingBoxAndAddress(val)}\n                      >\n                        {val.display_name}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                \"\"\n              )}\n\n              <em>\n                If you don't find your location here, try typing a bit more\n              </em>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n      <FormControl\n        variant=\"filled\"\n        style={{ width: \"100%\" }}\n        className={classes.formControl}\n      >\n        <TextField\n          label=\"LOCATION\"\n          value={address}\n          onChange={handleChange}\n          fullWidth\n          aria-haspopup={true}\n          variant=\"filled\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton onClick={handleToggle}>\n                  <Search />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        ></TextField>\n      </FormControl>\n    </Fragment>\n  );\n};\n\nexport default AutoCompleteComponent;\n","import React, { useState, useContext } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { GreenSwitch } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\n\nconst LocationToggleComponent = (props) => {\n  const [defaultValue, setDefaultValue] = useState(\"address\");\n  const [state, dispatch] = useContext(Context);\n  const children = [\n    <ToggleButton\n      key={1}\n      value=\"address\"\n      selected={state.addressSearchPreference === \"address\" ? true : false}\n    >\n      Address\n    </ToggleButton>,\n    <ToggleButton\n      key={2}\n      value=\"zip\"\n      selected={state.addressSearchPreference === \"zip\" ? true : false}\n    >\n      ZIP Code\n    </ToggleButton>,\n  ];\n\n  const handleChange = (e, value) => {\n    setDefaultValue(value);\n    dispatch({\n      type: \"UPDATE_ADDRESS_SEARCH_PREFERENCE\",\n      data: {\n        addressSearchPreference: value,\n      },\n    });\n  };\n  return (\n    <ToggleButtonGroup\n      size=\"small\"\n      value={defaultValue}\n      exclusive\n      onChange={handleChange}\n      color=\"secondary\"\n    >\n      {children}\n    </ToggleButtonGroup>\n  );\n};\n\nexport default LocationToggleComponent;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polygon,\n  TileLayer,\n  Tooltip,\n} from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Search from \"react-leaflet-search\";\n\nimport { Context } from \"../../store/Store\";\n\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"../../styles/map.scss\";\nconst { BaseLayer, Overlay } = LayersControl;\n\nconst MapContext = ({ width, height, minzoom, maxzoom, from }) => {\n  const [state, dispatch] = useContext(Context);\n  const [show, setShow] = useState(true);\n  const [mapCenter, setMapCenter] = useState([]);\n  const [isPoly, setIsPoly] = useState(false);\n  const [showEditControl, setShowEditControl] = useState(true);\n\n  useEffect(() => {\n    if (from === \"location\") {\n      setShowEditControl(true);\n    } else {\n      setShowEditControl(false);\n    }\n  }, [from]);\n\n  const clearMarkers = () => {\n    // default the markers\n  };\n  const updateGlobalMarkers = (markersArray, type = \"\") => {\n    // console.log(markersArray);\n    if (type === \"marker\") {\n      setIsPoly(false);\n    } else {\n      setIsPoly(true);\n    }\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: markersArray,\n      },\n    });\n    dispatch({\n      type: \"SNACK\",\n      data: {\n        snackOpen: true,\n        snackMessage: \"Your location has been saved.\",\n      },\n    });\n  };\n\n  useEffect(() => {\n    setMapCenter(state.markers[0]);\n    if (state.markers.length === 1) {\n      // marker\n      setIsPoly(false);\n    } else {\n      // polygon\n      setIsPoly(true);\n    }\n  }, [state.markers]);\n  const [editableFG, setEditableFG] = useState(null);\n  const onFeatureGroupReady = (reactFGref) => {\n    // store the featureGroup ref for future access to content\n    setEditableFG(reactFGref);\n  };\n  const onCreated = (e) => {\n    const drawnItems = editableFG.leafletElement._layers;\n    // if the number of layers is bigger than 1 then delete the first\n    // console.log(drawnItems);\n    if (Object.keys(drawnItems).length > 1) {\n      Object.keys(drawnItems).forEach((layerid, index) => {\n        if (index > 0) return;\n\n        const layer = drawnItems[layerid];\n        editableFG.leafletElement.removeLayer(layer);\n        setShow(false);\n      });\n      if (e.layerType === \"marker\") {\n        const lat = e.layer._latlng.lat;\n        const lng = e.layer._latlng.lng;\n        // console.log([lat, lng]);\n        updateGlobalMarkers([[lat, lng]], \"marker\");\n      } else if (e.layerType === \"polygon\") {\n        const latlngs = e.layer._latlngs;\n        let markers = [];\n        latlngs.map((latlngArr, index) => {\n          latlngArr.map((latlng, index) => {\n            // console.log(latlng);\n            markers.push([latlng.lat, latlng.lng]);\n          });\n        });\n        // console.log(markers);\n        updateGlobalMarkers(markers, \"poly\");\n      } else {\n      }\n    }\n\n    // // setNewDraw(!newDraw);\n  };\n\n  return mapCenter.length > 0 ? (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Map\n          minZoom={minzoom}\n          zoom={15}\n          maxZoom={maxzoom}\n          center={isPoly ? getPolyCenter(state.markers) : mapCenter}\n          style={{ width: width, height: height }}\n        >\n          {/* {showEditControl ? (\n            <Search\n              className=\"custom-search-box\"\n              position=\"topleft\"\n              provider=\"OpenStreetMap\"\n              providerOptions={{ region: \"us\" }}\n              closeResultsOnClick={true}\n            />\n          ) : (\n            \"\"\n          )} */}\n\n          <FeatureGroup\n            ref={(featureGroupRef) => {\n              onFeatureGroupReady(featureGroupRef);\n            }}\n          >\n            {showEditControl ? (\n              <EditControl\n                edit={{ edit: false }}\n                position=\"topleft\"\n                onEdited={(e) => {\n                  //   console.log(\"edited\", e);\n                }}\n                onCreated={onCreated}\n                onDeleted={(e) => {\n                  console.log(\"deleted\", e);\n                }}\n                draw={{\n                  rectangle: false,\n                  circle: false,\n                  circlemarker: false,\n                  line: false,\n                  polygon: {\n                    allowIntersection: false,\n                    showArea: true,\n                    metric: false,\n                  },\n                  polyline: false,\n                  allowIntersection: false,\n                }}\n              />\n            ) : (\n              \"\"\n            )}\n            {show ? (\n              isPoly ? (\n                <Polygon positions={state.markers}>\n                  <Tooltip>Your Field</Tooltip>\n                </Polygon>\n              ) : (\n                <Marker position={state.markers[0]}>\n                  <Tooltip>Your Field</Tooltip>\n                </Marker>\n              )\n            ) : (\n              \"\"\n            )}\n          </FeatureGroup>\n          <TileLayer\n            attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          />\n        </Map>\n      </div>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default MapContext;\n\n// Compute and return center of a polygon\n// accepts [[number][number]...[number]]\n// returns [number, number]\nconst getPolyCenter = (arr) => {\n  var x = arr.map((x) => x[0]);\n  var y = arr.map((x) => x[1]);\n  var cx = (Math.min(...x) + Math.max(...x)) / 2;\n  var cy = (Math.min(...y) + Math.max(...y)) / 2;\n  return [cx, cy];\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/location.scss\";\n\n// import { cloudIcon } from \"../../shared/constants\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  makeStyles,\n  Typography,\n  // TextField,\n  // withStyles,\n  // Button\n} from \"@material-ui/core\";\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axios from \"axios\";\nimport MapComponent from \"./Map\";\nimport LiveLocation from \"./LiveLocation\";\nimport AutoComplete from \"./AutoComplete\";\nimport LocationToggleComponent from \"./LocationToggle\";\nimport MapContext from \"./MapContext\";\nimport { Search } from \"@material-ui/icons\";\n// import { Link, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst LocationComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n\n  const handleAddressChangeByText = (event) => {\n    console.log(event.target.value);\n    dispatch({\n      type: \"CHANGE_ADDRESS_BY_TYPING\",\n      data: {\n        address: event.target.value,\n        showAddressChangeBtn: true,\n      },\n    });\n  };\n\n  const updateAddressOnClick = async () => {\n    // update the new text address from state to map with a new marker!\n\n    // get currect address from state\n    var q = state.address;\n    // https://nominatim.openstreetmap.org/search/?q=1139%20crab%20orchard%20drive&format=json\n    await axios\n      .get(`https://nominatim.openstreetmap.org/search/?q=${q}&format=json`)\n      .then((response) => {\n        let data = response.data;\n        // console.log(data);\n        if (data.length === 1) {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              markers: [[data[0].lat, data[0].lon]],\n              zoom: 15,\n              addressVerified: true,\n              address: data[0].display_name,\n              snackOpen: true,\n              snackMessage: \"Address Updated\",\n            },\n          });\n          // th;\n          //   this.setState({\n          //     markers: [[data[0].lat, data[0].lon]],\n          //     zoom: 15,\n          //     addressVerified: true,\n          //     address: data[0].display_name\n          //   });\n        } else {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              address: \"\",\n              addressVerified: false,\n              snackOpen: true,\n              snackMessage: \"Please complete the address\",\n            },\n          });\n        }\n\n        // let latlng = data.display_name;\n        // this.setState({\n        //   address: latlng\n        // });\n        // let latlng = data.results.map((latlng) => {\n\n        // })\n      })\n      .then(() => {\n        dispatch({\n          action: \"TOGGLE_ADDRESS_CHANGE_BUTTON\",\n          data: {\n            showAddressChangeBtn: false,\n          },\n        });\n      });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row boxContainerRow\" style={{ minHeight: \"520px\" }}>\n        <div className=\"col-xl-6 col-lg-12\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <Typography variant=\"h3\">\n                  Where is your field located?\n                </Typography>\n              </div>\n            </div>\n            <div className=\"row pt-3\">\n              <div className=\"col-12\">\n                <Typography variant=\"body1\" align=\"left\">\n                  Enter your USDA plant hardiness zone, address, or zip code and\n                  hit <Search fontSize=\"inherit\" /> to determine your location.\n                  Then click{\" \"}\n                  <img\n                    height=\"20\"\n                    width=\"20\"\n                    src=\"/images/icons/pentagon.png\"\n                  />{\" \"}\n                  to draw your field boundary on the map.\n                </Typography>\n                <Typography variant=\"body1\" align=\"left\" className=\"pt-2\">\n                  Plant hardiness zone, address, or zip code will return the\n                  most general recommendations, whereas drawing your field on\n                  the map will return the most site-specific recommendations.\n                </Typography>\n                {/* <p style={{ fontSize: \"18px\" }}>\n                  \n                </p> */}\n              </div>\n            </div>\n            <div className=\"row pt-3 mt-4\">\n              <div className=\"col-md-6 col-lg-6 col-sm-12 col-12\">\n                <FormControl\n                  variant=\"filled\"\n                  style={{ width: \"100%\" }}\n                  className={classes.formControl}\n                >\n                  <InputLabel>PLANT HARDINESS ZONE</InputLabel>\n                  <Select\n                    variant=\"filled\"\n                    labelId=\"plant-hardiness-zone-dropdown-select\"\n                    id=\"plant-hardiness-zone-dropdown-select\"\n                    style={{\n                      textAlign: \"left\",\n                    }}\n                    onChange={(event) => {\n                      //   console.log(\"evvt\" + event.target.);\n                      if (event.target.value === 3) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 3\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 4) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 4\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 5) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 5\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 6) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 6\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 7\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      }\n                    }}\n                    value={state.zone}\n                  >\n                    <MenuItem value={0}>\n                      <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={3} key={3}>\n                      Zone 3\n                    </MenuItem>\n                    <MenuItem value={4} key={4}>\n                      Zone 4\n                    </MenuItem>\n                    <MenuItem value={5} key={5}>\n                      Zone 5\n                    </MenuItem>\n                    <MenuItem value={6} keuy={6}>\n                      Zone 6\n                    </MenuItem>\n                    <MenuItem value={7} key={7}>\n                      Zone 7\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n                {/* <div className=\"col-md-12 row\">\n                  <LiveLocation />\n                </div> */}\n              </div>\n              <div className=\"col-md-6 col-sm-12 row\">\n                <AutoComplete />\n                <div className=\"col-md-12 text-left\">\n                  <LocationToggleComponent />\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div\n                className=\"col-md-6 offset-md-6 col-sm-12 row\"\n                style={{ textAlign: \"left\" }}\n              ></div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6 offset-md-6 col-sm-12\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-6 col-lg-12\">\n          {/* <MapComponent width=\"100%\" height=\"100%\" minzoom={4} maxzoom={20} /> */}\n          <MapContext\n            width=\"100%\"\n            height=\"400px\"\n            minzoom={4}\n            maxzoom={20}\n            from=\"location\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationComponent;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton, ReferenceTooltip } from \"../../shared/constants\";\n// import Slider from \"@material-ui/core/Slider\";\nimport {\n  Cloud,\n  Info,\n  Opacity,\n  AcUnit,\n  WbSunny,\n  WbSunnyOutlined,\n} from \"@material-ui/icons\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  //   FormControlLabel,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  CircularProgress,\n  Tooltip,\n  Link,\n} from \"@material-ui/core\";\n\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport WeatherModal from \"./WeatherModal\";\n\nconst isEquivalent = (a, b) => {\n  // Create arrays of property names\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  // If number of properties is different,\n  // objects are not equivalent\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    // If values of same property are not equal,\n    // objects are not equivalent\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n\n  // If we made it this far, objects\n  // are considered equivalent\n  return true;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nconst WeatherConditions = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [didChange, setDidChange] = useState(false);\n  const [anyValuesChanged, setAnyValuesChanged] = useState(false);\n  const [caller, setCaller] = React.useState(\"\");\n\n  const [weatherDataShadow, setWeatherDataShadow] = useState(state.weatherData);\n\n  const [lastFrostDayHelper, setLastFrostDayHelper] = useState(\"\");\n  const [firstFrostDayHelper, setFirstFrostDayHelper] = useState(\"\");\n  const [firstFrostDayError, setFirstFrostDayError] = useState(false);\n  const [lastFrostDayError, setLastFrostDayError] = useState(false);\n\n  useEffect(() => {\n    if (!state.ajaxInProgress) {\n      setWeatherDataShadow(state.weatherData);\n    }\n  }, [state.ajaxInProgress]);\n\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual,\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n  const [open, setOpen] = useState(false);\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n    setFirstFrostDayError(false);\n    setLastFrostDayError(false);\n    setFirstFrostDayHelper(\"\");\n    setLastFrostDayHelper(\"\");\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay,\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay,\n        },\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual, //inches\n      },\n      frostFreeDays: frostFreeDays,\n    };\n\n    if (firstFrostDay > 31 || firstFrostDay <= 0) {\n      setFirstFrostDayError(true);\n      setFirstFrostDayHelper(\"Invalid Day\");\n    } else if (lastFrostDay > 31 || lastFrostDay <= 0) {\n      setLastFrostDayError(true);\n      setLastFrostDayHelper(\"Invalid Day\");\n    } else {\n      setDidChange(true);\n      dispatch({\n        type: \"UPDATE_WEATHER_CONDITIONS\",\n        data: { weatherData: broadcastObject },\n      });\n      setOpen(false);\n    }\n\n    // data incorrect\n\n    // show error on modal\n  };\n\n  const setDefaultWeatherValues = () => {\n    dispatch({\n      type: \"WEATHER_DATA_RESET\",\n      data: { weatherDataReset: !state.weatherDataReset },\n    });\n    setDidChange(!didChange);\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n\n    setFirstFrostMonth(state.weatherData.averageFrost.firstFrostDate.month);\n    setFirstFrostDay(state.weatherData.averageFrost.firstFrostDate.day);\n    setLastFrostDay(state.weatherData.averageFrost.lastFrostDate.day);\n    setLastFrostMonth(state.weatherData.averageFrost.lastFrostDate.month);\n\n    setAveragePrecipitation({\n      thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n      annual: state.weatherData.averagePrecipitation.annual,\n    });\n\n    setFrostFreeDays(state.weatherData.frostFreeDays);\n\n    if (props.caller) {\n      setCaller(props.caller);\n    } else {\n      setCaller(\"\");\n    }\n  }, [state.weatherData, props.caller]);\n\n  const handleModalOpen = () => {\n    setOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n  const checkIfAnythingChanged = () => {\n    if (\n      firstFrostMonth === weatherDataShadow.averageFrost.firstFrostDate.month &&\n      parseInt(firstFrostDay) ===\n        parseInt(weatherDataShadow.averageFrost.firstFrostDate.day) &&\n      lastFrostMonth === weatherDataShadow.averageFrost.lastFrostDate.month &&\n      lastFrostDay === weatherDataShadow.averageFrost.lastFrostDate.day &&\n      parseFloat(averagePrecipitation.thisMonth) ===\n        parseFloat(weatherDataShadow.averagePrecipitation.thisMonth) &&\n      parseFloat(averagePrecipitation.annual) ===\n        parseFloat(weatherDataShadow.averagePrecipitation.annual) &&\n      parseInt(frostFreeDays) === parseInt(weatherDataShadow.frostFreeDays)\n    ) {\n      // return false;\n      setAnyValuesChanged(false);\n    } else {\n      // return true;\n      setAnyValuesChanged(true);\n    }\n  };\n\n  useEffect(() => {\n    // console.log(_.isEqual(state.weatherData, weatherDataShadow));\n    if (!state.ajaxInProgress) {\n      checkIfAnythingChanged();\n    }\n  }, [\n    weatherDataShadow,\n    state.ajaxInProgress,\n    firstFrostDay,\n    firstFrostMonth,\n    lastFrostDay,\n    lastFrostMonth,\n    averagePrecipitation,\n    frostFreeDays,\n  ]);\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Typography variant=\"h3\" align=\"left\">\n          Weather Conditions?\n        </Typography>\n      </div>\n      <div className=\"mt-2 col-12 text-left\">\n        <Typography\n          variant=\"button\"\n          className={`font-weight-bold text-uppercase text-left ${\n            anyValuesChanged ? `text-danger` : ``\n          }`}\n          onClick={handleModalOpen}\n          style={{ cursor: \"pointer\" }}\n        >\n          &nbsp;Click To Edit\n          {anyValuesChanged ? `, values changed` : \"\"}\n        </Typography>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <Opacity />\n            &nbsp; Average Precipitation &nbsp;{\" \"}\n            <Tooltip\n              arrow\n              interactive\n              placement=\"right\"\n              title={\n                <div>\n                  Five-year average monthly and annual precipitation from the\n                  Precision Sustainable Agriculture Weather API powered by{\" \"}\n                  <a\n                    href=\"https://www.nssl.noaa.gov/projects/mrms/\"\n                    target=\"_blank\"\n                  >\n                    NSSL MRMS\n                  </a>{\" \"}\n                  and{\" \"}\n                  <a href=\"\" target=\"_blank\">\n                    NASA NLDAS-2\n                  </a>{\" \"}\n                  weather data.\n                </div>\n              }\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip>\n          </Typography>\n        </div>\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{currentMonthFull.toUpperCase()}:</span> &nbsp;\n            {state.weatherData.averagePrecipitation.thisMonth} inches\n          </Typography>\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Annual\"}:</span> &nbsp;\n            {state.weatherData.averagePrecipitation.annual} inches\n          </Typography>\n        </div>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <AcUnit />\n            &nbsp; Average Frost Dates &nbsp;{\" \"}\n            {/* <Tooltip\n              dangerouslySetInnerHTML={\n                \"Average dates of the first and last frosts for your location, based on frost dates for the last five years from University of Georgia’s Weather App; you may manually change this input.\"\n              }\n            ></Tooltip> */}\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div>\n                  Average dates of the first and last frosts for your location,\n                  based on frost dates for the last five years from the\n                  Precision Sustainable Agriculture Weather API powered by{\" \"}\n                  <a\n                    href=\"https://www.nssl.noaa.gov/projects/mrms/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    NSSL MRMS{\" \"}\n                  </a>{\" \"}\n                  and{\" \"}\n                  <a\n                    href=\"https://ldas.gsfc.nasa.gov/nldas/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    NASA NLDAS-2\n                  </a>{\" \"}\n                  weather data; you may manually change this input.\n                </div>\n              }\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip>\n          </Typography>\n        </div>\n\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"First Frost Date\"}:</span> &nbsp;\n            {`${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day}`}\n          </Typography>\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Last Frost Date\"}:</span> &nbsp;\n            {`${state.weatherData.averageFrost.lastFrostDate.month} ${state.weatherData.averageFrost.lastFrostDate.day}`}\n          </Typography>\n        </div>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <WbSunnyOutlined />\n            &nbsp; Average Frost Free Days &nbsp;{\" \"}\n            <Tooltip\n              arrow\n              interactive\n              placement=\"right\"\n              title={\n                <div>\n                  Number of days in your growing season, based on average first\n                  and last frost dates for the last five years from the\n                  Precision Sustainable Agriculture Weather API powered by{\" \"}\n                  <a\n                    href=\"https://www.nssl.noaa.gov/projects/mrms/\"\n                    target=\"_blank\"\n                  >\n                    NSSL MRMS\n                  </a>{\" \"}\n                  and{\" \"}\n                  <a href=\"\" target=\"_blank\">\n                    NASA NLDAS-2\n                  </a>{\" \"}\n                  weather data.\n                </div>\n              }\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip>\n          </Typography>\n        </div>\n\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Frost Free Days\"}:</span> &nbsp;\n            {state.weatherData.frostFreeDays}\n          </Typography>\n        </div>\n      </div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"ransition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={`modalContainer ${classes.paper}`}>\n            <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n            <div id=\"transition-modal-description\">\n              <div className=\"container-fluid\">\n                <FormGroup>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Average Frost Dates</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"age-native-simple\">\n                          First Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"First Frost Month\"\n                          native\n                          value={firstFrostMonth}\n                          onChange={(event) => {\n                            setFirstFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"age\",\n                            id: \"age-native-simple\",\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option\n                              value={moment(val, \"MMM\").format(\"MMMM\")}\n                              key={key}\n                            >\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                        {firstFrostMonth !==\n                        weatherDataShadow.averageFrost.firstFrostDate.month ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setFirstFrostMonth(\n                                weatherDataShadow.averageFrost.firstFrostDate\n                                  .month\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography variant=\"body2\">\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"First Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          multiline={true}\n                          helperText={firstFrostDayHelper}\n                          error={firstFrostDayError}\n                          maxLength={2}\n                          id=\"margin-none\"\n                          value={firstFrostDay}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFirstFrostDay(\"\");\n                              } else\n                                setFirstFrostDay(parseInt(event.target.value));\n                            } else {\n                              setFirstFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(firstFrostDay) !==\n                        parseInt(\n                          weatherDataShadow.averageFrost.firstFrostDate.day\n                        ) ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setFirstFrostDay(\n                                parseInt(\n                                  weatherDataShadow.averageFrost.firstFrostDate\n                                    .day\n                                )\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"last-frost-month\">\n                          Last Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"Last Frost Month\"\n                          native\n                          value={lastFrostMonth}\n                          onChange={(event) => {\n                            setLastFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"last-frost-month\",\n                            id: \"last-frost-month\",\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option\n                              value={moment(val, \"MMM\").format(\"MMMM\")}\n                              key={key}\n                            >\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                        {lastFrostMonth !==\n                        weatherDataShadow.averageFrost.lastFrostDate.month ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setLastFrostMonth(\n                                weatherDataShadow.averageFrost.lastFrostDate\n                                  .month\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography variant=\"body2\">\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"Last Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          helperText={lastFrostDayHelper}\n                          error={lastFrostDayError}\n                          multiline={true}\n                          maxLength={2}\n                          value={lastFrostDay}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setLastFrostDay(\"\");\n                              } else\n                                setLastFrostDay(parseInt(event.target.value));\n                            } else {\n                              setLastFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(lastFrostDay) !==\n                        parseInt(\n                          weatherDataShadow.averageFrost.lastFrostDate.day\n                        ) ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setLastFrostDay(\n                                parseInt(\n                                  weatherDataShadow.averageFrost.lastFrostDate\n                                    .day\n                                )\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">\n                        Average Precipitation\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={currentMonthFull}\n                          type=\"number\"\n                          inputProps={{ min: \"1\", max: \"100\", step: \"0.01\" }}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.thisMonth}\n                          onChange={(event) => {\n                            setAveragePrecipitation({\n                              ...averagePrecipitation,\n                              thisMonth:\n                                event.target.value === \"\"\n                                  ? 0\n                                  : event.target.value,\n                            });\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseFloat(averagePrecipitation.thisMonth) !==\n                        parseFloat(\n                          weatherDataShadow.averagePrecipitation.thisMonth\n                        ) ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setAveragePrecipitation({\n                                thisMonth: parseFloat(\n                                  weatherDataShadow.averagePrecipitation\n                                    .thisMonth\n                                ),\n                                annual: parseFloat(averagePrecipitation.annual),\n                              })\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Annual\"}\n                          type=\"number\"\n                          inputProps={{ min: \"1\", max: \"100\", step: \"0.01\" }}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.annual}\n                          onChange={(event) => {\n                            setAveragePrecipitation({\n                              ...averagePrecipitation,\n                              annual:\n                                event.target.value === \"\"\n                                  ? 0\n                                  : parseFloat(event.target.value),\n                            });\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseFloat(averagePrecipitation.annual) !==\n                        parseFloat(\n                          weatherDataShadow.averagePrecipitation.annual\n                        ) ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setAveragePrecipitation({\n                                thisMonth: parseFloat(\n                                  averagePrecipitation.thisMonth\n                                ),\n                                annual: parseFloat(\n                                  weatherDataShadow.averagePrecipitation.annual\n                                ),\n                              })\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Frost Free Days</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Frost Free Days\"}\n                          type=\"number\"\n                          step=\"0.01\"\n                          multiline={true}\n                          maxLength={4}\n                          value={frostFreeDays}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFrostFreeDays(0);\n                              } else\n                                setFrostFreeDays(parseInt(event.target.value));\n                            } else {\n                              setFrostFreeDays(0);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(frostFreeDays) !==\n                        parseInt(weatherDataShadow.frostFreeDays) ? (\n                          <Button\n                            className=\"text-danger\"\n                            size=\"small\"\n                            onClick={() =>\n                              setFrostFreeDays(\n                                parseInt(weatherDataShadow.frostFreeDays)\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\"></div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <LightButton\n                        disabled={modalBtnDisabled}\n                        onClick={validateAndBroadcastModalData}\n                      >\n                        update\n                      </LightButton>\n                    </div>\n                  </div>\n                </FormGroup>\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n};\n\nexport default WeatherConditions;\n\nconst isObject = (v) => v && typeof v === \"object\";\n\nfunction getDifference(a, b) {\n  return Object.assign(\n    ...Array.from(new Set([...Object.keys(a), ...Object.keys(b)]), (k) => ({\n      [k]:\n        isObject(a[k]) && isObject(b[k])\n          ? getDifference(a[k], b[k])\n          : a[k] === b[k],\n    }))\n  );\n}\n","import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n} from \"@material-ui/core\";\n\nimport moment from \"moment\";\nimport { Context } from \"../../store/Store\";\nimport { LightButton } from \"../../shared/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nconst WeatherModal = (props) => {\n  const classes = useStyles();\n\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(props.open);\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual,\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay,\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay,\n        },\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual, //inches\n      },\n      frostFreeDays: frostFreeDays,\n    };\n\n    // boardcast and close modal\n\n    dispatch({\n      type: \"UPDATE_WEATHER_CONDITIONS\",\n      data: { weatherData: broadcastObject },\n    });\n\n    setOpen(!open);\n\n    // data incorrect\n\n    // show error on modal\n  };\n  const handleModalOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n  }, []);\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <div className={`modalContainer ${classes.paper}`}>\n          <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n          <div id=\"transition-modal-description\">\n            <div className=\"container-fluid\">\n              <FormGroup>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Frost Dates</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"age-native-simple\">\n                        First Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"First Frost Month\"\n                        native\n                        value={firstFrostMonth}\n                        onChange={(event) => {\n                          setFirstFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"age\",\n                          id: \"age-native-simple\",\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={moment(val, \"MMM\").format(\"MMMM\")}>\n                            {val}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"First Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        id=\"margin-none\"\n                        value={firstFrostDay}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setFirstFrostDay(\"\");\n                            } else\n                              setFirstFrostDay(parseInt(event.target.value));\n                          } else {\n                            setFirstFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"last-frost-month\">\n                        Last Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"Last Frost Month\"\n                        native\n                        value={lastFrostMonth}\n                        onChange={(event) => {\n                          setLastFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"last-frost-month\",\n                          id: \"last-frost-month\",\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={val}>{val}</option>\n                        ))}\n                      </Select>\n                    </FormControl>\n\n                    {/* <TextField\n                        label=\"Last Frost Month\"\n                        id=\"margin-none\"\n                        defaultValue=\"Oct\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"Last Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        value={lastFrostDay}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setLastFrostDay(\"\");\n                            } else\n                              setLastFrostDay(parseInt(event.target.value));\n                          } else {\n                            setLastFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Last Frost Day\"\n                        id=\"margin-none\"\n                        defaultValue=\"13\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Precipitation</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={currentMonthFull}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.thisMonth}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(\n                                  state.weatherData.averagePrecipitation\n                                    .thisMonth\n                                ),\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(event.target.value),\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              thisMonth: parseFloat(\n                                state.weatherData.averagePrecipitation.thisMonth\n                              ),\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"November\"\n                        id=\"margin-none\"\n                        defaultValue=\"3.6 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={\"Annual\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.annual}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(\n                                  state.weatherData.averagePrecipitation.annual\n                                ),\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(event.target.value),\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              annual: parseFloat(\n                                state.weatherData.averagePrecipitation.annual\n                              ),\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Annual\"\n                        id=\"margin-none\"\n                        defaultValue=\"43 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Frost Free Days</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      {/* TODO */}\n                      <TextField\n                        label={\"Frost Free Days\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        value={frostFreeDays}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setFrostFreeDays(0);\n                            } else\n                              setFrostFreeDays(parseInt(event.target.value));\n                          } else {\n                            setFrostFreeDays(0);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Frost Free Days\"\n                        id=\"margin-none\"\n                        defaultValue=\"173\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\"></div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <LightButton\n                      disabled={modalBtnDisabled}\n                      onClick={validateAndBroadcastModalData}\n                    >\n                      update\n                    </LightButton>\n                  </div>\n                </div>\n              </FormGroup>\n            </div>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default WeatherModal;\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport {\n  Typography,\n  Chip,\n  Button,\n  Grid,\n  withStyles,\n  Switch,\n} from \"@material-ui/core\";\nimport {\n  Terrain,\n  LocalDrinkOutlined,\n  InvertColors,\n  WavesOutlined,\n} from \"@material-ui/icons\";\nimport { ReferenceTooltip, CustomStyles } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/soilConditions.scss\";\n\nconst AntSwitch = withStyles((theme) => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: \"flex\",\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    \"&$checked\": {\n      transform: \"translateX(12px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main,\n      },\n    },\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: \"none\",\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white,\n  },\n  checked: {},\n}))(Switch);\nconst SoilCondition = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { soilData, soilDataOriginal, markers } = state;\n  const [tilingCheck, setTilingCheck] = useState(false);\n\n  useEffect(() => {\n    // console.log(\"from soil file\");\n    let lat = markers[0][0];\n    let lon = markers[0][1];\n\n    if (soilDataOriginal.for) {\n      if (\n        soilDataOriginal.for.lat === lat &&\n        soilDataOriginal.for.lon === lon\n      ) {\n        // console.log(\"soil data exists\");\n      } else {\n        // console.log(\"markers changed\");\n        getSSURGOData(lat, lon);\n      }\n    } else {\n      //   console.log(\"no previous data\");\n      getSSURGOData(lat, lon);\n    }\n  }, [markers]);\n\n  const getSSURGOData = (lat, lon) => {\n    let markersCopy = markers;\n    // console.log(\"Inital: \", markers);\n\n    let longLatString = \"\";\n\n    markersCopy.map((val, i) => {\n      // get long lat formatted as requested by SSURGO (long lat, long lat, ...)\n      // saved as longLatString\n\n      if (i === markersCopy.length - 1) {\n        longLatString +=\n          markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\" + lon + \" \" + lat;\n      } else {\n        longLatString += markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\";\n      }\n    });\n    let soilDataQuery = \"\";\n\n    if (markersCopy.length > 1) {\n      soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, mp.mupolygonkey as MPKEY\n    FROM mapunit AS mu \n    INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey\n    INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey\n    WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))\n    AND\n    mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))`;\n    } else {\n      // point\n      soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, mp.mupolygonkey as MPKEY\n      FROM mapunit AS mu \n      INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey\n      INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey\n      WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('point (${lon} ${lat})'))\n      AND\n      mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('point (${lon} ${lat})'))`;\n    }\n\n    // console.log(soilDataQuery);\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    var urlencoded = new URLSearchParams();\n    urlencoded.append(\"query\", soilDataQuery);\n    urlencoded.append(\"format\", \"json+columnname\");\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: \"follow\",\n    };\n\n    dispatch({\n      type: \"TOGGLE_SOIL_LOADER\",\n      data: {\n        isSoilDataLoading: true,\n      },\n    });\n\n    fetch(\n      \"https://sdmdataaccess.sc.egov.usda.gov/Tabular/post.rest\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        // success\n        // console.log(\"SSURGO: \", result);\n\n        if (result !== {}) {\n          //   let Map_Unit_Name = result[\"Table\"][1][1];\n          //   let Drainage_Class = result[\"Table\"][1][2];\n          // if(result[\"Table\"][1] !)\n          let Flooding_Frequency = result[\"Table\"][1][3];\n          let Ponding_Frequency = result[\"Table\"][1][4];\n          let mapUnitString = \"\";\n\n          let stringSplit = [];\n\n          result[\"Table\"].map((el, index) => {\n            if (index !== 0) {\n              // if (index < result[\"Table\"].length) {\n              // mapUnitString += el[1].split(\",\") + \",\";\n              // } else {\n              if (stringSplit.indexOf(el[1].split(\",\")[0]) === -1) {\n                stringSplit.push(el[1].split(\",\")[0]);\n              }\n            }\n            // }\n          });\n\n          // console.log(stringSplit);\n          const filteredArr = stringSplit.filter((elm) => elm);\n          mapUnitString = filteredArr.join(\", \");\n\n          let floodingClasses = [];\n          result[\"Table\"].map((el, index) => {\n            if (index === 0 || el.indexOf(\"Water\") === 1) {\n            } else {\n              if (floodingClasses.indexOf(el[3]) === -1) {\n                floodingClasses.push(el[3]);\n              }\n            }\n          });\n\n          let drainageClasses = [];\n          result[\"Table\"].map((el, index) => {\n            if (index !== 0) {\n              if (drainageClasses.indexOf(el[2]) === -1) {\n                drainageClasses.push(el[2]);\n              }\n            }\n          });\n          drainageClasses = drainageClasses.filter(function (el) {\n            return el != null;\n          });\n          // console.log(drainageClasses);\n\n          dispatch({\n            type: \"UPDATE_SOIL_DATA\",\n            data: {\n              Map_Unit_Name: mapUnitString,\n              Drainage_Class: drainageClasses,\n              Flooding_Frequency: floodingClasses,\n              Ponding_Frequency: Ponding_Frequency,\n              for: { lat: lat, lon: lon },\n            },\n          });\n          dispatch({\n            type: \"UPDATE_SOIL_DATA_ORIGINAL\",\n            data: {\n              Map_Unit_Name: mapUnitString,\n              Drainage_Class: drainageClasses,\n              Flooding_Frequency: floodingClasses,\n              Ponding_Frequency: Ponding_Frequency,\n              for: { lat: lat, lon: lon },\n            },\n          });\n        }\n\n        dispatch({\n          type: \"TOGGLE_SOIL_LOADER\",\n          data: {\n            isSoilDataLoading: false,\n          },\n        });\n      })\n      .catch((error) => console.error(\"SSURGO FETCH ERROR\", error));\n  };\n\n  const updateDrainageClass = (label = \"\") => {\n    let drainages = [...state.soilData.Drainage_Class];\n    if (drainages.indexOf(label) === -1) {\n      // does not exist, dispatch to state\n      drainages.push(label);\n      dispatch({\n        type: \"UPDATE_DRAINAGE_CLASS\",\n        data: drainages,\n      });\n    } else {\n      // exists, remove it from state\n      let index = drainages.indexOf(label);\n      drainages.splice(index, 1);\n\n      dispatch({\n        type: \"UPDATE_DRAINAGE_CLASS\",\n        data: drainages,\n      });\n    }\n  };\n\n  const updateFloodingFrequency = (label = \"\") => {\n    let floodings = [...state.soilData.Flooding_Frequency];\n    if (floodings.indexOf(label) === -1) {\n      // does not exist, dispatch to state\n      floodings.push(label);\n      dispatch({\n        type: \"UPDATE_FLOODING_FREQUENCY\",\n        data: floodings,\n      });\n    } else {\n      // exists, remove it from state\n      let index = floodings.indexOf(label);\n      floodings.splice(index, 1);\n\n      dispatch({\n        type: \"UPDATE_FLOODING_FREQUENCY\",\n        data: floodings,\n      });\n    }\n  };\n\n  const resetFloodingOptions = () => {\n    dispatch({\n      type: \"UPDATE_FLOODING_FREQUENCY\",\n      data: soilDataOriginal.Flooding_Frequency,\n    });\n  };\n\n  const resetDrainageClasses = () => {\n    dispatch({\n      type: \"UPDATE_DRAINAGE_CLASS\",\n      data: soilDataOriginal.Drainage_Class,\n    });\n    window.localStorage.setItem(\n      \"drainage\",\n      JSON.stringify(soilDataOriginal.Drainage_Class)\n    );\n    setTilingCheck(false);\n  };\n  const RenderFloodingOptions = ({ flooding = [\"\"] }) => {\n    return (\n      <div className=\"text-left\">\n        <Chip\n          label=\"None\"\n          color={flooding.includes(\"None\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"None\");\n          }}\n        />\n        <Chip\n          label=\"Very Rare\"\n          color={flooding.includes(\"Very rare\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Very rare\");\n          }}\n        />\n        <Chip\n          label=\"Rare\"\n          color={flooding.includes(\"Rare\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Rare\");\n          }}\n        />\n        <Chip\n          label=\"Occasional\"\n          color={flooding.includes(\"Occasional\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Occasional\");\n          }}\n        />\n        <Chip\n          label=\"Frequent\"\n          color={flooding.includes(\"Frequent\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Frequent\");\n          }}\n        />\n        <Chip\n          label=\"Very Frequent\"\n          color={flooding.includes(\"Very frequent\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Very frequent\");\n          }}\n        />\n      </div>\n    );\n  };\n  const RenderDrainageClasses = ({ drainage = [\"\"] }) => {\n    return (\n      <div className=\"text-left\">\n        <Chip\n          label=\"Very Poorly Drained\"\n          color={\n            drainage.includes(\"Very poorly drained\") ? \"primary\" : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Very poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Poorly Drained\"\n          color={drainage.includes(\"Poorly drained\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Somewhat Poorly Drained\"\n          color={\n            drainage.includes(\"Somewhat poorly drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Somewhat poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Moderately Well Drained\"\n          color={\n            drainage.includes(\"Moderately well drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Moderately well drained\");\n          }}\n        />\n        <Chip\n          label=\"Well Drained\"\n          color={drainage.includes(\"Well drained\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Well drained\");\n          }}\n        />\n        <Chip\n          label=\"Somewhat Excessively Drained\"\n          color={\n            drainage.includes(\"Somewhat excessively drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Somewhat excessively drained\");\n          }}\n        />\n        <Chip\n          label=\"Excessively Drained\"\n          color={\n            drainage.includes(\"Excessively drained\") ? \"primary\" : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Excessively drained\");\n          }}\n        />\n      </div>\n    );\n  };\n\n  const [showTiling, setShowTiling] = useState(false);\n  useEffect(() => {\n    const checkArray = [\n      \"Very poorly drained\",\n      \"Poorly drained\",\n      \"Somewhat poorly drained\",\n    ];\n    if (checkArray.some((e) => soilData.Drainage_Class.includes(e))) {\n      setShowTiling(true);\n\n      // setTilingCheck(false);\n    }\n    window.localStorage.setItem(\n      \"drainage\",\n      JSON.stringify(soilData.Drainage_Class)\n    );\n  }, [soilData.Drainage_Class]);\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Typography variant=\"h3\" align=\"left\">\n          Soil Conditions?\n        </Typography>\n      </div>\n      <div className=\"col-12 pt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <Terrain />\n            &nbsp;SOILS COMPOSITION &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    The tool auto-completes your soil composition based on\n                    location and the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n        <div className=\"col-12 pt-2 row\">\n          <div className=\"col-12\">\n            <Typography\n              variant=\"body1\"\n              className=\"font-weight-bold\"\n              style={{ color: \"rgb(89, 132, 69)\" }}\n              align=\"left\"\n            >\n              {soilData.Map_Unit_Name}\n            </Typography>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-12 pt-2 mt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <LocalDrinkOutlined />\n            &nbsp;DRAINAGE CLASS &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    Indicates your soil drainage based on the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>{\" \"}\n                    drainage classes; you may modify your soil drainage by\n                    clicking below.{\" \"}\n                    <a\n                      href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/ref/?cid=nrcs142p2_054253\"\n                      target=\"_blank\"\n                    >\n                      {\" \"}\n                      Definitions of values found here\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n        {arrayEquals(\n          soilDataOriginal.Drainage_Class,\n          soilData.Drainage_Class\n        ) ? (\n          \"\"\n        ) : (\n          <div className=\"col-12 pt-2\">\n            <div className=\"col-12 row\">\n              <div className=\"col text-left\">\n                <Button\n                  size=\"small\"\n                  onClick={() => {\n                    resetDrainageClasses();\n                  }}\n                >\n                  <Typography\n                    className=\"text-danger text-uppercase font-weight-bold\"\n                    variant=\"button\"\n                  >\n                    Values changed, reset?\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"col-12\">\n          <RenderDrainageClasses drainage={soilData.Drainage_Class} />\n        </div>\n      </div>\n\n      {showTiling ? (\n        <div className=\"col-12 pt-2 mt-2 row\">\n          <div className=\"col-12\">\n            <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n              <InvertColors />\n              &nbsp;TILING &nbsp;\n              <ReferenceTooltip\n                type=\"text\"\n                content={\n                  \"Indicate if the field of interest has tile installed. If you have selected very poorly to somewhat poorly drained soils, selecting “yes” will increase your drainage class by one factor.\"\n                }\n              />\n            </Typography>\n          </div>\n          <div className=\"col-12 pt-2\">\n            <div className=\"pl-1 text-left\">\n              <Typography variant=\"body1\" display=\"inline\">\n                NO\n              </Typography>\n              <Switch\n                checked={tilingCheck}\n                onChange={(e) => {\n                  let soilDrainCopy = soilData.Drainage_Class;\n\n                  let drainSet = new Set(soilDrainCopy);\n                  // console.log(e.target.checked);\n                  if (e.target.checked) {\n                    // if(drainSet.has('Very poorly drained')) {\n                    //   drainSet.delete('Very poorly drained');\n                    //   drainSet.add('Poorly drained');\n                    // }\n                    // if(drainSet.has(''))\n                    if (\n                      drainSet.has(\"Very poorly drained\") &&\n                      drainSet.has(\"Poorly drained\") &&\n                      drainSet.has(\"Somewhat poorly drained\")\n                    ) {\n                      drainSet.delete(\"Very poorly drained\");\n                      drainSet.add(\"Moderately well drained\");\n                    } else {\n                      if (\n                        drainSet.has(\"Very poorly drained\") &&\n                        drainSet.has(\"Poorly drained\")\n                      ) {\n                        drainSet.delete(\"Very poorly drained\");\n                        drainSet.add(\"Somewhat poorly drained\");\n                      } else if (\n                        drainSet.has(\"Poorly drained\") &&\n                        drainSet.has(\"Somewhat poorly drained\")\n                      ) {\n                        drainSet.delete(\"Poorly drained\");\n                        drainSet.add(\"Moderately well drained\");\n                      } else if (\n                        drainSet.has(\"Very poorly drained\") &&\n                        drainSet.has(\"Somewhat poorly drained\")\n                      ) {\n                        drainSet.delete(\"Very poorly drained\");\n                        drainSet.delete(\"Somewhat poorly drained\");\n                        drainSet.add(\"Poorly drained\");\n                        drainSet.add(\"Moderately well drained\");\n                      } else if (drainSet.has(\"Very poorly drained\")) {\n                        drainSet.delete(\"Very poorly drained\");\n                        drainSet.add(\"Poorly drained\");\n                      } else if (drainSet.has(\"Poorly drained\")) {\n                        drainSet.delete(\"Poorly drained\");\n                        drainSet.add(\"Somewhat poorly drained\");\n                      } else if (drainSet.has(\"Somewhat poorly drained\")) {\n                        drainSet.delete(\"Somewhat poorly drained\");\n                        drainSet.add(\"Moderately well drained\");\n                      } else {\n                        drainSet.delete(\"Very poorly drained\");\n                        drainSet.delete(\"Poorly drained\");\n                        drainSet.delete(\"Somewhat poorly drained\");\n                        drainSet.add(\"Moderately well drained\");\n                      }\n                    }\n                    // console.log(drainSet);\n                    // dispatch({\n                    //   type: \"UPDATE_DRAINAGE_CLASS\",\n                    //   data: [...drainSet],\n                    // });\n                    window.localStorage.setItem(\n                      \"drainage\",\n                      JSON.stringify([...drainSet])\n                    );\n                  } else {\n                    // dispatch({\n                    //   type: \"UPDATE_DRAINAGE_CLASS\",\n                    //   data: soilDataOriginal.Drainage_Class,\n                    // });\n                    window.localStorage.setItem(\n                      \"drainage\",\n                      JSON.stringify(soilDataOriginal.Drainage_Class)\n                    );\n                  }\n\n                  setTilingCheck(!tilingCheck);\n                }}\n                name=\"checkedC\"\n              />\n              <Typography variant=\"body1\" display=\"inline\">\n                YES\n              </Typography>\n            </div>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"col-12 pt-2 mt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <WavesOutlined />\n            &nbsp;FLOODING FREQUENCY &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    The annual probability of a flood event based on the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>\n                    , where “flood” refers to the temporary inundation of an\n                    area caused by overflowing streams, by runoff from adjacent\n                    slopes, or by tides. You may modify your flooding frequency\n                    by clicking below.{\" \"}\n                    <a\n                      href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/ref/?cid=nrcs142p2_054253\"\n                      target=\"_blank\"\n                    >\n                      {\" \"}\n                      Definitions of values found here\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n\n        {arrayEquals(\n          soilData.Flooding_Frequency,\n          soilDataOriginal.Flooding_Frequency\n        ) ? (\n          \"\"\n        ) : (\n          <div className=\"col-12 pt-2\">\n            <div className=\"col-12 row\">\n              <div className=\"col text-left\">\n                <Button\n                  size=\"small\"\n                  onClick={() => {\n                    resetFloodingOptions();\n                  }}\n                >\n                  <Typography\n                    className=\"text-danger text-uppercase font-weight-bold\"\n                    variant=\"button\"\n                  >\n                    Values changed, reset?\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"col-12\">\n          <RenderFloodingOptions flooding={soilData.Flooding_Frequency} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SoilCondition;\n\nconst arrayEquals = (a = [], b = []) => {\n  a.sort();\n  b.sort();\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index])\n  );\n};\n","import React, { useEffect, useContext, Fragment, useState } from \"react\";\nimport { Context } from \"../../../store/Store\";\nimport {\n  zoneIcon,\n  greenBarExpansionPanelHeight,\n  CustomStyles,\n} from \"../../../shared/constants\";\nimport {\n  Button,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Typography,\n} from \"@material-ui/core\";\nimport FilterHdrIcon from \"@material-ui/icons/FilterHdr\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport moment from \"moment\";\nimport LocationComponent from \"../../Location/Location\";\nimport WeatherConditions from \"../../Location/WeatherConditions\";\nimport SoilCondition from \"../../Location/SoilCondition\";\nimport { LocationOn, Refresh } from \"@material-ui/icons\";\nimport \"../../../styles/greenBar.scss\";\n\nconst expansionPanelBaseStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nconst greenBarWrapperBackground = {\n  backgroundColor: CustomStyles().lighterGreen,\n};\n\nconst Greenbar = () => {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [expansionPanelComponent, setExpansionPanelComponent] = useState({\n    component: \"\",\n  });\n\n  useEffect(() => {\n    // console.log(\"---Greeenbar.js mounted---\");\n\n    // check if 'greenbarExpanded' === true. If it is true, it should enable\n    if (expansionPanelComponent.component !== \"\") {\n      // click anywhere outside the body of a div should close it\n      // alternatively we can have a close button somewhere in the expanded green bar\n    }\n    const greenBarParent = document.getElementById(\"greenBarParent\");\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    document.addEventListener(\"click\", (evt) => {\n      // const muiPopover = document.getElementsByClassName(\"MuiPopover-root\")[0];\n\n      let targetElement = evt.target;\n      // console.log(\n      //   targetElement.constructor.prototype === HTMLBodyElement.prototype\n      // );\n      do {\n        // console.log(\"inside do while\");\n        // console.log(targetElement);\n        if (targetElement == greenBarParent) {\n          // This is a click inside. Do nothing, just return.\n          // console.log(\"Clicked inside!.. do nothing\");\n          return;\n        }\n\n        // Go up the DOM\n        targetElement = targetElement.parentNode;\n        // if (targetElement.constructor.prototype === HTMLBodyElement.prototype) {\n        //   targetElement = greenBarParent;\n        // } else {\n        //   targetElement = targetElement.parentNode;\n        // }\n        // console.log(targetElement);\n      } while (targetElement);\n      // console.log(greenbarExpansionElement.getBoundingClientRect().height);\n      // if (greenbarExpansionElement.getBoundingClientRect().height) {\n      //   closeExpansionPanel();\n      // }\n      // This is a click outside.\n      // console.log(\"Clicked outside!\", targetElement);\n      // closeExpansionPanel();\n      // close the expansion panel\n      // slideToggle.slideToggle(greenbarExpansionElement, 300);\n      // can we have a close button somewhere ?\n      // greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      // greenbarExpansionElement.style.height = \"0px\";\n      // setExpansionPanelComponent({\n      //   component: \"\"\n      // });\n    });\n\n    return () => {\n      closeExpansionPanel();\n    };\n  }, []);\n\n  const getAddress = () => {\n    if (state.address === \"\") {\n      return \"\";\n    } else {\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleAddressBtnClick}\n          style={\n            expansionPanelComponent.component === \"location\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"location\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            <LocationOn />\n            &nbsp;Zone {state.zone}: {state.address}\n          </span>\n        </Button>\n      );\n    }\n  };\n\n  const getZone = () => {\n    return (\n      <Fragment>\n        <Button onClick={handleClick} className=\"greenbarBtn\">\n          {zoneIcon(20, 14)}\n          &nbsp;\n          {state.zone !== 3 ? `Zone ${state.zone}` : `Zone 3`}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleZoneDropdownClose}\n        >\n          <MenuItem onClick={handleZoneDropdownClose} value={3} key={3}>\n            Zone 3\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={4} key={4}>\n            Zone 4\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={5} key={5}>\n            Zone 5\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={6} key={6}>\n            Zone 6\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={7} key={7}>\n            Zone 7\n          </MenuItem>\n        </Menu>\n      </Fragment>\n    );\n  };\n  const closeExpansionPanel = () => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n    greenbarExpansionElement.style.minHeight = \"0px\";\n    setExpansionPanelComponent({\n      component: \"\",\n    });\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleAddressBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"location\" &&\n      greenbarExpansionElement.style.minHeight ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      closeExpansionPanel();\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.minHeight =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"location\",\n      });\n    }\n\n    // document.getElemen;\n    // }\n  };\n  const handleSoilBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"soil\" &&\n      greenbarExpansionElement.style.minHeight ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      closeExpansionPanel();\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.minHeight =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"soil\",\n      });\n    }\n  };\n\n  const handleWeatherBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n\n    if (\n      expansionPanelComponent.component === \"weather\" &&\n      greenbarExpansionElement.style.minHeight ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      closeExpansionPanel();\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.minHeight =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"weather\",\n      });\n    }\n  };\n  const getSoil = () => {\n    if (state.soilData.Flooding_Frequency === null) {\n      return \"\";\n    } else\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleSoilBtnClick}\n          style={\n            expansionPanelComponent.component === \"soil\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"soil\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            {<FilterHdrIcon />}\n            &nbsp;{\" \"}\n            {/* {`Soils: Map Unit Name (${state.soilData.Map_Unit_Name}%), Drainage Class: ${state.soilData.Drainage_Class}})`} */}\n            {`Soils: Drainage Class: ${state.soilData.Drainage_Class.toString()\n              .split(\",\")\n              .join(\", \")}`}\n          </span>\n        </Button>\n      );\n  };\n\n  const handleZoneDropdownClose = (event) => {\n    setAnchorEl(null);\n    let zoneText = \"\";\n    console.log(event.target.getAttribute(\"value\"));\n    let value = event.target.getAttribute(\"value\");\n\n    if (!isNaN(parseInt(value))) {\n      switch (parseInt(value)) {\n        case 3: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 4: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 5: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 6: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 7: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        default: {\n        }\n      }\n    }\n  };\n\n  const handleConfirmationChoice = (clearCoverCrops = false) => {\n    const defaultMarkers = [[40.78489145, -74.80733626930342]];\n\n    if (clearCoverCrops) {\n      dispatch({\n        type: \"RESET\",\n        data: {\n          markers: defaultMarkers,\n          selectedCrops: [],\n        },\n      });\n    } else {\n      dispatch({\n        type: \"RESET\",\n        data: {\n          markers: defaultMarkers,\n          selectedCrops: state.selectedCrops,\n        },\n      });\n    }\n\n    setConfirmationOpen(false);\n  };\n  const handleRestartBtn = () => {\n    setConfirmationOpen(true);\n  };\n  const [confirmationOpen, setConfirmationOpen] = useState(false);\n  const getWeatherData = () => {\n    // TODO: convert month to string, currently returning int\n    // let currentMonth = GetMonthString(month);\n    let currentMonth = moment().format(\"MMM\");\n    // frost free days :-\n    // http://128.192.142.200:3000/hourly?location=raleigh%20nc&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3E0&output=json\n    if (state.weatherData.length === 0) return \"\";\n    else\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleWeatherBtnClick}\n          style={\n            expansionPanelComponent.component === \"weather\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"weather\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            {<CloudIcon fontSize=\"small\" />}\n            &nbsp;{\" \"}\n            {`Avg First Frost: ${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day} | Avg Rain(${currentMonth}): ${state.weatherData.averagePrecipitation.thisMonth} in`}\n          </span>\n        </Button>\n      );\n  };\n  const [restartPrompt2, setRestartPrompt2] = useState(false);\n  return (\n    <div className=\"greenBarParent\" id=\"greenBarParent\">\n      <div className=\"greenBarWrapper\" style={greenBarWrapperBackground}>\n        <div className=\"addressBar\">\n          {state.progress > 0 && window.location.pathname === \"/\"\n            ? getAddress()\n            : \"\"}\n        </div>\n\n        <div className=\"soilBar\">\n          {state.progress > 1 && window.location.pathname === \"/\"\n            ? getSoil()\n            : \"\"}\n        </div>\n        <div className=\"weatherBar\">\n          {state.progress > 2 && window.location.pathname === \"/\"\n            ? getWeatherData()\n            : \"\"}\n        </div>\n        {state.progress > 0 && window.location.pathname === \"/\" ? (\n          <div className=\"restartBtnWrapper\">\n            <Button\n              className=\"greenbarBtn\"\n              onClick={() => {\n                closeExpansionPanel();\n                setConfirmationOpen(true);\n              }}\n            >\n              <Refresh />\n              &nbsp; Restart\n            </Button>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div\n        className=\"greenBarExpansionPanel container-fluid pl-0 pr-0\"\n        id=\"greenBarExpansionPanel\"\n        style={{}}\n      >\n        <div className=\"row justify-content-center align-items-center\">\n          <div\n            className={\n              expansionPanelComponent.component === \"location\"\n                ? `col-md-10`\n                : `col-md-6`\n            }\n          >\n            {expansionPanelComponent.component === \"location\" ? (\n              <LocationComponent />\n            ) : expansionPanelComponent.component === \"soil\" ? (\n              <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n                <div\n                  className=\"row boxContainerRow\"\n                  style={{ minHeight: \"526px\" }}\n                >\n                  <SoilCondition caller=\"greenbar\" />\n                </div>\n              </div>\n            ) : expansionPanelComponent.component == \"weather\" ? (\n              <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n                <div\n                  className=\"row boxContainerRow\"\n                  style={{ minHeight: \"526px\" }}\n                >\n                  <WeatherConditions caller=\"greenbar\" />\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n        <div\n          className=\"d-flex justify-content-center\"\n          style={\n            expansionPanelComponent.component === \"\"\n              ? { height: \"0px\" }\n              : { height: \"50px\" }\n          }\n        >\n          {expansionPanelComponent.component !== \"\" ? (\n            <div\n              className=\"pt-2 pb-2\"\n              style={{\n                position: \"absolute\",\n                bottom: \"-30px\",\n                textAlign: \"center\",\n                width: \"100%\",\n                background: \"linear-gradient(to top, #506147, #598344)\",\n              }}\n            >\n              <Button variant=\"contained\" onClick={closeExpansionPanel}>\n                Close\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n      <Dialog disableBackdropClick disableEscapeKeyDown open={restartPrompt2}>\n        {/* <DialogTitle>Clear My Cover Crop List?</DialogTitle> */}\n        <DialogContent dividers>\n          <Typography variant=\"body1\">\n            Would you also like to clear 'My Cover Crop List'?\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            autoFocus\n            onClick={() => {\n              setRestartPrompt2(false);\n            }}\n            color=\"secondary\"\n          >\n            No\n          </Button>\n          <Button\n            onClick={() => {\n              handleConfirmationChoice(true);\n              setRestartPrompt2(false);\n            }}\n            color=\"secondary\"\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog disableBackdropClick disableEscapeKeyDown open={confirmationOpen}>\n        <DialogContent dividers>\n          <Typography variant=\"body1\">\n            Are you sure you want to restart?\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            autoFocus\n            onClick={() => {\n              setConfirmationOpen(false);\n            }}\n            color=\"secondary\"\n          >\n            No\n          </Button>\n          <Button\n            onClick={() => {\n              // if (state.selectedCrops.length > 0) {\n              //   setRestartPrompt2(true);\n              // } else {\n              //   setRestartPrompt2(false);\n              //   handleConfirmationChoice(false);\n              // }\n              handleConfirmationChoice(true);\n            }}\n            color=\"secondary\"\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Greenbar;\n\nfunction timeout(delay = 0) {\n  return new Promise((res) => setTimeout(res, delay));\n}\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {\n  cloudIcon,\n  referenceTooltip,\n  ReferenceTooltip,\n} from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { InfoRounded, Info } from \"@material-ui/icons\";\nimport { Tooltip } from \"@material-ui/core\";\n\nconst apiBaseURL = \"https://api.openweathermap.org/data/2.5/weather\";\nconst apiBaseURL_weather_gov =\n  \"https://api.weather.gov/points/39.7456,-97.0892\";\nconst apiKey = \"***REMOVED***\";\n\nconst geocodeAuth = \"***REMOVED***\";\n\n// TODO: look at https://agromonitoring.com/ api\n\nconst ForecastComponent = () => {\n  const [state, dispatch] = useContext(Context);\n  const [showTempIcon, setShowTempIcon] = useState(true);\n  const [temp, setTemp] = useState({\n    min: 0,\n    max: 0,\n    unit: \"F\",\n    iconURL: `https://placehold.it/20x20`,\n    iconDescription: \"No Data\",\n  });\n  // const [loading, setLoading] = useState\n\n  useEffect(() => {\n    // console.log(\"---forecastComponent---\");\n    // console.log(\"new features\");\n    setShowFeatures();\n    // state.progress >= 1 ? setShowFeatures(true) : setShow(false);\n    // fetchOldApi().then(data => {\n    //   console.log(data);\n    //   let url = data.properties.forecast;\n    //   fetchOldApiRecords(url).then(data => {\n    //     console.log(\"forecast\", data);\n    //   });\n    // });\n  }, [state.markers, state.progress]);\n\n  //   const fetchOldApi = async () => {\n  //     return (await fetch(apiBaseURL_weather_gov)).json();\n  //   };\n\n  //   const fetchOldApiRecords = async url => {\n  //     return (await fetch(url, { cache: \"no-cache\", mode: \"no-cors\" })).json();\n  //   };\n\n  const setShowFeatures = () => {\n    if (state.markers.length > 0) {\n      let latlng = [];\n      try {\n        latlng = state.markers[0];\n      } catch (e) {\n        console.trace(\"Forecast Component\", e);\n\n        latlng = [];\n      }\n\n      let apiCall = callWeatherApi(apiBaseURL, latlng);\n\n      apiCall.then((data) => {\n        let iconId = data.weather[0].icon;\n        let iconDescription = new String(data.weather[0].description);\n\n        let tempObj = {\n          min: data.main.temp_min,\n          max: data.main.temp_max,\n          unit: \"F\",\n          iconURL: `https://openweathermap.org/img/w/${iconId}.png`,\n          iconDescription: iconDescription,\n        };\n        setTemp(tempObj);\n        setShowTempIcon(false);\n      });\n\n      // if (state.address === \"\") {\n      let data = reverseGEO(latlng[0], latlng[1]);\n      data\n        .then((data) => {\n          // if (data.success === false) {\n          //   // console.log(data);\n          //   if (data.error.code === \"006\") {\n          //     let delayInMs = 5000;\n          //     setTimeout(function () {\n          //       let data = reverseGEO(latlng[0], latlng[1]);\n          //       data\n          //         .then((data) => {\n          //           // console.log(data);\n          //           let addressString = ``;\n          //           if (data.staddress) {\n          //             addressString = `${data.staddress}, ${data.state}`;\n          //           }\n          //           dispatch({\n          //             type: \"CHANGE_ADDRESS\",\n          //             data: {\n          //               address: addressString,\n          //               addressVerified: true,\n          //             },\n          //           });\n          //         })\n          //         .catch((e) => {\n          //           console.error(\"recursive error\", e);\n          //         });\n          //     }, delayInMs);\n          //   }\n          // console.log(data);\n          // } else {\n\n          if (data.localityInfo.informative) {\n            let lastInfo =\n              data.localityInfo.informative[\n                data.localityInfo.informative.length - 1\n              ];\n            // console.log(lastInfo);\n            // let addressString = ``;\n            let addressString = `${lastInfo.name}, ${data.city}`;\n            dispatch({\n              type: \"CHANGE_ADDRESS\",\n              data: {\n                address: addressString,\n                addressVerified: true,\n              },\n            });\n          }\n          if (data.postcode) {\n            dispatch({\n              type: \"UPDATE_ZIP_CODE\",\n              data: {\n                zipCode: parseInt(data.postcode),\n              },\n            });\n          }\n        })\n        // }\n        // )\n        .catch((e) => {\n          console.error(\"Geocode.xyz:\", e);\n        });\n      // }\n    }\n  };\n\n  const callWeatherApi = async (url, latlng) => {\n    let fetchData = await fetch(makeURLString(url, latlng));\n    let jsonData = await fetchData.json();\n    return jsonData;\n  };\n\n  const makeURLString = (url, params) => {\n    return `${url}?lat=${params[0]}&lon=${params[1]}&appid=${apiKey}&units=imperial`;\n  };\n\n  const reverseGEO = async (lat, lng) => {\n    // let url = `https://geocode.xyz/${lat},${lng}?json=1;\n    let url = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}&localityLanguage=en`;\n    let data = await fetch(url);\n    data = data.json();\n\n    return data;\n    // let ltlng =\n  };\n\n  return state.progress >= 1 ? (\n    showTempIcon ? (\n      <Fragment>\n        Forecast:&nbsp;\n        {cloudIcon(14, 20)}&nbsp; Loading..\n      </Fragment>\n    ) : (\n      <Fragment>\n        Forecast:\n        <img\n          width=\"50\"\n          height=\"50\"\n          src={temp.iconURL}\n          alt={temp.iconDescription}\n          title={temp.iconDescription}\n        />\n        {Number(temp.max.toFixed(1))} | {Number(temp.min.toFixed(1))}&nbsp;\n        {temp.unit}\n        <span className=\"ml-2\">\n          <ReferenceTooltip\n            source={\"openweathermap.org\"}\n            url={\"https://openweathermap.org/\"}\n          />\n        </span>\n      </Fragment>\n    )\n  ) : (\n    \"\"\n  );\n};\n\nexport default ForecastComponent;\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/header.scss\";\nimport DateComponent from \"./DateComponent\";\nimport Greenbar from \"./Greenbar/Greenbar\";\nimport { abbrRegion, weatherApiURL } from \"../../shared/constants\";\nimport {\n  MDBNavbar,\n  MDBContainer,\n  MDBHamburgerToggler,\n  MDBCollapse,\n  MDBNavbarNav,\n  MDBNavItem,\n} from \"mdbreact\";\nimport { Button, Badge, Typography } from \"@material-ui/core\";\nimport { Redirect, Link, useHistory, NavLink } from \"react-router-dom\";\nimport ForecastComponent from \"./ForecastComponent\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nimport zone7Goal from \"../../shared/json/zone7/crop-goals.json\";\nimport zone6Goal from \"../../shared/json/zone6/crop-goals.json\";\nimport zone5Goal from \"../../shared/json/zone5/crop-goals.json\";\n\nconst Header = () => {\n  const theme = useTheme();\n  const matchesLGUp = useMediaQuery(theme.breakpoints.up(\"lg\"));\n  const matchesMDBelow = useMediaQuery(theme.breakpoints.between(\"xs\", \"sm\"));\n  let history = useHistory();\n  const [state, dispatch] = useContext(Context);\n  const [collapse, setCollapse] = React.useState(false);\n  const [isRoot, setIsRoot] = React.useState(false);\n  const [redirectToRoot, setRedirectToRoot] = React.useState(false);\n  let isActive = {};\n\n  // const getAddressFromMarkers = async (lat, lon) => {\n  //   return (await fetch(`https://geocode.xyz/${lat},${lon}?geoit=json`)).json();\n  // };\n  const getUSDAZone = async (zip) => {\n    return await fetch(`//covercrop.tools/zone.php?zip=` + zip);\n  };\n\n  useEffect(() => {\n    if (state.zipCode !== 0) {\n      getUSDAZone(state.zipCode)\n        .then((response) => {\n          let data = response.json();\n          data.then((data) => {\n            let zipCode = data.zip;\n            let zone = data.zone;\n\n            if (state.zipCode === parseInt(zipCode)) {\n              dispatch({\n                type: \"UPDATE_ZONE\",\n                data: {\n                  zoneText: `Zone ${zone}`,\n                  zone: parseInt(zone),\n                },\n              });\n            }\n          });\n        })\n        .catch((e) => {\n          console.error(e);\n        });\n    }\n  }, [state.zipCode]);\n\n  const getAverageFrostDates = async (url) => {\n    await Axios.get(url).then((resp) => {\n      try {\n        let totalYears = resp.data.length;\n        // get last years value\n        // TODO: Take all years data into account\n        let mostRecentYearData = resp.data[totalYears - 1];\n\n        let maxDate = mostRecentYearData[\"max(date)\"];\n        let minDate = mostRecentYearData[\"min(date)\"];\n\n        let averageFrostObject = {\n          firstFrostDate: {\n            month: moment(minDate).format(\"MMMM\"),\n            day: parseInt(moment(minDate).format(\"D\")),\n          },\n          lastFrostDate: {\n            month: moment(maxDate).format(\"MMMM\"),\n            day: parseInt(moment(maxDate).format(\"D\")),\n          },\n        };\n        // firstFrostDate: {\n        //   month: \"October\",\n        //   day: 21\n        // },\n        // lastFrostDate: {\n        //   month: \"April\",\n        //   day: 20\n        // }\n        dispatch({\n          type: \"UPDATE_AVERAGE_FROST_DATES\",\n          data: {\n            averageFrost: averageFrostObject,\n          },\n        });\n      } catch (e) {\n        console.error(\"Average Frost Dates API::\", e);\n      }\n    });\n  };\n\n  useEffect(() => {\n    let { markers } = state;\n\n    if (state.progress === 0) {\n    }\n\n    // update address on marker change\n    // ref forecastComponent\n\n    let lat = markers[0][0];\n    let lon = markers[0][1];\n\n    // since this updates with state; ideally, weather and soil info should be updated here\n\n    // get current lat long and get county, state and city\n\n    if (state.progress >= 2 && state.markers.length > 0) {\n      let revAPIURL = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`;\n\n      // console.log(revAPIURL);\n      // if(!state.ajaxInProgress)\n      // {\n\n      // }\n      Axios.get(revAPIURL)\n        .then(async (resp) => {\n          let city = resp.data.locality.toLowerCase();\n          let zip = resp.data.postcode;\n          let state = abbrRegion(\n            resp.data.principalSubdivision,\n            \"abbr\"\n          ).toLowerCase();\n\n          if (resp.data.postcode) {\n            dispatch({\n              type: \"UPDATE_ZIP_CODE\",\n              data: {\n                zipCode: parseInt(resp.data.postcode),\n              },\n            });\n          }\n\n          // call weather API to fetch details\n\n          // Get: Frost Free Days\n          // Dynamic Dates not set!\n          let frostFreeDaysURL = `${weatherApiURL}/hourly?location=${city}%20${state}&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3e0&output=json`;\n          let frostFreeDatesURL = `${weatherApiURL}/hourly?lat=${lat}&lon=${lon}&start=2014-07-01&end=2019-07-01&stats=min(date),max(date)&where=frost&group=growingyear&options=nomrms&output=json`;\n          // let frostFreeDaysURL = `http://128.192.142.200:3000/hourly?lat=${lat}&lon=${lon}&start=2014-07-01&end=2019-07-01&stats=min(date),max(date)&where=frost&group=growingyear&options=nomrms`;\n          let frostFreeDays = 0;\n\n          await Axios.get(frostFreeDaysURL)\n            .then((resp) => {\n              // console.log(resp);\n              getAverageFrostDates(frostFreeDatesURL);\n              let frostFreeDaysObject = resp.data[0];\n              for (var key in frostFreeDaysObject) {\n                if (frostFreeDaysObject.hasOwnProperty(key)) {\n                  // alert(key);\n                  frostFreeDays = frostFreeDaysObject[key];\n                }\n              }\n              return { frostFreeDays: frostFreeDays, city: city, state: state };\n            })\n            .then((obj) => {\n              // console.log(obj.frostFreeDays);\n              dispatch({\n                type: \"UPDATE_FROST_FREE_DAYS\",\n                data: { frostFreeDays: obj.frostFreeDays },\n              });\n\n              return obj;\n            })\n            .then(async (obj) => {\n              let currentMonthInt = moment().month() + 1;\n\n              // What was the 5-year average rainfall for city st during the month of currentMonthInt?\n              //  Dynamic dates ?\n              let averageRainForAMonthURL = `${weatherApiURL}/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&where=month=${currentMonthInt}&output=json`;\n              // console.log(averageRainForAMonthURL);\n              // What was the 5-year average annual rainfall for city st?\n              let fiveYearAvgRainURL = `${weatherApiURL}/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&output=json`;\n              if (!state.ajaxInProgress) {\n                dispatch({\n                  type: \"SET_AJAX_IN_PROGRESS\",\n                  data: true,\n                });\n                await Axios.get(averageRainForAMonthURL)\n                  .then((resp) => {\n                    // console.log(resp);\n                    let averagePrecipitationForCurrentMonth =\n                      resp.data[0][\"sum(precipitation)/5\"];\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth\n                    ).toFixed(2);\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth * 0.03937\n                    ).toFixed(2);\n                    dispatch({\n                      type: \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\",\n                      data: { thisMonth: averagePrecipitationForCurrentMonth },\n                    });\n                  })\n                  .catch((error) => {\n                    dispatch({\n                      type: \"SNACK\",\n                      data: {\n                        snackOpen: true,\n                        snackMessage: `Weather API error code: ${error.response.status} for getting 5 year average rainfall for this month`,\n                      },\n                    });\n                  });\n\n                if (!state.ajaxInProgress) {\n                  dispatch({\n                    type: \"SET_AJAX_IN_PROGRESS\",\n                    data: true,\n                  });\n                  await Axios.get(fiveYearAvgRainURL)\n                    .then((resp) => {\n                      let fiveYearAvgRainAnnual =\n                        resp.data[0][\"sum(precipitation)/5\"];\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual\n                      ).toFixed(2);\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual * 0.03937\n                      ).toFixed(2);\n                      dispatch({\n                        type: \"UPDATE_AVERAGE_PRECIP_ANNUAL\",\n                        data: { annual: fiveYearAvgRainAnnual },\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false,\n                      });\n                    })\n                    .catch((error) => {\n                      dispatch({\n                        type: \"SNACK\",\n                        data: {\n                          snackOpen: true,\n                          snackMessage: `Weather API error code: ${\n                            error.response.status\n                          } for getting 5 year average rainfall for ${obj.city.toUpperCase()}, ${obj.state.toUpperCase()}`,\n                        },\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false,\n                      });\n                    });\n                }\n              }\n            });\n        })\n        .then(() => {\n          dispatch({\n            type: \"SET_AJAX_IN_PROGRESS\",\n            data: false,\n          });\n        });\n    }\n    // check if isRoot\n\n    if (window.location.pathname === \"/\") {\n      setIsRoot(true);\n      // setRedirectToRoot(true);\n    } else {\n      setIsRoot(false);\n    }\n    // check value of progress state\n\n    switch (state.progress) {\n      case 0:\n        isActive[\"val\"] = 0;\n        break;\n    }\n  }, [state.markers, state.progress, state.zone, state.weatherDataReset]);\n\n  useEffect(() => {\n    let z7Formattedgoal = zone7Goal.map((goal) => {\n      return { fields: goal };\n    });\n    let z6Formattedgoal = zone6Goal.map((goal) => {\n      return { fields: goal };\n    });\n    let z5Formattedgoal = zone5Goal.map((goal) => {\n      return { fields: goal };\n    });\n    z7Formattedgoal = z7Formattedgoal.filter((goal) => goal.fields.Include);\n    z6Formattedgoal = z6Formattedgoal.filter((goal) => goal.fields.Include);\n    z5Formattedgoal = z5Formattedgoal.filter((goal) => goal.fields.Include);\n\n    switch (parseInt(state.zone)) {\n      case 7: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone7CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z7Formattedgoal,\n        });\n        console.log(\"z7 data dispatched\");\n        break;\n      }\n      case 6: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone6CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z6Formattedgoal,\n        });\n        console.log(\"z6 data dispatched\");\n        break;\n      }\n      case 5: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone5CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z5Formattedgoal,\n        });\n        console.log(\"z5 data dispatched\");\n        break;\n      }\n      default: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone7CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z7Formattedgoal,\n        });\n        console.log(\"default data dispatched\");\n        break;\n      }\n    }\n  }, [state.zone]);\n\n  const toggleClass = (el, className) => el.classList.toggle(className);\n\n  const burgurClick = () => {\n    toggleClass(document.querySelector(\"body\"), \"nav-open\");\n  };\n\n  const toggleSingleCollapse = () => {\n    setCollapse(!collapse);\n  };\n  const setmyCoverCropActivationFlag = () => {\n    if (window.location.pathname === \"/\") {\n      if (state.progress > 4) {\n        dispatch({\n          type: \"ACTIVATE_MY_COVER_CROP_LIST_TILE\",\n          data: {\n            myCoverCropActivationFlag: true,\n            speciesSelectorActivationFlag: false,\n          },\n        });\n      }\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  const setSpeciesSelectorActivationFlag = () => {\n    // if (state.progress) {\n    // if (window.location.pathname === \"/\") {\n    // console.log(\"pathname\", \"/\");\n    dispatch({\n      type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n      data: {\n        speciesSelectorActivationFlag: true,\n        myCoverCropActivationFlag: false,\n      },\n    });\n    if (window.location.pathname !== \"/\") {\n      history.push(\"/\");\n    }\n  };\n\n  // useEffect(() => {\n  //   let localDrainageVal = window.localStorage.getItem(\"drainage\");\n  //   let localDrainageClasses = JSON.parse(localDrainageVal);\n  //   // console.log(state.cropData.length);\n  //   // $reactTemp1.filter((crop) => crop.fields[\"Soil Drainage\"].includes(\"Poorly drained\"))\n  //   function arraysContainSame(a, b) {\n  //     a = Array.isArray(a) ? a : [];\n  //     b = Array.isArray(b) ? b : [];\n  //     return a.length === b.length && a.every((el) => b.includes(el));\n  //   }\n  //   if (state.cropData.length > 0 && localDrainageClasses.length > 0) {\n  //     // sta.filter((crop) => )\n  //     const culledCrops = state.cropData.filter((crop) => {\n  //       if (arraysContainSame(crop.fields[\"Soil Data\"], localDrainageClasses))\n  //         return true;\n  //       else return false;\n  //     });\n  //     console.log(culledCrops.length);\n  //   }\n  // }, [window.localStorage.getItem(\"drainage\"), state.cropData]);\n\n  return redirectToRoot ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <header className=\"d-print-none\">\n      <div className=\"topHeader\">\n        <NavLink to=\"/about\" activeClassName={`active`}>\n          ABOUT\n        </NavLink>\n        <span className=\"line\"></span>\n        <NavLink to=\"/help\" activeClassName={`active`}>\n          HELP\n        </NavLink>\n        <span className=\"line\"></span>\n        <NavLink to=\"/feedback\" activeClassName={`active`}>\n          FEEDBACK\n        </NavLink>\n      </div>\n\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-lg-2 col-12\">\n            <img\n              className=\"img-fluid\"\n              src=\"/images/neccc_wide_logo_color_web.jpg\"\n              alt=\"NECCC Logo\"\n              width=\"100%\"\n              onContextMenu={() => {\n                return false;\n              }}\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_PROGRESS\",\n                  data: {\n                    type: \"HOME\",\n                  },\n                });\n                // setRedirectToRoot(!redirectToRoot);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </div>\n          <div className=\"col-12 col-lg-10 col-sm-12 row\">\n            <div className=\"col-lg-4 col-12 d-flex align-items-center text-left\">\n              <div>\n                <Typography variant=\"body1\" className=\"font-weight-bold\">\n                  Cover Crop Decision Support Tools\n                </Typography>\n\n                <Typography variant=\"body1\">\n                  <DateComponent />\n                </Typography>\n              </div>\n            </div>\n            <div className=\"col-lg-8 col-12 d-flex align-items-center\">\n              <div>\n                <ForecastComponent />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"bottomHeader\">\n        <Button\n          size=\"large\"\n          component={NavLink}\n          exact\n          to={\"/cover-crop-explorer\"}\n          activeClassName=\"active\"\n        >\n          COVER CROP EXPLORER\n        </Button>\n        <Button\n          // className={state.speciesSelectorActivationFlag ? \"active\" : \"\"}\n          className={\n            isRoot ? (state.speciesSelectorActivationFlag ? \"active\" : \"\") : \"\"\n          }\n          onClick={setSpeciesSelectorActivationFlag}\n          size=\"large\"\n        >\n          SPECIES SELECTOR TOOL\n        </Button>\n\n        {state.progress >= 5 || state.selectedCrops.length > 0 ? (\n          <Badge\n            badgeContent={\n              state.selectedCrops.length > 0 ? state.selectedCrops.length : 0\n            }\n            color={\"error\"}\n          >\n            <Button\n              size=\"large\"\n              className={\n                state.myCoverCropActivationFlag &&\n                window.location.pathname === \"/\"\n                  ? \"active\"\n                  : \"\"\n              }\n              onClick={setmyCoverCropActivationFlag}\n            >\n              MY COVER CROP LIST\n            </Button>\n          </Badge>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <MDBNavbar light className=\"ham-navWrapper\">\n        <MDBContainer fluid>\n          <MDBHamburgerToggler\n            color=\"#598443\"\n            id=\"hamburger1\"\n            onClick={() => toggleSingleCollapse()}\n          />\n          <MDBCollapse isOpen={collapse} navbar>\n            <MDBNavbarNav className=\"ham-nav\">\n              <MDBNavItem>COVER CROP EXPLORER</MDBNavItem>\n              <MDBNavItem\n                onClick={setSpeciesSelectorActivationFlag}\n                active={\n                  isRoot\n                    ? state.speciesSelectorActivationFlag\n                      ? true\n                      : false\n                    : false\n                }\n              >\n                SPECIES SELECTOR TOOL\n              </MDBNavItem>\n              {state.progress >= 5 ? (\n                <MDBNavItem\n                  onClick={setmyCoverCropActivationFlag}\n                  active={\n                    state.myCoverCropActivationFlag &&\n                    window.location.pathname === \"/\"\n                      ? true\n                      : false\n                  }\n                >\n                  MY COVER CROP LIST\n                </MDBNavItem>\n              ) : (\n                \"\"\n              )}\n            </MDBNavbarNav>\n          </MDBCollapse>\n        </MDBContainer>\n      </MDBNavbar>\n\n      <Greenbar />\n\n      {window.location.pathname === \"/about\" ||\n      window.location.pathname === \"/help\" ||\n      (window.location.pathname === \"/feedback\" &&\n        window.location.pathname !== \"/cover-crop-explorer\") ||\n      state.progress < 0 ? (\n        <div className=\"topBar\"></div>\n      ) : (\n        \"\"\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from \"react\";\nimport \"../../styles/landing.scss\";\nimport { Context } from \"../../store/Store\";\n// import { Typography, Button } from \"@material-ui/core\";\nimport { LightButton } from \"../../shared/constants\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nconst Landing = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const height = props.height;\n  const backgroundWrapper = {\n    background: `url(${props.bg})`,\n    backgroundSize: \"cover\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    paddingLeft: \"0px\",\n    paddingRight: \"0px\",\n  };\n  const bgImage = {\n    background: `url(${props.bg})`,\n    backgroundSize: \"cover\",\n    height: `${height}px`,\n  };\n  const boxWrapper = {\n    paddingBottom: \"0px\",\n    marginBottom: \"50px\",\n    backgroundColor: \"rgba(240,247,235,.8)\",\n    borderRadius: \"10px\",\n    border: \"1px solid #598445\",\n    minHeight: \"520px\",\n  };\n\n  const incrementProgress = (incVal) => {\n    incVal = parseInt(incVal);\n    if (incVal === 1) {\n      if (state.progress === 0) {\n        dispatch({\n          type: \"UPDATE_PROGRESS\",\n          data: {\n            type: \"INCREMENT\",\n          },\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"container-fluid pt-5\" style={bgImage}>\n      <div className=\"row boxContainerRow\" style={boxWrapper}>\n        <div className=\"col-12\">\n          <Typography variant=\"h4\" gutterBottom>\n            Welcome to the Northeast Cover Crop Species Selector Tool\n          </Typography>\n        </div>\n\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            gutterBottom\n            align=\"left\"\n            style={{ paddingBottom: \"1em\" }}\n          >\n            You are currently interacting with the Northeast Cover Crop Species\n            Selector Tool, beta version. We seek feedback about the usability\n            and usefulness of this tool. Our goal is to encourage and support\n            the use of cover crops in the Northeast US. You can learn more about\n            the cover crop data and design of this tool{\" \"}\n            <Link to={\"/about\"}> here</Link>. If you need assistance, consult\n            the <Link to={\"/help\"}>help page</Link>.\n          </Typography>\n\n          <Typography\n            align=\"left\"\n            variant=\"body1\"\n            gutterBottom\n            style={{ paddingBottom: \"1em\" }}\n          >\n            In the future, this platform will host a variety of tools including\n            a cover crop mixture and seeding rate calculator and an economics\n            calculator. Our ultimate goal is to provide a suite of\n            interconnected tools that function together seamlessly.\n          </Typography>\n          <Typography\n            align=\"left\"\n            variant=\"body1\"\n            gutterBottom\n            style={{ paddingBottom: \"1em\" }}\n          >\n            This tool is currently undergoing beta testing. This means that we\n            are double checking the data and the underlying decision logic.\n            Please do not use this tool for actual cover crop planning and\n            consult your cover crop advisor at this stage.\n          </Typography>\n          <Typography\n            variant=\"body1\"\n            style={{ fontWeight: \"bold\", paddingBottom: \"1em\" }}\n            align=\"left\"\n            gutterBottom\n          >\n            Thank you for your time and consideration. You may provide input by\n            visiting our <Link to=\"/feedback\">Feedback</Link> page. We look\n            forward to your hearing about your experience.\n          </Typography>\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-center align-items-center\">\n        <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n      </div>\n    </div>\n  );\n\n  // return (\n  //   <Box\n  //     style={{\n  //       background: `url(${props.bg})`,\n  //       backgroundSize: \"cover\",\n  //       height: `${height}px`,\n  //       overflow: \"hidden\",\n  //     }}\n  //   >\n  //     <div className=\"container-fluid\" style={backgroundWrapper}>\n  //       <div className=\"row boxContainerRow mt-2\" style={boxWrapper}>\n  //         <div className=\"col-12\">\n  //           <div className=\"container-fluid\">\n  //             <div className=\"row\">\n  //               <div className=\"col-12\">\n  //                 <Typography variant=\"h4\" align=\"center\">\n  //                   Welcome to the Northeast Cover Crop Species Selector Tool\n  //                 </Typography>\n  //               </div>\n  //               <div className=\"row pt-4 text-left\">\n  //                 <div className=\"col-12\">\n  //                   <Typography\n  //                     variant=\"body1\"\n  //                     gutterBottom\n  //                     style={{ paddingBottom: \"1em\" }}\n  //                   >\n  //                     You are currently interacting with the Northeast Cover\n  //                     Crop Species Selector Tool, beta version. We seek feedback\n  //                     about the usability and usefulness of this tool. Our goal\n  //                     is to encourage and support the use of cover crops in the\n  //                     Northeast US. You can learn more about the cover crop data\n  //                     and design of this tool <Link to={\"/about\"}> here</Link>.\n  //                     If you need assistance, consult the{\" \"}\n  //                     <Link to={\"/help\"}>help page</Link>.\n  //                   </Typography>\n\n  //                   <Typography\n  //                     variant=\"body1\"\n  //                     gutterBottom\n  //                     style={{ paddingBottom: \"1em\" }}\n  //                   >\n  //                     In the future, this platform will host a variety of tools\n  //                     including a cover crop mixture and seeding rate calculator\n  //                     and an economics calculator. Our ultimate goal is to\n  //                     provide a suite of interconnected tools that function\n  //                     together seamlessly.\n  //                   </Typography>\n  //                   <Typography\n  //                     variant=\"body1\"\n  //                     gutterBottom\n  //                     style={{ paddingBottom: \"1em\" }}\n  //                   >\n  //                     This tool is currently undergoing beta testing. This means\n  //                     that we are double checking the data and the underlying\n  //                     decision logic. Please do not use this tool for actual\n  //                     cover crop planning and consult your cover crop advisor at\n  //                     this stage.\n  //                   </Typography>\n  //                   <Typography\n  //                     variant=\"body1\"\n  //                     style={{ fontWeight: \"bold\", paddingBottom: \"1em\" }}\n  //                     align=\"left\"\n  //                     gutterBottom\n  //                   >\n  //                     Thank you for your time and consideration. You may provide\n  //                     input by visiting our <Link to=\"/feedback\">Feedback</Link>{\" \"}\n  //                     page. We look forward to your hearing about your\n  //                     experience.\n  //                   </Typography>\n  //                 </div>\n  // //               </div>\n  //             </div>\n  //           </div>\n  //         </div>\n  //       </div>\n  //       <div className=\"row pt-4 pb-4\">\n  //         <div className=\"col-12\">\n  //           <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </Box>\n  // );\n};\n\nexport default Landing;\n\n// <aside className=\"landingWrapper\" style={setWrapperStyle(props.bg)}>\n//       <div className=\"boxWrapper\">\n//         <aside className=\"text-left\">\n//           <h2>Welcome to the Northeast Cover Crop Species Selector Tool</h2>\n//           <p>\n//             You are currently interacting with the Beta version of the Northeast\n//             Cover Crop Species SelectorDecision Support Tool. We seek feedback\n//             about the usability and usefulness of this tool. Our goal is to\n//             encourage and support the use of cover crops in the Northeast US\n//           </p>\n//           <p>\n//             The cover crop data you will see built upon information found in the\n//             Midwest Cover Crops Council (MCCC) species selector tool, the USDA\n//             PLANTS database, and a seeding rate calculator developed by USDA\n//             NRCS in NY. These initial data have been reviewed, modified, and\n//             greatly expanded upon by cover crop experts in the Northeast in each\n//             USDA plant hardiness zone to best match the cropping system types,\n//             goals, and constraints found in our region\n//           </p>\n//           <p>\n//             In the future, this platform will host a variety of tools including\n//             a cover crop mixture and seeding rate calculator and an economics\n//             calculator. Our ultimate goal is to provide a suite of\n//             interconnected tools that function together seamlessly.\n//           </p>\n\n//           <p className=\"mt-4\">\n//             {\" \"}\n//             Thank you for your time and consideration. We look forward to your\n//             feedback. You may provide input by visiting our Feedback page.\n//           </p>\n//         </aside>\n//         <div className=\"nextButton pt-4\">\n\n//           <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n//         </div>\n//       </div>\n//     </aside>\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../store/Store\";\nimport { LightButton } from \"./constants\";\n\nconst ProgressButtonsInner = props => {\n  let isDisabled = props.disabled;\n\n  const [state, dispatch] = useContext(Context);\n\n  const changeProgress = type => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\"\n        }\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\"\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <LightButton onClick={() => changeProgress(\"decrement\")}>\n        {\" \"}\n        back\n      </LightButton>\n      <LightButton\n        onClick={() => changeProgress(\"increment\")}\n        disabled={isDisabled}\n        className=\"ml-3\"\n      >\n        next\n      </LightButton>\n    </Fragment>\n  );\n};\n\nexport default ProgressButtonsInner;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport ProgressButtonsInner from \"./ProgressButtonsInner\";\n\nconst ProgressButtons = () => {\n  const [state, dispatch] = useContext(Context);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  useEffect(() => {\n    disableLogic(state.progress, state.selectedGoals.length, state.soilData);\n  }, [state]);\n\n  const disableLogic = (progress, goalsLength, soilData) => {\n    // console.log(parseInt(progress));\n    switch (parseInt(progress)) {\n      case 1: {\n        // location selection state\n        if (state.zone === 0 || state.address === \"\") {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n        break;\n      }\n      // case 2: {\n      //   if (\n      //     // soilData.Drainage_Class.length === 0 ||\n      //     // soilData.Drainage_Class === \"\" ||\n      //     // soilData.Flooding_Frequency === null ||\n      //     // soilData.Flooding_Frequency.length === 0 ||\n      //     // soilData.Flooding_Frequency === \"\"\n      //     false\n      //   ) {\n      //     setIsDisabled(true);\n      //   } else {\n      //     setIsDisabled(false);\n      //   }\n      // }\n      case 4: {\n        // goals selection state\n        if (goalsLength > 3 || goalsLength < 1) {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n        break;\n      }\n      default: {\n        setIsDisabled(false);\n        break;\n      }\n    }\n  };\n\n  return renderProgressButtons(state.progress, isDisabled);\n};\n\nconst renderProgressButtons = (progress, isDisabled) => {\n  if (progress < 0) return \"\";\n  else {\n    return (\n      <div>\n        <ProgressButtonsInner disabled={isDisabled} />\n      </div>\n    );\n  }\n};\n\nexport default ProgressButtons;\n","import React from \"react\";\n// import { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport \"../styles/progressIndicator.scss\";\nimport { Typography } from \"@material-ui/core\";\n\nconst checkProgressStatus = (actualProgress, expectedProgress) => {\n  if (actualProgress === expectedProgress) {\n    // exact progress\n    return \"progress-step active\";\n  } else if (actualProgress > expectedProgress) {\n    return \"progress-step active\";\n  } else {\n    return \"progress-step\";\n  }\n};\n\nconst ProgressBar = () => {\n  const [state, dispatch] = React.useContext(Context);\n  return (\n    <div className=\"gprogress\">\n      <Typography variant=\"body1\" className=\"progress-track\" component=\"div\">\n        Question {state.progress} of 4\n      </Typography>\n      <div className=\"progress-diagram\">\n        <div\n          id=\"step1\"\n          className={checkProgressStatus(state.progress, 1)}\n        ></div>\n\n        <div\n          id=\"step2\"\n          className={checkProgressStatus(state.progress, 2)}\n        ></div>\n\n        <div\n          id=\"step3\"\n          className={checkProgressStatus(state.progress, 3)}\n        ></div>\n\n        <div\n          id=\"step4\"\n          className={checkProgressStatus(state.progress, 4)}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Badge, Chip, Tooltip, Avatar } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nconst GoalTag = (props) => {\n  const [state, dispatch] = useContext(Context);\n\n  let goalDescription = props.goalDescription;\n  let goalTitle = props.goaltTitle;\n  let key = props.id;\n  let goal = props.goal;\n\n  useEffect(() => {\n    if (state.selectedGoals.length > 0) {\n      state.selectedGoals.forEach((val, index) => {\n        document\n          .getElementsByClassName(val.toUpperCase())[0]\n          .classList.add(\"active\");\n      });\n    }\n  }, []);\n  const updateSelectedGoals = (item, key) => {\n    const goals = [...state.selectedGoals];\n\n    if (goals.indexOf(item.fields[\"Cover Crop Goal\"]) === -1) {\n      // does not exist, dispatch to state and add to local state\n\n      document.getElementById(`chip${key}`).classList.add(\"active\");\n      dispatch({\n        type: \"ADD_SELECTED_GOALS\",\n        data: item.fields[\"Cover Crop Goal\"],\n      });\n\n      //   document.getElementById(`avatar${key}`).innerHTML =\n    } else {\n      // exists, remove it from the state and update the state\n      let index = goals.indexOf(item.fields[\"Cover Crop Goal\"]);\n      goals.splice(index, 1);\n\n      // make it lighter on the ui\n\n      document.getElementById(`chip${key}`).classList.remove(\"active\");\n\n      dispatch({\n        type: \"UPDATE_SELECTED_GOALS\",\n        data: goals,\n      });\n    }\n  };\n  return (\n    <Tooltip\n      enterDelay={1000}\n      enterNextDelay={1000}\n      id={`tooltip-${props.id}`}\n      placement=\"top\"\n      arrow\n      title={\n        <div className=\"filterTooltip\">\n          <p>{goalDescription}</p>\n        </div>\n      }\n      key={`tooltip${key}`}\n    >\n      <Chip\n        disabled={\n          state.selectedGoals.length >= 3\n            ? state.selectedGoals.includes(goalTitle)\n              ? false\n              : true\n            : false\n        }\n        avatar={\n          state.selectedGoals.length !== 0 &&\n          state.selectedGoals.includes(goalTitle) ? (\n            <Avatar id={`avatar${key}`}>\n              {state.selectedGoals.indexOf(goalTitle) + 1}\n            </Avatar>\n          ) : (\n            <Avatar className=\"d-none\"></Avatar>\n          )\n        }\n        // style={{ textAlign: \"left\" }}\n        label={goalTitle.toUpperCase()}\n        onClick={() => updateSelectedGoals(goal, key)}\n        key={`chip${key}`}\n        id={`chip${key}`}\n        size=\"medium\"\n        variant=\"outlined\"\n        // color={\"primary\"}\n        className={`goal enabled ${goalTitle.toUpperCase()}`}\n      />\n    </Tooltip>\n  );\n};\n\nexport default GoalTag;\n","// TODO: Goal tags are not responsive!\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/goalsSelector.scss\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\n\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport GoalTag from \"./GoalTag\";\n// import { airtableAPIURL } from \"../../shared/constants\";\nimport { AirtableBearerKey } from \"../../shared/keys\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst goalSkeletonStyle = {\n  height: \"50px\",\n  width: \"100%\",\n  borderRadius: \"10px\",\n};\n\nconst GoalsSelector = () => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [allGoals, setAllGoals] = useState([{}]);\n\n  const goalsURL = \"/Cover%20Crop%20Goals?maxRecords=300\";\n\n  const headers = new Headers();\n\n  const fetchGoals = async (apiBase) => {\n    let finalGoalsURL = apiBase + goalsURL;\n    // console.log(finalGoalsURL);\n    dispatch({\n      type: \"SET_AJAX_IN_PROGRESS\",\n      data: true,\n    });\n    headers.append(\"Authorization\", `Bearer ${AirtableBearerKey}`);\n    await fetch(finalGoalsURL, { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        let fields = response.records;\n        let records = [];\n        for (let index in fields) {\n          if (fields[index].fields[\"Include\"]) {\n            // console.log(fields[index].fields);\n            records.push(fields[index]);\n          }\n        }\n        // if (response.records.fields[\"Include\"]) {\n\n        // }\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: records,\n        });\n      })\n      .then(() => {\n        dispatch({\n          type: \"SET_AJAX_IN_PROGRESS\",\n          data: false,\n        });\n      });\n  };\n  useEffect(() => {\n    if (state.allGoals.length > 0) {\n      setAllGoals(state.allGoals);\n    }\n  }, [state.allGoals]);\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div\n        className=\"row boxContainerRow goalsContainer\"\n        style={{ height: \"520px\" }}\n      >\n        <div className=\"col-12 goalsBoxContainer\">\n          <Typography variant=\"h4\" gutterBottom>\n            What are your cover cropping goals?\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            align=\"center\"\n            color=\"secondary\"\n            gutterBottom\n          >\n            Select up to three. Hover for more information\n          </Typography>\n          {allGoals.length === 0 ? (\n            <div className=\"goals col-lg-12\">\n              <div className=\"row\">\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div\n              className=\"goals row pt-4\"\n              style={{ justifyContent: \"center\" }}\n            >\n              {allGoals[0].fields ? (\n                allGoals.map((goal, key) => (\n                  <div key={key} className={`${classes.root} col`}>\n                    <GoalTag\n                      goal={goal}\n                      id={key}\n                      goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                      goalDescription={goal.fields[\"Description\"]}\n                    />\n                  </div>\n                ))\n              ) : (\n                <Skeleton style={goalSkeletonStyle} />\n              )}\n\n              {/* {allGoals.map((goal, key) =>\n                goal.fields[\"Include\"] ? (\n                  <div key={key} className={`${classes.root} col`}>\n                    <GoalTag\n                      goal={goal}\n                      id={key}\n                      goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                      goalDescription={goal.fields[\"Description\"]}\n                    />\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )} */}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GoalsSelector;\n\n{\n  /* <div className=\"goalsContainer mt-5\">\n<div\n  className=\"row boxContainerRow goalsBoxContainer\"\n  style={{ height: \"480px\" }}\n>\n  <div className=\"col-xl-12\">\n    <h1 className=\"text-center\">What are your cover cropping goals?</h1>\n  </div>\n  <div className=\"col-xl-12\">\n    <p className=\"text-center\">\n      Select up to three. Hover for more information\n    </p>\n  </div>\n  {state.allGoals.length === 0 ? (\n    <div className=\"goals col-lg-12\">\n\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"goals row\" style={{ justifyContent: \"center\" }}>\n      {state.allGoals.length > 0 ? (\n        state.allGoals.map((goal, key) =>\n          goal.fields[\"Include\"] ? (\n            <div key={key} className={`${classes.root} col`}>\n              <GoalTag\n                goal={goal}\n                id={key}\n                goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                goalDescription={goal.fields[\"Description\"]}\n              />\n            </div>\n          ) : (\n            \"\"\n          )\n        )\n      ) : (\n        <Skeleton\n          animation=\"pulse\"\n          height=\"100\"\n          width=\"100\"\n          variant=\"rect\"\n        />\n      )}\n    </div>\n  )}\n</div>\n</div> */\n}\n","import React, { useContext } from \"react\";\nimport MapComponent from \"./Map\";\nimport { Context } from \"../../store/Store\";\n// import AutoCompleteComponent from \"./AutoComplete\";\nimport SoilConditions from \"./SoilConditions\";\nimport WeatherConditions from \"./WeatherConditions\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport MapContext from \"./MapContext\";\nimport { Typography } from \"@material-ui/core\";\nimport SoilCondition from \"./SoilCondition\";\n// import { TextField } from \"@material-ui/core\";\n\nconst LocationConfirmation = () => {\n  const [state, dispatch] = useContext(Context);\n  return (\n    <div\n      className=\"container-fluid mt-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        className=\"row boxContainerRow\"\n        style={{ textAlign: \"left\", minHeight: \"520px\" }}\n      >\n        <div className=\"col-xl-6 col-lg-12\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-lg-6\">\n                <MapContext\n                  width=\"100%\"\n                  height=\"200px\"\n                  minzoom={4}\n                  maxzoom={20}\n                  from=\"confirmation\"\n                />\n              </div>\n              <div className=\"col-lg-6\">\n                <div className=\"col-12\">\n                  <Typography variant=\"h3\">Location Details</Typography>\n                </div>\n                <div className=\"col-12 pt-2\">\n                  <Typography variant=\"body1\">\n                    Your cover crop recommendations will come from the Plant\n                    Hardiness Zone {state.zone} NECCC dataset.\n                  </Typography>\n                </div>\n                <div className=\"col-12\">\n                  <Typography\n                    variant=\"body1\"\n                    className=\"pt-2 font-weight-bold\"\n                    style={{\n                      color: CustomStyles().lighterGreen,\n                    }}\n                  >\n                    {state.address.length > 0\n                      ? `${state.address.toString().substring(0, 35)}...`\n                      : \"Loading...\"}\n                  </Typography>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\"></div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\">\n                <Typography variant=\"body1\">\n                  Disclaimer: Cover crop recommendations are based on expert\n                  opinions. Your cover crop performance and seeding rates will\n                  vary based on location, management, cultivars, and many other\n                  variables. Consult your local{\" \"}\n                  <a\n                    href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detailfull/national/programs/financial/csp/?&cid=nrcsdev11_000242\"\n                    title=\"click to consult your local nrcs service center\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    NRCS Service Center\n                  </a>\n                  ,{\" \"}\n                  <a\n                    href=\"https://nifa.usda.gov/land-grant-colleges-and-universities-partner-website-directory\"\n                    title=\"Link to Cooperative Extension Service office\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Cooperative Extension Service office\n                  </a>\n                  , or{\" \"}\n                  <a\n                    href=\"https://www.nacdnet.org/general-resources/conservation-district-directory/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                  >\n                    Conservation District\n                  </a>{\" \"}\n                  for detailed guidance. Cover crop incentive programs may\n                  dictate seeding rate ranges and methods, and planting and\n                  termination dates. Consult your program contact to ensure your\n                  plans comply.\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-5 offset-xl-1 col-lg-12\">\n          <div className=\"container-fluid\">\n            {state.progress === 2 ? <SoilCondition /> : \"\"}\n            {state.progress === 3 ? <WeatherConditions /> : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationConfirmation;\n","import React, { useEffect, useState, Fragment, useContext } from \"react\";\nimport moment from \"moment\";\nimport { Tooltip, withStyles, Typography } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/growthWindow.scss\";\n\nconst GrowthWindowComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  //   const [isCashCropMonth, setIsCashCropMonth] = useState(false);\n  let isCashCropMonth = false;\n  let from = props.from;\n  let cropData = props.data;\n  let month = props.month;\n  let id = props.id;\n  let cropLegendObj = {\n    Early: \"\",\n    Mid: \"\",\n    class: \"\",\n    isCashCropMonth: false,\n  };\n\n  var fullMonth = moment().localeData().months();\n\n  const setMonthVals = (id) => {\n    let cropDataLegendLabel_Early = cropData[`${fullMonth[id]}, Early`]\n      ? cropData[`${fullMonth[id]}, Early`]\n      : [];\n\n    let cropDataLegendLabel_Mid = cropData[`${fullMonth[id]}, Mid`]\n      ? cropData[`${fullMonth[id]}, Mid`]\n      : [];\n\n    if (\n      state.cashCropData.dateRange.startDate !== \"\" &&\n      state.cashCropData.dateRange.endDate !== \"\"\n    ) {\n      if (\n        id >= state.cashCropData.dateRange.startDate - 1 ||\n        id <= state.cashCropData.dateRange.endDate - 1\n      ) {\n        cropLegendObj.isCashCropMonth = true;\n      } else {\n        cropLegendObj.isCashCropMonth = false;\n      }\n    }\n\n    if (cropDataLegendLabel_Early || cropDataLegendLabel_Mid) {\n      if (cropDataLegendLabel_Early) {\n        cropLegendObj.Early = cropDataLegendLabel_Early;\n      } else {\n        cropLegendObj.Early = \"\";\n      }\n      if (cropDataLegendLabel_Mid) {\n        cropLegendObj.Mid = cropDataLegendLabel_Mid;\n      } else {\n        cropLegendObj.Mid = \"\";\n      }\n    } else {\n      cropLegendObj.Early = \"\";\n      cropLegendObj.Mid = \"\";\n    }\n  };\n\n  const sanitizeLabels = () => {\n    // IF: check if cropLegendObj values are same ? or different.\n    // Reliable establishment/growth : className = \"reliableEstablishment\"\n    // Temperature/moisture risk to establishment/growth: \"t_mRiskToEstablishment\"\n    // Frost Seeding: \"frostSeeding\"\n\n    if (cropLegendObj.Early === cropLegendObj.Mid) {\n      // good to go\n    } else {\n    }\n  };\n\n  switch (month) {\n    case 0: {\n      setMonthVals(0);\n\n      break;\n    }\n    case 1: {\n      setMonthVals(1);\n      break;\n    }\n    case 2: {\n      setMonthVals(2);\n      break;\n    }\n    case 3: {\n      setMonthVals(3);\n      break;\n    }\n    case 4: {\n      setMonthVals(4);\n      break;\n    }\n    case 5: {\n      setMonthVals(5);\n      break;\n    }\n    case 6: {\n      setMonthVals(6);\n      break;\n    }\n    case 7: {\n      setMonthVals(7);\n      break;\n    }\n    case 8: {\n      setMonthVals(8);\n    }\n    case 9: {\n      setMonthVals(9);\n      break;\n    }\n    case 10: {\n      setMonthVals(10);\n      break;\n    }\n    case 11: {\n      setMonthVals(11);\n      break;\n    }\n    default: {\n      setMonthVals(0);\n      break;\n    }\n  }\n\n  return from === \"calendar\" ? (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer `\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n      style={\n        month >= 11\n          ? { borderLeft: \"none\", paddingBottom: \"0px\" }\n          : { paddingBottom: \"0px\" }\n      }\n    >\n      {/* {month} */}\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? \"legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row\"\n                : \"legendContainer legendColor d-flex flex-direction-row\"\n              : \"legendContainer legendColor d-flex flex-direction-row\"\n            : \"legendContainer legendColor d-flex flex-direction-row\"\n        }\n      >\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              {cropLegendObj.Early.map((v, i) => (\n                <Typography variant=\"body1\" key={i} gutterBottom>\n                  {v}\n                </Typography>\n              ))}\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early.join(\" \")}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              {cropLegendObj.Mid.map((v, i) => (\n                <Typography variant=\"body1\" key={i} gutterBottom>\n                  {v}\n                </Typography>\n              ))}\n            </Fragment>\n          }\n        >\n          <div\n            className={`midPart ${cropLegendObj.Mid}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  ) : from === \"tableOnlyCashCropWindow\" ? (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer`\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n    >\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? `legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row `\n                : \"legendContainer legendColor d-flex flex-direction-row \"\n              : \"legendContainer legendColor d-flex flex-direction-row \"\n            : `legendContainer legendColor d-flex flex-direction-row `\n        }\n      >\n        <div\n          className={`earlyPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n        <div\n          className={`midPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n      </div>\n    </td>\n  ) : from === \"infosheet\" ? (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell noBorderRightCond ${id}`\n              : `growthWindowCell noBorderRightCond ${id}`\n            : `growthWindowCell noBorderRightCond ${id}`\n          : `growthWindowCell noBorderRightCond ${id}`\n      }\n      style={{\n        borderRight: `${month !== \"Dec\" ? `2px solid white` : ``}`,\n      }}\n    >\n      <div className=\"legendContainer legendColor d-flex flex-direction-row w-100\">\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              <div>\n                <Typography variant=\"body1\">{cropLegendObj.Early}</Typography>\n              </div>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <div>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </div>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Mid}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  ) : (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer linear`\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n    >\n      <div className=\"legendContainer legendColor d-flex flex-direction-row w-100\">\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              <div>\n                <Typography variant=\"body1\">{cropLegendObj.Early}</Typography>\n              </div>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <div>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </div>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Mid}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  );\n};\n\nexport default GrowthWindowComponent;\n","import React from \"react\";\nimport Timeline from \"@material-ui/lab/Timeline\";\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport { Typography } from \"@material-ui/core\";\n\nconst SoilDrainageTimeline = ({ drainage = [] }) => {\n  const drainageClasses = [\n    \"Very poorly drained\",\n    \"Poorly drained\",\n    \"Somewhat poorly drained\",\n    \"Moderately well drained\",\n    \"Well drained\",\n    \"Excessively drained\",\n    \"Saturated muck\",\n    \"Well drained muck\",\n  ];\n  //   const classIntersection = drainageClasses.filter((x) => drainage.includes(x));\n  //   console.log(classIntersection);\n  return (\n    <Timeline align=\"right\">\n      {drainageClasses.map((drainageClass, index) => {\n        const fullLength = drainageClasses.length;\n        return (\n          <TimelineItem key={index}>\n            <TimelineSeparator>\n              {drainage.includes(drainageClass) ? (\n                <TimelineDot\n                  style={{\n                    backgroundColor: CustomStyles().progressColor,\n                  }}\n                />\n              ) : (\n                \"\"\n              )}\n              {index === fullLength ? \"\" : <TimelineConnector />}\n            </TimelineSeparator>\n\n            <TimelineContent className=\"text-capitalize\">\n              {drainage.includes(drainageClass) ? (\n                <Typography variant=\"body1\" className=\"font-weight-bold\">\n                  {drainageClass}\n                </Typography>\n              ) : (\n                <Typography variant=\"body1\">{drainageClass}</Typography>\n              )}\n            </TimelineContent>\n          </TimelineItem>\n        );\n      })}\n    </Timeline>\n  );\n};\n\nexport default SoilDrainageTimeline;\n","import React, { useState, useEffect, Fragment, Suspense } from \"react\";\nimport Axios from \"axios\";\n// import { CropImage } from \"../../shared/constants\";\n// import Carousel, { Modal, ModalGateway } from \"react-images\";\nimport { LuminousGallery } from \"luminous-lightbox\";\nimport \"../../../node_modules/luminous-lightbox/dist/luminous-basic.css\";\nimport \"../../styles/photoComponent.scss\";\nimport { Typography } from \"@material-ui/core\";\n\nconst PhotoComponent = ({\n  imageData = {\n    Directory: \"\",\n    Notes: null,\n    \"Key Thumbnail\": \"\",\n    \"Cover Crop\": \"\",\n  },\n}) => {\n  const imagesApiUrl = imageData\n    ? `//covercrop.tools/files.php?dir=${imageData.Directory}`\n    : null;\n  const [imageList, setImageList] = useState([]);\n\n  const getImages = async () => {\n    return await Axios({\n      url: imagesApiUrl,\n      method: \"get\",\n    });\n  };\n\n  useEffect(() => {\n    let imagePromise = getImages();\n    imagePromise\n      .then((response) => {\n        if (response.data.result === \"success\") {\n          if (response.data.data.length !== 0) {\n            // response.data.data.forEach((url) => {});\n          } else {\n            setImageList([]);\n          }\n          setImageList(response.data.data);\n        }\n      })\n      .then(() => {\n        var galleryOpts = {\n          // Whether pressing the arrow keys should move to the next/previous slide.\n          arrowNavigation: true,\n        };\n\n        var luminousOpts = {\n          // These options have the same defaults and potential values as the Luminous class.\n          caption: (trigger) => {\n            return trigger.dataset.caption;\n          },\n        };\n        new LuminousGallery(\n          document.querySelectorAll(\".Photo\"),\n          galleryOpts,\n          luminousOpts\n        );\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }, []);\n\n  return imageData !== null && imageList.length !== 0 ? (\n    <Suspense fallback={<div className=\"col\">Loading..</div>}>\n      {imageList.map((url, index) => {\n        let strippedUrl = \"\";\n        if (url.startsWith(\"images/Cover Crop Photos\")) {\n          let strippedUrlArray = url.split(\"images/Cover Crop Photos\");\n          strippedUrl =\n            \"/images/Cover Crop Photos/200x125\" + strippedUrlArray[1];\n        }\n        return (\n          <div\n            className=\"p-2 d-flex flex-column align-items-center justify-content-center\"\n            key={`Photo${index}`}\n          >\n            <a\n              className=\"Photo rounded\"\n              href={`/${url}`}\n              data-caption={getPhotoCredits(url, imageData[\"Cover Crop\"])}\n            >\n              <img\n                className=\"img rounded\"\n                alt={`Photo ${index}`}\n                // src={`/${url}`}\n                src={strippedUrl}\n                height=\"125\"\n                width=\"200\"\n              />\n            </a>\n\n            <div>\n              <Typography variant=\"caption\">\n                {getPhotoCredits(url, imageData[\"Cover Crop\"])}\n              </Typography>\n            </div>\n          </div>\n        );\n      })}\n    </Suspense>\n  ) : (\n    \"Loading..\"\n  );\n};\n\nexport default PhotoComponent;\n\nconst getPhotoCredits = (url = \"\", cropName = \"\") => {\n  // get base file name\n  let fileName = baseName(url);\n\n  let fileNameArray = fileName.split(\"_\");\n\n  // get last value of array\n  const {\n    length,\n    [length - 1]: last,\n    [length - 2]: secondLast,\n  } = fileNameArray;\n  const year = parseInt(last);\n\n  return `${cropName} - ${secondLast} [${year}]`;\n};\n\nconst baseName = (path = \"\") => {\n  let separator = \"/\";\n  const windowsSeparator = \"\\\\\";\n  if (path.includes(windowsSeparator)) {\n    separator = windowsSeparator;\n  }\n  return path.slice(path.lastIndexOf(separator) + 1);\n};\n","import React, { useState, useEffect, Fragment, useMemo } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst DictionaryContent = ({ dictData = [{}], from = \"\" }) => {\n  const [groupedCats, setGroupedCats] = useState({});\n\n  const groupBy = (arr, property) => {\n    return arr.reduce((acc, cur) => {\n      acc[cur[property]] = [...(acc[cur[property]] || []), cur];\n      return acc;\n    }, {});\n  };\n\n  const allCats = useMemo(() => {\n    return dictData.filter(\n      (dict) =>\n        dict[\"Information Sheet\"] === \"checked\" ||\n        dict[\"Infromation Sheet\"] === \"checked\"\n    );\n  }, [dictData]);\n\n  useEffect(() => {\n    const groupedCategories = groupBy(allCats, \"Category\");\n    setGroupedCats(groupedCategories);\n  }, [allCats]);\n\n  const RenderCats = () => {\n    const catOptions = Object.keys(groupedCats).map((key, index) => (\n      <div className=\"row col-12\" key={index}>\n        <div className=\"col-12\">\n          <Typography\n            variant=\"h6\"\n            style={\n              from === \"help\"\n                ? { border: \"0px\", borderBottom: \"1px solid gray\" }\n                : {}\n            }\n          >\n            {key}\n          </Typography>\n        </div>\n        {groupedCats[key].map((innerCat, index2) => {\n          if (from === \"help\") {\n            if (!innerCat[\"Variable\"].startsWith(\"Notes\")) {\n              return (\n                <div className=\"col-6\" key={index2}>\n                  <Typography variant=\"body1\" className=\"p-3\">\n                    <b>{innerCat[\"Variable\"]}:</b> {innerCat[\"Description\"]}\n                  </Typography>\n                </div>\n              );\n            }\n          } else {\n            return (\n              <div className=\"col-6\" key={index2}>\n                <Typography variant=\"body1\" className=\"p-3\">\n                  <b>{innerCat[\"Variable\"]}:</b> {innerCat[\"Description\"]}\n                </Typography>\n              </div>\n            );\n          }\n        })}\n      </div>\n    ));\n\n    return catOptions;\n  };\n\n  return (\n    <div\n      className={`row ${from === \"help\" ? `` : `dictionaryContentWrapper p-4`}`}\n    >\n      {Object.keys(groupedCats).length > 0 ? <RenderCats /> : \"\"}\n    </div>\n  );\n};\n\nexport default DictionaryContent;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport { Context } from \"../../store/Store\";\nimport z7Dict from \"../../shared/json/zone7/data-dictionary.json\";\nimport z6Dict from \"../../shared/json/zone6/data-dictionary.json\";\nimport z5Dict from \"../../shared/json/zone6/data-dictionary.json\";\nimport DictionaryContent from \"./DictionaryContent\";\n\nconst InformationSheetDictionary = (props) => {\n  const [dictionary, setDictionary] = useState([]);\n  const [state] = useContext(Context);\n\n  const zone = props.zone ? props.zone : state.zone;\n\n  useEffect(() => {\n    document.title = \"Data Dictionary\";\n    switch (parseInt(zone)) {\n      case 7: {\n        setDictionary(z7Dict);\n        break;\n      }\n      case 6: {\n        setDictionary(z6Dict);\n        break;\n      }\n      case 5: {\n        setDictionary(z5Dict);\n        break;\n      }\n      default: {\n        setDictionary(z7Dict);\n        break;\n      }\n    }\n  }, [zone]);\n\n  return props.from === \"help\" ? (\n    <DictionaryContent dictData={dictionary} from=\"help\" />\n  ) : (\n    <Fragment>\n      <div className=\"row pt-4\">\n        <div\n          className=\"col-12\"\n          style={{\n            backgroundColor: \"rgb(43, 123, 121)\",\n            height: \"50px\",\n            borderTopLeftRadius: \"20px\",\n            borderTopRightRadius: \"20px\",\n          }}\n        ></div>\n      </div>\n      <div className=\"row mt-4 p-3\">\n        <div className=\" col-12\">\n          <Typography variant=\"h4\">Information Sheet Dictionary</Typography>\n        </div>\n        <div className=\"col-12\">\n          <Typography variant=\"body2\">\n            <Info style={{ color: \"rgb(43, 123, 121)\" }} /> &nbsp; These terms\n            and definitions are based on expert opinion\n          </Typography>\n        </div>\n      </div>\n      <hr />\n\n      <DictionaryContent dictData={dictionary} />\n    </Fragment>\n  );\n};\n\nexport default InformationSheetDictionary;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport {\n  getRating,\n  RenderSeedPriceIcons,\n  allMonths,\n} from \"../../shared/constants\";\nimport { Typography, AccordionDetails, makeStyles } from \"@material-ui/core\";\nimport SoilDrainageTimeline from \"./SoilDrainageTimeline\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MuiAccordion from \"@material-ui/core/Accordion\";\nimport MuiAccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport {\n  ExpandMore,\n  FiberManualRecord,\n  CheckBoxOutlineBlankOutlined,\n} from \"@material-ui/icons\";\nimport PhotoComponent from \"./PhotoComponent\";\nimport InformationSheetDictionary from \"./InformationSheetDictionary\";\nimport GrowthWindowComponent from \"../CropSelector/GrowthWindow\";\nimport sources from \"./sources.json\";\nimport moment from \"moment-timezone\";\nimport { Context } from \"../../store/Store\";\n\nconst Accordion = withStyles({\n  root: {\n    // border: \"1px solid rgba(0, 0, 0, .125)\",\n    boxShadow: \"none\",\n    \"&:not(:last-child)\": {\n      borderBottom: 0,\n    },\n    \"&:before\": {\n      display: \"none\",\n    },\n    \"&$expanded\": {\n      margin: \"auto\",\n    },\n  },\n  expanded: {},\n})(MuiAccordion);\n\nconst AccordionSummary = withStyles({\n  root: {\n    // backgroundColor: \"rgba(0, 0, 0, .03)\",\n    borderBottom: \"1px solid #2b7b79\",\n    marginBottom: -1,\n    minHeight: 56,\n    \"&$expanded\": {\n      minHeight: 56,\n    },\n  },\n  content: {\n    \"&$expanded\": {\n      margin: \"4px 0\",\n    },\n  },\n  expanded: {},\n})(MuiAccordionSummary);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  expanded: {\n    \"&$expanded\": {\n      margin: \"4px 0\",\n    },\n  },\n}));\n\nconst InformationSheetContent = (props) => {\n  const [state] = useContext(Context);\n  const { zone } = state;\n  const crop = props.crop;\n  const from = props.from || \"direct\";\n  const classes = useStyles();\n  const [currentSources, setCurrentSources] = useState([{}]);\n\n  useEffect(() => {\n    document.title = `Information Sheet for ${crop[\"Cover Crop Name\"]}`;\n    const regex = /(?!\\B\"[^\"]*),(?![^\"]*\"\\B)/g;\n    const removeDoubleQuotes = /^\"(.+(?=\"$))\"$/;\n    const relevantZones = sources.filter((source, index) => {\n      let zones = source.Zone.split(\",\").map((item) => item.trim());\n      const coverCrops = source[\"Cover Crops\"]\n        .split(regex)\n        .map((item) => item.replace(removeDoubleQuotes, \"$1\"))\n        .map((item) => item.trim());\n\n      if (zones.includes(`Zone ${zone}`)) {\n        if (coverCrops.includes(crop[\"Cover Crop Name\"])) {\n          return true;\n        } else return false;\n      } else return false;\n    });\n\n    setCurrentSources(relevantZones);\n    console.log(relevantZones);\n  }, []);\n\n  return from === \"direct\" ? (\n    <Fragment>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Cover Crop Description\n          </Typography>\n\n          <Typography variant=\"body1\" className=\"p-3\">\n            {crop[\"Crop Description\"]}\n          </Typography>\n        </div>\n      </div>\n      <div\n        className=\"d-flex justify-content-center mt-1 mb-1 photosWrapper\"\n        style={{\n          overflowX: \"auto\",\n          whiteSpace: \"nowrap\",\n          flexWrap: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n        }}\n      >\n        <PhotoComponent\n          imageData={crop[\"Image Data\"] ? crop[\"Image Data\"] : null}\n        />\n      </div>\n      <div className=\"row mt-2 coverCropGoalsWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Goals\n          </Typography>\n          <div className=\"row col-12 text-right\">\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Growing Window</Typography>\n              </span>\n\n              <span className=\"col-3\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Growing Window\"]}\n                  </Typography>\n                </div>\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Penetrates Plow Pan</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Penetrates Plow Pan\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Nitrogen Scavenging</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Nitrogen Scavenging\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Reduces Topsoil Compaction\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Reduces Topsoil Compaction\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Lasting Residue</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Lasting Residue\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Improve Soil Organic Matter\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Improve Soil Organic Matter\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Prevent Fall Soil Erosion\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Prevent Fall Soil Erosion\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Increase Soil Aggregation\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Increase Soil Aggregation\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Prevent Spring Soil Erosion\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Prevent Spring Soil Erosion\"])}\n              </span>\n            </div>\n            {/* <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Supports Mycorrhizae</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Supports Mycorrhizae\"])}\n              </span>\n            </div> */}\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Promote Water Quality</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Promote Water Quality\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Good Grazing</Typography>\n              </span>\n              <span className=\"col-3\">{getRating(crop[\"Good Grazing\"])}</span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Forage Harvest Value</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Forage Harvest Value\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Pollinator Food</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Pollinator Food\"])}\n              </span>\n            </div>\n            {crop[\"Nitrogen Fixation\"] ? (\n              <Fragment>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Nitrogen Fixation</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Nitrogen Fixation\"])}\n                  </span>\n                </div>\n              </Fragment>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"row otherRows\">\n        <div className=\"col-6 weedsRowWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Weeds\n            </Typography>\n          </div>\n          <div className=\"row col-12 py-4 text-right\">\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Residue Suppresses Summer Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Residue Suppresses Summer Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Outcompetes Summer Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Outcompetes Summer Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Suppresses Winter Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Suppresses Winter Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Persistence</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Persistence\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Volunteer Establishment</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Volunteer Establishment\"])}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 envTolWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Environmental Tolerances\n            </Typography>\n          </div>\n          <div className=\"row col-12 py-4 text-right\">\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Winter Survival</Typography>\n            </div>\n            {/* <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Winter Survival\"].toString())}\n            </div> */}\n            <div className=\"col-3 mb-2\">\n              <div className=\"blue-bg\">\n                <Typography variant=\"body1\">\n                  {crop[\"Winter Survival\"]}\n                </Typography>\n              </div>\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Low Fertility</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Low Fertility\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Drought</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Drought\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Heat</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Heat\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Shade</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Shade\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Flood</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Flood\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Salinity</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Salinity\"])}</div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Growth Traits\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Duration</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div\n                  className={`blue-bg ${\n                    crop[\"Duration\"].includes(\"Short-lived Perennial\")\n                      ? `shrt_perennial`\n                      : ``\n                  }`}\n                >\n                  <Typography variant=\"body1\">\n                    {crop[\"Duration\"].toString()}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Zone Use</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">{crop[\"Zone Use\"]}</Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Shape And Orientation</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div\n                  className={`blueBgFlex ${\n                    crop[\"Shape & Orientation\"].length > 1\n                      ? `borderWrapped`\n                      : ``\n                  }`}\n                >\n                  {crop[\"Shape & Orientation\"].map((val, index) => (\n                    <div className=\"blue-bg bordered\" key={index}>\n                      <Typography variant=\"body1\">{val}</Typography>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Active Growth Period</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div\n                  className={`blueBgFlex ${\n                    crop[\"Active Growth Period\"].length > 1\n                      ? `borderWrapped`\n                      : ``\n                  }`}\n                >\n                  {crop[\"Active Growth Period\"].map((val, index) => (\n                    <div className=\"blue-bg bordered\" key={index}>\n                      <Typography variant=\"body1\">{val}</Typography>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              {/* <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">C:N</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"C to N Ratio\"])}\n              </div> */}\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Dry Matter (Lbs/A/Yr)</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    {`${crop[\"Dry Matter Min (lbs/A/y)\"]} - ${crop[\"Dry Matter Max (lbs/A/y)\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil Texture</Typography>\n              </div>\n              <div className=\"col-3 mb-2 text-capitalize\">\n                <div\n                  className={`blueBgFlex ${\n                    crop[\"Soil Textures\"].length > 1 ? `borderWrapped` : ``\n                  }`}\n                >\n                  {crop[\"Soil Textures\"].map((val, index) => (\n                    <div className=\"blue-bg bordered\" key={index}>\n                      <Typography variant=\"body1\">{val}</Typography>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil PH</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    {`${crop[\"Minimum Tolerant Soil pH\"]} - ${crop[\"Maximum Tolerant Soil pH\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil Moisture Use</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Soil Moisture Use\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Hessian Fly Free Date?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Hessian Fly Free Date\"]\n                      ? crop[\"Hessian Fly Free Date\"]\n                      : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              {crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"] ? (\n                <Fragment>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Nitrogen Accumulation (Lbs/A/Yr)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"]} - ${crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Soil Drainage\n            </Typography>\n            <div className=\"col-12 py-4 text-right\">\n              <SoilDrainageTimeline drainage={crop[\"Soil Drainage\"]} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Growth\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Ease Of Establishment</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Ease of Establishment\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Establishes Quickly</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Establishes Quickly\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Early Spring Growth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Early Spring Growth\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Flowering Trigger</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Flowering Trigger\"]}\n                  </Typography>\n                </div>\n              </div>\n              {/* <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Root Architecture</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Root Architecture\"]}\n                  </Typography>\n                </div>\n              </div> */}\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Root Depth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">{crop[\"Root Depth\"]}</Typography>\n                </div>\n              </div>\n              {crop[\"Inoculant Type (Legumes Only)\"] ? (\n                <Fragment>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Inoculant Type</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div\n                      className={`blueBgFlex ${\n                        crop[\"Inoculant Type (Legumes Only)\"].length > 1\n                          ? `borderWrapped`\n                          : ``\n                      }`}\n                    >\n                      {crop[\"Inoculant Type (Legumes Only)\"].map(\n                        (val, index) => (\n                          <div className=\"blue-bg bordered\" key={index}>\n                            <Typography\n                              variant=\"body1\"\n                              className=\"text-capitalize\"\n                            >\n                              {val}\n                            </Typography>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Planting\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Seeds Per Lb</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Seeds per Pound\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Seed Price Per Lb</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg no-bg\">\n                  <RenderSeedPriceIcons val={crop[\"Seed Price per Pound\"]} />\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Base Seeding Rate (Lbs/A)\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {`${crop[\"Base Seeding Rate Min (lbs/A)\"]} - ${crop[\"Base Seeding Rate Max (lbs/A)\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Drilled Depth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {`${crop[\"Drilled Depth Min\"]}\" - ${crop[\"Drilled Depth Max\"]}\"`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Aerial Seed?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Aerial Seeding\"] ? \"Yes\" : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Frost Seed?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Frost Seeding\"] ? \"Yes\" : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Min Germination Temp (&deg;F)\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Min Germination Temp (F)\"]}\n                  </Typography>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Termination\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Tillage At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Tillage at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Tillage At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Tillage at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Freezing At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Freezing at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Freezing At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Freezing at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Chemical At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Chemical at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Chemical At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Chemical at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Mow At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Mow at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Roller-Crimp At Flowering\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Roller Crimp at Flowering\"])}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Planting and Growth Windows\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Frost Seeding</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Frost Seeding\"]\n                      ? `${moment(crop[\"Frost Seeding Start\"], \"YYYY-MM-DD\")\n                          .format(\"MM/DD\")\n                          .toString()} - ${moment(\n                          crop[\"Frost Seeding End\"],\n                          \"YYYY-MM-DD\"\n                        )\n                          .format(\"MM/DD\")\n                          .toString()}`\n                      : \"N/A\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Reliable Establishment</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {getMonthDayString(\"reliable\", crop)}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Temperature/Moisture Risk\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {getMonthDayString(\"temperature\", crop)}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Interseed</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Interseed possible\"] ? \"Yes\" : \"N/A\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Winter Survival</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Winter Survival\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Active Growth Period</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div\n                  className={`blueBgFlex ${\n                    crop[\"Active Growth Period\"].length > 1\n                      ? `borderWrapped`\n                      : ``\n                  }`}\n                >\n                  {crop[\"Active Growth Period\"].map((val, index) => (\n                    <div className=\"blue-bg bordered\" key={index}>\n                      <Typography variant=\"body1\">{val}</Typography>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            <div className=\"row col-12 text-right\">\n              <div className=\"col-12\">\n                <table style={{ width: \"100%\", height: \"40px\" }}>\n                  <tbody>\n                    <tr>\n                      {allMonths.map((month, index) => (\n                        <GrowthWindowComponent\n                          from=\"tableAll\"\n                          data={crop}\n                          key={index}\n                          id={`growthCell${index}`}\n                          month={index}\n                        />\n                      ))}\n                    </tr>\n                    <tr>\n                      {allMonths.map((month, index) => (\n                        <td key={index}>{month}</td>\n                      ))}\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"col-12 row d-none d-print-block text-left\">\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"reliable\" />\n                    <span className=\"pl-3\">{\"Reliable Establishment\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"temperatureRisk\" />\n                    <span className=\"pl-3\">\n                      {\"Temperature Risk To Establishment\"}\n                    </span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"frostPossible\" />\n                    <span className=\"pl-3\">{\"Frost Seeding Possible\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"cashCrop\" />\n                    <span className=\"pl-3\">{\"Cash Crop Growth Window\"}</span>\n                  </Typography>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Extended Comments\n          </Typography>\n          {crop[\"Notes: Goals\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Goals:</b> {crop[\"Notes: Goals\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n\n          {crop[\"Notes: Weeds\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Weeds:</b> {crop[\"Notes: Weeds\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n\n          {crop[\"Notes: Planting\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Weeds:</b> {crop[\"Notes: Planting\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n      <InformationSheetDictionary />\n    </Fragment>\n  ) : (\n    <Fragment>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Cover Crop Description\n          </Typography>\n\n          <Typography variant=\"body1\" className=\"p-3\">\n            {crop[\"Crop Description\"]}\n          </Typography>\n        </div>\n      </div>\n      <div\n        className=\"d-flex justify-content-center mt-2 mb-2 photosWrapper\"\n        style={{\n          overflowX: \"auto\",\n          whiteSpace: \"nowrap\",\n          flexWrap: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n        }}\n      >\n        <PhotoComponent\n          imageData={crop[\"Image Data\"] ? crop[\"Image Data\"] : null}\n        />\n      </div>\n      <div className=\"row mt-2 coverCropGoalsWrapper\">\n        <div className=\"col-12 p-0\">\n          <Accordion defaultExpanded>\n            <AccordionSummary\n              expandIcon={<ExpandMore />}\n              classes={{ expanded: classes.expanded }}\n            >\n              <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n                Goals\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 text-right\">\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Growing Window</Typography>\n                  </span>\n                  {/* <span className=\"col-3\">{crop[\"Growing Window\"]}</span> */}\n                  <span className=\"col-3\">\n                    <div className=\"blue-bg\">\n                      <div\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          justifyContent: \"center\",\n                          height: \"20px\",\n                        }}\n                      >\n                        <Typography variant=\"body1\">\n                          {crop[\"Growing Window\"]}\n                        </Typography>\n                      </div>\n                    </div>\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Penetrates Plow Pan</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Penetrates Plow Pan\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Nitrogen Scavenging</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Nitrogen Scavenging\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Reduces Topsoil Compaction\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Reduces Topsoil Compaction\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Lasting Residue</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Lasting Residue\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Improve Soil Organic Matter\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Improve Soil Organic Matter\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Prevent Fall Soil Erosion\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Prevent Fall Soil Erosion\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Increase Soil Aggregation\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Increase Soil Aggregation\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Prevent Spring Soil Erosion\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Prevent Spring Soil Erosion\"])}\n                  </span>\n                </div>\n                {/* <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Supports Mycorrhizae\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Supports Mycorrhizae\"])}\n                  </span>\n                </div> */}\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Promote Water Quality\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Promote Water Quality\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Good Grazing</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Good Grazing\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Forage Harvest Value\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Forage Harvest Value\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Pollinator Food</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Pollinator Food\"])}\n                  </span>\n                </div>\n                {crop[\"Nitrogen Fixation\"] ? (\n                  <Fragment>\n                    <div className=\"col-6 mb-2 row\">\n                      <span className=\"col\">\n                        <Typography variant=\"body1\">\n                          Nitrogen Fixation\n                        </Typography>\n                      </span>\n                      <span className=\"col-3\">\n                        {getRating(crop[\"Nitrogen Fixation\"])}\n                      </span>\n                    </div>\n                  </Fragment>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </div>\n      <div className=\"row otherRows mb-4\">\n        <div className=\"col-6 weedsRowWrapper\">\n          <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n            <AccordionSummary\n              expandIcon={<ExpandMore />}\n              classes={{ expanded: classes.expanded }}\n            >\n              <div className=\"col-12 otherHeaderRow p-0\">\n                <Typography variant=\"h6\" className=\"px-3 py-2 text-uppercase\">\n                  Weeds\n                </Typography>\n              </div>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 text-right\">\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Residue Suppresses Summer Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Residue Suppresses Summer Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Outcompetes Summer Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Outcompetes Summer Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Suppresses Winter Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Suppresses Winter Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Persistence</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Persistence\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Volunteer Establishment\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Volunteer Establishment\"])}\n                </div>\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <div className=\"col-6 envTolWrapper\">\n          <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n            <AccordionSummary\n              expandIcon={<ExpandMore />}\n              classes={{ expanded: classes.expanded }}\n            >\n              <div className=\"col-12 otherHeaderRow p-0\">\n                <Typography variant=\"h6\" className=\"px-3 py-2 text-uppercase\">\n                  Environmental Tolerances\n                </Typography>\n              </div>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 text-right\">\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Low Fertility</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Low Fertility\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Drought</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Drought\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Heat</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Heat\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Shade</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Shade\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Flood</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Flood\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Salinity</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Salinity\"])}</div>\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Growth Traits\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Duration</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div\n                      className={`blue-bg ${\n                        crop[\"Duration\"].includes(\"Short-lived Perennial\")\n                          ? `shrt_perennial`\n                          : ``\n                      }`}\n                    >\n                      <Typography variant=\"body1\">\n                        {crop[\"Duration\"].toString()}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Zone Use</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Zone Use\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Shape And Orientation\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div\n                      className={`blueBgFlex ${\n                        crop[\"Shape & Orientation\"].length > 1\n                          ? `borderWrapped`\n                          : ``\n                      }`}\n                    >\n                      {crop[\"Shape & Orientation\"].map((val, index) => (\n                        <div className=\"blue-bg bordered\" key={index}>\n                          <Typography variant=\"body1\">{val}</Typography>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">C:N</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"C to N Ratio\"])}\n                  </div> */}\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Dry Matter (Lbs/A/Yr)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {\" \"}\n                        {`${crop[\"Dry Matter Min (lbs/A/y)\"]} - ${crop[\"Dry Matter Max (lbs/A/y)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil Texture</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2 text-capitalize\">\n                    <div\n                      className={`blueBgFlex ${\n                        crop[\"Soil Textures\"].length > 1 ? `borderWrapped` : ``\n                      }`}\n                    >\n                      {crop[\"Soil Textures\"].map((val, index) => (\n                        <div className=\"blue-bg bordered\" key={index}>\n                          <Typography variant=\"body1\">{val}</Typography>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil PH</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {\" \"}\n                        {`${crop[\"Minimum Tolerant Soil pH\"]} - ${crop[\"Maximum Tolerant Soil pH\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil Moisture Use</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Soil Moisture Use\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Hessian Fly Free Date?\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Hessian Fly Free Date\"]\n                          ? crop[\"Hessian Fly Free Date\"]\n                          : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  {crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"] ? (\n                    <Fragment>\n                      <div className=\"col-9 mb-2\">\n                        <Typography variant=\"body1\">\n                          Nitrogen Accumulation (Lbs/A/Yr)\n                        </Typography>\n                      </div>\n                      <div className=\"col-3 mb-2\">\n                        <div className=\"blue-bg\">\n                          <Typography variant=\"body1\">\n                            {`${crop[\"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"]} - ${crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"]}`}\n                          </Typography>\n                        </div>\n                      </div>\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Ease Of Establishment\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Ease of Establishment\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Establishes Quickly</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Establishes Quickly\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Early Spring Growth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Early Spring Growth\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Flowering Trigger</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Flowering Trigger\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  {/* <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Root Architecture</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div\n                      className={`blueBgFlex ${\n                        crop[\"Root Architecture\"].length > 1\n                          ? `borderWrapped`\n                          : ``\n                      }`}\n                    >\n                      {crop[\"Root Architecture\"].map((val, index) => (\n                        <div className=\"blue-bg bordered\" key={index}>\n                          <Typography\n                            variant=\"body1\"\n                            className=\"text-capitalize\"\n                          >\n                            {val}\n                          </Typography>\n                        </div>\n                      ))}\n                    </div>\n                  </div> */}\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Root Depth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Root Depth\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  {crop[\"Inoculant Type (Legumes Only)\"] ? (\n                    <Fragment>\n                      <div className=\"col-9 mb-2\">\n                        <Typography variant=\"body1\">Inoculant Type</Typography>\n                      </div>\n                      <div className=\"col-3 mb-2\">\n                        <div\n                          className={`blueBgFlex ${\n                            crop[\"Inoculant Type (Legumes Only)\"].length > 1\n                              ? `borderWrapped`\n                              : ``\n                          }`}\n                        >\n                          {crop[\"Inoculant Type (Legumes Only)\"].map(\n                            (val, index) => (\n                              <div className=\"blue-bg bordered\" key={index}>\n                                <Typography\n                                  variant=\"body1\"\n                                  className=\"text-capitalize\"\n                                >\n                                  {val}\n                                </Typography>\n                              </div>\n                            )\n                          )}\n                        </div>\n                      </div>\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Soil Drainage\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"col-12 text-right\">\n                  <SoilDrainageTimeline drainage={crop[\"Soil Drainage\"]} />\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Planting\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Seeds Per Lb</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Seeds per Pound\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Seed Price Per Lb</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg no-bg\">\n                      <RenderSeedPriceIcons\n                        val={crop[\"Seed Price per Pound\"]}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Base Seeding Rate (Lbs/A)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Base Seeding Rate Min (lbs/A)\"]} - ${crop[\"Base Seeding Rate Max (lbs/A)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Drilled Depth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Drilled Depth Min\"]}\" - ${crop[\"Drilled Depth Max\"]}\"`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Aerial Seed?</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Aerial Seeding\"] ? \"Yes\" : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Frost Seed?</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Frost Seeding\"] ? \"Yes\" : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Min Germination Temp (&deg;F)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Min Germination Temp (F)\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Termination\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Tillage At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Tillage at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Tillage At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Tillage at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Freezing At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Freezing at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Freezing At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Freezing at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Chemical At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Chemical at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Chemical At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Chemical at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Mow At Flowering</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Mow at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Roller-Crimp At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Roller Crimp at Flowering\"])}\n                  </div>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Planting and Growth Windows\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      <FiberManualRecord style={{ color: \"#2f80ed\" }} />\n                      &nbsp;Frost Seeding\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg shrt_perennial wd-110\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Frost Seeding\"]\n                          ? `${moment(crop[\"Frost Seeding Start\"], \"YYYY-MM-DD\")\n                              .format(\"MM/DD\")\n                              .toString()} - ${moment(\n                              crop[\"Frost Seeding End\"],\n                              \"YYYY-MM-DD\"\n                            )\n                              .format(\"MM/DD\")\n                              .toString()}`\n                          : \"N/A\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      <FiberManualRecord style={{ color: \"#2d7b7b\" }} />\n                      &nbsp;Reliable Establishment\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {crop[\"Second Reliable Establishment/Growth Start\"] &&\n                    crop[\"Second Reliable Establishment/Growth End\"] ? (\n                      <div className=\"blueBgFlex borderWrapped wd-112\">\n                        <div className=\"blue-bg shrt_perennial wd-110\">\n                          <Typography variant=\"body1\">\n                            {getMonthDayString(\"reliable\", crop)}\n                          </Typography>\n                        </div>\n                        <div className=\"blue-bg shrt_perennial wd-110\">\n                          <Typography variant=\"body1\">\n                            {getMonthDayString(\"reliable-second\", crop)}\n                          </Typography>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"blue-bg shrt_perennial wd-110\">\n                        <Typography variant=\"body1\">\n                          {getMonthDayString(\"reliable\", crop)}\n                        </Typography>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      <FiberManualRecord style={{ color: \"#f2c94c\" }} />\n                      &nbsp;Temperature/Moisture Risk\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {/* <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {getMonthDayString(\"temperature\", crop)}\n                      </Typography>\n                    </div> */}\n                    {crop[\n                      \"Second Temperature/Moisture Risk to Establishment Start\"\n                    ] &&\n                    crop[\n                      \"Second Temperature/Moisture Risk to Establishment End\"\n                    ] ? (\n                      <div className=\"blueBgFlex borderWrapped wd-112\">\n                        <div className=\"blue-bg shrt_perennial wd-110\">\n                          <Typography variant=\"body1\">\n                            {getMonthDayString(\"temperature\", crop)}\n                          </Typography>\n                        </div>\n                        <div className=\"blue-bg shrt_perennial wd-110\">\n                          <Typography variant=\"body1\">\n                            {getMonthDayString(\"temperature-second\", crop)}\n                          </Typography>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"blue-bg shrt_perennial wd-110\">\n                        <Typography variant=\"body1\">\n                          {getMonthDayString(\"temperature\", crop)}\n                        </Typography>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      <FiberManualRecord style={{ color: \"#598445\" }} />\n                      &nbsp;Active Growth Period\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div\n                      className={`blueBgFlex ${\n                        crop[\"Active Growth Period\"].length > 1\n                          ? `borderWrapped`\n                          : ``\n                      }`}\n                    >\n                      {crop[\"Active Growth Period\"].map((val, index) => (\n                        <div className=\"blue-bg bordered\" key={index}>\n                          <Typography variant=\"body1\">{val}</Typography>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Winter Survival</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Winter Survival\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Interseed</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg shrt_perennial wd-110\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Interseed possible\"] ? \"Yes\" : \"N/A\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-12 pt-4\">\n                    <table style={{ width: \"100%\", height: \"40px\" }}>\n                      <tbody>\n                        <tr>\n                          {allMonths.map((month, index) => {\n                            let summerMonths = [\"Jun\", \"Jul\", \"Aug\"];\n                            let winterMonths = [\"Dec\", \"Jan\", \"Feb\"];\n                            let springMonths = [\"Mar\", \"Apr\", \"May\"];\n                            let fallMonths = [\"Sep\", \"Oct\", \"Nov\"];\n                            let activeMonths = [];\n\n                            const getBackground = () => {\n                              if (\n                                crop[\"Active Growth Period\"].includes(\"Winter\")\n                              ) {\n                                activeMonths.push(\"Dec\");\n                                activeMonths.push(\"Jan\");\n                                activeMonths.push(\"Feb\");\n                              }\n                              if (\n                                crop[\"Active Growth Period\"].includes(\"Summer\")\n                              ) {\n                                activeMonths.push(\"Jun\");\n                                activeMonths.push(\"Jul\");\n                                activeMonths.push(\"Aug\");\n                              }\n\n                              if (\n                                crop[\"Active Growth Period\"].includes(\"Fall\")\n                              ) {\n                                activeMonths.push(\"Sep\");\n                                activeMonths.push(\"Oct\");\n                                activeMonths.push(\"Nov\");\n                              }\n\n                              if (\n                                crop[\"Active Growth Period\"].includes(\"Spring\")\n                              ) {\n                                activeMonths.push(\"Mar\");\n                                activeMonths.push(\"Apr\");\n                                activeMonths.push(\"May\");\n                              }\n                              return activeMonths;\n                            };\n                            return (\n                              <td\n                                style={{\n                                  background: getBackground().includes(month)\n                                    ? `#598445`\n                                    : `#f0f7eb`,\n                                  // width: \"100%\",\n                                  height: \"20px\",\n                                  borderRight: `${\n                                    month !== \"Dec\" ? `2px solid white` : ``\n                                  }`,\n                                }}\n                                key={`growth-${index}`}\n                              ></td>\n                            );\n                          })}\n                        </tr>\n                        <tr>\n                          {allMonths.map((month, index) => (\n                            <GrowthWindowComponent\n                              from=\"infosheet\"\n                              data={crop}\n                              key={index}\n                              id={`growthCell${index}`}\n                              month={index}\n                            />\n                          ))}\n                        </tr>\n                        <tr>\n                          {allMonths.map((month, index) => {\n                            return (\n                              <td\n                                key={index}\n                                className={`${\n                                  month === \"Jan\" || month === \"Dec\"\n                                    ? month === \"Jan\"\n                                      ? `text-center`\n                                      : `text-center`\n                                    : `text-center`\n                                }`}\n                              >\n                                <Typography variant=\"body1\">{month}</Typography>\n                              </td>\n                            );\n                          })}\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n\n        <div className=\"col-12 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Extended Comments\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                {crop[\"Notes: Goals\"] ? (\n                  <Typography variant=\"body1\" className=\"p-3\">\n                    {\" \"}\n                    <b>Goals:</b> {crop[\"Notes: Goals\"]}\n                  </Typography>\n                ) : (\n                  \"\"\n                )}\n\n                {crop[\"Notes: Weeds\"] ? (\n                  <Typography variant=\"body1\" className=\"p-3\">\n                    {\" \"}\n                    <b>Weeds:</b> {crop[\"Notes: Weeds\"]}\n                  </Typography>\n                ) : (\n                  \"\"\n                )}\n\n                {crop[\"Notes: Planting\"] ? (\n                  <Typography variant=\"body1\" className=\"p-3\">\n                    {\" \"}\n                    <b>Weeds:</b> {crop[\"Notes: Planting\"]}\n                  </Typography>\n                ) : (\n                  \"\"\n                )}\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-12 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary\n                expandIcon={<ExpandMore />}\n                classes={{ expanded: classes.expanded }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  References & Resources\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography variant=\"body1\" className=\"p-3\">\n                  {currentSources.length > 0\n                    ? currentSources.map((source, index) => (\n                        <Fragment key={index}>\n                          <a\n                            style={{\n                              textDecoration: \"underline\",\n                              color: \"black\",\n                              fontWeight: \"bolder\",\n                            }}\n                            href={source[\"URL\"]}\n                            target=\"_blank\"\n                          >\n                            {source[\"Resource Name\"]}\n                          </a>\n                          , {source[\"Institution or Author\"]}\n                          <br />\n                        </Fragment>\n                      ))\n                    : \"\"}\n                </Typography>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default InformationSheetContent;\n\nconst DummyText = () => {\n  return \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. At imperdiet dui accumsan sit. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Porta non pulvinar neque laoreet suspendisse interdum. Malesuada fames ac turpis egestas integer eget. Eget arcu dictum varius duis at consectetur lorem donec massa. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Enim praesent elementum facilisis leo vel fringilla est ullamcorper. Neque viverra justo nec ultrices dui sapien eget mi proin. Egestas maecenas pharetra convallis posuere. Tortor condimentum lacinia quis vel eros donec. Ultricies integer quis auctor elit sed. Nisi scelerisque eu ultrices vitae auctor eu. Eget felis eget nunc lobortis mattis aliquam faucibus. Mattis aliquam faucibus purus in massa tempor nec.\";\n};\nconst getMonthDayString = (type = \"\", crop = {}) => {\n  switch (type) {\n    case \"reliable\": {\n      const startDate = moment(\n        crop[\"Reliable Establishment/Growth Start\"],\n        \"YYYY-MM-DD\"\n      );\n      const endDate = moment(\n        crop[\"Reliable Establishment/Growth End\"],\n        \"YYYY-MM-DD\"\n      );\n\n      return `${startDate.format(\"MM/DD\")} - ${endDate.format(\"MM/DD\")}`;\n    }\n    case \"reliable-second\": {\n      const startDate = moment(\n        crop[\"Second Reliable Establishment/Growth Start\"],\n        \"YYYY-MM-DD\"\n      );\n      const endDate = moment(\n        crop[\"Second Reliable Establishment/Growth End\"],\n        \"YYYY-MM-DD\"\n      );\n\n      return `${startDate.format(\"MM/DD\")} - ${endDate.format(\"MM/DD\")}`;\n    }\n    case \"temperature\": {\n      if (\n        crop[\"Temperature/Moisture Risk to Establishment Start\"] &&\n        crop[\"Temperature/Moisture Risk to Establishment End\"]\n      ) {\n        const startDate = moment(\n          crop[\"Temperature/Moisture Risk to Establishment Start\"],\n          \"YYYY-MM-DD\"\n        );\n        const endDate = moment(\n          crop[\"Temperature/Moisture Risk to Establishment End\"],\n          \"YYYY-MM-DD\"\n        );\n        return `${startDate.format(\"MM/DD\")} - ${endDate.format(\"MM/DD\")}`;\n      } else {\n        return \"N/A\";\n      }\n    }\n    case \"temperature-second\": {\n      const startDate = moment(\n        crop[\"Second Temperature/Moisture Risk to Establishment Start\"],\n        \"YYYY-MM-DD\"\n      );\n      const endDate = moment(\n        crop[\"Second Temperature/Moisture Risk to Establishment End\"],\n        \"YYYY-MM-DD\"\n      );\n      return `${startDate.format(\"MM/DD\")} - ${endDate.format(\"MM/DD\")}`;\n    }\n    default:\n      return \"\";\n  }\n};\n","import React, { useState, useContext, useEffect, Fragment } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { zoneIcon, getRating, CropImage } from \"../../shared/constants\";\n// import cropDesc from \"../../shared/crop-descriptions.json\";\nimport \"../../styles/cropDetailsModal.scss\";\nimport { Button, Modal, Fade, Backdrop, makeStyles } from \"@material-ui/core\";\n\nimport {\n  PhotoLibrary,\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Close,\n} from \"@material-ui/icons\";\nimport InformationSheetContent from \"../InformationSheet/InformationSheetContent\";\n\n// import Axios from \"axios\";\n// import html2canvas from \"html2canvas\";\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"10%\",\n    overflow: \"scroll\",\n    height: \"100%\",\n    display: \"block\",\n    // display: \"block\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"0px\",\n    // padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n  AccordionSummaryIcon: {\n    \"& div.MuiAccordionSummary-expandIcon.Mui-expanded\": {\n      transform: \"rotate(45deg)\",\n    },\n  },\n}));\n\nconst CropDetailsModalComponent = (props) => {\n  let crop = props.crop;\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  // const [modalOpen, setModalOpen] = useState(true);\n  const [modalData, setModalData] = useState({});\n  const [expanded, setExpanded] = useState(\"panel2\");\n  const [print, setPrint] = useState(false);\n  const handleAccordionChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n  const [sideBarData, setSideBarData] = useState({\n    Taxonomy: [\n      \"Cover Crop Name\",\n      \"Scientific Name\",\n      \"Synonyms\",\n      \"cv, var, or ssp to specify\",\n      \"Cover Crop Group\",\n      \"Family Common Name\",\n      \"Family Scientific Name\",\n      \"Origin\",\n      \"Notes: Taxonomy\",\n    ],\n    Environmental: [\n      \"Drought Tolerance\",\n      \"Flood Tolerance\",\n      \"Heat Tolerance\",\n      \"Low Fertility Tolerance\",\n      \"Salinity Tolerance\",\n      \"Shade Tolerance\",\n      \"Notes: Environmental Tolerances\",\n    ],\n    \"Basic Agronomics\": [\n      \"Zone Use\",\n      \"Active Growth Period\",\n      \"Duration\",\n      \"Shape & Orientation\",\n      \"Hessian Fly-Free Date\",\n      \"C to N Ratio\",\n      \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\",\n      \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\",\n      \"Dry Matter Min (lbs/A/y)\",\n      \"Dry Matter Max (lbs/A/y)\",\n      \"Notes: Basic Agronomics\",\n    ],\n    \"Soil Conditions\": [\n      \"Soil Drainage\",\n      \"Soil Textures\",\n      \"Minimum Tolerant Soil pH\",\n      \"Maximum Tolerant Soil pH\",\n      \"Soil Moisture Use\",\n      \"Loosens Subsurface Soil\",\n      \"Loosens Topsoil\",\n      \"Supports Mycorrhizae\",\n      \"Notes: Soil Conditions\",\n    ],\n    Growth: [\n      \"Ease of Establishment\",\n      \"Establishes Quickly\",\n      \"Early Spring Growth\",\n      \"Flowering Trigger\",\n      \"Growing Window\",\n      \"Root Architecture\",\n      \"Root Depth\",\n      \"Innoculant Type (Legumes Only)\",\n      \"Frees P & K\",\n      \"Notes: Growth, Roots, and Nutrients\",\n    ],\n    Planting: [\n      \"Seeds per Pound\",\n      \"Seed Price per Pound\",\n      \"Base Seeding Rate Min (lbs/A)\",\n      \"Base Seeding Rate Max (lbs/A)\",\n      \"Drilled Depth Min\",\n      \"Drilled Depth Max\",\n      \"Can Aerial Seed?\",\n      \"Broadcast Frost Seeding\",\n      \"Min Germination Temp (F)\",\n      \"Notes: Planting\",\n    ],\n    Termination: [\n      \"Tillage Termination at Vegetative\",\n      \"Tillage Termination at Flowering\",\n      \"Freezing Termination at Vegetative\",\n      \"Freezing Termination at Flowering\",\n      \"Chemical Termination at Vegetative\",\n      \"Chemical Termination at Flowering\",\n      \"Mow Termination at Flowering\",\n      \"Roller Crimp Termination at Flowering\",\n      \"Planting Green\",\n      \"Notes: Termination\",\n    ],\n    \"Grazers & Pollinators\": [\n      \"Harvestability\",\n      \"Grazing Tolerance\",\n      \"Good Grazing\",\n      \"Pollinator Food\",\n      \"Pollinator Habitat\",\n      \"Notes: Grazers & Pollinators\",\n    ],\n    Weeds: [\n      \"Volunteer Establishment\",\n      \"Persistence\",\n      \"Hard Seededness\",\n      \"Outcompetes Weeds\",\n      \"Allelopathic to Weeds\",\n      \"Notes: Weeds\",\n    ],\n    \"Disease and Non-weed Pests\": [\n      \"Discourages Nematodes\",\n      \"Promotes Nematodes\",\n      \"Discourages Pest Insects\",\n      \"Promotes Pest Insects\",\n      \"Suppresses Cash Crop Disease\",\n      \"Promotes Cash Crop Disease\",\n      \"Notes: Disease and Non-weed Pests\",\n    ],\n  });\n\n  const [images, setImages] = useState([\"https://placehold.it/100x100\"]);\n\n  useEffect(() => {\n    setModalData(crop);\n  }, [crop]);\n\n  const handleModalClose = () => {\n    props.setModalOpen(!props.modalOpen);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={props.modalOpen}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n      disableBackdropClick={false}\n      disableEscapeKeyDown={false}\n      // id={`modal-${props.crop.fields[\"id\"]}`}\n    >\n      <Fade in={props.modalOpen}>\n        {modalData.fields ? (\n          <div className=\"modalParentWrapper\">\n            <div\n              className={`cropTableModal modalContainer ${classes.paper}`}\n              id={`cropDetailModal-${modalData.fields[\"id\"]}`}\n            >\n              <div className=\"container-fluid\">\n                <div className=\"row\">\n                  <div\n                    className=\"col-12\"\n                    style={{\n                      background: \"#2D7B7B\",\n                      color: \"white\",\n                      height: \"auto\",\n                      borderTopLeftRadius: \"5px\",\n                      borderTopRightRadius: \"5px\",\n                    }}\n                  >\n                    <div className=\"row\">\n                      <div className=\"col-2 offset-10 text-right\">\n                        {\" \"}\n                        <Button\n                          style={{ color: \"white\" }}\n                          onClick={handleModalClose}\n                        >\n                          <Close />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\" id=\"coverCropModalPrimary\">\n                  <div className=\"col-12\">\n                    <div className=\"row\">\n                      <div className=\"col mt-2\">\n                        <div>{modalData.fields[\"Cover Crop Group\"]}</div>\n                        <div className=\"font-weight-bold\">\n                          {modalData.fields[\"Cover Crop Name\"]}\n                        </div>\n                        <div>{modalData.fields[\"Scientific Name\"]}</div>\n                      </div>\n                      <div\n                        className=\"col\"\n                        style={{\n                          textAlign: \"right\",\n                          paddingRight: \"0px\",\n                          paddingLeft: \"0px\",\n                        }}\n                      >\n                        {crop.fields[\"Image Data\"] ? (\n                          <CropImage\n                            present={true}\n                            src={\n                              crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                                ? `/images/Cover Crop Photos/100x100/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                                : \"https://placehold.it/100x100\"\n                            }\n                            alt={crop.fields[\"Cover Crop Name\"]}\n                          />\n                        ) : (\n                          <CropImage present={false} />\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div\n                    className=\"col-12\"\n                    style={{ background: \"#2D7B7B\", color: \"white\" }}\n                  >\n                    <div className=\"row\">\n                      <div className=\"col-4\">\n                        <Button\n                          style={{ color: \"white\" }}\n                          className=\"dataDict\"\n                          onClick={() => {\n                            window.open(\"/data-dictionary\", \"_blank\");\n                          }}\n                        >\n                          {zoneIcon(20, 20)}\n                          <span className=\"pl-2\">\n                            Plant Hardiness Zone {state.zone} Dataset\n                          </span>\n                        </Button>\n                      </div>\n                      <div className=\"col-2\">\n                        {/* <Button style={{ color: \"white\" }}>\n                        <PhotoLibrary />{\" \"}\n                        <span className=\"pl-2\">View Photos</span>\n                      </Button> */}\n                      </div>\n                      <div className=\"col-4\">\n                        {/* <Button style={{ color: \"white\" }}>Download :</Button>\n                      <Button\n                        href={`/information-sheets/${crop.fields[\"Cover Crop Name\"]}.pdf`}\n                        style={{ color: \"white\" }}\n                        download={`${crop.fields[\"Cover Crop Name\"]}`}\n                      >\n                        <PictureAsPdf />\n                        <span className=\"pl-2\">PDF</span>\n                      </Button>\n                      <Button\n                        style={{ color: \"white\" }}\n                        href={`/csv/${crop.fields[\"Cover Crop Name\"]}.csv`}\n                        download={`${crop.fields[\"Cover Crop Name\"]}`}\n                      >\n                        <FormatListBulleted />\n                        <span className=\"pl-2\">SPREADSHEET</span>\n                      </Button> */}\n                      </div>\n                      <div className=\"col-2 text-right\">\n                        {/* <Button\n                        style={{ color: \"white\" }}\n                        // href={`http://covercrop.tools/information-sheets/${encodeURIComponent(\n                        //   crop.fields[\"Cover Crop Name\"]\n                        // )}.pdf`}\n                        // target=\"_blank\"\n                        onClick={() => {\n                          window.localStorage.setItem(\n                            \"infosheet\",\n                            JSON.stringify(crop.fields)\n                          );\n                          window.open(\"/information-sheet\", \"_blank\");\n                        }}\n                      >\n                        <Print /> <span className=\"pl-2\">PRINT</span>\n                      </Button> */}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"\">\n                  <InformationSheetContent crop={crop.fields} from=\"modal\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div></div>\n        )}\n      </Fade>\n    </Modal>\n  );\n};\nfunction printDiv(divName) {\n  if (document.getElementById(divName)) {\n    var printContents = document.getElementById(divName).innerHTML;\n    var originalContents = document.body.innerHTML;\n\n    document.body.innerHTML = printContents;\n\n    window.print();\n\n    document.body.innerHTML = originalContents;\n  }\n}\nexport default CropDetailsModalComponent;\n","import React from \"react\";\nimport {\n  Modal,\n  Backdrop,\n  Fade,\n  Button,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { CloseRounded, FiberManualRecord } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"1em\",\n    width: \"30%\",\n    // padding: theme.spacing(2, 4, 3)\n  },\n}));\n\nconst CropLegendModal = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Modal\n      open={props.legendModal}\n      onClose={props.handleLegendModal}\n      BackdropComponent={Backdrop}\n      disableBackdropClick={props.disableBackdropClick}\n      className={classes.modal}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={props.legendModal}>\n        <div className={`modalLegendPaper ${classes.paper}`}>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <Typography variant=\"h4\">LEGEND</Typography>\n              </div>\n              <div className=\"col-6 text-right\">\n                <Button onClick={props.handleLegendModal}>\n                  <CloseRounded />\n                </Button>\n              </div>\n            </div>\n            <div className=\"row mt-5\">\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"reliable\" />\n                  <span className=\"pl-3\">{\"Reliable Establishment\"}</span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"temperatureRisk\" />\n                  <span className=\"pl-3\">\n                    {\"Temperature Risk To Establishment\"}\n                  </span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"frostPossible\" />\n                  <span className=\"pl-3\">{\"Frost Seeding Possible\"}</span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"cashCrop\" />\n                  <span className=\"pl-3\">{\"Cash Crop Growth Window\"}</span>\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default CropLegendModal;\n","import React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  LightButton,\n  CustomStyles,\n  allMonths,\n  getRating,\n  trimString,\n  CropImage,\n  flipCoverCropName,\n} from \"../../shared/constants\";\nimport {\n  Button,\n  Typography,\n  Table,\n  CircularProgress,\n  TableHead,\n  TableBody,\n  TableContainer,\n  TableRow,\n  TableCell,\n  ButtonBase,\n  Tooltip,\n  Zoom,\n  makeStyles,\n  Fab,\n} from \"@material-ui/core\";\n\nimport \"../../styles/cropTable.scss\";\nimport {\n  ArrowUpward,\n  ArrowDownward,\n  AddCircle,\n  FiberManualRecord,\n  CloseRounded,\n  RemoveCircle,\n  KeyboardArrowUp,\n  Sort,\n} from \"@material-ui/icons\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport CropDetailsModalComponent from \"./CropDetailsModal\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport CropLegendModal from \"./CropLegendModal\";\n\nconst CropTableComponent = (props) => {\n  // let cropTableElement = document.getElementById(\"#primaryCropTable\");\n  // cropTableElement.addEventListener(\"scroll\", (e) => {\n  //   let tableHead = document.querySelector(\"thead\");\n  //   let scrollTop = cropTableElement.scrollTop;\n  //   tableHead.style.transform = \"translateY(\" + scrollTop + \"px)\";\n  // });\n\n  const cropData = props.cropData || [];\n  const inactiveCropData = props.inactiveCropData || [];\n  const activeCropData = props.activeCropData || [];\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const [state, dispatch] = useContext(Context);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const [selectedCropsIds, setSelectedCropsIds] = useState([]);\n  const selectedBtns = state.selectedCrops.map((crop) => {\n    return crop.id;\n  });\n\n  const handleModalOpen = (crop) => {\n    // setModalOpen(true);\n    // put data inside modal\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n\n  const [showGrowthWindow, setShowGrowthWindow] = useState(true);\n  const [legendModal, setLegendModal] = useState(false);\n  const handleLegendModal = () => {\n    setLegendModal(!legendModal);\n  };\n\n  useEffect(() => {\n    props.showGrowthWindow\n      ? setShowGrowthWindow(true)\n      : setShowGrowthWindow(false);\n\n    // console.log(cropData);\n  }, [props.showGrowthWindow]);\n\n  useEffect(() => {\n    if (state.selectedCrops.length > 0) {\n      let selectedIds = state.selectedCrops.map((crop) => {\n        return crop[\"id\"];\n      });\n\n      setSelectedCropsIds(selectedIds);\n    }\n  }, [state.progress]);\n\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    // if (container.classList.contains(\"activeCartBtn\")) {\n    //   // change text back to 'add to list' and remove element from state\n\n    //   if (container.textContent === \"ADDED\") {\n    //     container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n    //     container.classList.remove(\"activeCartBtn\");\n    //     toAdd = false;\n    //   } else toAdd = true;\n\n    //   // this.state.selectedCrops.splice(x, 1);\n    //   // get index of the element\n    // } else {\n    //   // change text to 'added' and add element to state\n\n    //   if (container.textContent === \"ADD TO LIST\") {\n    //     container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n    //     container.classList.add(\"activeCartBtn\");\n    //     toAdd = true;\n    //   } else toAdd = false;\n    // }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.id;\n        })\n        .indexOf(`${cropId}`);\n      if (removeIndex === -1) {\n        // Element not in array, add new\n        // let newActives = props.activeCropData.map((crop) => {\n        //   if (crop.fields.id === cropId) {\n        //     crop.fields[\"inBasket\"] = true;\n        //   } else {\n        //     crop.fields[\"inBasket\"] = false;\n        //   }\n        // });\n\n        // props.setActiveCropData(newActives);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: false,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Added`);\n      } else {\n        // element exists, remove\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        // let newActives = props.activeCropData.map((crop) => {\n        //   if (crop.fields.id === cropId) {\n        //     crop.fields[\"inBasket\"] = false;\n        //   }\n        // });\n\n        // props.setActiveCropData(newActives);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: false,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Removed`);\n      }\n    } else {\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: false,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Added`);\n    }\n  };\n\n  const getCardFlex = (crop, indexKey) => {\n    let goalsLength = state.selectedGoals.length;\n\n    return (\n      <Fragment>\n        {goalsLength > 0\n          ? state.selectedGoals.map((goal, index) => (\n              <TableCell\n                style={{ textAlign: \"center\" }}\n                key={index}\n                className=\"goalCells\"\n              >\n                <div>\n                  <Tooltip\n                    arrow\n                    placement=\"bottom\"\n                    title={\n                      <div className=\"filterTooltip text-capitalize\">\n                        <p>\n                          {`Goal ${index + 1}`}\n                          {\": \"}\n                          {goal}\n                        </p>\n                      </div>\n                    }\n                  >\n                    {getRating(crop.fields[goal])}\n                  </Tooltip>\n                </div>\n              </TableCell>\n            ))\n          : \"\"}\n        {showGrowthWindow ? (\n          <TableCell style={goalsLength === 0 ? { width: \"50%\" } : {}}>\n            <table style={{ width: \"100%\", height: \"40px\" }}>\n              <tbody>\n                <tr>\n                  {allMonths.map((month, index) => (\n                    <GrowthWindowComponent\n                      from=\"tableAll\"\n                      data={crop.fields}\n                      key={index}\n                      id={`growthCell${index}`}\n                      month={index}\n                    />\n                  ))}\n                </tr>\n                <tr>\n                  {state.selectedGoals.length === 0\n                    ? allMonths.map((month, index) => (\n                        <td key={index}>{month}</td>\n                      ))\n                    : allMonths.map((month, index) =>\n                        month === \"Jan\" || month === \"Dec\" ? (\n                          <td\n                            key={index}\n                            style={index === 11 ? { textAlign: \"right\" } : {}}\n                          >\n                            <Typography variant=\"body1\">{month}</Typography>\n                          </td>\n                        ) : (\n                          <td key={index}></td>\n                        )\n                      )}\n                </tr>\n              </tbody>\n            </table>\n          </TableCell>\n        ) : (\n          \"\"\n        )}\n        <TableCell style={{ maxWidth: \"150px\", textAlign: \"center\" }}>\n          <div className=\"d-flex w-100 justify-content-center align-items-center flex-column\">\n            <LightButton\n              id={`cartBtn${indexKey}`}\n              style={{\n                borderRadius: CustomStyles().nonRoundedRadius,\n                width: \"150px\",\n              }}\n              className={\n                selectedBtns.includes(crop.fields.id)\n                  ? \"activeCartBtn\"\n                  : \"inactiveCartBtn\"\n              }\n              onClick={() => {\n                addCropToBasket(\n                  crop.fields[\"id\"],\n                  crop.fields[\"Cover Crop Name\"],\n                  `cartBtn${indexKey}`,\n                  crop.fields\n                );\n              }}\n            >\n              {selectedBtns.includes(crop.fields.id) ? \"ADDED\" : \"ADD TO LIST\"}\n            </LightButton>{\" \"}\n            <Button size=\"small\" onClick={() => handleModalOpen(crop)}>\n              View Details\n            </Button>\n          </div>\n        </TableCell>\n      </Fragment>\n    );\n  };\n\n  const activeCropPresent = () => {\n    if (activeCropData.length > 0) return true;\n    else {\n      return false;\n    }\n  };\n  const inactiveCropPresent = () => {\n    if (inactiveCropData.length > 0) return true;\n    else return false;\n  };\n\n  const RenderActiveInactiveCropData = () => {\n    return (\n      <Fragment>\n        {activeCropPresent\n          ? activeCropData.map((crop, index) => {\n              if (crop.fields[\"Zone Decision\"] === \"Include\")\n                return (\n                  <Fragment key={index}>\n                    <TableRow>\n                      <TableCell colSpan={42}></TableCell>\n                    </TableRow>\n                    <TableRow key={`croprow${index}`} id={crop.fields[\"id\"]}>\n                      <TableCell\n                        style={{\n                          height:\n                            crop.fields[\"Cover Crop Group\"].toLowerCase() ===\n                            \"legume\"\n                              ? `146px`\n                              : `auto`,\n                        }}\n                      >\n                        <div className=\"container-fluid\">\n                          <div className=\"row\">\n                            <div className=\"col-12 col-md-4 pr-md-0 pl-md-1\">\n                              {crop.fields[\"Image Data\"] ? (\n                                <CropImage\n                                  present={true}\n                                  src={\n                                    crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                                      ? `/images/Cover Crop Photos/100x100/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                                      : \"https://placehold.it/100x100\"\n                                  }\n                                  alt={crop.fields[\"Cover Crop Name\"]}\n                                />\n                              ) : (\n                                <CropImage present={false} />\n                              )}\n                            </div>\n                            <div className=\"col-12 col-md-8 row pl-md-0 pr-md-1\">\n                              <div className=\"col-12 p-md-0\">\n                                <Typography variant=\"h6\">\n                                  {flipCoverCropName(\n                                    crop.fields[\"Cover Crop Name\"]\n                                  )}\n                                </Typography>\n                              </div>\n                              <div className=\"col-12 p-md-0\">\n                                <Typography\n                                  variant=\"body1\"\n                                  style={{\n                                    color: \"gray\",\n                                    fontWeight: \"normal\",\n                                    fontStyle: \"italic\",\n                                    fontSize: \"small\",\n                                  }}\n                                >\n                                  {trimString(\n                                    crop.fields[\"Scientific Name\"],\n                                    25\n                                  )}\n                                </Typography>\n                              </div>\n                              <div className=\"col-12 p-md-0\">\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  className=\"text-uppercase\"\n                                  style={{ color: \"gray\" }}\n                                >\n                                  {crop.fields[\"Cover Crop Group\"]}\n                                </Typography>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell style={{ textAlign: \"left\" }}>\n                        <table>\n                          <tbody>\n                            {crop.fields[\"Cover Crop Group\"].toLowerCase() ===\n                            \"legume\" ? (\n                              <tr>\n                                <td>\n                                  <Typography\n                                    variant=\"subtitle2\"\n                                    component=\"b\"\n                                    className=\"\"\n                                  >\n                                    TOTAL N:\n                                  </Typography>\n                                </td>\n                                <td>\n                                  <Tooltip\n                                    arrow\n                                    placement=\"right\"\n                                    title=\"lbs/A/y\"\n                                  >\n                                    <Typography\n                                      variant=\"subtitle2\"\n                                      component=\"b\"\n                                    >\n                                      {\n                                        crop.fields[\n                                          \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"\n                                        ]\n                                      }\n                                      -\n                                      {\n                                        crop.fields[\n                                          \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"\n                                        ]\n                                      }\n                                    </Typography>\n                                  </Tooltip>\n                                </td>\n                              </tr>\n                            ) : (\n                              \"\"\n                            )}\n                            <tr>\n                              <td>\n                                {\" \"}\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"\"\n                                >\n                                  DRY MATTER:\n                                </Typography>\n                              </td>\n                              <td>\n                                <Tooltip\n                                  arrow\n                                  placement=\"right\"\n                                  title=\"lbs/A/y\"\n                                >\n                                  <Typography variant=\"subtitle2\" component=\"b\">\n                                    {crop.fields[\"Dry Matter Min (lbs/A/y)\"]}-\n                                    {crop.fields[\"Dry Matter Max (lbs/A/y)\"]}\n                                  </Typography>\n                                </Tooltip>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"\"\n                                >\n                                  DURATION:\n                                </Typography>\n                              </td>\n                              <td>\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"text-uppercase\"\n                                >\n                                  {crop.fields[\"Duration\"]\n                                    .toString()\n                                    .toLowerCase() === \"short-lived perennial\"\n                                    ? \"Perennial\"\n                                    : crop.fields[\"Duration\"].toString()}\n                                </Typography>\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </TableCell>\n                      {getCardFlex(crop, index)}\n                    </TableRow>\n                  </Fragment>\n                );\n            })\n          : \"\"}\n\n        {inactiveCropPresent\n          ? inactiveCropData.map((crop, index) => {\n              if (crop.fields[\"Zone Decision\"] === \"Include\")\n                return (\n                  <Fragment key={index}>\n                    <TableRow className=\"inactiveCropRow\">\n                      <TableCell colSpan={42}></TableCell>\n                    </TableRow>\n                    <TableRow\n                      className=\"inactiveCropRow\"\n                      key={`croprow${index}`}\n                      id={crop.fields[\"id\"]}\n                      style={{ opacity: \"0.2\" }}\n                    >\n                      <TableCell\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                        }}\n                      >\n                        {crop.fields[\"Image Data\"] ? (\n                          <CropImage\n                            present={true}\n                            src={\n                              crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                                ? `/images/Cover Crop Photos/100x100/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                                : \"https://placehold.it/100x100\"\n                            }\n                            alt={crop.fields[\"Cover Crop Name\"]}\n                          />\n                        ) : (\n                          <CropImage present={false} />\n                        )}\n\n                        <div className=\"cropDetailsText\" style={{}}>\n                          <div className=\"part1_ut\">\n                            <span className=\"cropName font-weight-lighter\">\n                              <Typography variant=\"h6\">\n                                {\" \"}\n                                {flipCoverCropName(\n                                  crop.fields[\"Cover Crop Name\"]\n                                )}\n                              </Typography>\n                            </span>\n                            <span\n                              className=\"cropScientificName\"\n                              style={{ color: \"gray\" }}\n                            >\n                              {trimString(crop.fields[\"Scientific Name\"], 25)}\n                            </span>\n                            <span\n                              className=\"cropCategory text-uppercase\"\n                              style={{ color: \"gray\" }}\n                            >\n                              {crop.fields[\"Cover Crop Group\"]}\n                            </span>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell style={{ textAlign: \"left\" }}>\n                        <table>\n                          <tbody>\n                            {crop.fields[\"Cover Crop Group\"].toLowerCase() ===\n                            \"legume\" ? (\n                              <tr>\n                                <td>\n                                  <Typography\n                                    variant=\"subtitle2\"\n                                    component=\"b\"\n                                    className=\"\"\n                                  >\n                                    TOTAL N:\n                                  </Typography>\n                                </td>\n                                <td>\n                                  <Tooltip\n                                    arrow\n                                    placement=\"right\"\n                                    title=\"lbs/A/y\"\n                                  >\n                                    <Typography\n                                      variant=\"subtitle2\"\n                                      component=\"b\"\n                                    >\n                                      {\n                                        crop.fields[\n                                          \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"\n                                        ]\n                                      }\n                                      -\n                                      {\n                                        crop.fields[\n                                          \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"\n                                        ]\n                                      }\n                                    </Typography>\n                                  </Tooltip>\n                                </td>\n                              </tr>\n                            ) : (\n                              \"\"\n                            )}\n                            <tr>\n                              <td>\n                                {\" \"}\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"\"\n                                >\n                                  DRY MATTER:\n                                </Typography>\n                              </td>\n                              <td>\n                                <Tooltip\n                                  arrow\n                                  placement=\"right\"\n                                  title=\"lbs/A/y\"\n                                >\n                                  <Typography variant=\"subtitle2\" component=\"b\">\n                                    {crop.fields[\"Dry Matter Min (lbs/A/y)\"]}-\n                                    {crop.fields[\"Dry Matter Max (lbs/A/y)\"]}\n                                  </Typography>\n                                </Tooltip>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"\"\n                                >\n                                  DURATION:\n                                </Typography>\n                              </td>\n                              <td>\n                                <Typography\n                                  variant=\"subtitle2\"\n                                  component=\"b\"\n                                  className=\"text-uppercase\"\n                                >\n                                  {crop.fields[\"Duration\"]\n                                    .toString()\n                                    .toLowerCase() === \"short-lived perennial\"\n                                    ? \"Perennial\"\n                                    : crop.fields[\"Duration\"].toString()}\n                                </Typography>\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </TableCell>\n                      {getCardFlex(crop, index)}\n                    </TableRow>\n                  </Fragment>\n                );\n            })\n          : \"\"}\n      </Fragment>\n    );\n  };\n\n  const [maxTableHeight, setMaxTableHeight] = useState(850);\n\n  const [tbodyHeight, setTbodyHeight] = useState(0);\n  const [theadHeight, setTheadHeight] = useState(0);\n\n  useEffect(() => {\n    if (document.querySelector(\"thead.MuiTableHead-root.tableHeadWrapper\")) {\n      const theadComputedHeight = document\n        .querySelector(\"thead.MuiTableHead-root.tableHeadWrapper\")\n        .getBoundingClientRect().height;\n\n      setTbodyHeight(maxTableHeight - theadComputedHeight);\n      setTheadHeight(theadComputedHeight);\n    }\n    // console.log(tbodyHeight);\n  });\n\n  const [nameSortFlag, setNameSortFlag] = useState(true);\n  const [selectedCropsSortFlag, setSelectedCropsSortFlag] = useState(true);\n  const sortBySelectedCrops = () => {\n    let selectedCropsShadow = state.selectedCrops;\n    let activeCropDataShadow = props.activeCropData;\n    let inactiveCropDataShadow = props.inactiveCropData;\n    if (selectedCropsSortFlag) {\n      if (selectedCropsShadow.length > 0) {\n        let selectedCropIds = [];\n        selectedCropsShadow.forEach((crop) => {\n          selectedCropIds.push(crop.id);\n        });\n        let newActiveShadow = activeCropDataShadow.map((crop) => {\n          if (selectedCropIds.includes(crop.fields.id)) {\n            crop[\"inCart\"] = true;\n          } else {\n            crop[\"inCart\"] = false;\n          }\n          return crop;\n        });\n\n        if (inactiveCropDataShadow.length > 0) {\n          let newInactiveShadow = inactiveCropDataShadow.map((crop) => {\n            if (selectedCropIds.includes(crop.fields.id)) {\n              crop[\"inCart\"] = true;\n            } else {\n              crop[\"inCart\"] = false;\n            }\n            return crop;\n          });\n          newInactiveShadow.sort((a) => {\n            if (a.inCart) {\n              return -1;\n            } else {\n              return 1;\n            }\n          });\n          props.setInactiveCropData(newInactiveShadow);\n        }\n\n        // console.log(newActiveShadow);\n        // console.log(selectedCropIds);\n\n        if (newActiveShadow.length > 0) {\n          newActiveShadow.sort((a) => {\n            if (a.inCart) {\n              return -1;\n            } else {\n              return 1;\n            }\n          });\n\n          props.setActiveCropData(newActiveShadow);\n        }\n\n        // if(inactiveCropDataShadow.length > 0) {\n\n        // }\n      }\n    } else {\n      // sort back to original values\n\n      const { selectedGoals } = state;\n\n      selectedGoals\n        .slice()\n        .reverse()\n        .forEach((goal) => {\n          activeCropDataShadow.sort((a, b) => {\n            if (a.fields[goal] && b.fields[goal]) {\n              if (a.fields[goal] > b.fields[goal]) {\n                return -1;\n              } else {\n                return 1;\n              }\n            }\n            return 0;\n          });\n          if (inactiveCropDataShadow.length > 0) {\n            inactiveCropDataShadow.sort((a, b) => {\n              if (a.fields[goal] && b.fields[goal]) {\n                if (a.fields[goal] > b.fields[goal]) {\n                  return -1;\n                } else {\n                  return 1;\n                }\n              }\n              return 0;\n            });\n          }\n        });\n\n      props.setActiveCropData(activeCropDataShadow);\n      if (inactiveCropDataShadow.length > 0) {\n        props.setInactiveCropData(inactiveCropDataShadow);\n      }\n    }\n    setSelectedCropsSortFlag(!selectedCropsSortFlag);\n  };\n  const sortCropsByName = () => {\n    let activeCropDataShadow = props.activeCropData;\n    let inactiveCropDataShadow = props.inactiveCropData;\n    // alert(`${activeCropDataShadow.length}, ${inactiveCropDataShadow.length}`);\n    if (nameSortFlag) {\n      if (activeCropDataShadow.length > 0) {\n        activeCropDataShadow.sort((a, b) => {\n          var firstCropName = flipCoverCropName(\n            a.fields[\"Cover Crop Name\"].toLowerCase()\n          );\n          var secondCropName = flipCoverCropName(\n            b.fields[\"Cover Crop Name\"].toLowerCase()\n          );\n          if (firstCropName < secondCropName) {\n            return -1;\n          }\n          if (firstCropName > secondCropName) {\n            return 1;\n          }\n          return 0;\n        });\n        props.setActiveCropData(activeCropDataShadow);\n      }\n\n      if (inactiveCropDataShadow.length > 0) {\n        inactiveCropDataShadow.sort((a, b) => {\n          var firstCropName = flipCoverCropName(\n            a.fields[\"Cover Crop Name\"].toLowerCase()\n          );\n          var secondCropName = flipCoverCropName(\n            b.fields[\"Cover Crop Name\"].toLowerCase()\n          );\n          if (firstCropName < secondCropName) {\n            return -1;\n          }\n          if (firstCropName > secondCropName) {\n            return 1;\n          }\n          return 0;\n        });\n        props.setInactiveCropData(inactiveCropDataShadow);\n      }\n    } else {\n      // if (activeCropDataShadow.length > 0) {\n      //   activeCropDataShadow.sort((a, b) => {\n      //     var firstCropName = flipCoverCropName(\n      //       a.fields[\"Cover Crop Name\"].toLowerCase()\n      //     );\n      //     var secondCropName = flipCoverCropName(\n      //       b.fields[\"Cover Crop Name\"].toLowerCase()\n      //     );\n      //     if (firstCropName < secondCropName) {\n      //       return 1;\n      //     }\n      //     if (firstCropName > secondCropName) {\n      //       return -1;\n      //     }\n      //     return 0;\n      //   });\n      //   props.setActiveCropData(activeCropDataShadow);\n      // }\n\n      // if (inactiveCropDataShadow.length > 0) {\n      //   inactiveCropDataShadow.sort((a, b) => {\n      //     var firstCropName = flipCoverCropName(\n      //       a.fields[\"Cover Crop Name\"].toLowerCase()\n      //     );\n      //     var secondCropName = flipCoverCropName(\n      //       b.fields[\"Cover Crop Name\"].toLowerCase()\n      //     );\n      //     if (firstCropName < secondCropName) {\n      //       return 1;\n      //     }\n      //     if (firstCropName > secondCropName) {\n      //       return -1;\n      //     }\n      //     return 0;\n      //   });\n      //   props.setInactiveCropData(inactiveCropDataShadow);\n      // }\n\n      // reset to default\n      const { selectedGoals } = state;\n\n      selectedGoals\n        .slice()\n        .reverse()\n        .forEach((goal) => {\n          activeCropDataShadow.sort((a, b) => {\n            if (a.fields[goal] && b.fields[goal]) {\n              if (a.fields[goal] > b.fields[goal]) {\n                return -1;\n              } else {\n                return 1;\n              }\n            }\n            return 0;\n          });\n          if (inactiveCropDataShadow.length > 0) {\n            inactiveCropDataShadow.sort((a, b) => {\n              if (a.fields[goal] && b.fields[goal]) {\n                if (a.fields[goal] > b.fields[goal]) {\n                  return -1;\n                } else {\n                  return 1;\n                }\n              }\n              return 0;\n            });\n          }\n        });\n      props.setActiveCropData(activeCropDataShadow);\n      if (inactiveCropDataShadow.length > 0) {\n        props.setInactiveCropData(inactiveCropDataShadow);\n      }\n    }\n\n    setNameSortFlag(!nameSortFlag);\n  };\n\n  return cropData.length !== 0 ? (\n    <Fragment>\n      <TableContainer\n        className=\"table-responsive calendarViewTableWrapper\"\n        component=\"div\"\n        // style={{ maxHeight: maxTableHeight }}\n      >\n        <Table\n          stickyHeader\n          className=\"table table-borderless table-sm\"\n          id=\"primaryCropTable\"\n        >\n          <TableHead className=\"tableHeadWrapper\">\n            <TableRow className=\"theadFirst\">\n              <TableCell\n                style={{\n                  backgroundColor: \"white\",\n                  color: \"white\",\n                  visibility: \"hidden\",\n                }}\n                colSpan=\"2\"\n              >\n                blank\n              </TableCell>\n\n              {state.selectedGoals.length > 0 ? (\n                <TableCell\n                  colSpan={state.selectedGoals.length}\n                  style={{\n                    borderBottom: \"5px solid white\",\n                    backgroundColor: \"#abd08f\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  <Tooltip\n                    arrow\n                    placement=\"top\"\n                    interactive\n                    title={\n                      <div className=\"filterTooltip\">\n                        <p>See filter bar for cover cropping goals.</p>\n                      </div>\n                    }\n                  >\n                    <Typography variant=\"body2\">\n                      <Button\n                        onClick={() => {\n                          console.log(props.sortPreference);\n                          props.sortAllCrops(\n                            props.sortPreference === \"desc\" ? \"asc\" : \"desc\"\n                          );\n                        }}\n                      >\n                        {props.sortPreference === \"asc\" ? (\n                          <Sort\n                            style={{\n                              color: CustomStyles().secondaryProgressBtnColor,\n                            }}\n                          />\n                        ) : (\n                          <Sort\n                            style={{\n                              color: CustomStyles().progressColor,\n                            }}\n                          />\n                        )}\n                        &nbsp; COVER CROPPING GOALS\n                      </Button>\n                    </Typography>\n                  </Tooltip>\n                </TableCell>\n              ) : (\n                \"\"\n              )}\n\n              <TableCell\n                style={{\n                  backgroundColor: \"#abd08f\",\n                  textAlign: \"center\",\n                  borderRight: \"5px solid white\",\n                  borderBottom: \"5px solid white\",\n                }}\n              >\n                <Typography variant=\"body2\">\n                  <Button\n                    startIcon={<AddCircle />}\n                    onClick={handleLegendModal}\n                    // onClick={() => {\n                    //   const ele = document.getElementById(\"legendWrapper\");\n                    //   if (ele.classList.contains(\"d-none\")) {\n                    //     ele.classList.remove(\"d-none\");\n                    //   } else {\n                    //     ele.classList.add(\"d-none\");\n                    //   }\n                    // }}\n                  >\n                    {\" \"}\n                    LEGEND\n                  </Button>\n                </Typography>\n\n                <div\n                  id=\"legendWrapper\"\n                  className=\"d-none\"\n                  style={{\n                    position: \"fixed\",\n                    backgroundColor: \"rgba(171, 208, 143, 0.8)\",\n                    bottom: 0,\n                    zIndex: 999,\n                    textAlign: \"left\",\n                  }}\n                >\n                  <div className={`modalLegendPaper`}>\n                    <div className=\"container-fluid\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <Typography variant=\"h5\">LEGEND</Typography>\n                        </div>\n\n                        <div className=\"col-6 text-right\">\n                          <Button\n                            onClick={() => {\n                              const ele = document.getElementById(\n                                \"legendWrapper\"\n                              );\n                              ele.classList.add(\"d-none\");\n                            }}\n                          >\n                            <CloseRounded />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"row mt-2\">\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"reliable\" />\n                            <span className=\"pl-3\">\n                              {\"Reliable Establishment\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"temperatureRisk\" />\n                            <span className=\"pl-3\">\n                              {\"Temperature Risk To Establishment\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"frostPossible\" />\n                            <span className=\"pl-3\">\n                              {\"Frost Seeding Possible\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"cashCrop\" />\n                            <span className=\"pl-3\">\n                              {\"Cash Crop Growth Window\"}\n                            </span>\n                          </Typography>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell\n                style={{\n                  backgroundColor: \"white\",\n                  color: \"white\",\n                  visibility: \"hidden\",\n                }}\n              >\n                blank\n              </TableCell>\n            </TableRow>\n            <TableRow className=\"theadSecond\">\n              <TableCell\n                style={{\n                  width: \"30%\",\n                  backgroundColor: \"#abd08f\",\n                  borderRight: \"5px solid white\",\n                }}\n              >\n                <Typography variant=\"body1\">\n                  <Button onClick={sortCropsByName}>\n                    {nameSortFlag ? (\n                      <Sort\n                        style={{\n                          color: CustomStyles().secondaryProgressBtnColor,\n                        }}\n                      />\n                    ) : (\n                      <Sort\n                        style={{\n                          color: CustomStyles().progressColor,\n                        }}\n                      />\n                    )}\n                    &nbsp; COVER CROPS\n                  </Button>\n                </Typography>\n              </TableCell>\n              <TableCell\n                style={{\n                  maxWidth: \"250px\",\n                  backgroundColor: \"#abd08f\",\n                  borderRight: \"5px solid white\",\n                }}\n              >\n                <Typography variant=\"body1\">\n                  {\" \"}\n                  <Button>Growth Traits</Button>\n                </Typography>\n              </TableCell>\n              {state.selectedGoals.length > 0\n                ? state.selectedGoals.map((goal, index) => {\n                    let lastIndex = state.selectedGoals.length - 1;\n                    return (\n                      <TableCell\n                        key={index}\n                        style={{\n                          wordBreak: \"break-word\",\n                          maxWidth: \"185px\",\n                          backgroundColor: \"#abd08f\",\n                          textAlign: \"center\",\n                          borderRight:\n                            index === lastIndex ? \"5px solid white\" : \"none\",\n                        }}\n                      >\n                        <Typography variant=\"body1\">\n                          {/* <Button>{goal.toUpperCase()}</Button> */}\n                          <Tooltip\n                            placement=\"bottom\"\n                            arrow\n                            title={\n                              <div className=\"filterTooltip text-capitalize\">\n                                <p>{goal}</p>\n                              </div>\n                            }\n                          >\n                            <Button>{`Goal ${index + 1}`}</Button>\n                          </Tooltip>\n                        </Typography>\n                      </TableCell>\n                    );\n                  })\n                : \"\"}\n\n              {showGrowthWindow ? (\n                <TableCell\n                  style={{\n                    backgroundColor: \"#abd08f\",\n                    textAlign: \"center\",\n                    borderRight: \"5px solid white\",\n                    width: \"180px\",\n                  }}\n                >\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    <Button>PLANTING WINDOW</Button>\n                  </Typography>\n                </TableCell>\n              ) : (\n                \"\"\n              )}\n\n              <TableCell\n                style={{\n                  backgroundColor: \"#abd08f\",\n                  textAlign: \"center\",\n                  width: \"165px\",\n                }}\n              >\n                <Typography variant=\"body1\">\n                  <Button onClick={sortBySelectedCrops}>\n                    {selectedCropsSortFlag ? (\n                      <Sort\n                        style={{\n                          color: CustomStyles().secondaryProgressBtnColor,\n                        }}\n                      />\n                    ) : (\n                      <Sort\n                        style={{\n                          color: CustomStyles().progressColor,\n                        }}\n                      />\n                    )}\n                    &nbsp;MY LIST\n                  </Button>\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody className=\"tableBodyWrapper\">\n            {activeCropData.length > 0 || inactiveCropData.length > 0 ? (\n              <Fragment>\n                {activeCropData.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={42}>\n                      <div\n                        style={{\n                          width: \"100%\",\n                          height: tbodyHeight,\n                          position: \"absolute\",\n                          top: theadHeight,\n                          backgroundColor: \"rgba(255,255,255, 0.1)\",\n                          zIndex: 1,\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        <div\n                          style={{\n                            backgroundColor: \"rgba(171, 208, 143, 1)\",\n                            minHeight: \"100px\",\n                            zIndex: 2,\n                          }}\n                          className=\"px-5 py-5 d-flex justify-content-center align-items-center text-center\"\n                        >\n                          <div>\n                            <Typography\n                              variant=\"body1\"\n                              gutterBottom\n                              className=\"pb-2\"\n                            >\n                              No cover crops match your selected Cover Crop\n                              Property filters.\n                            </Typography>\n                            <Typography\n                              variant=\"body1\"\n                              gutterBottom\n                              className=\"pb-2\"\n                            >\n                              Consider expanding your Cover Crop Property filter\n                              criteria.\n                            </Typography>\n                            <Typography\n                              variant=\"body1\"\n                              gutterBottom\n                              className=\"\"\n                            >\n                              Alternatively, clear all Cover Crop Property\n                              filters.\n                            </Typography>\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  \"\"\n                )}\n\n                <RenderActiveInactiveCropData />\n              </Fragment>\n            ) : (\n              // <RenderDefaultCropData />\n              <TableRow>\n                <TableCell>Loading</TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <div className=\"cropGoals\"></div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n      <CropLegendModal\n        legendModal={legendModal}\n        handleLegendModal={handleLegendModal}\n        disableBackdropClick={false}\n      />\n    </Fragment>\n  ) : (\n    <div className=\"table-responsive calendarViewTableWrapper\">\n      <div className=\"circularCentered\">\n        <CircularProgress size={\"6em\"} />\n      </div>\n    </div>\n  );\n};\n\nexport default CropTableComponent;\n","import React, { useContext, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Context } from \"../../store/Store\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\nimport { useSnackbar } from \"notistack\";\nimport { trimString } from \"../../shared/constants\";\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: 230,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst MyCoverCropCardsComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const data = props.data;\n  const btnId = props.btnId;\n  const classes = useStyles();\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const handleModalOpen = () => {\n    // put data inside modal\n\n    setModalData({ fields: data });\n\n    setModalOpen(true);\n  };\n\n  const removeCrop = (cropName) => {\n    var removeIndex = state.selectedCrops\n      .map(function (item) {\n        return item.btnId;\n      })\n      .indexOf(`${btnId}`);\n\n    if (removeIndex === -1) {\n      // element not in array\n      // not possible ?\n    } else {\n      // alert(removeIndex);\n      let selectedCropsCopy = state.selectedCrops;\n\n      selectedCropsCopy.splice(removeIndex, 1);\n      // console.log(selectedCropsCopy);\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: selectedCropsCopy,\n          snackOpen: false,\n          snackMessage: `Removed`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Removed`);\n\n      // this.state.selectedCrops.splice(removeIndex, 1);\n    }\n  };\n  return (\n    <div className={`${props.cardNo === 1 ? `pl-0 pr-2 pt-2 pb-2` : `p-2`}`}>\n      <Card className={classes.card}>\n        <CardMedia\n          image={\n            data[\"Image Data\"][\"Key Thumbnail\"]\n              ? `/images/Cover Crop Photos/${data[\"Image Data\"][\"Directory\"]}/${data[\"Image Data\"][\"Key Thumbnail\"]}`\n              : \"https://placehold.it/100x100?text=Placeholder\"\n          }\n          className={classes.media}\n          title={data[\"Cover Crop Name\"]}\n        />\n        <CardContent>\n          <div\n            className=\"font-weight-bold text-muted text-uppercase\"\n            style={{ fontSize: \"10pt\" }}\n          >\n            {data[\"Family Common Name\"]}\n          </div>\n          <Typography\n            variant=\"h6\"\n            className=\"font-weight-bold text-capitalize text-truncate\"\n          >\n            {data[\"Cover Crop Name\"]}\n          </Typography>\n          <small className=\"font-italic text-muted\">\n            {trimString(data[\"Scientific Name\"], 25)}\n          </small>\n          <div>\n            <small className=\"text-muted\">\n              <a\n                style={{\n                  textDecoration: \"underline\",\n                  color: \"rgb(53, 153, 155)\",\n                }}\n                onClick={() => handleModalOpen()}\n              >\n                View Crop Details\n              </a>\n            </small>\n          </div>\n        </CardContent>\n\n        <CardActionArea\n          style={{\n            backgroundColor: \"#e3f2f4\",\n            textAlign: \"center\",\n            padding: \"0.5em\",\n          }}\n          onClick={() => removeCrop(data[\"Cover Crop Name\"])}\n        >\n          <Typography\n            variant=\"body2\"\n            className=\"text-uppercase\"\n            style={{\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n          >\n            REMOVE\n          </Typography>\n        </CardActionArea>\n      </Card>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </div>\n  );\n};\n\nexport default MyCoverCropCardsComponent;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport {\n  Card,\n  CardMedia,\n  CardContent,\n  Button,\n  Typography,\n  CardActionArea,\n  CardActions,\n} from \"@material-ui/core\";\nimport \"../../styles/cropComparisonView.scss\";\nimport {\n  DataTooltip,\n  getRating,\n  RenderSeedPriceIcons,\n} from \"../../shared/constants\";\nimport { MonetizationOn, Cancel } from \"@material-ui/icons\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/MyCoverCropComparisonComponent.scss\";\nimport sidebarDefinitionsz7 from \"../../shared/json/zone7/data-dictionary.json\";\nimport sidebarDefinitionsz6 from \"../../shared/json/zone6/data-dictionary.json\";\nimport sidebarDefinitionsz5 from \"../../shared/json/zone5/data-dictionary.json\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\nimport { useSnackbar } from \"notistack\";\n\nconst lightBorder = {\n  border: \"1px solid #35999b\",\n  padding: \"5px\",\n  marginBottom: \"5px\",\n  borderTopLeftRadius: \"10px\",\n  borderBottomLeftRadius: \"10px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n};\nconst lightBG = {\n  border: \"1px solid white\",\n  backgroundColor: \"#f1f7eb\",\n  padding: \"5px\",\n  marginBottom: \"5px\",\n  textAlign: \"center\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  fontWeight: \"bold\",\n  minHeight: \"36px\",\n};\nconst MyCoverCropComparisonComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { comparisonKeys, zone } = state;\n  const [sidebarDefs, setSidebarDefs] = useState(sidebarDefinitionsz7);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const handleModalOpen = (crop) => {\n    // put data inside modal\n\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n\n  useEffect(() => {\n    switch (parseInt(zone)) {\n      case 7: {\n        setSidebarDefs(sidebarDefinitionsz7);\n        break;\n      }\n      case 6: {\n        setSidebarDefs(sidebarDefinitionsz6);\n        break;\n      }\n      case 5: {\n        setSidebarDefs(sidebarDefinitionsz5);\n        break;\n      }\n      default: {\n        setSidebarDefs(sidebarDefinitionsz7);\n        break;\n      }\n    }\n  }, [zone]);\n\n  const removeCrop = (btnId, cropName) => {\n    var removeIndex = state.selectedCrops\n      .map(function (item) {\n        return item.btnId;\n      })\n      .indexOf(`${btnId}`);\n\n    if (removeIndex === -1) {\n      // element not in array\n      // not possible ?\n    } else {\n      // alert(removeIndex);\n      let selectedCropsCopy = state.selectedCrops;\n\n      selectedCropsCopy.splice(removeIndex, 1);\n      // console.log(selectedCropsCopy);\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: selectedCropsCopy,\n          snackOpen: false,\n          snackMessage: `Removed`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Removed`);\n\n      // this.state.selectedCrops.splice(removeIndex, 1);\n    }\n  };\n\n  const getTooltipData = (keyName = \"\") => {\n    const exactObject = sidebarDefs.find((keys) => keys.Variable === keyName);\n\n    if (exactObject) {\n      return exactObject.Description;\n    } else {\n      return \"No Data\";\n    }\n  };\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-xl-3 col-lg-4 col-md-4\">\n          <div className=\"row pt-3\">\n            <div className=\"col-12\">\n              <Card style={{ width: \"100%\", boxShadow: \"none\" }}>\n                <CardMedia\n                  children={\n                    <img\n                      src=\"https://via.placeholder.com/10/FFFFFF/FFFFFF\"\n                      style={{ opacity: 0 }}\n                    />\n                  }\n                  style={{ width: \"100%\", height: \"100px\" }}\n                />\n                <CardContent>\n                  <div\n                    className=\"font-weight-bold text-uppercase\"\n                    style={{ fontSize: \"10pt\", color: \"white\" }}\n                  >\n                    {\"Family Common Name\"}\n                  </div>\n                  <div\n                    className=\"font-weight-bold \"\n                    style={{ fontSize: \"16pt\", color: \"white\" }}\n                  >\n                    {\"Cover Crop Name\"}\n                  </div>\n                  <small className=\"font-italic\" style={{ color: \"white\" }}>\n                    {\"Scientific Name\"}\n                  </small>\n                  <div>\n                    <small className=\"text-muted\">\n                      <a\n                        style={{\n                          textDecoration: \"underline\",\n                          color: \"white\",\n                        }}\n                        onClick={() => {}}\n                      >\n                        View Crop Details\n                      </a>\n                    </small>\n                  </div>\n                </CardContent>\n                <hr style={{ borderTop: \"1px solid rgba(0,0,0,0)\" }} />\n                <CardContent\n                  style={{ paddingRight: \"0px\", paddingLeft: \"0px\" }}\n                >\n                  {comparisonKeys.map((keys, index) => (\n                    <div style={lightBorder} key={index}>\n                      <span>\n                        <DataTooltip\n                          data={getTooltipData(keys)}\n                          interactive={false}\n                          placement=\"top-start\"\n                        />\n                      </span>\n                      <span>\n                        <Typography variant=\"body2\" className=\"text-capitalize\">\n                          {keys === \"Cover Crop Group\"\n                            ? \"Cover Crop Type\"\n                            : keys}\n                        </Typography>\n                      </span>\n                    </div>\n                  ))}\n                  <div style={lightBorder}>\n                    <span>\n                      <DataTooltip\n                        data={\"Average rating of all selected goals\"}\n                        interactive={false}\n                        placement=\"top-start\"\n                      />\n                    </span>\n                    <span>\n                      <Typography variant=\"body2\">\n                        Average Goal Rating\n                      </Typography>\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-9 col-lg-8 col-md-8 comparisonContainer\">\n          <div className=\"row pt-3\">\n            {props.selectedCrops.map((crop, index) => (\n              <div className=\"col-xl-3 col-lg-5\" key={index}>\n                <Card className=\"mainComparisonCard\" style={{ width: \"100%\" }}>\n                  <span\n                    onClick={() => removeCrop(crop.btnId, crop.cropName)}\n                    className=\"cardCloseIcon\"\n                  >\n                    <Cancel titleAccess=\"Remove Crop\" />\n                  </span>\n                  {crop.data[\"Image Data\"] ? (\n                    <CardMedia\n                      image={\n                        crop.data[\"Image Data\"][\"Key Thumbnail\"]\n                          ? `/images/Cover Crop Photos/${crop.data[\"Image Data\"][\"Directory\"]}/${crop.data[\"Image Data\"][\"Key Thumbnail\"]}`\n                          : \"https://placehold.it/100x100?text=Placeholder\"\n                      }\n                      // image=\"https://placehold.it/100x100\"\n                      title={crop.cropName}\n                      style={{ width: \"100%\", height: \"100px\" }}\n                    />\n                  ) : (\n                    <CardMedia\n                      children={\n                        <img\n                          src=\"https://via.placeholder.com/100/?text=Placeholder\"\n                          style={{ width: \"100%\", height: \"100px\" }}\n                          alt=\"Placeholder\"\n                        />\n                      }\n                    />\n                  )}\n\n                  <CardContent>\n                    <div\n                      className=\"font-weight-bold text-muted text-uppercase\"\n                      style={{ fontSize: \"10pt\" }}\n                    >\n                      {crop.data[\"Family Common Name\"]}\n                    </div>\n                    <div\n                      className=\"font-weight-bold \"\n                      style={{ fontSize: \"16pt\" }}\n                    >\n                      {crop.data[\"Cover Crop Name\"]}\n                    </div>\n                    <small className=\"font-italic text-muted\">\n                      {crop.data[\"Scientific Name\"]}\n                    </small>\n                    <div>\n                      <small className=\"text-muted\">\n                        <a\n                          style={{\n                            textDecoration: \"underline\",\n                            color: \"rgb(53, 153, 155)\",\n                          }}\n                          // href={`/information-sheet/${crop.data[\"Cover Crop Name\"]}`}\n                          onClick={() => handleModalOpen({ fields: crop.data })}\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          View Crop Details\n                        </a>\n                      </small>\n                    </div>\n                  </CardContent>\n                  <hr />\n                  <CardContent\n                    style={{\n                      paddingRight: \"0px\",\n                      paddingLeft: \"0px\",\n                      paddingBottom: \"0px\",\n                    }}\n                  >\n                    {comparisonKeys.map((filterKey, index) => (\n                      <RenderRelevantData\n                        key={index}\n                        filterKey={filterKey}\n                        data={crop.data}\n                        index={index}\n                      />\n                    ))}\n                    <div style={lightBG}>\n                      <GetAverageGoalRating crop={crop} />\n                    </div>\n                  </CardContent>\n                  <CardActionArea\n                    style={{\n                      backgroundColor: \"#e3f2f4\",\n                      textAlign: \"center\",\n                      padding: \"0.5em\",\n                    }}\n                    onClick={() => removeCrop(crop.btnId, crop.cropName)}\n                  >\n                    <Typography\n                      variant=\"body2\"\n                      className=\"text-uppercase\"\n                      style={{\n                        color: \"black\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      REMOVE\n                    </Typography>\n                  </CardActionArea>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </div>\n  );\n};\n\nconst RenderGrowthWindow = ({ window }) => {\n  const growingWindows = [\"Very Short\", \"Short\", \"Medium\", \"Long\", \"Very Long\"];\n  const index = growingWindows.indexOf(window);\n\n  switch (index) {\n    case 0:\n      return getRating(1);\n    case 1:\n      return getRating(2);\n    case 2:\n      return getRating(3);\n    case 3:\n      return getRating(4);\n    case 4:\n      return getRating(5);\n    default:\n      return getRating(0);\n  }\n};\n\nconst RenderRelevantData = ({ filterKey = \"\", data = [], index = 0 }) => {\n  if (typeof data[filterKey] === \"number\") {\n    if (data[filterKey].toString().length === 1) {\n      if (filterKey === \"Seed Price per Pound\") {\n        return (\n          <div style={lightBG}>\n            <RenderSeedPriceIcons val={data[\"Seed Price per Pound\"]} />\n          </div>\n        );\n      } else return <div style={lightBG}>{getRating(data[filterKey])}</div>;\n    } else {\n      return (\n        <div style={lightBG}>\n          <Typography variant=\"body2\">{data[filterKey]}</Typography>\n        </div>\n      );\n    }\n  } else {\n    if (filterKey === \"Frost Seeding\" || filterKey === \"Aerial Seeding\") {\n      return (\n        <div style={lightBG}>\n          <RenderSeedingData data={data} filterKey={filterKey} />\n        </div>\n      );\n    } else\n      return (\n        <div style={lightBG}>\n          <Typography variant=\"body2\">{data[filterKey].toString()}</Typography>\n        </div>\n      );\n  }\n};\n\nconst RenderSeedingData = ({ filterKey, data }) => {\n  if (data[filterKey]) {\n    return <Typography variant=\"body2\">Yes</Typography>;\n  } else {\n    return <Typography variant=\"body2\">N/A</Typography>;\n  }\n};\nconst GetAverageGoalRating = ({ crop }) => {\n  const [state, dispatch] = useContext(Context);\n  let goalRating = 0;\n  if (state.selectedGoals.length > 0) {\n    state.selectedGoals.map((goal) => {\n      if (crop.data[goal]) {\n        goalRating += crop.data[goal];\n      }\n    });\n  }\n  // console.log(goalRating);\n  return getRating(goalRating / state.selectedGoals.length);\n};\n\nconst RenderCtoNRatioText = ({ ratio }) => {\n  switch (parseInt(ratio)) {\n    case 1:\n      return \"LOW\";\n    case 2:\n      return \"MEDIUM\";\n    case 3:\n      return \"HIGH\";\n    default:\n      return \"NO DATA\";\n  }\n};\n\nexport default MyCoverCropComparisonComponent;\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport MyCoverCropCardsComponent from \"./MyCoverCropCardsComponent\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { PictureAsPdf, ListAlt, Add } from \"@material-ui/icons\";\nimport MyCoverCropComparisonComponent from \"./MyCoverCropComparisonComponent\";\nimport { downloadAllPDF, downloadAllCSV } from \"../../shared/constants\";\n\nconst MyCoverCropList = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const comparisonView = props.comparisonView;\n\n  const redirectToSpeciesSelector = () => {\n    dispatch({\n      type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n      data: {\n        speciesSelectorActivationFlag: true,\n        myCoverCropActivationFlag: false,\n      },\n    });\n  };\n\n  const TopBar = ({ comparisonView }) => {\n    const { selectedCrops } = state;\n    const selectedCropNames = selectedCrops.map((crop) => {\n      return {\n        name: crop.cropName,\n        pdf: `/pdf/${crop.cropName}.pdf`,\n        csv: `/csv/${crop.cropName}.csv`,\n      };\n    });\n    return (\n      <div className=\"row\">\n        <div\n          className=\"col-12 myCoverCropsBlueBar\"\n          style={{\n            backgroundColor: \"#35999b\",\n            height: \"40px\",\n            borderTopLeftRadius: \"5px\",\n            borderTopRightRadius: \"5px\",\n          }}\n        >\n          <div className=\"row\">\n            {comparisonView ? (\n              <div className=\"col-8\">\n                {/* <Button style={{ color: \"white\" }}>Download:</Button>\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={() => downloadAllPDF(selectedCropNames)}\n                >\n                  <PictureAsPdf /> <span className=\"pl-2\">PDF</span>\n                </Button> */}\n\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={redirectToSpeciesSelector}\n                >\n                  <Add /> <span className=\"pl-2\">ADD A CROP</span>\n                </Button>\n              </div>\n            ) : (\n              <div className=\"col-8\">\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={redirectToSpeciesSelector}\n                >\n                  <Add /> <span className=\"pl-2\">ADD A CROP</span>\n                </Button>\n              </div>\n            )}\n\n            <div className=\"col-6\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"container-fluid\">\n      {state.selectedCrops.length === 0 ? (\n        <Typography variant=\"body1\">\n          Your list is empty.{\" \"}\n          <Button onClick={redirectToSpeciesSelector}>Add Crops</Button>\n        </Typography>\n      ) : comparisonView ? (\n        <Fragment>\n          <TopBar comparisonView={comparisonView} />\n          <div className=\"row mt-2\">\n            <MyCoverCropComparisonComponent\n              selectedCrops={state.selectedCrops}\n            />\n          </div>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <TopBar comparisonView={comparisonView} />\n          <div className=\"row\">\n            <div className=\"d-flex flex-wrap mt-2\">\n              {state.selectedCrops.map((crop, index) => (\n                <MyCoverCropCardsComponent\n                  key={index}\n                  cardNo={index + 1}\n                  data={crop.data}\n                  btnId={crop.btnId}\n                  itemNo={index}\n                />\n              ))}\n            </div>\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default MyCoverCropList;\n","import React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport {\n  Typography,\n  Button,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  CircularProgress,\n  Table,\n  TableHead,\n  TableContainer,\n  TableBody,\n  TableRow,\n  TableCell,\n  Tooltip,\n} from \"@material-ui/core\";\nimport {\n  LightButton,\n  allMonths,\n  cropDataURL,\n  allGoalsURL,\n  getRating,\n  CropImage,\n  CustomStyles,\n  flipCoverCropName,\n  trimString,\n} from \"../../shared/constants\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\n// import { AddCircle, FiberManualRecord, CloseRounded } from \"@material-ui/icons\";\nimport CropLegendModal from \"./CropLegendModal\";\nimport { AirtableBearerKey } from \"../../shared/keys\";\nimport {\n  AddCircle,\n  Eco,\n  WbSunny,\n  LocalFlorist,\n  AcUnit,\n} from \"@material-ui/icons\";\nimport CropDetailsModalComponent from \"./CropDetailsModal\";\n// import RenderCashCropOverlay from \"./RenderCashCropOverlay\";\nconst growthIcon = {\n  color: \"white\",\n};\nconst CropCalendarViewComponent = (props) => {\n  const { cropData } = props;\n  const [state, dispatch] = useContext(Context);\n  const [legendModal, setLegendModal] = useState(false);\n  const [selectedCropsIds, setSelectedCropsIds] = useState([]);\n  const selectedBtns = state.selectedCrops.map((crop) => {\n    return crop.btnId;\n  });\n\n  const handleLegendModal = () => {\n    setLegendModal(!legendModal);\n  };\n\n  // DONE: Check year logic ? currently Juliet wants to return current year if month is before november\n  // ref. useeffect();\n  let currentYear = new Date().getFullYear();\n\n  useEffect(() => {\n    if (state.selectedCrops.length > 0) {\n      let selectedIds = state.selectedCrops.map((crop) => {\n        return crop.id;\n      });\n\n      setSelectedCropsIds(selectedIds);\n    }\n  }, [state.progress]);\n\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (document.getElementById(btnId).textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n      console.log(document.getElementById(btnId).textContent);\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: true,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: true,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n\n        // this.state.selectedCrops.splice(removeIndex, 1);\n      }\n    } else {\n      // DONE: add the selected crop to state and change the state, show snackbar\n\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: true,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n    }\n  };\n\n  const headers = new Headers();\n  headers.append(\"Authorization\", `Bearer ${AirtableBearerKey}`);\n\n  useEffect(() => {\n    let initialized = fetchRecordsIfUnavailable();\n    initialized.then(() => {\n      let currentMonth = moment().format(\"MMM\");\n      // console.log(currentMonth);\n      if (currentMonth === \"Nov\" || currentMonth === \"Dec\") {\n        currentYear = currentYear + 1;\n      }\n      console.log(\"goal values set\");\n\n      // putGoalValues();\n    });\n  }, []);\n\n  const getAverageGoalRating = (selectedGoals, crop) => {\n    // get goal rating for each crop and calculate+render rating\n    let goalRating = 0;\n    selectedGoals.map((goal, index) => {\n      if (crop.fields[goal]) {\n        goalRating += crop.fields[goal];\n      }\n    });\n\n    return getRating(goalRating / selectedGoals.length);\n  };\n\n  const putGoalValues = () => {\n    console.log(state.allGoals.length);\n    state.allGoals.map((goal, index) => {\n      let goalName = goal.fields[\"Cover Crop Goal\"];\n      cropData.map((crop, index2) => {\n        // let cropId =\n\n        console.log(\n          goalName + \" for \" + crop.fields[\"Cover Crop Name\"],\n          crop.fields[goalName]\n        );\n      });\n    });\n  };\n  const fetchRecordsIfUnavailable = () => {\n    // get crop data if unavailable\n\n    let _promise = new Promise(async function (resolve, reject) {\n      if (cropData.length === 0) {\n        // get crop data\n        dispatch({\n          type: \"SET_AJAX_IN_PROGRESS\",\n          data: true,\n        });\n        let records = await fetch(cropDataURL, { headers: headers });\n        let json = records.json();\n\n        json\n          .then((val) => {\n            // console.log(val);\n            dispatch({\n              type: \"PULL_CROP_DATA\",\n              data: val.records,\n            });\n          })\n          .then(async () => {\n            if (state.allGoals.length === 0) {\n              // get all goals\n              let records = await fetch(allGoalsURL, { headers: headers });\n              // console.log(records.json());\n              let json = records.json();\n              json\n                .then((val) => {\n                  dispatch({\n                    type: \"ADD_GOALS\",\n                    data: val.records,\n                  });\n                })\n                .then(() => {\n                  resolve(\"worked\");\n                });\n            } else resolve(\"worked\");\n          });\n      } else resolve(\"worked\");\n    }).then(() => {\n      dispatch({\n        type: \"SET_AJAX_IN_PROGRESS\",\n        data: false,\n      });\n    });\n    // let isResolved = false;\n\n    return _promise;\n  };\n\n  const checkIfGrowthMonth = (month) => {\n    const { activeGrowthPeriod } = state;\n\n    if (activeGrowthPeriod.length !== 0) {\n      if (activeGrowthPeriod.includes(month)) return true;\n      else return false;\n    } else {\n      return false;\n    }\n  };\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState([{}]);\n  return (\n    <Fragment>\n      {/* <div className=\"table-responsive calendarViewTableWrapper\"> */}\n      {state.ajaxInProgress ? (\n        <div className=\"circularCentered\">\n          <CircularProgress size={\"6em\"} />\n        </div>\n      ) : (\n        // <div className=\"row\">\n        <TableContainer\n          component=\"div\"\n          className=\"table-responsive calendarTableViewWrapper\"\n          style={{ lineHeight: \"0.5\" }}\n        >\n          <Table\n            stickyHeader\n            className=\"table calendarViewTable table-sm table-borderless\"\n            style={{}}\n          >\n            <TableHead className=\"tableHeadWrapper\">\n              <TableRow className=\"calFirstHeadRow\">\n                <TableCell\n                  colSpan={state.activeGrowthPeriod.length === 0 ? 2 : 1}\n                  style={{ backgroundColor: \"white\" }}\n                ></TableCell>\n                {state.activeGrowthPeriod.length === 0 ? (\n                  <TableCell\n                    colSpan=\"12\"\n                    style={{\n                      borderBottom: \"5px solid white\",\n                    }}\n                  >\n                    <div className=\"container-fluid\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <Typography variant=\"body1\">\n                            <Button>\n                              {currentYear} COVER CROP GROWTH WINDOW\n                            </Button>\n                          </Typography>\n                        </div>\n                        <div className=\"col-6\">\n                          <Typography variant=\"body1\">\n                            <Button\n                              startIcon={<AddCircle />}\n                              onClick={handleLegendModal}\n                            >\n                              Legend\n                            </Button>\n                          </Typography>\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                ) : (\n                  <Fragment>\n                    <TableCell\n                      colSpan=\"1\"\n                      style={{\n                        borderBottom: \"5px solid white\",\n                        borderRight: \"5px solid white\",\n                      }}\n                    >\n                      <Button>ACTIVE GROWTH PERIOD</Button>\n                    </TableCell>\n\n                    {state.activeGrowthPeriod.includes(\"Jan\") ? (\n                      <Tooltip placement=\"top\" title=\"Winter\">\n                        <TableCell\n                          className=\"activeGrowthMonth growthMonthSeparator\"\n                          style={{\n                            // borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                            backgroundColor: CustomStyles().darkGreen,\n                          }}\n                          colSpan=\"2\"\n                        >\n                          <Typography variant=\"body1\">\n                            <AcUnit style={growthIcon} />\n                          </Typography>\n                        </TableCell>\n                      </Tooltip>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"2\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Mar\") ? (\n                      <Tooltip placement=\"top\" title=\"Spring\">\n                        <TableCell\n                          className=\"activeGrowthMonth growthMonthSeparator\"\n                          style={{\n                            // borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                            backgroundColor: CustomStyles().darkGreen,\n                          }}\n                          colSpan=\"3\"\n                        >\n                          <Typography variant=\"body1\">\n                            <LocalFlorist style={growthIcon} />\n                          </Typography>\n                        </TableCell>\n                      </Tooltip>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Jun\") ? (\n                      <Tooltip placement=\"top\" title=\"Summer\">\n                        <TableCell\n                          className=\"activeGrowthMonth growthMonthSeparator\"\n                          style={{\n                            // borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                            backgroundColor: CustomStyles().darkGreen,\n                          }}\n                          colSpan=\"3\"\n                        >\n                          <Typography variant=\"body1\">\n                            <WbSunny style={growthIcon} />\n                          </Typography>\n                        </TableCell>\n                      </Tooltip>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Sep\") ? (\n                      <Tooltip placement=\"top\" title=\"Fall\">\n                        <TableCell\n                          className=\"activeGrowthMonth growthMonthSeparator\"\n                          style={{\n                            // borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                            backgroundColor: CustomStyles().darkGreen,\n                          }}\n                          colSpan=\"3\"\n                        >\n                          <Typography variant=\"body1\">\n                            <Eco style={growthIcon} />\n                          </Typography>\n                        </TableCell>\n                      </Tooltip>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n                    {state.activeGrowthPeriod.includes(\"Dec\") ? (\n                      <Tooltip placement=\"top\" title=\"Winter\">\n                        <TableCell\n                          className=\"activeGrowthMonth growthMonthSeparator\"\n                          style={{\n                            // borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                            backgroundColor: CustomStyles().darkGreen,\n                          }}\n                          colSpan=\"1\"\n                        >\n                          <Typography variant=\"body1\">\n                            <AcUnit style={growthIcon} />\n                          </Typography>\n                        </TableCell>\n                      </Tooltip>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"1\"\n                      ></TableCell>\n                    )}\n                  </Fragment>\n                )}\n                {state.activeGrowthPeriod.length > 0 ? (\n                  <TableCell\n                    style={{\n                      borderLeft: \"5px solid white\",\n                      borderBottom: \"5px solid white\",\n                    }}\n                  >\n                    <div className=\"col-12\">\n                      <Typography variant=\"body1\">\n                        <Button\n                          startIcon={<AddCircle />}\n                          onClick={handleLegendModal}\n                        >\n                          Legend\n                        </Button>\n                      </Typography>\n                    </div>\n                  </TableCell>\n                ) : (\n                  <TableCell style={{ backgroundColor: \"white\" }}></TableCell>\n                )}\n              </TableRow>\n              <TableRow className=\"calSecondHeadRow\">\n                <TableCell\n                  style={{ width: \"17%\", borderRight: \"5px solid white\" }}\n                >\n                  <Button>COVER CROPS</Button>\n                </TableCell>\n                {state.selectedGoals.length === 0 ? (\n                  \"\"\n                ) : (\n                  <TableCell\n                    style={{ width: \"13%\", borderRight: \"5px solid white\" }}\n                  >\n                    <Button>AVERAGE GOAL RATING</Button>\n                  </TableCell>\n                )}\n\n                {allMonths.map((month, index) => {\n                  const growthMonth = checkIfGrowthMonth(month);\n                  const growthMonthSeparator = growthMonth\n                    ? month === \"Feb\" ||\n                      month === \"May\" ||\n                      month === \"Aug\" ||\n                      month === \"Nov\"\n                      ? true\n                      : false\n                    : false;\n\n                  return (\n                    <TableCell\n                      key={`monthskey${index}`}\n                      className={`calendarSecondHeadMonth ${\n                        growthMonth ? `activeGrowthMonth` : ``\n                      } ${growthMonthSeparator ? `growthMonthSeparator` : ``}`}\n                    >\n                      <Button>{month}</Button>\n                    </TableCell>\n                  );\n                })}\n\n                <TableCell\n                  style={{ width: \"10%\", borderLeft: \"5px solid white\" }}\n                >\n                  <Button\n                    onClick={() => {\n                      dispatch({\n                        type: \"ACTIVATE_MY_COVER_CROP_LIST_TILE\",\n                        data: {\n                          myCoverCropActivationFlag: true,\n                          speciesSelectorActivationFlag: false,\n                        },\n                      });\n                    }}\n                  >\n                    MY LIST <br />\n                    {`[${state.selectedCrops.length} CROPS]`}\n                  </Button>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody className=\"calendarTableBodyWrapper\">\n              {cropData\n                ? cropData.map((crop, index) => {\n                    if (crop.fields[\"Zone Decision\"] === \"Include\")\n                      return (\n                        <TableRow key={`cropRow${index}`}>\n                          <TableCell\n                            className=\"calendarTableCell\"\n                            style={{\n                              paddingBottom: \"0px\",\n                            }}\n                          >\n                            <div className=\"tdContainer d-flex justify-content-between flex-nowrap\">\n                              {crop.fields[\"Image Data\"] ? (\n                                <Button\n                                  size=\"small\"\n                                  onClick={() => {\n                                    setModalData(crop);\n                                    setModalOpen(!modalOpen);\n                                  }}\n                                >\n                                  <CropImage\n                                    view={\"calendar\"}\n                                    present={true}\n                                    src={\n                                      crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                                        ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                                        : \"https://placehold.it/100x100\"\n                                    }\n                                    alt={crop.fields[\"Cover Crop Name\"]}\n                                  />\n                                </Button>\n                              ) : (\n                                <Button\n                                  size=\"small\"\n                                  onClick={() => {\n                                    setModalData(crop);\n                                    setModalOpen(!modalOpen);\n                                  }}\n                                >\n                                  <CropImage\n                                    view={\"calendar\"}\n                                    present={false}\n                                  />\n                                </Button>\n                              )}\n\n                              <Button\n                                size=\"small\"\n                                style={\n                                  {\n                                    // borderRadius: \"0px\",\n                                    // paddingTop: \"0px\",\n                                  }\n                                }\n                                onClick={() => {\n                                  setModalData(crop);\n                                  setModalOpen(!modalOpen);\n                                }}\n                              >\n                                {crop.fields[\"Cover Crop Name\"] !==\n                                \"Sorghum-sudangrass\"\n                                  ? flipCoverCropName(\n                                      crop.fields[\"Cover Crop Name\"]\n                                    )\n                                  : trimString(\n                                      flipCoverCropName(\n                                        crop.fields[\"Cover Crop Name\"]\n                                      ),\n                                      15\n                                    )}\n                              </Button>\n                            </div>\n                          </TableCell>\n                          {state.selectedGoals.length === 0 ? (\n                            \"\"\n                          ) : (\n                            <TableCell\n                              style={{\n                                paddingBottom: \"0px\",\n                                textAlign: \"center\",\n                              }}\n                            >\n                              {getAverageGoalRating(state.selectedGoals, crop)}\n                            </TableCell>\n                          )}\n\n                          {allMonths.map((month, index) => (\n                            <GrowthWindowComponent\n                              from=\"calendar\"\n                              data={crop.fields}\n                              key={index}\n                              id={`growthCell${index}`}\n                              month={index}\n                            />\n                          ))}\n\n                          <TableCell\n                            style={{\n                              paddingBottom: \"0px\",\n                            }}\n                          >\n                            {\" \"}\n                            <LightButton\n                              id={`cartBtn${index}`}\n                              style={{\n                                borderRadius: \"0px\",\n                                width: \"130px\",\n                              }}\n                              className={\n                                selectedBtns.includes(`cartBtn${index}`)\n                                  ? \"activeCartBtn\"\n                                  : \"inactiveCartBtn\"\n                              }\n                              onClick={() => {\n                                addCropToBasket(\n                                  crop.id,\n                                  crop.fields[\"Cover Crop Name\"],\n                                  `cartBtn${index}`,\n                                  crop.fields\n                                );\n                              }}\n                            >\n                              {selectedBtns.includes(`cartBtn${index}`)\n                                ? \"ADDED\"\n                                : \"ADD TO LIST\"}\n                            </LightButton>\n                          </TableCell>\n                        </TableRow>\n                      );\n                  })\n                : \"\"}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        // </div>\n      )}\n      <CropLegendModal\n        legendModal={legendModal}\n        handleLegendModal={handleLegendModal}\n        disableBackdropClick={false}\n      />\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </Fragment>\n  );\n};\n\nexport default CropCalendarViewComponent;\n","export const AirtableBearerKey = \"***REMOVED***\";\n\n// rohit's access token\nexport const owner = \"sudokita\";\nexport const repo = \"covercrops\";\nexport const accessToken = \"87f1038ea3c511be15c209e3f6a5487598415a34\";\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Chip, Grid } from \"@material-ui/core\";\n\nconst CoverCropType = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({ \"Cover Crop Group\": [] });\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Cover Crop Group\": [] });\n    },\n  }));\n\n  const handleClick = (name, val) => {\n    if (selected[\"Cover Crop Group\"].includes(val)) {\n      const removed = selected[\"Cover Crop Group\"].filter(\n        (chipVals) => chipVals !== val\n      );\n      setSelected({ ...selected, \"Cover Crop Group\": removed });\n    } else {\n      const added = selected[\"Cover Crop Group\"];\n      added.push(val);\n\n      setSelected({ ...selected, \"Cover Crop Group\": added });\n    }\n  };\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item key={index}>\n          <Chip\n            onClick={() => handleClick(props.filters.name, val.name)}\n            component=\"li\"\n            size=\"medium\"\n            label={val.name}\n            color={\n              props.sidebarFilterOptions[\"Cover Crop Group\"].includes(val.name)\n                ? \"primary\"\n                : \"secondary\"\n            }\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n});\n\nexport default CoverCropType;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst EnvironmentalTolerance = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Drought Tolerance\": [], //int\n    \"Flood Tolerance\": [], // int\n    \"Heat Tolerance\": [], // int\n    \"Low Fertility Tolerance\": [], // int\n    \"Salinity Tolerance\": [], // int\n    \"Shade Tolerance\": [], // int\n  });\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Drought Tolerance\": [], //int\n        \"Flood Tolerance\": [], // int\n        \"Heat Tolerance\": [], // int\n        \"Low Fertility Tolerance\": [], // int\n        \"Salinity Tolerance\": [], // int\n        \"Shade Tolerance\": [], // int\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"filterTooltip\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.alternateName]}\n                onChange={(evt, newVal) =>\n                  handleChange(newVal, val.alternateName)\n                }\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(1)\n                      ? \"selected first-btn\"\n                      : \"not-selected first-btn\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(5)\n                      ? \"selected last-btn\"\n                      : \"not-selected last-btn\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nconst sidebarNameSubtractor = (name) => {\n  // props.sidebarFilterOptions[[val.name]] + \"Tolerance\"\n  return name;\n};\nconst getKeyByValue = (object, value) => {\n  return Object.keys(object).filter((key) => object[key] === value);\n};\n\nexport default EnvironmentalTolerance;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nconst Seeds = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({ \"Seed Price per Pound\": [] });\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Seed Price per Pound\": [] });\n    },\n  }));\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Fragment key={index}>\n          <Grid item xs={12}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"filterTooltip\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <Grid item xs={12}>\n            <ToggleButtonGroup\n              value={selected[val.name]}\n              onChange={(evt, newVal) => handleChange(newVal, val.name)}\n              className=\"starRatingParent\"\n            >\n              <ToggleButton\n                value={1}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(1)\n                    ? \"selected first-btn\"\n                    : \"not-selected first-btn\"\n                }\n              >\n                &#36;\n              </ToggleButton>\n              <ToggleButton\n                value={2}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(2)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#36;&#36;\n              </ToggleButton>\n              <ToggleButton\n                value={3}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(3)\n                    ? \"selected last-btn\"\n                    : \"not-selected last-btn\"\n                }\n              >\n                &#36;&#36;&#36;\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Fragment>\n      ))}\n    </Grid>\n  );\n});\n\nexport default Seeds;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, FormControlLabel, Checkbox, Tooltip } from \"@material-ui/core\";\n\nconst SeedingMethods = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Frost Seeding\": props.sidebarFilterOptions[\"Frost Seeding\"],\n    \"Aerial Seeding\": props.sidebarFilterOptions[\"Aerial Seeding\"],\n  });\n\n  const checkIfSelected = (name) => {\n    if (props.sidebarFilterOptions[name].length === 0) {\n      return false;\n    } else {\n      if (props.sidebarFilterOptions[name].includes(\"true\")) return true;\n      else return false;\n    }\n  };\n  const handleChange = (event) => {\n    if (event.target.checked) {\n      setSelected({ ...selected, [event.target.name]: [\"true\"] });\n    } else {\n      setSelected({ ...selected, [event.target.name]: [] });\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Frost Seeding\": [], \"Aerial Seeding\": [] });\n    },\n  }));\n\n  useEffect(() => {\n    let selections = selected;\n\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selections,\n    });\n  }, [selected]);\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item xs={12} key={index}>\n          <Tooltip\n            interactive\n            arrow\n            placement=\"right\"\n            title={\n              <div className=\"filterTooltip\">\n                <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n              </div>\n            }\n            key={`tooltip${index}`}\n          >\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkIfSelected(val.name)}\n                  onChange={handleChange}\n                  name={val.name}\n                  color=\"primary\"\n                />\n              }\n              label={<small>{val.name}</small>}\n            />\n          </Tooltip>\n        </Grid>\n      ))}\n    </Grid>\n  );\n});\n\nconst objFilter = (obj, predicate) => {\n  let result = {},\n    key;\n\n  for (key in obj) {\n    if (obj.hasOwnProperty(key) && !predicate(obj[key])) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n};\nexport default SeedingMethods;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Chip, Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nconst Growth = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    Duration: [], // array\n    \"Active Growth Period\": [], //array\n    \"Growing Window\": [], // string\n    \"Establishes Quickly\": [], // int\n    \"Ease of Establishment\": [], // int\n    \"Winter Survival\": [], // array\n    \"Early Spring Growth\": [], // int\n    \"Flowering Trigger\": [], // array\n  });\n  const handleChipClick = (filtername, val) => {\n    if (selected[filtername].includes(val)) {\n      let filtered = selected[filtername].filter((vals) => vals !== val);\n      setSelected({ ...selected, [filtername]: filtered });\n    } else {\n      let roots = selected[filtername];\n      roots.push(val);\n      setSelected({ ...selected, [filtername]: roots });\n    }\n  };\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        Duration: [], // array\n        \"Active Growth Period\": [], //array\n        \"Growing Window\": [], // string\n        \"Establishes Quickly\": [], // int\n        \"Ease of Establishment\": [], // int\n        \"Winter Survival\": [], // array\n        \"Early Spring Growth\": [], // int\n        \"Flowering Trigger\": [], // array\n      });\n    },\n  }));\n\n  const RenderChips = (props) => {\n    return props.subFilter.values.map((val, index) => (\n      <Grid item key={index}>\n        <Chip\n          onClick={() => handleChipClick(props.subFilter.name, val)}\n          component=\"li\"\n          size=\"medium\"\n          label={val}\n          color={\n            props.sidebarFilterOptions[props.subFilter.name].includes(val)\n              ? \"primary\"\n              : \"secondary\"\n          }\n        />\n      </Grid>\n    ));\n  };\n\n  return props.filters.values.map((val, index) => (\n    <Grid container key={index} spacing={1}>\n      {val.type === \"chip\" ? (\n        <Fragment key={index}>\n          <Grid item xs={12} style={{ marginTop: \"1em\" }}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"filterTooltip\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <RenderChips\n            sidebarFilterOptions={props.sidebarFilterOptions}\n            subFilter={val}\n            index={index}\n          />\n        </Fragment>\n      ) : (\n        <Fragment key={index}>\n          <Grid item xs={12} style={{ marginTop: \"1em\" }}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"filterTooltip\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <Grid item xs={12}>\n            <ToggleButtonGroup\n              value={selected[val.name]}\n              onChange={(evt, newVal) => handleChange(newVal, val.name)}\n              className=\"starRatingParent\"\n            >\n              <ToggleButton\n                value={1}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(1)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n                style={{\n                  borderTopLeftRadius: \"20px\",\n                  borderBottomLeftRadius: \"20px\",\n                }}\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={2}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(2)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={3}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(3)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={4}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(4)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={5}\n                size=\"small\"\n                color=\"primary\"\n                style={{\n                  borderTopRightRadius: \"20px\",\n                  borderBottomRightRadius: \"20px\",\n                }}\n                className={\n                  props.sidebarFilterOptions[val.name].includes(5)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Fragment>\n      )}\n      {/* {subFilter.values.map((val, index2) => subFilter.type)} */}\n    </Grid>\n  ));\n});\n\nexport default Growth;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst TerminationMethods = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Tillage Termination at Vegetative\": [], // int\n    \"Tillage Termination at Flowering\": [], // int\n    \"Freezing Termination at Vegetative\": [], // int\n    \"Chemical Termination at Vegetative\": [], // int\n    \"Chemical Termination at Flowering\": [], // int\n    \"Mow Termination at Flowering\": [], // int\n    \"Roller Crimp Tolerance at Flowering\": [], // int\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Tillage Termination at Vegetative\": [], // int\n        \"Tillage Termination at Flowering\": [], // int\n        \"Freezing Termination at Vegetative\": [], // int\n        \"Chemical Termination at Vegetative\": [], // int\n        \"Chemical Termination at Flowering\": [], // int\n        \"Mow Termination at Flowering\": [], // int\n        \"Roller Crimp Tolerance at Flowering\": [], // int\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"filterTooltip\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.alternateName]}\n                onChange={(evt, newVal) =>\n                  handleChange(newVal, val.alternateName)\n                }\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default TerminationMethods;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst Weeds = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Volunteer Establishment\": [],\n    Persistence: [],\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Volunteer Establishment\": [],\n        Persistence: [],\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"filterTooltip\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.name]}\n                onChange={(evt, newVal) => handleChange(newVal, val.name)}\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default Weeds;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst Beneficials = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Supports Mycorrhizae\": [],\n    \"Pollinator Habitat\": [],\n    \"Pollinator Food\": [],\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Supports Mycorrhizae\": [],\n        \"Pollinator Habitat\": [],\n        \"Pollinator Food\": [],\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"filterTooltip\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.name]}\n                onChange={(evt, newVal) => handleChange(newVal, val.name)}\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default Beneficials;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Chip, Tooltip } from \"@material-ui/core\";\n\nconst Roots = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Root Architecture\": [],\n    \"Root Depth\": [],\n  });\n\n  const handleClick = (filtername, val) => {\n    // console.log(filtername, val);\n    // const combinedString = filtername + \"-\" + val;\n    if (selected[filtername].includes(val)) {\n      let filtered = selected[filtername].filter((vals) => vals !== val);\n      setSelected({ ...selected, [filtername]: filtered });\n    } else {\n      let roots = selected[filtername];\n      roots.push(val);\n      setSelected({ ...selected, [filtername]: roots });\n    }\n  };\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Root Architecture\": [],\n        \"Root Depth\": [],\n      });\n    },\n  }));\n\n  return props.filters.values.map((subFilter, index) => (\n    <Grid container key={index} spacing={1}>\n      <Grid item xs={12}>\n        <Tooltip\n          interactive\n          arrow\n          placement=\"right\"\n          title={\n            <div className=\"filterTooltip\">\n              <p\n                dangerouslySetInnerHTML={{ __html: subFilter.description }}\n              ></p>\n            </div>\n          }\n          key={`tooltip${index}`}\n        >\n          <small>{subFilter.name}</small>\n        </Tooltip>\n      </Grid>\n      {subFilter.values.map((val, index2) => (\n        <Grid item key={index2}>\n          <Chip\n            onClick={() => handleClick(subFilter.name, val)}\n            component=\"li\"\n            size=\"medium\"\n            label={val}\n            color={\n              props.sidebarFilterOptions[subFilter.name].includes(val)\n                ? \"primary\"\n                : \"secondary\"\n            }\n          />\n        </Grid>\n      ))}\n    </Grid>\n  ));\n});\n\nexport default Roots;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useContext,\n} from \"react\";\nimport { Grid, FormControlLabel, Checkbox, Tooltip } from \"@material-ui/core\";\nimport { Context } from \"../../../store/Store\";\n\nconst SoilConditions = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { Flooding_Frequency, Drainage_Class } = state.soilData;\n  const [activeCropDataCopy, setActiveCropDataCopy] = useState(\n    props.activeCropData\n  );\n  const {\n    activeCropData,\n    inactiveCropData,\n    setActiveCropData,\n    setInactiveCropData,\n    cropData,\n    filterSidebarItems,\n  } = props;\n\n  const [selected, setSelected] = useState({\n    \"Soil Drainage\":\n      Drainage_Class !== \"\" && Drainage_Class.length > 0 ? true : false,\n    \"Flooding Tolerance\":\n      Flooding_Frequency !== \"None\" && Flooding_Frequency ? true : false,\n  });\n\n  const handleChange = (event) => {\n    if (event.target.checked) {\n      setSelected({ ...selected, [event.target.name]: true });\n    } else {\n      setSelected({ ...selected, [event.target.name]: false });\n    }\n  };\n\n  useEffect(() => {\n    if (\n      Flooding_Frequency === null ||\n      Flooding_Frequency === \"None\" ||\n      Flooding_Frequency === \"\"\n    ) {\n      setSelected({ ...selected, \"Flooding Tolerance\": false });\n    } else {\n      setSelected({ ...selected, \"Flooding Tolerance\": true });\n    }\n\n    if (Drainage_Class !== \"\") {\n      if (Array.isArray(Drainage_Class)) {\n        setSelected({ ...selected, \"Soil Drainage\": true });\n      } else {\n        setSelected({ ...selected, \"Soil Drainage\": false });\n      }\n    } else {\n      setSelected({ ...selected, \"Soil Drainage\": false });\n    }\n  }, [state.soilData]);\n\n  useEffect(() => {\n    if (selected[\"Soil Drainage\"]) {\n      const newActives = activeCropData.filter((crop) => {\n        if (areCommonElements(crop.fields[\"Soil Drainage\"], Drainage_Class)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const newInactives = cropData.filter((e) => !newActives.includes(e));\n\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n    } else {\n      filterSidebarItems();\n    }\n\n    if (selected[\"Flooding Tolerance\"]) {\n      const newActives = activeCropData.filter((crop) => {\n        if (crop.fields[\"Flooding Tolerance\"] === Flooding_Frequency) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const newInactives = cropData.filter((e) => !newActives.includes(e));\n\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n    } else {\n      filterSidebarItems();\n    }\n  }, [selected]);\n\n  //   useImperativeHandle(ref, () => ({\n  //     resetFilters() {\n  //       setSelected({ \"Soil Drainage\": [], \"Flooding Tolerance\": [] });\n  //     },\n  //   }));\n\n  //   useEffect(() => {\n  //     let selections = selected;\n\n  //     props.setSidebarFilterOptions({\n  //       ...props.sidebarFilterOptions,\n  //       ...selections,\n  //     });\n  //   }, [selected]);\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item xs={12} key={index}>\n          <Tooltip\n            interactive\n            arrow\n            placement=\"right\"\n            title={\n              <div className=\"filterTooltip\">\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      val.name === \"Soil Drainage\"\n                        ? Drainage_Class.toString()\n                        : Flooding_Frequency.toString(),\n                  }}\n                ></p>\n              </div>\n            }\n            key={`tooltip${index}`}\n          >\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={selected[val.name]}\n                  onChange={handleChange}\n                  name={val.name}\n                  color=\"primary\"\n                />\n              }\n              label={<small>{val.name}</small>}\n            />\n          </Tooltip>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\n// const objFilter = (obj, predicate) => {\n//   let result = {},\n//     key;\n\n//   for (key in obj) {\n//     if (obj.hasOwnProperty(key) && !predicate(obj[key])) {\n//       result[key] = obj[key];\n//     }\n//   }\n\n//   return result;\n// };\n\nconst areCommonElements = (arr1, arr2) => {\n  const arr2Set = new Set(arr2);\n  return arr1.some((el) => arr2Set.has(el));\n};\nexport default SoilConditions;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  Typography,\n  Collapse,\n  List,\n  Grid,\n  Tooltip,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nconst RenderFilters = ({\n  filterValues = [],\n  setFilterValues = () => {},\n  toggleSidebarFilterItems = () => {},\n  classes = {},\n  comparisonKeys = [],\n  dispatch = () => {},\n}) => {\n  const updateCheckboxStatus = (name = \"\") => {\n    let comparisonKeysCopy = comparisonKeys;\n    let indexOfValue = comparisonKeysCopy.indexOf(name);\n    if (indexOfValue === -1) {\n      // doesn't exist\n      comparisonKeysCopy.push(name);\n    } else {\n      comparisonKeysCopy.splice(indexOfValue, 1);\n    }\n\n    dispatch({\n      type: \"UPDATE_COMPARISON_KEYS\",\n      data: {\n        comparisonKeys: comparisonKeysCopy,\n      },\n    });\n  };\n\n  return filterValues.map((filter, index) => {\n    if (\n      filter.name === \"Soil Conditions\" ||\n      filter.name === \"Disease & Non Weed Pests\" ||\n      filter.name === \"Beneficials\"\n    ) {\n      return null;\n    } else {\n      return (\n        <Fragment key={`filters-outer-${index}`}>\n          {filter.description !== null ? (\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right-start\"\n              title={\n                <div className=\"filterTooltip\">\n                  <p>{filter.description}</p>\n                </div>\n              }\n              key={`tooltip-outer-${index}`}\n            >\n              <ListItem\n                button\n                // className={classes.nested}\n                className={\n                  filterValues[index].open ? \"filterOpen\" : \"filterClose\"\n                }\n                component=\"div\"\n                onClick={() => toggleSidebarFilterItems(index)}\n              >\n                <ListItemText\n                  primary={\n                    <Typography variant=\"body2\">\n                      {filter.name.toUpperCase()}\n                    </Typography>\n                  }\n                />\n                {filterValues[index].open ? <ExpandLess /> : <ExpandMore />}\n              </ListItem>\n            </Tooltip>\n          ) : (\n            <ListItem\n              button\n              // className={classes.nested}\n              className={\n                filterValues[index].open ? \"filterOpen\" : \"filterClose\"\n              }\n              component=\"div\"\n              onClick={() => toggleSidebarFilterItems(index)}\n            >\n              <ListItemText\n                primary={\n                  <Typography variant=\"body2\">\n                    {filter.name.toUpperCase()}\n                  </Typography>\n                }\n              />\n              {filterValues[index].open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n          )}\n\n          <Collapse in={filterValues[index].open} timeout=\"auto\">\n            <List component=\"div\" disablePadding>\n              <ListItem component=\"div\" className={classes.subNested}>\n                <Grid container spacing={1}>\n                  {filter.name === \"Cover Crop Type\" ? (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          //   checked={checkIfSelected(val.name)}\n                          checked={comparisonKeys.includes(\"Cover Crop Group\")}\n                          //   onChange={handleChange}\n                          onChange={() => {\n                            let comparisonKeysCopy = comparisonKeys;\n                            let indexOfValue = comparisonKeysCopy.indexOf(\n                              \"Cover Crop Group\"\n                            );\n                            if (indexOfValue === -1) {\n                              // doesn't exist\n                              comparisonKeysCopy.push(\"Cover Crop Group\");\n                            } else {\n                              comparisonKeysCopy.splice(indexOfValue, 1);\n                            }\n\n                            dispatch({\n                              type: \"UPDATE_COMPARISON_KEYS\",\n                              data: {\n                                comparisonKeys: comparisonKeysCopy,\n                              },\n                            });\n                          }}\n                          name={filter.name}\n                          color=\"primary\"\n                        />\n                      }\n                      label={<small>{filter.name}</small>}\n                    />\n                  ) : (\n                    filter.values.map((val, index2) => (\n                      <Grid item xs={12} key={`filter-inner-${index2}`}>\n                        <Tooltip\n                          interactive\n                          arrow\n                          placement=\"right\"\n                          title={\n                            <div className=\"filterTooltip\">\n                              <p\n                                dangerouslySetInnerHTML={{\n                                  __html: val.description,\n                                }}\n                              ></p>\n                            </div>\n                          }\n                          key={`tooltip${index}`}\n                        >\n                          <FormControlLabel\n                            control={\n                              <Checkbox\n                                checked={comparisonKeys.includes(\n                                  val.alternateName\n                                    ? val.alternateName\n                                    : val.name\n                                )}\n                                //   onChange={handleChange}\n                                onChange={() => {\n                                  updateCheckboxStatus(\n                                    val.alternateName\n                                      ? val.alternateName\n                                      : val.name\n                                  );\n                                }}\n                                name={val.name}\n                                color=\"primary\"\n                              />\n                            }\n                            label={<small>{val.name}</small>}\n                          />\n                        </Tooltip>\n                      </Grid>\n                    ))\n                  )}\n                </Grid>\n              </ListItem>\n            </List>\n          </Collapse>\n        </Fragment>\n      );\n    }\n  });\n};\n\nexport default RenderFilters;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  Typography,\n  Collapse,\n  List,\n  FormControlLabel,\n  Checkbox,\n  Grid,\n} from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nconst RenderGoals = ({\n  goals = [],\n  setGoals = () => {},\n  goalsOpen,\n  setGoalsOpen = () => {},\n  classes = {},\n  comparisonKeys = [],\n  dispatch = () => {},\n}) => {\n  return (\n    <Fragment>\n      <ListItem\n        button\n        // className={classes.nested}\n        className={goalsOpen ? \"filterOpen\" : \"filterClose\"}\n        component=\"div\"\n        onClick={() => setGoalsOpen(!goalsOpen)}\n      >\n        <ListItemText\n          primary={<Typography variant=\"body2\">COVER CROP GOALS</Typography>}\n        />\n        {goalsOpen ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n\n      <Collapse in={goalsOpen} timeout=\"auto\">\n        <List component=\"div\" disablePadding>\n          <ListItem component=\"div\">\n            <Grid container spacing={1}>\n              {goals.map((goal, index) => (\n                <Grid item xs={12} key={`goals-inner-${index}`}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        //   checked={checkIfSelected(val.name)}\n                        checked={comparisonKeys.includes(goal.name)}\n                        //   onChange={handleChange}\n                        onChange={() => {\n                          // check if value exists, add else remove if exists\n                          let comparisonKeysCopy = comparisonKeys;\n                          let indexOfValue = comparisonKeysCopy.indexOf(\n                            goal.name\n                          );\n                          if (indexOfValue === -1) {\n                            // doesn't exist\n                            comparisonKeysCopy.push(goal.name);\n                          } else {\n                            comparisonKeysCopy.splice(indexOfValue, 1);\n                          }\n\n                          dispatch({\n                            type: \"UPDATE_COMPARISON_KEYS\",\n                            data: {\n                              comparisonKeys: comparisonKeysCopy,\n                            },\n                          });\n                        }}\n                        name={goal.name}\n                        color=\"primary\"\n                      />\n                    }\n                    label={<small>{goal.name}</small>}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </ListItem>\n        </List>\n      </Collapse>\n    </Fragment>\n  );\n};\n\nexport default RenderGoals;\n","import React, { useState, useEffect, useContext, Fragment } from \"react\";\nimport { Context } from \"../../../store/Store\";\nimport {\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\n\nimport RenderFilters from \"./RenderFilters\";\nimport RenderGoals from \"./RenderGoals\";\n\nconst ComparisonBar = (props) => {\n  const [filterValues, setFilterValues] = useState([]);\n  const [goalsOpen, setGoalsOpen] = useState(false);\n  const [goals, setGoals] = useState([]);\n  useEffect(() => {\n    // setSidebarFilters(props.filterData);\n    // const filterTitles = props.filterData.map((filter) => {\n    //   return { name: filter.name, open: false };\n    // });\n\n    const filteredVals = props.filterData.map((filter) => {\n      const vals = filter.values.map((val) => {\n        return {\n          ...val,\n          selected: false,\n        };\n      });\n      return {\n        name: filter.name,\n        description: filter.description || null,\n        open: false,\n        values: vals,\n      };\n    });\n    const filteredGoals = props.goals.map((goal) => {\n      return {\n        name: goal,\n        selected: false,\n      };\n    });\n    // console.log(filteredVals);\n    setFilterValues(filteredVals);\n    setGoals(filteredGoals);\n\n    // setSidebarFiltersOpen(filterTitles);\n\n    return () => {\n      //   setSidebarFilters([]);\n      //   setSidebarFiltersOpen([]);\n    };\n  }, []);\n\n  const toggleSidebarFilterItems = (index) => {\n    const newSidebarFilterVals = filterValues.map((obj, index2) => {\n      if (index2 === index) return { ...obj, open: !obj.open };\n      else return { ...obj };\n    });\n    setFilterValues(newSidebarFilterVals);\n  };\n  const resetAllFilters = () => {\n    if (props.comparisonKeys.length > 0) {\n      props.dispatch({\n        type: \"UPDATE_COMPARISON_KEYS\",\n        data: {\n          comparisonKeys: [],\n        },\n      });\n    }\n  };\n  return props.comparisonView ? (\n    <List\n      component=\"nav\"\n      classes={{ root: props.classes.listRoot }}\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader\n          classes={{ root: props.classes.listSubHeaderRoot }}\n          component=\"div\"\n          id=\"nested-list-subheader\"\n        >\n          COMPARE BY\n        </ListSubheader>\n      }\n      className={props.classes.root}\n    >\n      {props.comparisonKeys.length > 0 ? (\n        <ListItem onClick={() => {}}>\n          <ListItemText\n            primary={\n              <Typography\n                variant=\"button\"\n                className=\"text-uppercase text-left text-danger font-weight-bold\"\n                onClick={resetAllFilters}\n                style={{ cursor: \"pointer\" }}\n              >\n                Clear Variables\n              </Typography>\n            }\n          />\n        </ListItem>\n      ) : (\n        <ListItem></ListItem>\n      )}\n      {goals.length > 0 ? (\n        <RenderGoals\n          goals={goals}\n          setGoals={setGoals}\n          goalsOpen={goalsOpen}\n          setGoalsOpen={setGoalsOpen}\n          classes={props.classes}\n          comparisonKeys={props.comparisonKeys}\n          dispatch={props.dispatch}\n        />\n      ) : (\n        \"\"\n      )}\n\n      <RenderFilters\n        filterValues={filterValues}\n        toggleSidebarFilterItems={toggleSidebarFilterItems}\n        classes={props.classes}\n        comparisonKeys={props.comparisonKeys}\n        dispatch={props.dispatch}\n      />\n    </List>\n  ) : (\n    \"\"\n  );\n};\n\nexport default ComparisonBar;\n","import React, { Fragment, useEffect, useRef } from \"react\";\nimport filterData from \"../../shared/data-dictionary7-optimised.json\";\n\nimport {\n  makeStyles,\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemText,\n  Collapse,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Tooltip,\n  Grid,\n  Chip,\n} from \"@material-ui/core\";\nimport {\n  ExpandLess,\n  ExpandMore,\n  CalendarTodayRounded,\n  CalendarToday,\n  Compare,\n  DragHandle,\n} from \"@material-ui/icons\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { List as ListMovable, arrayMove } from \"react-movable\";\n\nimport { DateRangePicker } from \"@matharumanpreet00/react-daterange-picker\";\n// import {\n//   DateRangePicker,\n//   SingleDatePicker,\n//   DayPickerRangeController,\n// } from \"react-dates\";\n// import { DateRangePicker } from \"react-date-range\";\n// import \"react-date-range/dist/styles.css\"; // main style file\n// import \"react-date-range/dist/theme/default.css\"; // theme css file\nimport moment from \"moment\";\n\nimport CoverCropType from \"./Filters/CoverCropType\";\nimport EnvironmentalTolerance from \"./Filters/EnvironmentalTolerance\";\nimport Seeds from \"./Filters/Seeds\";\nimport SeedingMethods from \"./Filters/SeedingMethods\";\nimport Growth from \"./Filters/Growth\";\nimport TerminationMethods from \"./Filters/TerminationMethods\";\nimport Beneficials from \"./Filters/Beneficials\";\nimport Weeds from \"./Filters/Weeds\";\n// import DiseaseAndNonWeedPests from \"./Filters/DiseaseAndNonWeedPests\";\nimport Roots from \"./Filters/Roots\";\nimport \"../../styles/cropSidebar.scss\";\nimport SoilConditions from \"./Filters/SoilConditions\";\nimport ComparisonBar from \"../MyCoverCropList/ComparisonBar/ComparisonBar\";\nconst _ = require(\"lodash\");\n\nconst useStyles = makeStyles((theme) => ({\n  listItemRoot: {\n    borderTop: \"0px\",\n    border: \"1px solid \" + CustomStyles().primaryProgressBtnBorderColor,\n  },\n  formControlLabel: {},\n  listSubHeaderRoot: {\n    backgroundColor: CustomStyles().lightGreen,\n    color: \"black\",\n    textAlign: \"center\",\n    height: \"50px\",\n    // borderTopLeftRadius: CustomStyles().semiRoundedRadius,\n    // borderTopRightRadius: CustomStyles().semiRoundedRadius,\n  },\n  nested: {\n    paddingLeft: theme.spacing(3),\n  },\n  subNested: {\n    paddingLeft: theme.spacing(4),\n  },\n}));\n\nconst CropSidebarComponent = (props) => {\n  const classes = useStyles();\n  const [state, dispatch] = React.useContext(Context);\n\n  const comparisonView = props.comparisonView;\n\n  const [cropFiltersOpen, setCropFiltersOpen] = React.useState(\n    props.isListView ? true : false\n  );\n  const [showFilters, setShowFilters] = React.useState(\n    window.location.pathname === \"/\"\n      ? props.from === \"table\"\n        ? state.speciesSelectorActivationFlag\n          ? true\n          : comparisonView\n          ? true\n          : false\n        : true\n      : true\n  );\n  useEffect(() => {\n    if (window.location.pathname !== \"/\") {\n      setShowFilters(true);\n    } else {\n      if (props.from === \"table\") {\n        if (state.speciesSelectorActivationFlag) {\n          setShowFilters(true);\n        } else {\n          if (comparisonView) {\n            setShowFilters(true);\n          } else {\n            setShowFilters(false);\n          }\n        }\n      } else {\n        setShowFilters(true);\n      }\n    }\n  }, [\n    window.location.pathname,\n    state.speciesSelectorActivationFlag,\n    props.from,\n    comparisonView,\n  ]);\n\n  const [cashCropOpen, setCashCropOpen] = React.useState(false);\n  const [cashCropVisible, setCashCropVisible] = React.useState(true);\n  const [goalsOpen, setGoalsOpen] = React.useState(true);\n\n  const [dateRangeOpen, setDateRangeOpen] = React.useState(false);\n  const [dateRange, setDateRange] = React.useState({\n    startDate: null,\n    endDate: null,\n  });\n\n  const [sidebarFilters, setSidebarFilters] = React.useState([]);\n  const [sidebarFiltersOpen, setSidebarFiltersOpen] = React.useState([]);\n\n  // make an exhaustive array of all params in array e.g. cover crop group and use includes in linq\n  const [sidebarFilterOptions, setSidebarFilterOptions] = React.useState({\n    \"Cover Crop Group\": [], //string\n    \"Drought Tolerance\": [], //int\n    \"Flood Tolerance\": [], // int\n    \"Heat Tolerance\": [], // int\n    \"Low Fertility Tolerance\": [], // int\n    \"Salinity Tolerance\": [], // int\n    \"Shade Tolerance\": [], // int\n    \"Seed Price per Pound\": [], //int\n    \"Frost Seeding\": [], // -999 or true\n    \"Aerial Seeding\": [], // -999 or true\n    Duration: [], // array\n    \"Active Growth Period\": [], //array\n    \"Growing Window\": [], // string\n    \"Establishes Quickly\": [], // int\n    \"Ease of Establishment\": [], // int\n    \"Winter Survival\": [], // array\n    \"Early Spring Growth\": [], // int\n    \"Flowering Trigger\": [], // array\n    \"Root Architecture\": [], // array\n    \"Root Depth\": [], // string\n    \"Tillage Termination at Vegetative\": [], // int\n    \"Tillage Termination at Flowering\": [], // int\n    \"Freezing Termination at Vegetative\": [], // int\n    \"Chemical Termination at Vegetative\": [], // int\n    \"Chemical Termination at Flowering\": [], // int\n    \"Mow Termination at Flowering\": [], // int\n    \"Roller Crimp Tolerance at Flowering\": [], // int\n    \"Supports Mycorrhizae\": [], // int\n    \"Pollinator Habitat\": [], // int\n    \"Pollinator Food\": [], // int\n    \"Volunteer Establishment\": [], // int\n    Persistence: [], // int\n    \"Discourages Nematodes\": [], // int\n    \"Promotes Nematodes\": [], // int\n    \"Discourages Pest Insects\": [], // int\n    \"Promotes Pest Insects\": [], // int\n    \"Suppresses Cash Crop Disease\": [], // int\n    \"Promotes Cash Crop Disease\": [], // int\n  });\n  const seedingMethodRef = useRef();\n  const beneficialsRef = useRef();\n  const coverCropTypeRef = useRef();\n  // const diseaseRef = useRef();\n  const growthRef = useRef();\n  const rootsRef = useRef();\n  const seedsRef = useRef();\n  const weedsRef = useRef();\n  const terminationRef = useRef();\n  const envTolRef = useRef();\n\n  const [resetFilters, setResetFilters] = React.useState(false);\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    filterSidebarItems();\n  }, [sidebarFilterOptions]);\n\n  const filterSidebarItems = () => {\n    const crop_data = props.cropData.filter(\n      (crop) => crop.fields[\"Zone Decision\"] === \"Include\"\n    );\n\n    const nonZeroes = Object.keys(sidebarFilterOptions).map((key) => {\n      if (sidebarFilterOptions[key].length !== 0) {\n        return { [key]: sidebarFilterOptions[key] };\n      } else return \"\";\n    });\n    const nonZeroKeys2 = nonZeroes.filter((val) => val !== \"\");\n\n    const nonZeroKeys = nonZeroKeys2.map((obj) => {\n      // console.log(obj)\n      // console.log(Object.keys(obj));\n      return Object.keys(obj).toString();\n    });\n\n    // console.log(nonZeroKeys)\n    // localStorage.setItem(\"filterKeys\", JSON.stringify(nonZeroKeys));\n    dispatch({\n      type: \"UPDATE_FILTER_KEYS\",\n      data: {\n        filterKeys: nonZeroKeys,\n      },\n    });\n    if (sidebarFilterOptions[\"Active Growth Period\"].length > 0) {\n      let growthArray = [];\n\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Fall\")) {\n        growthArray.push(\"Sep\");\n        growthArray.push(\"Oct\");\n        growthArray.push(\"Nov\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Winter\")) {\n        growthArray.push(\"Dec\");\n        growthArray.push(\"Jan\");\n        growthArray.push(\"Feb\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Spring\")) {\n        growthArray.push(\"Mar\");\n        growthArray.push(\"Apr\");\n        growthArray.push(\"May\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Summer\")) {\n        growthArray.push(\"Jun\");\n        growthArray.push(\"Jul\");\n        growthArray.push(\"Aug\");\n      }\n\n      dispatch({\n        type: \"UPDATE_ACTIVE_GROWTH_PERIOD\",\n        data: {\n          activeGrowthPeriod: growthArray,\n        },\n      });\n    } else {\n      dispatch({\n        type: \"UPDATE_ACTIVE_GROWTH_PERIOD\",\n        data: {\n          activeGrowthPeriod: [],\n        },\n      });\n    }\n\n    if (nonZeroKeys.length > 0) {\n      // const filtered = getFilteredObjects(crop_data, nonZeroKeys);\n\n      const arrayKeys = [\n        \"Duration\",\n        \"Active Growth Period\",\n        \"Winter Survival\",\n        \"Flowering Trigger\",\n        \"Root Architecture\",\n      ];\n      const booleanKeys = [\"Aerial Seeding\", \"Frost Seeding\"];\n      const aerialOrFrost = [\"\"];\n\n      const filtered = crop_data.filter((crop) => {\n        const totalActiveFilters = Object.keys(nonZeroKeys2).length;\n        let i = 0;\n        nonZeroKeys2.forEach((keyObject) => {\n          const key = Object.keys(keyObject);\n          // console.log(key);\n          const vals = keyObject[key];\n          if (areCommonElements(arrayKeys, key)) {\n            // Handle array type havlues\n\n            if (_.intersection(vals, crop.fields[key]).length > 0) {\n              i++;\n            }\n          } else if (areCommonElements(booleanKeys, key)) {\n            //  Handle boolean types\n            if (crop.fields[key]) {\n              i++;\n            }\n          } else {\n            if (vals.includes(crop.fields[key])) {\n              i++;\n            }\n          }\n        });\n\n        if (i === totalActiveFilters) return true;\n      });\n\n      const inactives = crop_data.filter((e) => !filtered.includes(e));\n\n      props.setActiveCropData(filtered);\n      props.setInactiveCropData(inactives);\n\n      // debug\n      // console.log(\"total\", crop_data.length);\n      // console.log(\"active\", filtered.length);\n      // console.log(\"first\", filtered);\n      // console.log(\"inactive\", inactives.length);\n      //\n    } else {\n      props.setActiveCropData(crop_data);\n      props.setInactiveCropData([]);\n    }\n  };\n  const areCommonElements = (arr1, arr2) => {\n    const arr2Set = new Set(arr2);\n    return arr1.some((el) => arr2Set.has(el));\n  };\n\n  function filterArray(array, filters) {\n    const filterKeys = Object.keys(filters);\n    return array.filter((crop) => {\n      // validates all filter criteria\n      return filterKeys.every((key) => {\n        // ignores non-function predicates\n        if (typeof filters[key] !== \"function\") return true;\n        // return filters[key](item[key]);\n        else if (\n          findCommonElements(crop.fields[key], sidebarFilterOptions[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else if (\n          typeof crop.fields[key] === \"boolean\" &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          if (crop.fields[key] !== -999 && sidebarFilterOptions[key] !== -999)\n            return true;\n          else return false;\n        } else if (\n          sidebarFilterOptions[key].includes(crop.fields[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    });\n  }\n\n  const [filtersSelected, setFiltersSelected] = React.useState(false);\n  useEffect(() => {\n    const sidebarKeys = Object.keys(sidebarFilterOptions);\n    // console.log(sidebarKeys);\n\n    const nonZeroKeys = sidebarKeys.filter(function (key) {\n      return sidebarFilterOptions[key].length > 0;\n    });\n\n    if (nonZeroKeys.length === 0) setFiltersSelected(false);\n    else setFiltersSelected(true);\n  }, [sidebarFilterOptions]);\n\n  const getFilteredObjects = (data = [], keys = []) => {\n    return data.filter((crop) => {\n      return keys.every((key) => {\n        if (Array.isArray(crop.fields[key])) {\n          if (\n            findCommonElements(crop.fields[key], sidebarFilterOptions[key]) &&\n            crop.fields[\"Zone Decision\"] === \"Include\"\n          )\n            return true;\n          else return false;\n        } else if (\n          typeof crop.fields[key] === \"boolean\" &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          if (crop.fields[key] !== -999 && sidebarFilterOptions[key] !== -999)\n            return true;\n          else return false;\n        } else if (\n          sidebarFilterOptions[key].includes(crop.fields[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    });\n  };\n  useEffect(() => {\n    if (props.isListView) {\n      setCropFiltersOpen(true);\n      setCashCropOpen(false);\n    } else {\n      setCropFiltersOpen(false);\n      setCashCropOpen(true);\n    }\n  }, [props.isListView]);\n\n  const toggleSidebarFilterItems = (index) => {\n    const newSidebarFiltersOpen = sidebarFiltersOpen.map((obj, index2) => {\n      if (index2 === index) return { ...obj, open: !obj.open };\n      else return { ...obj };\n    });\n    setSidebarFiltersOpen(newSidebarFiltersOpen);\n  };\n\n  const resetAllFilters = (withRef = true) => {\n    if (withRef) {\n      // beneficialsRef.current.resetFilters();\n      coverCropTypeRef.current.resetFilters();\n      // diseaseRef.current.resetFilters();\n      envTolRef.current.resetFilters();\n      growthRef.current.resetFilters();\n      rootsRef.current.resetFilters();\n      seedingMethodRef.current.resetFilters();\n\n      seedsRef.current.resetFilters();\n      terminationRef.current.resetFilters();\n      weedsRef.current.resetFilters();\n      props.setActiveCropData(state.cropData);\n      props.setInactiveCropData([]);\n    }\n    setSidebarFilterOptions({\n      \"Cover Crop Group\": [], //string\n      \"Drought Tolerance\": [], //int\n      \"Flood Tolerance\": [], // int\n      \"Heat Tolerance\": [], // int\n      \"Low Fertility Tolerance\": [], // int\n      \"Salinity Tolerance\": [], // int\n      \"Shade Tolerance\": [], // int\n      \"Seed Price per Pound\": [], //int\n      \"Frost Seeding\": [], // -999 or true\n      \"Aerial Seeding\": [], // -999 or true\n      Duration: [], // array\n      \"Active Growth Period\": [], //array\n      \"Growing Window\": [], // string\n      \"Establishes Quickly\": [], // int\n      \"Ease of Establishment\": [], // int\n      \"Winter Survival\": [], // array\n      \"Early Spring Growth\": [], // int\n      \"Flowering Trigger\": [], // array\n      \"Root Architecture\": [], // array\n      \"Root Depth\": [], // string\n      \"Tillage Termination at Vegetative\": [], // int\n      \"Tillage Termination at Flowering\": [], // int\n      \"Freezing Termination at Vegetative\": [], // int\n      \"Chemical Termination at Vegetative\": [], // int\n      \"Chemical Termination at Flowering\": [], // int\n      \"Mow Termination at Flowering\": [], // int\n      \"Roller Crimp Tolerance at Flowering\": [], // int\n      \"Supports Mycorrhizae\": [], // int\n      \"Pollinator Habitat\": [], // int\n      \"Pollinator Food\": [], // int\n      \"Volunteer Establishment\": [], // int\n      Persistence: [], // int\n      \"Discourages Nematodes\": [], // int\n      \"Promotes Nematodes\": [], // int\n      \"Discourages Pest Insects\": [], // int\n      \"Promotes Pest Insects\": [], // int\n      \"Suppresses Cash Crop Disease\": [], // int\n      \"Promotes Cash Crop Disease\": [], // int\n    });\n    setResetFilters(!resetFilters);\n  };\n  useEffect(() => {\n    setSidebarFilters(filterData);\n    const filterTitles = filterData.map((filter) => {\n      return { name: filter.name, open: false };\n    });\n    setSidebarFiltersOpen(filterTitles);\n\n    return () => {\n      setSidebarFilters([]);\n      setSidebarFiltersOpen([]);\n    };\n  }, []);\n\n  React.useMemo(() => {\n    if (envTolRef.current) {\n      resetAllFilters();\n    }\n  }, [props.cropDataChanged]);\n\n  const [zoneToggle, setZoneToggle] = React.useState(true);\n\n  const handleZoneToggle = () => {\n    setZoneToggle(!zoneToggle);\n  };\n\n  const handleZone = (zone = 7) => {\n    if (typeof zone === \"number\") {\n      dispatch({\n        type: \"UPDATE_ZONE\",\n        data: {\n          zoneText: `Zone ${zone}`,\n          zone: parseInt(zone),\n        },\n      });\n    }\n  };\n\n  const [growthWindowVisible, setGrowthWindowVisible] = React.useState(true);\n\n  let [keysArray, setKeysArray] = React.useState([]);\n  const [keysArrChanged, setKeysArrChanges] = React.useState(false);\n\n  const updateSelectedGoals = (newGoalArr, oldIndex, newIndex) => {\n    let newGoals = arrayMove(newGoalArr, oldIndex, newIndex);\n\n    dispatch({\n      type: \"DRAG_GOALS\",\n      data: {\n        selectedGoals: newGoals,\n        snackOpen: true,\n        snackMessage: \"Goal Priority Changed\",\n      },\n    });\n  };\n\n  const changeProgress = (type) => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\",\n        },\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\",\n        },\n      });\n    }\n  };\n\n  const handleClick = (index) => {\n    switch (index) {\n      case 0:\n        setGoalsOpen(!goalsOpen);\n        break;\n      case 1:\n        setCashCropOpen(!cashCropOpen);\n        break;\n      case 2:\n        setCropFiltersOpen(!cropFiltersOpen);\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (props.from === \"table\") {\n      if (dateRange.startDate !== null && dateRange.endDate !== null) {\n        console.log(new Date(dateRange.startDate).toISOString());\n        dispatch({\n          type: \"UPDATE_DATE_RANGE\",\n          data: {\n            startDate: moment(\n              new Date(dateRange.startDate).toISOString(),\n              \"YYYY-MM-DD\"\n            ).format(\"MM/DD\"),\n            endDate: moment(new Date(dateRange.endDate).toISOString()).format(\n              \"MM/DD\"\n            ),\n          },\n        });\n      }\n\n      props.setGrowthWindow(growthWindowVisible);\n    }\n  }, [dateRange, growthWindowVisible, props.from]);\n\n  useEffect(() => {\n    if (props.from === \"table\") {\n      props.sortEnvTolCropData(keysArray);\n    }\n  }, [keysArrChanged]);\n\n  const [tableHeight, setTableHeight] = React.useState(0);\n\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    if (\n      document.querySelector(\".MuiTableRow-root.theadFirst.MuiTableRow-head\")\n    ) {\n      const totalHt = document\n        .querySelector(\".MuiTableRow-root.theadFirst.MuiTableRow-head\")\n        .getBoundingClientRect().height;\n      const btnHt = document\n        .querySelector(\".dynamicToggleBtn\")\n        .getBoundingClientRect().height;\n\n      const ht = totalHt - btnHt;\n\n      setTableHeight(ht);\n    } else {\n      // console.log(\"no table\");\n    }\n  });\n\n  useEffect(() => {\n    if (state.cashCropData.dateRange.startDate !== \"\") {\n      window.localStorage.setItem(\n        \"cashCropDateRange\",\n        JSON.stringify(state.cashCropData.dateRange)\n      );\n    }\n  }, [state.cashCropData.dateRange]);\n\n  useEffect(() => {\n    if (state.myCoverCropActivationFlag) {\n      if (comparisonView) {\n        // resetAllFilters();\n        if (filtersSelected) {\n          resetAllFilters(false);\n        }\n      }\n    }\n  }, [comparisonView, state.myCoverCropActivationFlag]);\n\n  // const [focusedInput, setFocusedInput] = React.useState(null);\n  const [dateRanges, setDateRanges] = React.useState([\n    { startDate: new Date(), endDate: new Date(), key: \"selection\" },\n  ]);\n  return (\n    <div className=\"row\">\n      {state.myCoverCropActivationFlag && props.from === \"table\" ? (\n        <div\n          className={`col-12 ${\n            !state.speciesSelectorActivationFlag ? `mb-3` : ``\n          }`}\n          style={\n            state.speciesSelectorActivationFlag\n              ? {\n                  paddingBottom: tableHeight,\n                }\n              : {}\n          }\n        >\n          {/* <div className=\"iconToggle\"> */}\n          <Button\n            className=\"dynamicToggleBtn\"\n            fullWidth\n            variant=\"contained\"\n            onClick={props.toggleComparisonView}\n            size=\"large\"\n            color=\"secondary\"\n            startIcon={\n              props.comparisonView ? (\n                <ListIcon style={{ fontSize: \"larger\" }} />\n              ) : (\n                <Compare style={{ fontSize: \"larger\" }} />\n              )\n            }\n          >\n            {props.comparisonView ? \"LIST VIEW\" : \"COMPARISON VIEW\"}\n          </Button>\n        </div>\n      ) : props.from === \"table\" ? (\n        <div\n          className=\"col-12\"\n          style={{\n            paddingBottom: tableHeight,\n          }}\n        >\n          <Button\n            className=\"dynamicToggleBtn\"\n            fullWidth\n            variant=\"contained\"\n            onClick={props.toggleListView}\n            size=\"large\"\n            color=\"secondary\"\n            startIcon={\n              props.isListView ? (\n                <CalendarToday style={{ fontSize: \"larger\" }} />\n              ) : (\n                <ListIcon style={{ fontSize: \"larger\" }} />\n              )\n            }\n          >\n            {props.isListView ? \"CALENDAR VIEW\" : \"LIST VIEW\"}\n          </Button>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      {state.speciesSelectorActivationFlag || props.from === \"explorer\" ? (\n        <div className=\"col-12\">\n          <List\n            component=\"nav\"\n            classes={{ root: classes.listRoot }}\n            aria-labelledby=\"nested-list-subheader\"\n            subheader={\n              <ListSubheader\n                classes={{ root: classes.listSubHeaderRoot }}\n                component=\"div\"\n                id=\"nested-list-subheader\"\n              >\n                FILTER\n              </ListSubheader>\n            }\n            className={classes.root}\n          >\n            {props.from === \"table\" ? (\n              <Fragment>\n                {showFilters &&\n                state.speciesSelectorActivationFlag &&\n                props.isListView ? (\n                  <ListItem>\n                    <ListItemText>\n                      <TextField\n                        fullWidth\n                        color=\"secondary\"\n                        label=\"Search Cover Crop Name\"\n                        value={props.coverCropName}\n                        onInput={props.covercropsNamesFilter}\n                      />\n                    </ListItemText>\n                  </ListItem>\n                ) : (\n                  \"\"\n                )}\n\n                {props.isListView ? (\n                  <Fragment>\n                    {\" \"}\n                    <ListItem\n                      button\n                      onClick={() => handleClick(0)}\n                      style={\n                        goalsOpen\n                          ? {\n                              backgroundColor: CustomStyles().lightGreen,\n                              borderTop: \"4px solid white\",\n                            }\n                          : {\n                              backgroundColor: \"inherit\",\n                              borderTop: \"4px solid white\",\n                            }\n                      }\n                    >\n                      <ListItemText primary=\"COVER CROP GOALS\" />\n                      {goalsOpen ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={goalsOpen} timeout=\"auto\" unmountOnExit>\n                      {state.selectedGoals.length === 0 ? (\n                        <List component=\"div\" disablePadding>\n                          <ListItem button className={classes.nested}>\n                            <ListItemText primary=\"No Goals Selected\" />\n                          </ListItem>\n                          <ListItem className={classes.nested}>\n                            <Button onClick={() => changeProgress(\"decrement\")}>\n                              click to edit\n                            </Button>\n                          </ListItem>\n                        </List>\n                      ) : (\n                        <Fragment>\n                          <List component=\"div\" disablePadding>\n                            <ListItem className={classes.nested}>\n                              <ListItemText\n                                primary={\n                                  <div>\n                                    <div>\n                                      <Typography variant=\"body1\">\n                                        {\" \"}\n                                        Goal Priority Order\n                                      </Typography>\n                                    </div>\n                                    <div>\n                                      <Typography\n                                        variant=\"body2\"\n                                        style={{\n                                          fontWeight: \"normal\",\n                                          fontSize: \"10pt\",\n                                        }}\n                                      >\n                                        Click & drag to reorder\n                                      </Typography>\n                                    </div>\n                                  </div>\n                                }\n                              />\n                            </ListItem>\n                          </List>\n                          <ListMovable\n                            values={state.selectedGoals}\n                            onChange={({ oldIndex, newIndex }) =>\n                              updateSelectedGoals(\n                                state.selectedGoals,\n                                oldIndex,\n                                newIndex\n                              )\n                            }\n                            renderList={({ children, props, isDragged }) => (\n                              <ol\n                                className=\"goalsListFilter\"\n                                {...props}\n                                style={{\n                                  cursor: isDragged ? \"grabbing\" : undefined,\n                                }}\n                              >\n                                {children}\n                              </ol>\n                            )}\n                            renderItem={({\n                              value,\n                              props,\n                              isDragged,\n                              isSelected,\n                              index,\n                            }) => (\n                              <li\n                                {...props}\n                                style={{\n                                  ...props.style,\n                                }}\n                              >\n                                <div className=\"d-flex w-100 flex-row justify-content-between align-items-center\">\n                                  <div>\n                                    <Typography\n                                      variant=\"body1\"\n                                      style={{\n                                        cursor: isDragged ? \"grabbing\" : \"grab\",\n                                        fontSize: \"10pt\",\n                                        fontWeight:\n                                          isDragged || isSelected\n                                            ? \"700\"\n                                            : \"normal\",\n                                        color: \"#48a8ab\",\n                                        width: \"100%\",\n                                      }}\n                                    >\n                                      {`${index + 1}. ${value}`}\n                                    </Typography>\n                                  </div>\n                                </div>\n                              </li>\n                            )}\n                          />\n\n                          <ListItem className={classes.nested}>\n                            <ListItemText disableTypography>\n                              <Typography\n                                variant=\"button\"\n                                className=\"text-uppercase text-left text-danger font-weight-bold\"\n                                onClick={() => changeProgress(\"decrement\")}\n                                style={{ cursor: \"pointer\" }}\n                              >\n                                &nbsp;Click To Edit\n                              </Typography>\n                            </ListItemText>\n                          </ListItem>\n                        </Fragment>\n                      )}\n                    </Collapse>\n                  </Fragment>\n                ) : (\n                  \"\"\n                )}\n\n                <ListItem\n                  button\n                  onClick={() => handleClick(1)}\n                  style={\n                    cashCropOpen\n                      ? { backgroundColor: CustomStyles().lightGreen }\n                      : { backgroundColor: \"inherit\" }\n                  }\n                >\n                  <ListItemText primary=\"CASH CROP\" />\n                  {cashCropOpen ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={cashCropOpen} timeout=\"auto\" unmountOnExit>\n                  <List component=\"div\">\n                    <ListItem className={classes.nested}>\n                      <TextField\n                        fullWidth\n                        label=\"Cash Crop\"\n                        id=\"outlined-margin-dense\"\n                        defaultValue=\"\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                      />\n                    </ListItem>\n                    <ListItem className={classes.nested}>\n                      <TextField\n                        label=\"Planting to Harvest\"\n                        value={`${state.cashCropData.dateRange.startDate} - ${state.cashCropData.dateRange.endDate}`}\n                        fullWidth\n                        onClick={() => setDateRangeOpen(!dateRangeOpen)}\n                        margin=\"dense\"\n                        aria-haspopup=\"true\"\n                        variant=\"outlined\"\n                        InputProps={{\n                          readOnly: true,\n                          endAdornment: (\n                            <InputAdornment>\n                              <IconButton\n                                size=\"small\"\n                                onClick={() => setDateRangeOpen(!dateRangeOpen)}\n                              >\n                                <CalendarTodayRounded />\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                    </ListItem>\n                    {dateRangeOpen ? (\n                      <ListItem style={{ zIndex: 99 }}>\n                        <DateRangePicker\n                          definedRanges={[]}\n                          open={dateRangeOpen}\n                          onChange={(range) => setDateRange(range)}\n                        />\n                      </ListItem>\n                    ) : (\n                      \"\"\n                    )}\n\n                    <ListItem className={classes.nested}>\n                      <FormGroup>\n                        <FormControlLabel\n                          classes={{ root: classes.formControlLabel }}\n                          control={\n                            <Checkbox\n                              checked={cashCropVisible}\n                              onChange={(e) => {\n                                // setGrowthWindowVisible(!growthWindowVisible);\n                                if (e.target.checked) {\n                                  let cashCropDateRange = JSON.parse(\n                                    window.localStorage.getItem(\n                                      \"cashCropDateRange\"\n                                    )\n                                  );\n                                  dispatch({\n                                    type: \"UPDATE_DATE_RANGE\",\n                                    data: {\n                                      startDate: cashCropDateRange.startDate,\n                                      endDate: cashCropDateRange.endDate,\n                                    },\n                                  });\n                                } else {\n                                  dispatch({\n                                    type: \"UPDATE_DATE_RANGE\",\n                                    data: {\n                                      startDate: \"\",\n                                      endDate: \"\",\n                                    },\n                                  });\n                                }\n                                setCashCropVisible(!cashCropVisible);\n                              }}\n                              value=\"Show Cash Crop Growth Window\"\n                            />\n                          }\n                          label={\n                            <Typography variant=\"body2\">\n                              Show Cash Crop Growth Window\n                            </Typography>\n                          }\n                        />\n                      </FormGroup>\n                    </ListItem>\n                  </List>\n                </Collapse>\n              </Fragment>\n            ) : (\n              \"\"\n            )}\n\n            {showFilters ? (\n              <Fragment>\n                {props.from === \"explorer\" ? (\n                  <Fragment>\n                    <List component=\"div\" disablePadding>\n                      <ListItem button onClick={handleZoneToggle}>\n                        <ListItemText\n                          primary={\n                            <Typography\n                              variant=\"body2\"\n                              className=\"text-uppercase\"\n                            >\n                              Plant Hardiness Zone\n                            </Typography>\n                          }\n                        />\n                        {zoneToggle ? <ExpandLess /> : <ExpandMore />}\n                      </ListItem>\n                    </List>\n                    <Collapse in={zoneToggle}>\n                      <List component=\"div\" disablePadding>\n                        <ListItem component=\"div\">\n                          <Grid container spacing={1}>\n                            {[4, 5, 6, 7].map((zone, index) => (\n                              <Grid item key={index}>\n                                <Chip\n                                  onClick={() => handleZone(zone)}\n                                  component=\"li\"\n                                  size=\"medium\"\n                                  label={`Zone ${zone}`}\n                                  color={\n                                    parseInt(state.zone) === zone\n                                      ? \"primary\"\n                                      : \"secondary\"\n                                  }\n                                />\n                              </Grid>\n                            ))}\n                          </Grid>\n                        </ListItem>\n                      </List>\n                    </Collapse>\n                    <ListItem>\n                      <ListItemText>\n                        <TextField\n                          fullWidth\n                          color=\"secondary\"\n                          label=\"Search Cover Crop Name\"\n                          value={props.searchValue}\n                          onChange={props.handleSearchChange}\n                        />\n                      </ListItemText>\n                    </ListItem>\n                  </Fragment>\n                ) : (\n                  \"\"\n                )}\n\n                {props.from === \"explorer\" ? (\n                  <List component=\"div\" disablePadding className=\"cropFilters\">\n                    {filtersSelected ? (\n                      <ListItem onClick={() => {}}>\n                        <ListItemText\n                          primary={\n                            <Typography\n                              variant=\"button\"\n                              className=\"text-uppercase text-left text-danger font-weight-bold\"\n                              onClick={resetAllFilters}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              Clear Filters\n                            </Typography>\n                          }\n                        />\n                      </ListItem>\n                    ) : (\n                      <ListItem></ListItem>\n                    )}\n\n                    {sidebarFilters.map((filter, index) => {\n                      if (\n                        filter.name !== \"Soil Conditions\" &&\n                        filter.name !== \"Disease & Non Weed Pests\"\n                      ) {\n                        // if (true) {\n                        return (\n                          <Fragment key={index}>\n                            {filter.description !== null ? (\n                              <Tooltip\n                                interactive\n                                arrow\n                                placement=\"right-start\"\n                                title={\n                                  <div className=\"filterTooltip\">\n                                    <p>{filter.description}</p>\n                                  </div>\n                                }\n                                key={`tooltip${index}`}\n                              >\n                                <ListItem\n                                  // className={classes.nested}\n                                  className={\n                                    sidebarFiltersOpen[index].open\n                                      ? \"filterOpen\"\n                                      : \"filterClose\"\n                                  }\n                                  component=\"div\"\n                                  onClick={() =>\n                                    toggleSidebarFilterItems(index)\n                                  }\n                                >\n                                  <ListItemText\n                                    primary={\n                                      <Typography variant=\"body2\">\n                                        {filter.name.toUpperCase()}\n                                      </Typography>\n                                    }\n                                  />\n                                  {sidebarFiltersOpen[index].open ? (\n                                    <ExpandLess />\n                                  ) : (\n                                    <ExpandMore />\n                                  )}\n                                </ListItem>\n                              </Tooltip>\n                            ) : (\n                              <ListItem\n                                // className={classes.nested}\n                                className={\n                                  sidebarFiltersOpen[index].open\n                                    ? \"filterOpen\"\n                                    : \"filterClose\"\n                                }\n                                component=\"div\"\n                                onClick={() => toggleSidebarFilterItems(index)}\n                              >\n                                <ListItemText\n                                  primary={\n                                    <Typography variant=\"body2\">\n                                      {filter.name.toUpperCase()}\n                                    </Typography>\n                                  }\n                                />\n                                {sidebarFiltersOpen[index].open ? (\n                                  <ExpandLess />\n                                ) : (\n                                  <ExpandMore />\n                                )}\n                              </ListItem>\n                            )}\n\n                            <Collapse\n                              in={sidebarFiltersOpen[index].open}\n                              timeout=\"auto\"\n                            >\n                              <List component=\"div\" disablePadding>\n                                <ListItem\n                                  // className={classes.subNested}\n                                  // title={sidebarFilters[index].description}\n                                  component=\"div\"\n                                >\n                                  {filter.name.toUpperCase() ===\n                                  \"COVER CROP TYPE\" ? (\n                                    <CoverCropType\n                                      ref={coverCropTypeRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n\n                                  {filter.name.toUpperCase() ===\n                                  \"ENVIRONMENTAL TOLERANCES\" ? (\n                                    <EnvironmentalTolerance\n                                      ref={envTolRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n\n                                  {filter.name.toUpperCase() === \"SEEDS\" ? (\n                                    <Seeds\n                                      ref={seedsRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n                                  {filter.name.toUpperCase() ===\n                                  \"SEEDING METHODS\" ? (\n                                    <SeedingMethods\n                                      ref={seedingMethodRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n\n                                  {filter.name.toUpperCase() ===\n                                  \"SOIL CONDITIONS\" ? (\n                                    <SoilConditions\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      filterSidebarItems={filterSidebarItems}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n\n                                  {filter.name.toUpperCase() === \"GROWTH\" ? (\n                                    <Grid container spacing={1}>\n                                      <Grid item>\n                                        <Growth\n                                          ref={growthRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      </Grid>\n                                    </Grid>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                  {filter.name.toUpperCase() === \"ROOTS\" ? (\n                                    <Grid container spacing={1}>\n                                      <Grid item>\n                                        <Roots\n                                          ref={rootsRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      </Grid>\n                                    </Grid>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                  {filter.name.toUpperCase() ===\n                                  \"TERMINATION METHODS\" ? (\n                                    <TerminationMethods\n                                      ref={terminationRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n                                  {filter.name.toUpperCase() === \"BENEFICIALS\"\n                                    ? \"\"\n                                    : \"\"}\n                                  {filter.name.toUpperCase() === \"WEEDS\" ? (\n                                    <Weeds\n                                      ref={weedsRef}\n                                      filters={sidebarFilters[index]}\n                                      sidebarFilterOptions={\n                                        sidebarFilterOptions\n                                      }\n                                      setSidebarFilterOptions={\n                                        setSidebarFilterOptions\n                                      }\n                                      resetAllFilters={resetAllFilters}\n                                      {...props}\n                                    />\n                                  ) : (\n                                    \"\"\n                                  )}\n                                  {/* code at end of page */}\n                                  {filter.name.toUpperCase() ===\n                                  \"DISEASE & NON WEED PESTS\"\n                                    ? \"\"\n                                    : \"\"}\n                                </ListItem>\n                              </List>\n                            </Collapse>\n                          </Fragment>\n                        );\n                      }\n                    })}\n                  </List>\n                ) : (\n                  <Fragment>\n                    <ListItem\n                      button\n                      onClick={() => handleClick(2)}\n                      style={\n                        props.from === \"table\"\n                          ? cropFiltersOpen\n                            ? { backgroundColor: CustomStyles().lightGreen }\n                            : { backgroundColor: \"inherit\" }\n                          : { backgroundColor: CustomStyles().lightGreen }\n                      }\n                    >\n                      <ListItemText primary=\"COVER CROP PROPERTIES\" />\n                      {cropFiltersOpen ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={cropFiltersOpen} timeout=\"auto\">\n                      <List\n                        component=\"div\"\n                        disablePadding\n                        className=\"cropFilters\"\n                      >\n                        {filtersSelected ? (\n                          <ListItem onClick={() => {}}>\n                            <ListItemText\n                              primary={\n                                <Typography\n                                  variant=\"button\"\n                                  className=\"text-uppercase text-left text-danger font-weight-bold\"\n                                  onClick={resetAllFilters}\n                                  style={{ cursor: \"pointer\" }}\n                                >\n                                  Clear Filters\n                                </Typography>\n                              }\n                            />\n                          </ListItem>\n                        ) : (\n                          <ListItem></ListItem>\n                        )}\n\n                        {sidebarFilters.map((filter, index) => {\n                          if (\n                            filter.name !== \"Soil Conditions\" &&\n                            filter.name !== \"Disease & Non Weed Pests\"\n                          ) {\n                            // if (true) {\n                            return (\n                              <Fragment key={index}>\n                                {filter.description !== null ? (\n                                  <Tooltip\n                                    interactive\n                                    arrow\n                                    placement=\"right-start\"\n                                    title={\n                                      <div className=\"filterTooltip\">\n                                        <p>{filter.description}</p>\n                                      </div>\n                                    }\n                                    key={`tooltip${index}`}\n                                  >\n                                    <ListItem\n                                      // className={classes.nested}\n                                      className={\n                                        sidebarFiltersOpen[index].open\n                                          ? \"filterOpen\"\n                                          : \"filterClose\"\n                                      }\n                                      component=\"div\"\n                                      onClick={() =>\n                                        toggleSidebarFilterItems(index)\n                                      }\n                                    >\n                                      <ListItemText\n                                        primary={\n                                          <Typography variant=\"body2\">\n                                            {filter.name.toUpperCase()}\n                                          </Typography>\n                                        }\n                                      />\n                                      {sidebarFiltersOpen[index].open ? (\n                                        <ExpandLess />\n                                      ) : (\n                                        <ExpandMore />\n                                      )}\n                                    </ListItem>\n                                  </Tooltip>\n                                ) : (\n                                  <ListItem\n                                    // className={classes.nested}\n                                    className={\n                                      sidebarFiltersOpen[index].open\n                                        ? \"filterOpen\"\n                                        : \"filterClose\"\n                                    }\n                                    component=\"div\"\n                                    onClick={() =>\n                                      toggleSidebarFilterItems(index)\n                                    }\n                                  >\n                                    <ListItemText\n                                      primary={\n                                        <Typography variant=\"body2\">\n                                          {filter.name.toUpperCase()}\n                                        </Typography>\n                                      }\n                                    />\n                                    {sidebarFiltersOpen[index].open ? (\n                                      <ExpandLess />\n                                    ) : (\n                                      <ExpandMore />\n                                    )}\n                                  </ListItem>\n                                )}\n\n                                <Collapse\n                                  in={sidebarFiltersOpen[index].open}\n                                  timeout=\"auto\"\n                                >\n                                  <List component=\"div\" disablePadding>\n                                    <ListItem\n                                      // className={classes.subNested}\n                                      // title={sidebarFilters[index].description}\n                                      component=\"div\"\n                                    >\n                                      {filter.name.toUpperCase() ===\n                                      \"COVER CROP TYPE\" ? (\n                                        <CoverCropType\n                                          ref={coverCropTypeRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n\n                                      {filter.name.toUpperCase() ===\n                                      \"ENVIRONMENTAL TOLERANCES\" ? (\n                                        <EnvironmentalTolerance\n                                          ref={envTolRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n\n                                      {filter.name.toUpperCase() === \"SEEDS\" ? (\n                                        <Seeds\n                                          ref={seedsRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n                                      {filter.name.toUpperCase() ===\n                                      \"SEEDING METHODS\" ? (\n                                        <SeedingMethods\n                                          ref={seedingMethodRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n\n                                      {filter.name.toUpperCase() ===\n                                      \"SOIL CONDITIONS\" ? (\n                                        <SoilConditions\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          filterSidebarItems={\n                                            filterSidebarItems\n                                          }\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n\n                                      {filter.name.toUpperCase() ===\n                                      \"GROWTH\" ? (\n                                        <Grid container spacing={1}>\n                                          <Grid item>\n                                            <Growth\n                                              ref={growthRef}\n                                              filters={sidebarFilters[index]}\n                                              sidebarFilterOptions={\n                                                sidebarFilterOptions\n                                              }\n                                              setSidebarFilterOptions={\n                                                setSidebarFilterOptions\n                                              }\n                                              resetAllFilters={resetAllFilters}\n                                              {...props}\n                                            />\n                                          </Grid>\n                                        </Grid>\n                                      ) : (\n                                        \"\"\n                                      )}\n                                      {filter.name.toUpperCase() === \"ROOTS\" ? (\n                                        <Grid container spacing={1}>\n                                          <Grid item>\n                                            <Roots\n                                              ref={rootsRef}\n                                              filters={sidebarFilters[index]}\n                                              sidebarFilterOptions={\n                                                sidebarFilterOptions\n                                              }\n                                              setSidebarFilterOptions={\n                                                setSidebarFilterOptions\n                                              }\n                                              resetAllFilters={resetAllFilters}\n                                              {...props}\n                                            />\n                                          </Grid>\n                                        </Grid>\n                                      ) : (\n                                        \"\"\n                                      )}\n                                      {filter.name.toUpperCase() ===\n                                      \"TERMINATION METHODS\" ? (\n                                        <TerminationMethods\n                                          ref={terminationRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n                                      {filter.name.toUpperCase() ===\n                                      \"BENEFICIALS\"\n                                        ? \"\"\n                                        : \"\"}\n                                      {filter.name.toUpperCase() === \"WEEDS\" ? (\n                                        <Weeds\n                                          ref={weedsRef}\n                                          filters={sidebarFilters[index]}\n                                          sidebarFilterOptions={\n                                            sidebarFilterOptions\n                                          }\n                                          setSidebarFilterOptions={\n                                            setSidebarFilterOptions\n                                          }\n                                          resetAllFilters={resetAllFilters}\n                                          {...props}\n                                        />\n                                      ) : (\n                                        \"\"\n                                      )}\n                                      {/* code at end of page */}\n                                      {filter.name.toUpperCase() ===\n                                      \"DISEASE & NON WEED PESTS\"\n                                        ? \"\"\n                                        : \"\"}\n                                    </ListItem>\n                                  </List>\n                                </Collapse>\n                              </Fragment>\n                            );\n                          }\n                        })}\n                      </List>\n                    </Collapse>\n                  </Fragment>\n                )}\n              </Fragment>\n            ) : (\n              \"\"\n            )}\n          </List>\n        </div>\n      ) : (\n        <div className=\"col-12\">\n          <ComparisonBar\n            {...props}\n            classes={classes}\n            filterData={filterData}\n            goals={state.selectedGoals.length > 0 ? state.selectedGoals : []}\n            comparisonKeys={state.comparisonKeys}\n            dispatch={dispatch}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst findCommonElements = (arr1 = [], arr2 = []) => {\n  // Iterate through each element in the\n  // first array and if some of them\n  // include the elements in the second\n  // array then return true.\n  return arr1.some((item) => arr2.includes(item));\n};\n\nexport default CropSidebarComponent;\n\n// <DiseaseAndNonWeedPests\n//   ref={diseaseRef}\n//   filters={sidebarFilters[index]}\n//   sidebarFilterOptions={sidebarFilterOptions}\n//   setSidebarFilterOptions={\n//     setSidebarFilterOptions\n//   }\n//   resetAllFilters={resetAllFilters}\n//   {...props}\n// />\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { makeStyles, useScrollTrigger, Zoom, Fab } from \"@material-ui/core\";\nimport { KeyboardArrowUp } from \"@material-ui/icons\";\nimport \"../../styles/cropSelector.scss\";\nimport CropTableComponent from \"./CropTable\";\nimport MyCoverCropList from \"../MyCoverCropList/MyCoverCropList\";\nimport CropCalendarViewComponent from \"./CropCalendarView\";\nimport CropSidebarComponent from \"./CropSidebar\";\n\nconst _ = require(\"lodash\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nconst ScrollTop = (props) => {\n  const { children, window } = props;\n  const classes = useStyles();\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 180,\n  });\n  const handleBackToTopClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\n      \".topHeader\"\n    );\n    // console.log(event.target.ownerDocument);\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    }\n  };\n  return (\n    <Zoom in={trigger}>\n      <div\n        onClick={handleBackToTopClick}\n        role=\"presentation\"\n        className={classes.root}\n      >\n        {children}\n      </div>\n    </Zoom>\n  );\n};\n\nconst CropSelector = (props) => {\n  const [state, dispatch] = useContext(Context);\n  // let [isExpansionExpanded, setIsExpansionExpanded] = useState(true);\n  let [showGrowthWindow, setShowGrowthWindow] = useState(true);\n  // sortAllGoals = false would mean default i.e.\n  const [sortAllGoals, setSortAllGoals] = useState(false);\n  const [sortPreference, setSortPreference] = useState(\"desc\");\n  const [disabledIds, setDisabledIds] = useState([]);\n  const [starDisabledIds, setStarDisabledIds] = useState([]);\n  const [activeCropData, setActiveCropData] = useState([]);\n  const [inactiveCropData, setInactiveCropData] = useState([]);\n  const [coverCropName, setCoverCropName] = useState(\"\");\n\n  let [isListView, setIsListView] = useState(true);\n\n  const [comparisonView, setComparisonView] = useState(false);\n  // reset back to false\n\n  const [cropData, setCropData] = useState([]);\n\n  const sortEnvTolCropData = (objDataArr) => {\n    // console.log(objDataArr);\n    if (cropData.length !== 0) {\n      let crop_data = cropData;\n\n      // console.log(objData);\n      // const activeObjKeys = _.keys(_.pickBy(objData));\n      // console.log('activeObjKeys', activeObjKeys)\n      // console.log(\"activeObjKeys\", activeObjKeys);\n      // let objData = objDataArr;\n\n      let objData = objDataArr.map((obj) => {\n        return `fields.${obj}`;\n      });\n      // console.log(objData);\n\n      // console.log(objData);\n      if (objData.length > 0) {\n        // some values are truthy\n\n        let updatedCropData = _.sortBy(crop_data, objData);\n\n        setCropData(updatedCropData);\n      } else {\n        // reset! none are true\n        const activeObjKeys = [];\n        let { selectedGoals } = state;\n        selectedGoals.forEach((val, index) => {\n          //  Crop Data is inside cropData.fields\n          activeObjKeys[index] = `fields.${val}`;\n        });\n        let updatedCropData = _.orderBy(crop_data, activeObjKeys, [\n          \"desc\",\n          \"desc\",\n          \"desc\",\n        ]);\n\n        setCropData(updatedCropData);\n      }\n    }\n  };\n\n  // const [text, setText] = useState(\"\");\n  // const [differenceText, setDifferenceText] = useState(\"\");\n  const [disabledIdsTextNodes, setDisabledIdsTextNodes] = useState(\"\");\n  // const [split_arr, setSplit_arr] = useState([]);\n  // Debug text\n  // const [debug, setDebug] = useState(false);\n  const [cropDataChanged, setCropDataChanged] = useState(false);\n\n  useEffect(() => {\n    // setActiveCropData(state.cropData);\n    // setInactiveCropData([]);\n    // sortCropsBy(\"asc\");\n    setCropDataChanged(!cropDataChanged);\n  }, [state.cropData]);\n\n  useEffect(() => {\n    // get all ids and compare with the disabled ids array\n    let allIds = [\n      ...document.querySelectorAll(\n        \".calendarViewTableWrapper table > tbody > tr\"\n      ),\n    ].map((x) => {\n      // if (x.id !== \"\") {\n      return x.id;\n      // }\n    });\n    // filter empty nodes(strings) from above array\n    allIds = allIds.filter((x) => x !== \"\");\n    // console.log(allIds);\n\n    // if (disabledIds.length > 0) {\n    let disabledIdssTextNodes = disabledIds.map((val) => {\n      return document.querySelector(`#${val} div div span:nth-child(2)`)\n        .innerText;\n    });\n    setDisabledIdsTextNodes(JSON.stringify(disabledIdssTextNodes));\n    // }\n    // setDisabledIdsTextNodes(JSON.stringify(disabledIds));\n    // let differenceIds = allIds.filter((x) => {\n    //   if (x !== \"\") return !disabledIds.includes(x);\n    // });\n    // let differenceNames = differenceIds.map((val) => {\n    //   return document.querySelector(`#${val} div div span:nth-child(2)`)\n    //     .innerText;\n    // });\n    // setDifferenceText(JSON.stringify(differenceNames));\n\n    // if (differenceIds.length > 0) {\n    //   differenceIds.map((id) => {\n    //     let ele = document.getElementById(id);\n    //     ele.classList.remove(\"disabled\");\n    //     ele.style.opacity = \"1\";\n    //   });\n    // }\n\n    if (disabledIds.length > 0) {\n      allIds.map((id) => {\n        if (disabledIds.includes(id) || starDisabledIds.includes(id)) {\n          // need not be disabled\n          let ele = document.getElementById(id);\n          ele.classList.add(\"disabled\");\n          ele.style.opacity = \"0.2\";\n        } else {\n          // disable\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        }\n      });\n    } else {\n      if (starDisabledIds.length === 0) {\n        allIds.map((id) => {\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        });\n      } else {\n        allIds.map((id) => {\n          if (starDisabledIds.includes(id)) {\n            // need not be disabled\n            let ele = document.getElementById(id);\n            ele.classList.add(\"disabled\");\n            ele.style.opacity = \"0.2\";\n          } else {\n            // disable\n            let ele = document.getElementById(id);\n            ele.classList.remove(\"disabled\");\n            ele.style.opacity = \"1\";\n          }\n        });\n      }\n    }\n  }, [disabledIds]);\n\n  useEffect(() => {\n    // get all ids and compare with the disabled ids array\n    let allIds = [\n      ...document.querySelectorAll(\n        \".calendarViewTableWrapper table > tbody > tr\"\n      ),\n    ].map((x) => {\n      // if (x.id !== \"\") {\n      return x.id;\n      // }\n    });\n    // filter empty nodes(strings) from above array\n    allIds = allIds.filter((x) => x !== \"\");\n    // console.log(allIds);\n\n    // if (disabledIds.length > 0) {\n    let disabledIdssTextNodes = disabledIds.map((val) => {\n      return document.querySelector(`#${val} div div span:nth-child(2)`)\n        .innerText;\n    });\n    if (starDisabledIds.length > 0) {\n      allIds.map((id) => {\n        if (disabledIds.includes(id) || starDisabledIds.includes(id)) {\n          // need not be disabled\n          let ele = document.getElementById(id);\n          ele.classList.add(\"disabled\");\n          ele.style.opacity = \"0.2\";\n        } else {\n          // disable\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        }\n      });\n    } else {\n      if (disabledIds.length === 0) {\n        allIds.map((id) => {\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        });\n      } else {\n        allIds.map((id) => {\n          if (disabledIds.includes(id)) {\n            // need not be disabled\n            let ele = document.getElementById(id);\n            ele.classList.add(\"disabled\");\n            ele.style.opacity = \"0.2\";\n          } else {\n            // disable\n            let ele = document.getElementById(id);\n            ele.classList.remove(\"disabled\");\n            ele.style.opacity = \"1\";\n          }\n        });\n      }\n    }\n  }, [starDisabledIds]);\n\n  const sortCropsBy = (orderBy) => {\n    if (state.cropData.length > 0) {\n      const { selectedGoals } = state;\n      if (selectedGoals.length > 0) {\n        let crop_data = state.cropData;\n        let activeCropDataCopy =\n          activeCropData.length > 0 ? activeCropData : state.cropData;\n        let inactiveCropDataCopy =\n          inactiveCropData.length > 0 ? inactiveCropData : [];\n        // console.log(\"cropdata\", crop_data);\n        let activeObjKeys = [];\n        selectedGoals.forEach((val, index) => {\n          //  Crop Data is inside cropData.fields\n          activeObjKeys[index] = `fields.${val}`;\n        });\n        console.log(activeObjKeys);\n        switch (orderBy) {\n          case \"asc\": {\n            if (activeCropDataCopy.length > 0) {\n              let updatedCropData = _.orderBy(\n                activeCropDataCopy,\n                activeObjKeys,\n                [\"asc\", \"asc\", \"asc\"]\n              );\n              setActiveCropData(updatedCropData);\n            }\n            if (inactiveCropDataCopy.length > 0) {\n              let updatedInactives = _.orderBy(\n                inactiveCropDataCopy,\n                activeObjKeys,\n                [\"asc\", \"asc\", \"asc\"]\n              );\n              setInactiveCropData(updatedInactives);\n            }\n            // setCropData(updatedCropData);\n            setSortPreference(\"asc\");\n            break;\n          }\n          case \"desc\": {\n            if (activeCropDataCopy.length > 0) {\n              let updatedCropData = _.orderBy(\n                activeCropDataCopy,\n                activeObjKeys,\n                [\"desc\", \"desc\", \"desc\"]\n              );\n              setActiveCropData(updatedCropData);\n            }\n            if (inactiveCropDataCopy.length > 0) {\n              let updatedInactives = _.orderBy(\n                inactiveCropDataCopy,\n                activeObjKeys,\n                [\"desc\", \"desc\", \"desc\"]\n              );\n              setInactiveCropData(updatedInactives);\n            }\n            // setCropData(updatedCropData);\n            setSortPreference(\"desc\");\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (state.cropData) {\n      if (state.cropData.length > 0) {\n        // sort crop data by goal priority\n        const { selectedGoals } = state;\n        if (selectedGoals.length > 0) {\n          // let updatedCropData = _.orderBy(state.cropData, selectedGoals);\n          let activeCropDataShadow = state.cropData;\n          selectedGoals\n            .slice()\n            .reverse()\n            .forEach((goal) => {\n              activeCropDataShadow.sort((a, b) => {\n                if (a.fields[goal] && b.fields[goal]) {\n                  if (a.fields[goal] > b.fields[goal]) {\n                    return -1;\n                  } else {\n                    return 1;\n                  }\n                }\n                return 0;\n              });\n            });\n          setCropData(activeCropDataShadow);\n        } else {\n          setCropData(state.cropData);\n        }\n      }\n    }\n    return () => {\n      setCropData([]);\n    };\n  }, [state.cropData]);\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\"actives\", JSON.stringify(activeCropData));\n  //   window.localStorage.setItem(\"inactives\", JSON.stringify(inactiveCropData));\n  // }, [activeCropData, inactiveCropData]);\n\n  const expandCoverCropFilter = (id) => {\n    let listItemId = `cropFilterList${id}`;\n    let x = document.querySelectorAll(`#${listItemId} div`);\n    if (document.getElementById(listItemId).classList.contains(\"active\")) {\n      document.getElementById(listItemId).classList.remove(\"active\");\n      // hide dropdown\n      // document.querySelectorAll(`#${listItemId} div`).classList.remove(\"show\");\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"show\");\n      }\n    } else {\n      document.getElementById(listItemId).classList.add(\"active\");\n      // show dropdown\n\n      for (var j = 0; j < x.length; j++) {\n        if (!x[j].classList.contains(\"show\")) {\n          x[j].classList.add(\"show\");\n        }\n      }\n    }\n  };\n\n  const toggleListView = () => {\n    setIsListView(!isListView);\n  };\n\n  const toggleComparisonView = () => {\n    setComparisonView(!comparisonView);\n  };\n\n  const covercropsNamesFilter = (e) => {\n    setCoverCropName(e.target.value);\n\n    if (e.target.value === \"\") {\n      setActiveCropData(cropData);\n      setInactiveCropData([]);\n    } else {\n      const newActives = activeCropData.filter(\n        (crops) =>\n          crops.fields[\"Cover Crop Name\"]\n            .toLowerCase()\n            .includes(e.target.value) ||\n          crops.fields[\"Scientific Name\"].toLowerCase().includes(e.target.value)\n      );\n      const newInactives = inactiveCropData.filter(\n        (crops) =>\n          crops.fields[\"Cover Crop Name\"]\n            .toLowerCase()\n            .includes(e.target.value) ||\n          crops.fields[\"Scientific Name\"].toLowerCase().includes(e.target.value)\n      );\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n      // setCropData(newActives);\n    }\n  };\n  useEffect(() => {\n    if (state.selectedGoals.length === 0) {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\",\n        },\n      });\n    }\n  }, [state.selectedGoals]);\n\n  return (\n    <div className=\"container-fluid mt-2\">\n      <div className=\"row cropSelectorRow mt-3\">\n        <div className=\"col-xl-2 col-sm-12 col-lg-3\">\n          <CropSidebarComponent\n            sortEnvTolCropData={sortEnvTolCropData}\n            setGrowthWindow={setShowGrowthWindow}\n            isListView={isListView}\n            cropData={cropData}\n            activeCropData={\n              activeCropData.length > 0 ? activeCropData : cropData\n            }\n            inactiveCropData={inactiveCropData}\n            setActiveCropData={setActiveCropData}\n            setInactiveCropData={setInactiveCropData}\n            cropDataChanged={cropDataChanged}\n            comparisonView={comparisonView}\n            coverCropName={coverCropName}\n            covercropsNamesFilter={covercropsNamesFilter}\n            toggleComparisonView={toggleComparisonView}\n            toggleListView={toggleListView}\n            comparisonView={comparisonView}\n            isListView={isListView}\n            from={\"table\"}\n          />\n        </div>\n\n        <div className=\"col-xl-10 col-lg-9\">\n          {state.speciesSelectorActivationFlag ? (\n            isListView ? (\n              <CropTableComponent\n                cropData={cropData}\n                // activeCropData={\n                //   activeCropData.length > 0 ? activeCropData : cropData\n                // }\n                activeCropData={activeCropData}\n                setActiveCropData={setActiveCropData}\n                inactiveCropData={inactiveCropData}\n                setInactiveCropData={setInactiveCropData}\n                showGrowthWindow={showGrowthWindow}\n                sortAllGoals={setSortAllGoals}\n                sortAllCrops={sortCropsBy}\n                sortPreference={sortPreference}\n              />\n            ) : (\n              <CropCalendarViewComponent cropData={cropData} />\n            )\n          ) : (\n            <MyCoverCropList comparisonView={comparisonView} />\n          )}\n        </div>\n        <ScrollTop {...props}>\n          <Fab color=\"secondary\" size=\"medium\" aria-label=\"scroll back to top\">\n            <KeyboardArrowUp />\n          </Fab>\n        </ScrollTop>\n      </div>\n    </div>\n  );\n};\n\nexport default CropSelector;\n","import React, { useContext, useEffect, Fragment, useState } from \"react\";\nimport \"./styles/App.scss\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Header from \"./components/Header/header\";\nimport Landing from \"./components/Landing/Landing\";\nimport { Context } from \"./store/Store\";\nimport LocationComponent from \"./components/Location/Location\";\nimport ProgressButtons from \"./shared/ProgressButtons\";\nimport ProgressBar from \"./shared/ProgressBar\";\nimport GoalsSelector from \"./components/GoalsSelector/GoalsSelector\";\nimport LocationConfirmation from \"./components/Location/LocationConfirmation\";\nimport CropSelector from \"./components/CropSelector/CropSelector\";\n\nconst LoadRelevantRoute = ({ progress, calcHeight }) => {\n  switch (progress) {\n    case 1:\n      return <LocationComponent height={calcHeight} />;\n    case 2:\n      return <LocationConfirmation height={calcHeight} />;\n    case 3:\n      return <LocationConfirmation height={calcHeight} />;\n    case 4:\n      return <GoalsSelector height={calcHeight} />;\n    case 5:\n      return <CropSelector height={calcHeight} />;\n\n    default:\n      return <RouteNotFound height={calcHeight} />;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useContext(Context);\n  const [calcHeight, setCalcHeight] = useState(0);\n  const handleSnackClose = () => {\n    dispatch({\n      type: \"SNACK\",\n      data: {\n        snackOpen: false,\n        snackMessage: \"\",\n      },\n    });\n  };\n\n  useEffect(() => {\n    let parentDocHeight = document\n      .getElementById(\"mainContentWrapper\")\n      .getBoundingClientRect().height;\n    let headerHeight = document.querySelector(\"header\").getBoundingClientRect()\n      .height;\n\n    let calculatedHeight = parentDocHeight - headerHeight;\n\n    setCalcHeight(calculatedHeight);\n  }, []);\n\n  return (\n    <div className=\"contentWrapper\" id=\"mainContentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n      <div className=\"container-fluid pl-0 pr-0\">\n        <div\n          className=\"contentContainer\"\n          style={\n            {\n              // height: calcHeight,\n              // width: \"100%\",\n              // position: \"absolute\",\n              // top: \"50%\",\n              // left: \"50%\",\n              // transform: \"translate(-50%, -50%)\",\n            }\n          }\n        >\n          {state.progress === 0 ? (\n            <Landing height={calcHeight} bg=\"/images/cover-crop-field.png\" />\n          ) : (\n            <div\n              className=\"col-12\"\n              style={{\n                paddingLeft: \"0px\",\n                paddingRight: \"0px\",\n              }}\n            >\n              <LoadRelevantRoute\n                progress={state.progress}\n                calcHeight={calcHeight}\n              />\n              {state.progress > 0 && state.progress < 5 ? (\n                <div className=\"container-fluid mt-5 mb-5\">\n                  <div\n                    className=\"row\"\n                    style={{ width: \"95%\", margin: \"0 auto\" }}\n                  >\n                    <div className=\"col-lg-5 col-12 col-md-5\"></div>\n                    <div className=\"col-lg-5 col-12 col-md-5\">\n                      <ProgressButtons />\n                    </div>\n                    <div className=\"col-lg-2 pr-0 col-12 col-md-2\">\n                      <ProgressBar />\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: state.snackVertical,\n            horizontal: state.snackHorizontal,\n          }}\n          key={{\n            vertical: state.snackVertical,\n            horizontal: state.snackHorizontal,\n          }}\n          autoHideDuration={3000}\n          open={state.snackOpen}\n          onClose={handleSnackClose}\n          ContentProps={{\n            \"aria-describedby\": \"message-id\",\n          }}\n          message={state.snackMessage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nconst RouteNotFound = () => {\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"row\">\n        <div className=\"col-4 offset-4\">\n          <h3>Unknown Route</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Store, { Context } from \"./store/Store\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\n// import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./styles/progressBar.css\";\nimport Footer from \"./components/Footer/footer\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About/About\";\nimport SeedingRateCalculator from \"./components/SeedingRateCalculator/SeedingRateCalculator\";\nimport MixMaker from \"./components/MixMaker/MixMaker\";\nimport CoverCropExplorer from \"./components/CoverCropExplorer/CoverCropExplorer\";\nimport InformationSheet from \"./components/InformationSheet/InformationSheet\";\nimport HelpComponent from \"./components/Help/Help\";\nimport FeedbackComponent from \"./components/Feedback/Feedback\";\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n  responsiveFontSizes,\n} from \"@material-ui/core\";\nimport { CustomStyles } from \"./shared/constants\";\nimport { SnackbarProvider } from \"notistack\";\nimport InformationSheetDictionary from \"./components/InformationSheet/InformationSheetDictionary\";\n\nconst withFooter = (WrappedComponent) => () => [\n  <WrappedComponent key=\"1\" />,\n  <Footer key=\"2\" />,\n];\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CustomStyles().lightGreen,\n    },\n    secondary: {\n      main: CustomStyles().lighterGreen,\n    },\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontWeight: \"normal\",\n        fontSize: CustomStyles().defaultFontSize,\n        backgroundColor: CustomStyles().secondaryProgressBtnColor,\n        color: \"black\",\n        borderRadius: CustomStyles().mildlyRoundedRadius,\n      },\n      arrow: {},\n    },\n    MuiChip: {\n      colorSecondary: {\n        backgroundColor: CustomStyles().greenishWhite,\n        color: \"rgba(0,0,0,0.9)\",\n        fontWeight: \"normal\",\n      },\n      colorPrimary: {\n        backgroundColor: CustomStyles().darkGreen,\n        color: \"rgba(0,0,0,1)\",\n        fontWeight: \"normal\",\n      },\n      sizeSmall: {\n        fontSize: \"1.2rem\",\n      },\n    },\n  },\n});\nconst RouteNotFound = () => {\n  return (\n    <section className=\"page_404\">\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"col-sm-12 text-center\">\n              <div className=\"four_zero_four_bg\">\n                <h1 className=\"text-center \">404</h1>\n              </div>\n\n              <div className=\"contant_box_404\">\n                <h3 className=\"h2\">Look like you're lost</h3>\n\n                <p>The page you are looking for is not available!</p>\n\n                <a href=\"/\" className=\"link_404\">\n                  Go Home\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst csTheme = responsiveFontSizes(theme, {\n  breakpoints: [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n  // variants: [\"body1\", \"body2\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"button\", \"caption\", \"subtitle1\", \"subtitle2\"]\n});\n\n// csTheme.typography.body1 = {\n//   fontSize: \"1rem\",\n//   [theme.breakpoints.up(\"xl\")]: {\n//     fontSize: \"1.5rem !important\",\n//   },\n// };\n// csTheme.typography.body2 = {\n//   fontSize: \"1rem\",\n//   [theme.breakpoints.up(\"xl\")]: {\n//     fontSize: \"1.5rem !important\",\n//   },\n// };\n\n// csTheme.typography.h6 = {\n//   [theme.breakpoints.up(\"xl\")]: {\n//     fontSize: \"2rem !important\",\n//   },\n// };\n\n// csTheme.typography.h4 = {\n//   [theme.breakpoints.up(\"xl\")]: {\n//     fontSize: \"3rem !important\",\n//   },\n// };\n// csTheme.typography.button = {\n//   [theme.breakpoints.up(\"xl\")]: {\n//     ...csTheme.typography.button,\n//     fontSize: \"1.5rem !important\",\n//   },\n// };\n\nconst Wrapper = () => (\n  <MuiThemeProvider theme={csTheme}>\n    <SnackbarProvider\n      maxSnack={5}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n    >\n      <Store>\n        <BrowserRouter>\n          <Suspense fallback={<div>Loading..</div>}>\n            <Switch>\n              <Route path={`/`} component={App} exact />\n              <Route path={\"/about\"} component={About} exact />\n              <Route path={\"/help\"} component={HelpComponent} exact />\n              <Route path={\"/feedback\"} component={FeedbackComponent} exact />\n              {/* <Route\n                path={\"/information-sheet\"}\n                component={InformationSheet}\n                exact\n              /> */}\n              <Route\n                path={\"/information-sheet/:cropName\"}\n                component={InformationSheet}\n                exact\n              />\n              <Route\n                path={\"/seeding-rate-calculator\"}\n                component={SeedingRateCalculator}\n                exact\n              />\n              <Route\n                path={\"/data-dictionary\"}\n                component={InformationSheetDictionary}\n                exact\n              />\n              <Route path={\"/mix-maker\"} component={MixMaker} exact />\n              <Route\n                path={\"/cover-crop-explorer\"}\n                component={CoverCropExplorer}\n                exact\n              />\n              <Route component={RouteNotFound} />\n            </Switch>\n          </Suspense>\n\n          {/* <App /> */}\n        </BrowserRouter>\n      </Store>\n    </SnackbarProvider>\n  </MuiThemeProvider>\n);\n\nconst WrapperWithFooter = withFooter(Wrapper);\n\nReactDOM.render(<WrapperWithFooter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { useEffect, useState } from \"react\";\n\nimport \"../../styles/footer.scss\";\nimport { Link } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { owner, repo, accessToken } from \"../../shared/keys\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Footer = () => {\n  // let currentMonthYear = now.tz(tzdata).format(\"MM/YYYY\");\n  const [monthYear, setMonthYear] = useState(\"\");\n\n  const fetchDate = async () => {\n    return await Axios({\n      url: `https://api.github.com/repos/${owner}/${repo}/commits?path=build&page=1&per_page=1`,\n      method: \"GET\",\n      auth: {\n        username: \"rbandooni\",\n        password: accessToken,\n      },\n    });\n  };\n  useEffect(() => {\n    fetchDate().then((resp) => {\n      let lastCommitDate = resp.data[0].commit.committer.date;\n      let lastCommitDateFormatted = new Date(lastCommitDate);\n      setMonthYear(\n        `${(\"0\" + (lastCommitDateFormatted.getMonth() + 1)).slice(\n          -2\n        )}/${lastCommitDateFormatted.getFullYear()}`\n      );\n    });\n  }, []);\n  return (\n    <footer className=\"primaryFooter\">\n      <div className=\"leftSideText\">\n        <Typography variant=\"body2\" style={{ color: \"black\" }}>\n          Disclaimer: Consult your local{\" \"}\n          <a\n            className=\"footerLink\"\n            href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detailfull/national/programs/financial/csp/?&cid=nrcsdev11_000242\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            NRCS Service Center\n          </a>\n          ,{\" \"}\n          <a\n            href=\"https://nifa.usda.gov/land-grant-colleges-and-universities-partner-website-directory\"\n            className=\"footerLink\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Cooperative Extension Service office\n          </a>\n          , or{\" \"}\n          <a\n            href=\"https://www.nacdnet.org/general-resources/conservation-district-directory/\"\n            className=\"footerLink\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Conservation District\n          </a>{\" \"}\n          for detailed guidance.\n        </Typography>\n      </div>\n      <div className=\"rightSideText\">\n        <Typography variant=\"body2\" style={{ color: \"black\" }}>\n          Last Updated {monthYear}\n        </Typography>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport Header from \"../Header/header\";\nimport {\n  Box,\n  Typography,\n  Tabs,\n  makeStyles,\n  Tab,\n  Button,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport { CustomStyles } from \"../../shared/constants\";\nconst tableStyles = {\n  td: {\n    fontSize: \"1em\",\n    padding: \"0.1em\",\n  },\n};\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: \"flex\",\n    // height: 224,\n  },\n  tabs: {\n    borderRight: `1px solid ${theme.palette.divider}`,\n  },\n}));\nconst boxWrapper = {\n  paddingBottom: \"0px\",\n  marginBottom: \"50px\",\n  backgroundColor: \"rgba(240,247,235,.8)\",\n  borderRadius: \"10px\",\n  border: \"1px solid #598445\",\n};\nconst About = (props) => {\n  // const [state, dispatch] = useContext(Context);\n  const [calcHeight, setCalcHeight] = useState(0);\n  const backgroundWrapper = {\n    background: `url(${props.bg})`,\n    backgroundSize: \"cover\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    paddingLeft: \"0px\",\n    paddingRight: \"0px\",\n  };\n  useEffect(() => {\n    let parentDocHeight = document\n      .getElementById(\"mainContentWrapper\")\n      .getBoundingClientRect().height;\n    let headerHeight = document.querySelector(\"header\").getBoundingClientRect()\n      .height;\n\n    let calculatedHeight = parentDocHeight - headerHeight;\n\n    setCalcHeight(calculatedHeight);\n  }, []);\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n  };\n  // function a11yProps(index) {\n  //   return {\n  //     id: `vertical-tab-${index}`,\n  //     \"aria-controls\": `vertical-tabpanel-${index}`,\n  //   };\n  // }\n  // function TabPanel(props) {\n  //   const { children, value, index, ...other } = props;\n\n  //   return (\n  //     <div\n  //       role=\"tabpanel\"\n  //       hidden={value !== index}\n  //       id={`vertical-tabpanel-${index}`}\n  //       aria-labelledby={`vertical-tab-${index}`}\n  //       {...other}\n  //     >\n  //       {value === index && (\n  //         <Box p={3}>\n  //           <Typography variant=\"body1\">{children}</Typography>\n  //         </Box>\n  //       )}\n  //     </div>\n  //   );\n  // }\n  // TabPanel.propTypes = {\n  //   children: PropTypes.node,\n  //   index: PropTypes.any.isRequired,\n  //   value: PropTypes.any.isRequired,\n  // };\n  return (\n    <div className=\"contentWrapper\" id=\"mainContentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row boxContainerRow\" style={{ minHeight: \"520px\" }}>\n          <div className=\"col-12 row\">\n            <div className=\"col-md-2 col-12 pr-0\">\n              <div\n                className=\"d-flex flex-column\"\n                style={{\n                  border: `1px solid ${CustomStyles().darkGreen}`,\n                  borderRight: \"0px\",\n                }}\n              >\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(0)}\n                  variant={value === 0 ? `contained` : `text`}\n                  color={value === 0 ? `secondary` : `default`}\n                >\n                  Tool History & Purpose\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(1)}\n                  variant={value === 1 ? `contained` : `text`}\n                  color={value === 1 ? `secondary` : `default`}\n                >\n                  Cover Crop Data\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(2)}\n                  variant={value === 2 ? `contained` : `text`}\n                  color={value === 2 ? `secondary` : `default`}\n                >\n                  Tool Design Process\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(3)}\n                  variant={value === 3 ? `contained` : `text`}\n                  color={value === 3 ? `secondary` : `default`}\n                >\n                  Acknowledgements\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(4)}\n                  variant={value === 4 ? `contained` : `text`}\n                  color={value === 4 ? `secondary` : `default`}\n                >\n                  About the Experts\n                </Button>\n              </div>\n            </div>\n            <div\n              className=\"col-md-10 col-12 p-2\"\n              style={{ border: `1px solid ${CustomStyles().darkGreen}` }}\n            >\n              <div>\n                <RenderContent value={value} />\n              </div>\n            </div>\n            {/* <div className={classes.root}>\n              <Tabs\n                orientation=\"vertical\"\n                value={value}\n                onChange={handleChange}\n                aria-label=\"About the tool\"\n                className={classes.tabs}\n              >\n                <Tab label=\"Tool History & Purpose\" {...a11yProps(0)} />\n                <Tab label=\"Cover Crop Data\" {...a11yProps(1)} />\n                <Tab label=\"Tool Design Process\" {...a11yProps(2)} />\n                <Tab label=\"Acknowledgements\" {...a11yProps(3)} />\n                <Tab label=\"About the Experts\" {...a11yProps(4)} />\n                <TabPanel value={value} index={0}>\n                  A diverse group of stakeholders including farmers,\n                  researchers, and personnel from agribusinesses and NGOs united\n                  in 2016 to form the Northeast Cover Crops Council (NECCC). Our\n                  mission is to support and promote the adoption of cover crops\n                  and foster the exchange of information, inspiration, and\n                  outcome-based research. Decision support tools are an\n                  excellent way to integrate the complexity of climate, soil,\n                  and management into recommendation systems. Therefore, we\n                  first targeted the development of a species selection tool.\n                  This tool provides cover crop species recommendations based on\n                  grower USDA hardiness zone and cropping system specifics. Our\n                  species selection tool was adapted from the Midwest Cover Crop\n                  Council and modified and expanded to target needs of producers\n                  in the Northeast. This initiative led to the formation of a\n                  Species Selector product team consisting of agronomists,\n                  informatics researchers, and developers, as well as four Cover\n                  Crop Data Verification teams, consisting of approximately 35\n                  NECCC members.\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                  The data featured in this tool are based on expert opinion.\n                  These data represent the collective knowledge and experience\n                  of cover crop experts in the Northeast US. Experts, grouped by\n                  their USDA hardiness zone, evaluated each cover crop property\n                  in the dataset via deliberative discussions in over 70\n                  teleconferences. The zones’ decisions on cover crop\n                  characteristics, notes regarding nuances and edge/special\n                  cases, and framing of ratings were recorded in an online\n                  database. A comparative analysis of the data across zones\n                  identified areas of inconsistencies which were then addressed\n                  in a deliberative intra-regional discussion. This process, in\n                  conjunction with feedback from users on the website, ensures\n                  the quality and improvement of the data that powers the NECCC\n                  Species Selector. You can learn more about the cover crop data\n                  verification process here. Data Sources: The cover crop data\n                  were adapted from the Midwest Cover Crops Council (MCCC)\n                  species selector tool. These initial data have been reviewed,\n                  modified, and greatly expanded upon by cover crop experts in\n                  the Northeast in each USDA plant hardiness zone to best match\n                  the cropping system types, goals, and constraints found in our\n                  region. Additional data sources adapted for this tool include\n                  the USDA PLANTS database and a seeding rate calculator\n                  developed by USDA NRCS. These data are supplemented by soils\n                  data available via USDA NRCS Soil Data Access, and weather\n                  data made available through an API, constructed by the\n                  Precision Sustainable Agriculture team, serving NSSL MRMS and\n                  NASA NLDAS-2 weather data. Data Availability: We are in the\n                  process of making our data publicly available via a few\n                  mechanisms once we have completed beta-testing and finalized\n                  data quality checks. In addition to accessing this data via\n                  the NECCC Species Selector Tool, users will be able to\n                  download the raw data (spreadsheets) and Species Information\n                  Sheets (PDFs).\n                </TabPanel>\n                <TabPanel value={value} index={2}>\n                  The NECCC tool is a result of a design collaboration between\n                  the Agricultural Informatics Lab, the Precision Sustainable\n                  Agriculture team, and the NECCC. We took a user-centered\n                  approach to the design of software. In November 2019, we\n                  conducted a distributed design sprint (link to lab page stub\n                  about this) to develop a prototype of the user interface\n                  (shown below). This interface was initially tested with 24\n                  potential users at the NECCC annual conference. The tool was\n                  subsequently refined and tested with a second round of 20\n                  potential users at the Pennsylvania Association for\n                  Sustainable Agriculture Conference in February 2020. This\n                  design was ultimately refined over the course of the 2020\n                  development period, and resulted in the tool you now see on\n                  this website. We will be conducting user tests this upcoming\n                  fall in conjunction with the train-the trainer sessions run by\n                  the NECCC (www.northeastcovercrops.com). [insert GIF of the\n                  mockup] Reusability: We designed the user interface components\n                  of the Cover Crop Species Selector Tool to be reusable. Each\n                  user interface component is composed of smaller components\n                  that can be duplicated and used in a variety and multiple\n                  contexts. For example the location component is used in two\n                  parts of the species selector: the wizard -- the place the\n                  user first selects their location, and the green bar -- the\n                  place the user can update their location. The location\n                  component is made of other small components, including a map,\n                  buttons, menus, and input fields. These smaller components are\n                  also used in other components. For example, the zone selection\n                  menu is used in the location component and in the Cover Crop\n                  Explorer. By creating and utilizing reusable components, we\n                  have created a consistent user experience and user interface\n                  that can be carried over to future Decision Support Tools\n                  designed by this team. Open Source: Once we have completed\n                  beta-testing, any developer creating open source agricultural\n                  technologies requiring functionality that is currently\n                  featured in the NECCC Species Selector will be able to\n                  download our code from GitHub, as described here, and utilize\n                  these components in their projects.\n                </TabPanel>\n                <TabPanel value={value} index={3}>\n                  This material is based upon work supported by the National\n                  Institute of Food and Agriculture, U.S. Department of\n                  Agriculture, through the Northeast Sustainable Agriculture\n                  Research and Education program under subaward number ENE\n                  16-144. This work has also been supported by a USDA NIFA\n                  postdoctoral fellowship (grant # 2016-67012-24711), NIFA SAS\n                  CAP grant (project # NC09873), USDA ARS and NRCS, and Purdue\n                  University. Contact Us For information about the NECCC, the\n                  NECCC species selection tool use, and the crop data itself,\n                  contact: Victoria Ackroyd, NECCC Program Manager,\n                  northeastcovercrops AT gmail DOT. com. For information about\n                  decision support tool design and development, and the species\n                  selector tool itself, contact: aginformaticslab AT gmail DOT\n                  com.\n                </TabPanel>\n                <TabPanel value={value} index={4}>\n                  Victoria Ackroyd is Program Manager for the Northeast Cover\n                  Crops Council, Assistant Research Scientist in the Dept. of\n                  Plant Science & Landscape Architecture at the University of\n                  Maryland, and a Visiting Scientist in the USDA ARS Sustainable\n                  Agricultural Systems Lab (Beltsville, MD). She previously\n                  assisted with the Midwest Cover Crops Council Species Selector\n                  Tool and has experience with cover crops in both vegetable and\n                  agronomic systems. She led the data verification process for\n                  the NECCC Species Selector tool. Rohit Bandooni is a\n                  programmer at North Carolina State University. His background\n                  is Full Stack Development with a focus on Front End Web\n                  Development using modern JavaScript languages. He implemented\n                  the cover crop decision support tool. Christian Bench is a\n                  farmer and Agriculture Specialist with NJ RC&D and NRCS. He\n                  provides leadership in the NJ soil health initiative, cover\n                  crop and no-till efforts. He notes that “Armoring the soil and\n                  providing an ecosystem below our feet is of utmost importance\n                  as we face challenging growing conditions.” Gary Bergstrom,\n                  Professor, Plant Pathology and Plant-Microbe Biology Section,\n                  Cornell University. Gary reviewed and updated data related to\n                  cover crops and cash crop disease. Thomas Bjorkman is a\n                  Professor of Veg Crop Physiology in the Horticulture Section\n                  at Cornell University. He works on cover crops for weed and\n                  soil-quality management goals. Rebecca Brown, Associate\n                  Professor, Rhode Island State University. Rebecca works on\n                  cover crops for peri-urban vegetable systems. She is\n                  particularly interested in identifying which cover crops work\n                  or do not work in coastal New England, which is cool summer\n                  zone 6. Michel Cavigelli, Soil Scientist, USDA ARS Sustainable\n                  Agricultural Systems Lab (Beltsville, MD). Shawnna Clark,\n                  Manager/Project leader/Plant Materials Specialist/Field Tech.\n                  She works with other NRCS specialists and field office\n                  personnel, and landowners, universities, local, state and\n                  other fed agencies on soil health and cover crops and many\n                  other important Farm Bill Programs. Chad Cochrane, USDA NRCS\n                  Resource Conservationist - Agronomy in New Hampshire. Aaron\n                  Cooper is an organic grain farmer on the lower Eastern Shore\n                  of Maryland. He feels that cover crop planting is essential to\n                  his farm to support nutrient cycling and to promote soil\n                  health. Heather Darby, Extension Professor: Agronomy\n                  Specialist, University of Vermont Extension. Sjoerd Duiker,\n                  Professor of Soil Management and Applied Soil Physics, Penn\n                  State University. Kaitlin Farbotnik, State Conservation\n                  Agronomist and State Grazing Specialist for New Jersey NRCS.\n                  Much of her work is spent training the next generation of\n                  conservationists and supporting the Soil Conservationists in\n                  New Jersey by providing technical information to help them\n                  make better conservation decisions while developing\n                  conservation plans. Eric Gallandt, Professor of Weed Ecology,\n                  University of Maine. Eric assisted in reviewing cover\n                  crop/weeds data along with Steven Mirsky, Mark VanGessel, John\n                  Wallace, and Dave Wilson. Dale Gates, USDA NRCS New York State\n                  Agronomist. Kelly Gill, Senior Pollinator Conservation\n                  Specialist, Xerces Society. Kelly reviewed and provided data\n                  related to pollinators for the tool. Mark Goodson, USDA NRCS\n                  Pennsylvania State Agronomist. Masoud Hashemi, Extension\n                  Professor, University of Massachusetts. Dean Hively, Research\n                  Soil Scientist, USDA-ARS Hydrology and Remote Sensing\n                  Laboratory. Cerruti Hooks, Associate Professor, University of\n                  Maryland. Cerruti reviewed and provided data related to\n                  insects for the tool. Jim Hyde, State Agronomist in\n                  Connecticut, specializing in soil nutrient management and ag\n                  waste systems. Zach Larson, Field and Forage Crops Educator,\n                  Penn State University Extension. Jason Lilley, Sustainable\n                  Agriculture Professional, University of Maine. Rebecca Long,\n                  Agriculture and Food Systems Professional, University of Maine\n                  Cooperative Extension Oxford County Ellen Mallory, Sustainable\n                  Agriculture Extension Specialist and Professor, University of\n                  Maine. Carl Majewski, Field Specialist, Food & Agriculture,\n                  University of New Hampshire Extension. Hillary Mehl, now at\n                  the University of Arizona, reviewed and provided data related\n                  to nematodes for the tool. Steven Mirsky is a Research\n                  Ecologist in the USDA ARS Sustainable Agricultural Systems Lab\n                  (Beltsville, MD). His research program focuses on removing\n                  barriers to cover crop adoption and increasing the precision\n                  of their use with emphasis on management, breeding, and\n                  subsequent agro-ecosystem services. As chair of the NECCC and\n                  decision support tool subcommittee (2016 to present), he led\n                  the development of the NECCC Species Selector Tool and related\n                  tools. Juliet Norton is an Informatics Post-doctoral\n                  Researcher in the Agricultural Informatics Lab at Purdue\n                  University. Her research explores and addresses\n                  information-based barriers to sustainable agricultural\n                  practices. She was responsible for the implementation of the\n                  data verification process and underlying data structures. She\n                  also directed the implementation of the user interface design\n                  and ensured that it appropriately represented the cover crop\n                  data that powers the tool. Christine O’Reilly, Forage and\n                  Grazing Specialist with the Ontario Ministry of Agriculture,\n                  Food, and Rural Affairs. Christine reviewed and provided data\n                  related to cover crops as feed/forage for the tool. Ankita\n                  Raturi is an Assistant Professor in Agricultural Engineeering\n                  at Purdue University. She runs the Agricultural Informatics\n                  Lab, with research focused on human-centered design,\n                  information modeling, and software engineering, for increased\n                  resilience in food and agricultural systems. She led the\n                  design and development of the NECCC Species selector tool,\n                  co-designed the underlying data verification process and\n                  underlying crop information model. Scott Raubenstein, Vice\n                  President, Agricultural Services, Perdue AgriBusinesses.\n                  Lindsey Ruhl, Research Specialist for University of Vermont\n                  Extension Services. Paul Salon was formerly with USDA-NRCS at\n                  the Big Flats Plant Materials Center as Research Agronomist\n                  and Plant Materials Specialist covering Northeast states and\n                  with the National Soil Health Division as a Soil Health\n                  Specialist covering the Mid-Atlantic region. He was the\n                  primary architect of a cover crop mix seeding calculator\n                  currently under further development by the NECCC. Brandon\n                  Smith, USDA NRCS Northeast Regional Team Leader. Mark\n                  VanGessel, Extension Weed Specialist at University of\n                  Delaware. Anne Verhallen, Soil Management Specialist in\n                  Horticulture at Ridgetown, Ontario Ministry of Agriculture,\n                  Food, and Rural Affairs. John Wallace, Assistant Professor of\n                  Weed Science, Penn State University. Nicholas Warren, Research\n                  Scientist and graduate student in the University of New\n                  Hampshire’s Agroecology Lab (Richard Smith). Dave Wilson is an\n                  Agronomist, Field and Forage Crops Extension Educator with\n                  Penn State Extension in Berks County, PA. Dave has worked as a\n                  research agronomist in field crops, cover crops, forages,\n                  pasture management, grazing, soil health, farming rotations\n                  and organic farming systems. Dave's background includes dairy\n                  farming, maize breeding, certified hybrid corn production,\n                  certified soybean and small grain production and agricultural\n                  pesticide research. His prior experience includes conducting\n                  research evaluating new species and varieties for use in\n                  forage systems and as cover crops. Kirsten Workman, Agronomy\n                  Specialist and Certified Crop Adviser for University of\n                  Vermont Extension. She works directly with farmers on\n                  implementing conservation agronomy on their farms, focusing on\n                  soil health, nutrient management and water quality. She also\n                  engages in on-farm research focused on cover crops, especially\n                  in dairy cropping systems.\n                </TabPanel>\n              </Tabs>\n            </div> */}\n          </div>\n        </div>\n      </div>\n\n      {/* <div\n        className=\"aboutWrapper\"\n        style={{\n          width: \"100%\",\n          minHeight: calcHeight,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          background: \"url(/images/cover-crop-field.png)\",\n          backgroundSize: \"cover\",\n        }}\n      >\n        <div\n          className=\"innerAboutWrapper\"\n          style={{\n            width: \"95%\",\n            margin: \"0 auto\",\n            backgroundColor: \"rgba(240,247,235,.8)\",\n            border: \"1px solid #598445\",\n            borderRadius: \"10px\",\n            padding: \"1em\",\n          }}\n        >\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-12 pb-2\">\n                <Typography variant=\"h4\" align=\"center\">\n                  About\n                </Typography>\n              </div>\n              <div className=\"col-12\">\n                <Typography variant=\"body1\">\n                  We are a group of researchers and outreach experts from\n                  universities, government agencies and NGOs, and industry\n                  dedicated to increasing the sustainability of US cropping\n                  systems.The Cover Crop Tools was designed and developed by a\n                  Product Team with members from the{\" \"}\n                  <a\n                    href=\"http://sudokita.com\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Agricultural Informatics Lab\n                  </a>{\" \"}\n                  and the{\" \"}\n                  <a\n                    href=\"//precisionsustainableag.org\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Precision Sustainable Agriculture\n                  </a>{\" \"}\n                  team at USDA ARS, NC State, and Purdue University. The Cover\n                  Crop Dataset has been assembled by six teams of cover crop\n                  experts (one for each plant hardiness zone in the northeastern\n                  United States) from the\n                  <a\n                    href=\"http://northeastcovercrops.com\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {\" \"}\n                    Northeast Cover Crops Council\n                  </a>\n                  .\n                  <br />\n                </Typography>\n              </div>\n              <div className=\"col-12\">\n                <table className=\"table table-hover table-striped mt-2\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th style={tableStyles.td}>\n                        <Typography variant=\"body1\">Team</Typography>\n                      </th>\n                      <th style={tableStyles.td}>\n                        <Typography variant=\"body1\">Members</Typography>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Product</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          {\" \"}\n                          Ankita Raturi, Victoria Ackroyd, Juliet Norton, Rohit\n                          Bandooni, Paul Salon, Steven Mirsky\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Zone 7</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          {\" \"}\n                          Mark VanGessel, Scott Raubenstein, Nevin Dawson, Aaron\n                          Cooper, Dean Hively, Steven Mirsky, Michel Cavigelli\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Zone 6</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          Sjoerd Duiker, John Wallace, Jim Hyde, Rebecca Brown,\n                          Zach Larson, Dave Wilson, Megan Chawner, Christian\n                          Bench, Kaitlin Farbotnik, Mark Goodson\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Zone 5</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          Thomas Bjorkman, Kirsten Workman, Shawnna Clark, Dorn\n                          Cox, Mark Goodson, Anne Verhallen\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Zone 4</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          Heather Darby, Jason Lilley, Natalie Lounsbury,\n                          Lindsey Ruhl, Derek Hines, Rebecca Long, Ellen\n                          Mallory, John Chartier, Kirsten Workman\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">Zone 2 &amp; 3</Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">TBD.</Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          Misc. Participants\n                        </Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          Brandon Smith, Linda Yeung, Masoud Hashemi, Kate Tully\n                        </Typography>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          External Data Sources\n                        </Typography>\n                      </td>\n                      <td style={tableStyles.td}>\n                        <Typography variant=\"body1\">\n                          The NECCC dataset was built on data sourced from the{\" \"}\n                          <a href=\"http://mccc.msu.edu\" target=\"_blank\">\n                            Midwestern Cover Crops Council\n                          </a>\n                          ,{\" \"}\n                          <a href=\"https://plants.usda.gov/java/\">\n                            USDA PLANTS database\n                          </a>\n                          , and the{\" \"}\n                          <a href=\"//itis.gov\" target=\"_blank\">\n                            Integrated Taxonomic Information Service\n                          </a>\n                          .\n                        </Typography>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"col-12\">\n                <Typography variant=\"body1\" style={{ fontWeight: \"bold\" }}>\n                  This material is based upon work supported by:\n                </Typography>\n                <ol>\n                  <li>\n                    <Typography variant=\"body1\">\n                      The National Institute of Food and Agriculture, U.S.\n                      Department of Agriculture, through the Northeast\n                      Sustainable Agriculture Research and Education program\n                      under subaward number ENE16-144,\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      Post-doctoral Fellowship number 2016-67012-24711 and other\n                      awards from the USDA National Institute of Food and\n                      Agriculture,\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      The U.S. Department of Agriculture Natural Resources\n                      Conservation Service.\n                    </Typography>\n                  </li>\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div> */}\n    </div>\n  );\n  // return (\n  //   <Fragment>\n  //     <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n  //     <Box>\n  //       <aside\n  //         className=\"landingWrapper\"\n  //         style={{\n  //           background: 'url(\"/images/cover-crop-field.png\") 0% 0% / cover',\n  //         }}\n  //       >\n  //         <div className=\"boxWrapper\">\n  //           <aside className=\"text-left\">\n  //             <h2>About</h2>\n  //             <p>\n  //               We are a group of researchers and outreach experts from\n  //               universities, government agencies and NGOs, and industry\n  //               dedicated to increasing the sustainability of US cropping\n  //               systems.The Cover Crop Tools was designed and developed by a\n  //               Product Team with members from the{\" \"}\n  //               <a href=\"http://sudokita.com\" target=\"_blank\" rel=\"noreferrer\">\n  //                 Agricultural Informatics Lab\n  //               </a>{\" \"}\n  //               and the{\" \"}\n  //               <a\n  //                 href=\"//precisionsustainableag.org\"\n  //                 target=\"_blank\"\n  //                 rel=\"noreferrer\"\n  //               >\n  //                 Precision Sustainable Agriculture\n  //               </a>{\" \"}\n  //               team at USDA ARS, NC State, and Purdue University. The Cover\n  //               Crop Dataset has been assembled by six teams of cover crop\n  //               experts (one for each plant hardiness zone in the northeastern\n  //               United States) from the\n  //               <a\n  //                 href=\"http://northeastcovercrops.com\"\n  //                 target=\"_blank\"\n  //                 rel=\"noreferrer\"\n  //               >\n  //                 {\" \"}\n  //                 Northeast Cover Crops Council\n  //               </a>\n  //               .\n  //               <br />\n  // <table className=\"table table-hover table-striped mt-2\">\n  //   <thead className=\"thead-dark\">\n  //     <tr>\n  //       <th style={tableStyles.td}>Team</th>\n  //       <th style={tableStyles.td}>Members</th>\n  //     </tr>\n  //   </thead>\n  //   <tbody>\n  //     <tr>\n  //       <td style={tableStyles.td}>Product</td>\n  //       <td style={tableStyles.td}>\n  //         Ankita Raturi, Victoria Ackroyd, Juliet Norton, Rohit\n  //         Bandooni, Paul Salon, Steven Mirsky\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Zone 7</td>\n  //       <td style={tableStyles.td}>\n  //         Mark VanGessel, Scott Raubenstein, Nevin Dawson, Aaron\n  //         Cooper, Dean Hively, Steven Mirsky, Michel Cavigelli\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Zone 6</td>\n  //       <td style={tableStyles.td}>\n  //         Sjoerd Duiker, John Wallace, Jim Hyde, Rebecca Brown,\n  //         Zach Larson, Dave Wilson, Megan Chawner, Christian\n  //         Bench, Kaitlin Farbotnik, Mark Goodson\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Zone 5</td>\n  //       <td style={tableStyles.td}>\n  //         Thomas Bjorkman, Kirsten Workman, Shawnna Clark, Dorn\n  //         Cox, Mark Goodson, Anne Verhallen\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Zone 4</td>\n  //       <td style={tableStyles.td}>\n  //         Heather Darby, Jason Lilley, Natalie Lounsbury, Lindsey\n  //         Ruhl, Derek Hines, Rebecca Long, Ellen Mallory, John\n  //         Chartier, Kirsten Workman\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Zone 2 &amp; 3</td>\n  //       <td style={tableStyles.td}>TBD.</td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>Misc. Participants</td>\n  //       <td style={tableStyles.td}>\n  //         Brandon Smith, Linda Yeung, Masoud Hashemi, Kate Tully\n  //       </td>\n  //     </tr>\n  //     <tr>\n  //       <td style={tableStyles.td}>External Data Sources</td>\n  //       <td style={tableStyles.td}>\n  //         The NECCC dataset was built on data sourced from the{\" \"}\n  //         <a href=\"http://mccc.msu.edu\" target=\"_blank\">\n  //           Midwestern Cover Crops Council\n  //         </a>\n  //         ,{\" \"}\n  //         <a href=\"https://plants.usda.gov/java/\">\n  //           USDA PLANTS database\n  //         </a>\n  //         , and the{\" \"}\n  //         <a href=\"//itis.gov\" target=\"_blank\">\n  //           Integrated Taxonomic Information Service\n  //         </a>\n  //         .\n  //       </td>\n  //     </tr>\n  //   </tbody>\n  // </table>\n  //             </p>\n  //             <p>\n  //               <b className=\"mt-2\">\n  //                 This material is based upon work supported by:\n  //               </b>\n  //               <ol>\n  //                 <li>\n  //                   The National Institute of Food and Agriculture, U.S.\n  //                   Department of Agriculture, through the Northeast Sustainable\n  //                   Agriculture Research and Education program under subaward\n  //                   number ENE16-144,\n  //                 </li>\n  //                 <li>\n  //                   Post-doctoral Fellowship number 2016-67012-24711 and other\n  //                   awards from the USDA National Institute of Food and\n  //                   Agriculture,\n  //                 </li>\n  //                 <li>\n  //                   The U.S. Department of Agriculture Natural Resources\n  //                   Conservation Service.\n  //                 </li>\n  //               </ol>\n  //             </p>\n  //             <p></p>\n  //           </aside>\n  //         </div>\n  //       </aside>\n  //     </Box>\n  //   </Fragment>\n  // );\n};\n\nexport default About;\n\nconst RenderContent = ({ value = 0 }) => {\n  switch (value) {\n    case 0:\n      return (\n        <Typography variant=\"body1\" align=\"left\">\n          A diverse group of stakeholders including farmers, researchers, and\n          personnel from agribusinesses and NGOs united in 2016 to form the{\" \"}\n          <a href=\"http://northeastcovercrops.com\" target=\"_blank\">\n            Northeast Cover Crops Council\n          </a>{\" \"}\n          (NECCC). Our mission is to support and promote the adoption of cover\n          crops and foster the exchange of information, inspiration, and\n          outcome-based research. Decision support tools are an excellent way to\n          integrate the complexity of climate, soil, and management into\n          recommendation systems. Therefore, we first targeted the development\n          of a species selection tool. This tool provides cover crop species\n          recommendations based on grower USDA hardiness zone and cropping\n          system specifics. Our species selection tool was adapted from the\n          Midwest Cover Crop Council and modified and expanded to target needs\n          of producers in the Northeast. This initiative led to the formation of\n          a Species Selector product team consisting of agronomists, informatics\n          researchers, and developers, as well as four Cover Crop Data\n          Verification teams, consisting of approximately 35 NECCC members.\n        </Typography>\n      );\n    case 1:\n      return (\n        <Fragment>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            The data featured in this tool are based on expert opinion. These\n            data represent the collective knowledge and experience of cover crop\n            experts in the Northeast US. Experts, grouped by their USDA\n            hardiness zone, evaluated each cover crop property in the dataset\n            via deliberative discussions in over 70 teleconferences. The zones’\n            decisions on cover crop characteristics, notes regarding nuances and\n            edge/special cases, and framing of ratings were recorded in an\n            online database. A comparative analysis of the data across zones\n            identified areas of inconsistencies which were then addressed in a\n            deliberative intra-regional discussion. This process, in conjunction\n            with feedback from users on the website, ensures the quality and\n            improvement of the data that powers the NECCC Species Selector. You\n            can learn more about the cover crop data verification process here.\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            <b>Data Sources:</b> The cover crop data were adapted from the{\" \"}\n            <a href=\"http://mccc.msu.edu\" target=\"_blank\">\n              Midwest Cover Crops Council (MCCC) species selector tool\n            </a>\n            . These initial data have been reviewed, modified, and greatly\n            expanded upon by cover crop experts in the Northeast in each{\"\"}\n            <a\n              href=\"https://planthardiness.ars.usda.gov/PHZMWeb/\"\n              target=\"_blank\"\n            >\n              USDA plant hardiness zone\n            </a>{\" \"}\n            to best match the cropping system types, goals, and constraints\n            found in our region. Additional data sources adapted for this tool\n            include the{\" \"}\n            <a href=\"https://plants.sc.egov.usda.gov/java/\" target=\"_blank\">\n              USDA PLANTS database\n            </a>{\" \"}\n            and a seeding rate calculator developed by USDA NRCS. These data are\n            supplemented by soils data available via{\" \"}\n            <a href=\"https://sdmdataaccess.nrcs.usda.gov/\" target=\"_blank\">\n              USDA NRCS Soil Data Access\n            </a>\n            , and weather data made available through an API, constructed by the\n            Precision Sustainable Agriculture team, serving{\" \"}\n            <a href=\"https://www.nssl.noaa.gov/projects/mrms/\" target=\"_blank\">\n              NSSL MRMS\n            </a>{\" \"}\n            and{\" \"}\n            <a href=\"https://ldas.gsfc.nasa.gov/nldas/\" target=\"_blank\">\n              NASA NLDAS-2\n            </a>{\" \"}\n            weather data.\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            <b>Data Availability:</b> We are in the process of making our data\n            publicly available via a few mechanisms once we have completed\n            beta-testing and finalized data quality checks. In addition to\n            accessing this data via the NECCC Species Selector Tool, users will\n            be able to download the raw data (spreadsheets) and Species\n            Information Sheets (PDFs).\n          </Typography>\n        </Fragment>\n      );\n\n    case 2:\n      return (\n        <Fragment>\n          <Typography variant=\"body1\" className=\"pb-4\" align=\"left\">\n            The NECCC tool is a result of a design collaboration between the{\" \"}\n            <a href=\"http://www.aginformaticslab.org\" target=\"_blank\">\n              Agricultural Informatics Lab\n            </a>\n            , the{\" \"}\n            <a href=\"http://www.precisionsustainableag.org\" target=\"_blank\">\n              Precision Sustainable Agriculture\n            </a>{\" \"}\n            team, and the NECCC. We took a user-centered approach to the design\n            of software. In November 2019, we conducted a distributed design\n            sprint (link to lab page stub about this) to develop a prototype of\n            the user interface (shown below). This interface was initially\n            tested with 24 potential users at the NECCC annual conference. The\n            tool was subsequently refined and tested with a second round of 20\n            potential users at the Pennsylvania Association for Sustainable\n            Agriculture Conference in February 2020. This design was ultimately\n            refined over the course of the 2020 development period, and resulted\n            in the tool you now see on this website. We will be conducting user\n            tests this upcoming fall in conjunction with the train-the trainer\n            sessions run by the NECCC (\n            <a href=\"http://www.northeastcovercrops.com\" target=\"_blank\">\n              www.northeastcovercrops.com\n            </a>\n            ).\n          </Typography>\n          <Typography variant=\"body1\" className=\"pb-4\" align=\"left\">\n            <b>Reusability:</b> We designed the user interface components of the\n            Cover Crop Species Selector Tool to be reusable. Each user interface\n            component is composed of smaller components that can be duplicated\n            and used in a variety and multiple contexts. For example the\n            location component is used in two parts of the species selector: the\n            wizard -- the place the user first selects their location, and the\n            green bar -- the place the user can update their location. The\n            location component is made of other small components, including a\n            map, buttons, menus, and input fields. These smaller components are\n            also used in other components. For example, the zone selection menu\n            is used in the location component and in the Cover Crop Explorer. By\n            creating and utilizing reusable components, we have created a\n            consistent user experience and user interface that can be carried\n            over to future Decision Support Tools designed by this team.\n          </Typography>\n          <Typography variant=\"body1\" className=\"pb-4\" align=\"left\">\n            <b>Open Source:</b> Once we have completed beta-testing, any\n            developer creating open source agricultural technologies requiring\n            functionality that is currently featured in the NECCC Species\n            Selector will be able to download our code from GitHub, as described\n            here, and utilize these components in their projects.\n          </Typography>\n        </Fragment>\n      );\n    case 3:\n      return (\n        <Fragment>\n          <Typography variant=\"h5\" align=\"left\" gutterBottom>\n            Many Thanks to Our Funders\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            This material is based upon work supported by the National Institute\n            of Food and Agriculture, U.S. Department of Agriculture, through the\n            Northeast Sustainable Agriculture Research and Education program\n            under subaward number ENE 16-144. This work has also been supported\n            by a USDA NIFA postdoctoral fellowship (grant # 2016-67012-24711),\n            NIFA SAS CAP grant (project # NC09873), USDA ARS and NRCS, and\n            Purdue University.\n          </Typography>\n          <Typography variant=\"h6\" align=\"left\" gutterBottom>\n            Contact Us\n          </Typography>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            For information about the NECCC, the NECCC species selection tool\n            use, and the crop data itself, contact: Victoria Ackroyd, NECCC\n            Program Manager, northeastcovercrops AT gmail DOT. com. For\n            information about decision support tool design and development, and\n            the species selector tool itself, contact: aginformaticslab AT gmail\n            DOT com.\n          </Typography>\n        </Fragment>\n      );\n    case 4:\n      return (\n        <Fragment>\n          <Typography variant=\"body1\" align=\"left\" className=\"pb-4\">\n            <p>\n              <b>Victoria Ackroyd </b>\n              <span>\n                is Program Manager for the Northeast Cover Crops Council,\n                Assistant Research Scientist in the Dept. of Plant Science &amp;\n                Landscape Architecture at the University of Maryland, and a\n                Visiting Scientist in the USDA ARS Sustainable Agricultural\n                Systems Lab (Beltsville, MD). She previously assisted with the\n                Midwest Cover Crops Council Species Selector Tool and has\n                experience with cover crops in both vegetable and agronomic\n                systems. She led the data verification process for the NECCC\n                Species Selector tool.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Rohit Bandooni </b>\n              <span>\n                is a programmer at North Carolina State University.\n              </span>{\" \"}\n              <span>\n                His background is Full Stack Development with a focus on Front\n                End Web Development using modern JavaScript languages.\n              </span>{\" \"}\n              <span>\n                He implemented the cover crop decision support tool.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Christian Bench</b>{\" \"}\n              <span>\n                is a farmer and Agriculture Specialist with NJ RC&amp;D and\n                NRCS. He provides leadership in the NJ soil health initiative,\n                cover crop and no-till efforts. He notes that &ldquo;Armoring\n                the soil and providing an ecosystem below our feet is of utmost\n                importance as we face challenging growing conditions.&rdquo;\n              </span>\n            </p>\n\n            <p>\n              <b>Gary Bergstrom</b>\n              <span>\n                , Professor, Plant Pathology and Plant-Microbe Biology Section,\n                Cornell University. Gary reviewed and updated data related to\n                cover crops and cash crop disease.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Thomas Bjorkman </b>\n              <span>\n                is a Professor of Veg Crop Physiology in the Horticulture\n                Section at Cornell University. He works on cover crops for weed\n                and soil-quality management goals.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Rebecca Brown</b>\n              <span>\n                , Associate Professor, Rhode Island State University. Rebecca\n                works on cover crops for peri-urban vegetable systems. She is\n                particularly interested in identifying which cover crops work or\n                do not work in coastal New England, which is cool summer zone 6.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Michel Cavigelli</b>\n              <span>\n                , Soil Scientist, USDA ARS Sustainable Agricultural Systems Lab\n                (Beltsville, MD).\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Shawnna Clark</b>\n              <span>\n                , Manager/Project leader/Plant Materials Specialist/Field Tech.\n                She works with other NRCS specialists and field office\n                personnel, and landowners, universities, local, state and other\n                fed agencies on soil health and cover crops and many other\n                important Farm Bill Programs.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Chad Cochrane</b>\n              <span>\n                , USDA NRCS Resource Conservationist - Agronomy in New\n                Hampshire.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Aaron Cooper </b>\n              <span>\n                is an organic grain farmer on the lower Eastern Shore of\n                Maryland. He feels that cover crop planting is essential to his\n                farm to support nutrient cycling and to promote soil health.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Heather Darby</b>\n              <span>\n                , Extension Professor: Agronomy Specialist, University of\n                Vermont Extension.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Sjoerd Duiker</b>\n              <span>\n                , Professor of Soil Management and Applied Soil Physics, Penn\n                State University.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Kaitlin Farbotnik</b>\n              <span>\n                , State Conservation Agronomist and State Grazing Specialist for\n                New Jersey NRCS. Much of her work is spent training the next\n                generation of conservationists and supporting the Soil\n                Conservationists in New Jersey by providing technical\n                information to help them make better conservation decisions\n                while developing conservation plans.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Eric Gallandt</b>\n              <span>\n                , Professor of Weed Ecology, University of Maine. Eric assisted\n                in reviewing cover crop/weeds data along with Steven Mirsky,\n                Mark VanGessel, John Wallace, and Dave Wilson.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Dale Gates</b>\n              <span>, USDA NRCS New York State Agronomist.</span>\n            </p>\n            <p></p>\n            <p>\n              <b>Kelly Gill</b>\n              <span>\n                , Senior Pollinator Conservation Specialist, Xerces Society.\n                Kelly reviewed and provided data related to pollinators for the\n                tool.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Mark Goodson</b>\n              <span>, USDA NRCS Pennsylvania State Agronomist.</span>\n            </p>\n            <p></p>\n            <p>\n              <b>Masoud Hashemi</b>\n              <span>\n                , Extension Professor, University of Massachusetts.&nbsp;\n              </span>\n            </p>\n            <p>\n              <b>Dean Hively</b>\n              <span>\n                , Research Soil Scientist, USDA-ARS Hydrology and Remote Sensing\n                Laboratory.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Cerruti Hooks</b>\n              <span>\n                , Associate Professor, University of Maryland. Cerruti reviewed\n                and provided data related to insects for the tool.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Jim Hyde</b>\n              <span>\n                , State Agronomist in Connecticut, specializing in soil nutrient\n                management and ag waste systems.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Zach Larson</b>\n              <span>\n                , Field and Forage Crops Educator, Penn State University\n                Extension.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Jason Lilley</b>\n              <span>,</span>{\" \"}\n              <span>\n                Sustainable Agriculture Professional, University of Maine.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Rebecca Long</b>\n              <span>\n                , Agriculture and Food Systems Professional, University of Maine\n                Cooperative Extension Oxford County\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Ellen Mallory</b>\n              <span>\n                , Sustainable Agriculture Extension Specialist and Professor,\n                University of Maine.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Carl Majewski</b>\n              <span>\n                , Field Specialist, Food &amp; Agriculture, University of New\n                Hampshire Extension.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Hillary Mehl</b>\n              <span>\n                , now at the University of Arizona, reviewed and provided data\n                related to nematodes for the tool.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Steven Mirsky </b>\n              <span>\n                is a Research Ecologist in the USDA ARS Sustainable Agricultural\n                Systems Lab (Beltsville, MD). His research program focuses on\n                removing barriers to cover crop adoption and increasing the\n                precision of their use with emphasis on management, breeding,\n                and subsequent agro-ecosystem services. As chair of the NECCC\n                and decision support tool subcommittee (2016 to present), he led\n                the development of the NECCC Species Selector Tool and related\n                tools.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Juliet Norton </b>\n              <span>\n                is an Informatics Post-doctoral Researcher in the Agricultural\n                Informatics Lab at Purdue University. Her research explores and\n                addresses information-based barriers to sustainable agricultural\n                practices. She was responsible for the implementation of the\n                data verification process and underlying data structures. She\n                also directed the implementation of the user interface design\n                and ensured that it appropriately represented the cover crop\n                data that powers the tool.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Christine O&rsquo;Reilly</b>\n              <span>\n                , Forage and Grazing Specialist with the Ontario Ministry of\n                Agriculture, Food, and Rural Affairs. Christine reviewed and\n                provided data related to cover crops as feed/forage for the\n                tool.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Ankita Raturi </b>\n              <span>\n                is an Assistant Professor in Agricultural Engineeering at Purdue\n                University. She runs the{\" \"}\n              </span>\n              <a href=\"http://sudokita.com\">\n                <span>Agricultural Informatics Lab</span>\n              </a>\n              <span>\n                , with research focused on human-centered design, information\n                modeling, and software engineering, for increased resilience in\n                food and agricultural systems. She led the design and\n                development of the NECCC Species selector tool, co-designed the\n                underlying data verification process and underlying crop\n                information model.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Scott Raubenstein</b>\n              <span>\n                , Vice President, Agricultural Services, Perdue\n                AgriBusinesses.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Lindsey Ruhl</b>\n              <span>\n                , Research Specialist for University of Vermont Extension\n                Services.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Paul Salon </b>\n              <span>\n                was formerly with USDA-NRCS at the Big Flats Plant Materials\n                Center as Research Agronomist and Plant Materials Specialist\n                covering Northeast states and with the National Soil Health\n                Division as a Soil Health Specialist covering the Mid-Atlantic\n                region. He was the primary architect of a cover crop mix seeding\n                calculator currently under further development by the NECCC.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Brandon Smith</b>\n              <span>, USDA NRCS Northeast Regional Team Leader.</span>\n            </p>\n            <p></p>\n            <p>\n              <b>Mark VanGessel</b>\n              <span>\n                , Extension Weed Specialist at University of Delaware.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Anne Verhallen</b>\n              <span>\n                , Soil Management Specialist in Horticulture at Ridgetown,\n                Ontario Ministry of Agriculture, Food, and Rural Affairs.\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>John Wallace</b>\n              <span>\n                , Assistant Professor of Weed Science, Penn State\n                University.&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Nicholas Warren</b>\n              <span>\n                , Research Scientist and graduate student in the University of\n                New Hampshire&rsquo;s Agroecology Lab (Richard Smith).&nbsp;\n              </span>\n            </p>\n            <p></p>\n            <p>\n              <b>Dave Wilson</b>\n              <span>\n                {\" \"}\n                is an Agronomist, Field and Forage Crops Extension Educator with\n                Penn State Extension in Berks County, PA. Dave has worked as a\n                research agronomist in field crops, cover crops, forages,\n                pasture management, grazing, soil health, farming rotations and\n                organic farming systems. Dave's background includes dairy\n                farming, maize breeding, certified hybrid corn production,\n                certified soybean and small grain production and agricultural\n                pesticide research. His prior experience includes conducting\n                research evaluating new species and varieties for use in forage\n                systems and as cover crops.\n              </span>\n            </p>\n            <p>\n              <br />\n              <b>Kirsten Workman, </b>\n              <span>\n                Agronomy Specialist and Certified Crop Adviser for University of\n                Vermont Extension. She works directly with farmers on\n                implementing conservation agronomy on their farms, focusing on\n                soil health, nutrient management and water quality. She also\n                engages in on-farm research focused on cover crops, especially\n                in dairy cropping systems.\n              </span>\n            </p>\n          </Typography>\n        </Fragment>\n      );\n    default: {\n      return <Typography variant=\"body1\"></Typography>;\n    }\n  }\n};\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst SeedingRateCalculator = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default SeedingRateCalculator;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst MixMaker = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default MixMaker;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport { PictureAsPdf, Add, FormatListBulleted } from \"@material-ui/icons\";\nimport {\n  Button,\n  Card,\n  CardMedia,\n  CardActionArea,\n  Typography,\n  CardContent,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { downloadAllPDF, trimString } from \"../../shared/constants\";\nimport { useSnackbar } from \"notistack\";\nimport { Context } from \"../../store/Store\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: 250,\n  },\n  media: {\n    height: 140,\n  },\n});\nconst ExplorerCardView = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const classes = useStyles();\n\n  const [selectedBtns, setSelectedBtns] = useState(\n    state.selectedCrops.map((crop) => {\n      return crop.id;\n    })\n  );\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const handleModalOpen = (crop) => {\n    // put data inside modal\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (container.textContent === \"ADDED\") {\n        container.querySelector(\".MuiTypography-root\").innerHTML =\n          \"ADD TO LIST\";\n        container\n          .querySelector(\".MuiTypography-root\")\n          .classList.remove(\"text-white\");\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiTypography-root\").innerHTML = \"ADDED\";\n        container\n          .querySelector(\".MuiTypography-root\")\n          .classList.add(\"text-white\");\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: false,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Added`);\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: false,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Removed`);\n      }\n    } else {\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: false,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Added`);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"row\">\n        {props.activeCropData.map((crop, index) => (\n          <div className=\"col-auto pb-4\" key={index}>\n            <Card className={classes.card}>\n              <CardMedia\n                image={\n                  crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                    ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                    : \"https://placehold.it/100x100?text=Placeholder\"\n                }\n                className={classes.media}\n                title={crop.fields[\"Cover Crop Name\"]}\n              />\n              <CardContent>\n                <div\n                  className=\"font-weight-bold text-muted text-uppercase\"\n                  style={{ fontSize: \"10pt\" }}\n                >\n                  {crop.fields[\"Cover Crop Group\"]}\n                </div>\n                <div className=\"font-weight-bold \" style={{ fontSize: \"16pt\" }}>\n                  <Typography variant=\"h6\" className=\"text-truncate\">\n                    {crop.fields[\"Cover Crop Name\"]}\n                  </Typography>\n                </div>\n                <small className=\"font-italic text-muted d-inline-block text-truncate\">\n                  {trimString(crop.fields[\"Scientific Name\"], 25)}\n                </small>\n                <div>\n                  <small className=\"text-muted\">\n                    <a\n                      style={{\n                        textDecoration: \"underline\",\n                        color: \"rgb(53, 153, 155)\",\n                      }}\n                      // href={`/information-sheet/${crop.fields[\"Cover Crop Name\"]}`}\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                      onClick={() => handleModalOpen(crop)}\n                    >\n                      View Crop Details\n                    </a>\n                  </small>\n                </div>\n              </CardContent>\n\n              <CardActionArea\n                id={`cartBtn${index}`}\n                style={{\n                  backgroundColor: \"#e3f2f4\",\n                  textAlign: \"center\",\n                  padding: \"0.5em\",\n                }}\n                className={\n                  selectedBtns.includes(crop.fields.id)\n                    ? \"activeCartBtn\"\n                    : \"inactiveCartBtn\"\n                }\n                onClick={() => {\n                  addCropToBasket(\n                    crop.fields[\"id\"],\n                    crop.fields[\"Cover Crop Name\"],\n                    `cartBtn${index}`,\n                    crop.fields\n                  );\n                }}\n              >\n                <Typography\n                  variant=\"body2\"\n                  className={`text-uppercase ${\n                    selectedBtns.includes(crop.fields.id) ? \"text-white\" : \"\"\n                  }`}\n                  style={{\n                    color: \"black\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {selectedBtns.includes(crop.fields.id)\n                    ? \"ADDED\"\n                    : \"ADD TO LIST\"}\n                </Typography>\n              </CardActionArea>\n            </Card>\n          </div>\n        ))}\n      </div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </Fragment>\n  );\n};\n\nexport default ExplorerCardView;\n","import React, { useState, useContext, useEffect, useMemo, useRef } from \"react\";\nimport Header from \"../Header/header\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  TextField,\n  InputAdornment,\n  createMuiTheme,\n  Button,\n  Menu,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { UnderConstructionText, CustomStyles } from \"../../shared/constants\";\nimport {\n  Search,\n  PictureAsPdf,\n  FormatListBulleted,\n  KeyboardArrowDown,\n  KeyboardArrowUp,\n} from \"@material-ui/icons\";\n// import CropExplorerFilters from \"./CropExplorerFilters\";\nimport CropSidebarComponent from \"../CropSelector/CropSidebar\";\nimport { Context } from \"../../store/Store\";\nimport ExplorerCardView from \"./ExplorerCardView\";\n\nconst CoverCropExplorer = () => {\n  const [state, dispatch] = useContext(Context);\n  const cardViewRef = useRef();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [cropDataChanged, setCropDataChanged] = useState(false);\n  const [activeCropData, setActiveCropData] = useState([]);\n  const [inactiveCropData, setInactiveCropData] = useState([]);\n  const [cropName, setCropName] = useState(\"\");\n  const [cropData, setCropData] = useState([]);\n\n  useEffect(() => {\n    setCropDataChanged(!cropDataChanged);\n  }, [state.zone]);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  useEffect(() => {\n    document.title = \"Cover Crop Explorer\";\n  }, []);\n  const handleClose = (zone) => {\n    if (typeof zone === \"number\") {\n      let zoneText = `Zone ${zone}`;\n      dispatch({\n        type: \"UPDATE_ZONE_TEXT\",\n        data: {\n          zoneText: zoneText,\n          zone: parseInt(zone),\n        },\n      });\n    }\n    setAnchorEl(null);\n  };\n  const handleSearchChange = (e) => {\n    setCropName(e.target.value);\n    // console.log(e.target.value.length);\n    let { cropData } = state;\n    const crop_data = cropData.filter((crop) => {\n      let crop_name = crop.fields[\"Cover Crop Name\"]\n        .split(\",\")\n        .join(\"\")\n        .toLowerCase();\n      let scientific_name = crop.fields[\"Scientific Name\"]\n        .split(\",\")\n        .join(\"\")\n        .toLowerCase();\n      if (\n        crop_name.includes(e.target.value.toLowerCase()) ||\n        scientific_name.includes(e.target.value.toLowerCase())\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    console.log(crop_data);\n    setActiveCropData(crop_data);\n  };\n\n  // useEffect(() => {\n  //   switch (state.zone) {\n  //     case 7: {\n  //       setCropData(state.zone7CropData);\n  //       break;\n  //     }\n  //     case 6: {\n  //       setCropData(state.zone6CropData);\n  //       break;\n  //     }\n  //     case 5: {\n  //       setCropData(state.zone5CropData);\n  //       break;\n  //     }\n  //     default: {\n  //       setCropData(state.zone7CropData);\n  //       break;\n  //     }\n  //   }\n  // }, [state.zone]);\n  return cropData.length === 0 ? (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <div className=\"container-fluid mt-4\">\n        <div className=\"row mt-3\">\n          <div className=\"col-md-12 col-lg-3 col-xl-2 col-12\">\n            <CropSidebarComponent\n              from={\"explorer\"}\n              cropDataChanged={cropDataChanged}\n              cropData={state.cropData}\n              activeCropData={\n                activeCropData.length > 0 ? activeCropData : state.cropData\n              }\n              setActiveCropData={setActiveCropData}\n              inactiveCropData={inactiveCropData}\n              setInactiveCropData={setInactiveCropData}\n              isListView={true}\n              handleSearchChange={handleSearchChange}\n              searchValue={cropName}\n            />\n          </div>\n          <div className=\"col-md-12 col-lg-9 col-xl-10 col-12\">\n            {/* <div\n              className=\"row\"\n              style={{\n                backgroundColor: \"#35999b\",\n                height: \"40px\",\n                borderTopLeftRadius: \"5px\",\n                borderTopRightRadius: \"5px\",\n              }}\n            >\n              <div className=\"col-12 offset-md-8 col-md-4 text-right\">\n                <Button\n                  aria-controls=\"zone-selector\"\n                  aria-haspopup=\"true\"\n                  onClick={handleClick}\n                  style={{ color: \"white\" }}\n                >\n                  Zone {state.zone}&nbsp;{\" \"}\n                  {!Boolean(anchorEl) ? (\n                    <KeyboardArrowDown />\n                  ) : (\n                    <KeyboardArrowUp />\n                  )}\n                </Button>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={anchorEl}\n                  keepMounted\n                  open={Boolean(anchorEl)}\n                  onClose={handleClose}\n                >\n                  <MenuItem onClick={() => handleClose(5)}>Zone 5</MenuItem>\n                  <MenuItem onClick={() => handleClose(6)}>Zone 6</MenuItem>\n                  <MenuItem onClick={() => handleClose(7)}>Zone 7</MenuItem>\n                </Menu>\n              </div> \n            </div>*/}\n            <ExplorerCardView\n              cropDataChanged={cropDataChanged}\n              cropData={state.cropData}\n              activeCropData={\n                activeCropData.length > 0 ? activeCropData : state.cropData\n              }\n              setActiveCropData={setActiveCropData}\n              inactiveCropData={inactiveCropData}\n              setInactiveCropData={setInactiveCropData}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default CoverCropExplorer;\n","import React, { useState, useEffect, useContext, Fragment } from \"react\";\nimport \"../../styles/InformationSheet.scss\";\nimport {\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Close,\n  Info,\n} from \"@material-ui/icons\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport { zoneIcon, CropImage, flipCoverCropName } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\n\nimport html2canvas from \"html2canvas\";\nimport * as JSPDF from \"jspdf\";\nimport { saveAs } from \"file-saver\";\nimport InformationSheetContent from \"./InformationSheetContent\";\n\nconst removeHeaderContent = () => {\n  document.querySelector(\".row.greenHeader > .col-9\").classList.add(\"d-none\");\n  document.querySelector(\".row.greenHeader > .col-2\").classList.add(\"d-none\");\n  document.querySelector(\".row.greenHeader > .col-1\").classList.add(\"d-none\");\n};\n\nconst InformationSheet = (props) => {\n  const [state] = useContext(Context);\n\n  const name = props.match.params.cropName\n    ? props.match.params.cropName\n    : \"none\";\n\n  const [cropData, setCropData] = useState(\n    props.match.params.cropName\n      ? state.cropData.find(\n          (crop) =>\n            crop.fields[\"Cover Crop Name\"] === props.match.params.cropName\n        )\n      : []\n  );\n  //   check if crop data is passed as crop\n  //   elseif, check if localstorage has infosheet data else use default crop data\n  // const [referrer, setReferrer] = useState(\"direct\");\n  const [crop, setCrop] = useState(\n    name === \"none\"\n      ? props.crop\n        ? props.crop\n        : window.localStorage.getItem(\"infosheet\") !== null\n        ? JSON.parse(window.localStorage.getItem(\"infosheet\"))\n        : BasicCrop\n      : cropData.fields\n      ? cropData.fields\n      : \"\"\n  );\n  const ref = React.createRef();\n  const from = props.from || \"direct\";\n\n  useEffect(() => {\n    setCropData(\n      props.match.params.cropName\n        ? state.cropData.find(\n            (crop) =>\n              crop.fields[\"Cover Crop Name\"] === props.match.params.cropName\n          )\n        : []\n    );\n    setCrop(\n      name === \"none\"\n        ? props.crop\n          ? props.crop\n          : window.localStorage.getItem(\"infosheet\") !== null\n          ? JSON.parse(window.localStorage.getItem(\"infosheet\"))\n          : BasicCrop\n        : cropData.fields\n        ? cropData.fields\n        : \"\"\n    );\n  }, [state, props]);\n\n  useEffect(() => {\n    document.getElementsByTagName(\"footer\")[0].style.display = \"none\";\n\n    if (window.localStorage.getItem(\"infosheet\") !== null) {\n      // removeHeaderContent();\n      document.title = crop[\"Cover Crop Name\"];\n      window.print();\n    }\n\n    // delete localstorage\n    window.localStorage.removeItem(\"infosheet\");\n\n    // if (props.modal) {\n    //   // component being invoked from modal\n    //   setReferrer(\"modal\");\n    //   document\n    //     .querySelector(\".row.greenHeader > .col-1\")\n    //     .classList.remove(\"d-none\");\n    // } else {\n    //   document\n    //     .querySelector(\".row.greenHeader > .col-1\")\n    //     .classList.add(\"d-none\");\n    //   setReferrer(\"direct\");\n    // }\n  }, []);\n\n  const exportToPdf = (filename) => {\n    const input = document.body;\n    // const h = input.clientHeight;\n    const h = input.offsetHeight;\n    // const w = input.clientWidth;\n    const w = input.offsetWidth;\n\n    // const ratio = divHeight / divWidth;\n    html2canvas(input, { scale: 2, scrollY: -window.scrollY }).then(function (\n      canvas\n    ) {\n      var img = canvas.toDataURL(\"image/jpeg\", 1);\n      saveAs(img, filename + \".jpg\");\n      //   var doc = new JSPDF(\"L\", \"px\", [w, h]);\n      //   doc.addImage(img, \"JPEG\", 0, 0, w, h);\n      //   doc.save(filename + \".pdf\");\n    });\n    // html2canvas(input, { scale: \"1\" }).then((canvas) => {\n    //   const imgData = canvas.toDataURL(\"image/jpeg\");\n    //   saveAs(imgData, \"image.png\");\n    //   const pdfDOC = new JSPDF(\"l\", \"mm\", \"a4\"); //  use a4 for smaller page\n\n    //   const width = pdfDOC.internal.pageSize.getWidth();\n    //   let height = pdfDOC.internal.pageSize.getHeight();\n    //   height = ratio * width;\n\n    //   pdfDOC.addImage(imgData, \"JPEG\", 0, 0, width - 20, height - 10);\n    //   pdfDOC.save(\"summary.pdf\"); //Download the rendered PDF.\n    // });\n  };\n\n  return (\n    <div className=\"wrapper container-fluid\" ref={ref}>\n      <header className=\"row greenHeader\">\n        <div className=\"col-10\">\n          <span className=\"pr-4\">DOWNLOAD:</span>\n          <span className=\"pr-2\">\n            <Button\n              style={{ color: \"white\" }}\n              href={`/pdf/${crop[\"Cover Crop Name\"]}.pdf`}\n              target=\"_blank\"\n              rel=\"noreferer\"\n            >\n              <PictureAsPdf /> &nbsp; PDF\n            </Button>\n          </span>\n          <span className=\"pr-2\">\n            <Button\n              href={`/csv/${crop[\"Cover Crop Name\"]}.csv`}\n              style={{ color: \"white\" }}\n            >\n              <FormatListBulleted />\n              &nbsp; SPREADSHEET\n            </Button>\n          </span>\n        </div>\n        <div className=\"col-1\">\n          <Button onClick={window.print} style={{ color: \"white\" }}>\n            <Print /> &nbsp;PRINT\n          </Button>\n        </div>\n        <div className=\"col-1 text-right\">\n          <Button onClick={props.closeModal} style={{ color: \"white\" }}>\n            <Close />\n          </Button>\n        </div>\n      </header>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <div className=\"row coverCropNames\">\n            <div className=\"col-12 coverCropGroup\">\n              <Typography\n                variant=\"body1\"\n                className=\"text-uppercase text-muted font-weight-bold\"\n              >\n                {crop[\"Cover Crop Group\"]}\n              </Typography>\n            </div>\n            <div className=\"col-12 coverCropName\">\n              <Typography variant=\"h5\" className=\"pr-3\" display=\"inline\">\n                {flipCoverCropName(crop[\"Cover Crop Name\"])}\n              </Typography>\n\n              <Typography\n                variant=\"subtitle2\"\n                display=\"inline\"\n                className=\"text-muted font-italic\"\n              >\n                {crop[\"Scientific Name\"]}\n              </Typography>\n            </div>\n            <div className=\"col-12 pt-3\">\n              <span className=\"pr-2\">\n                <Info style={{ color: \"#2b7b79\" }} />\n              </span>\n              <span>\n                <Typography variant=\"body1\" display=\"inline\">\n                  This data is based on expert opinion.\n                </Typography>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6\">\n          <div className=\"row coverCropImagesWrapper\">\n            {crop[\"Image Data\"] ? (\n              <CropImage\n                present={true}\n                view={\"information-sheet\"}\n                src={\n                  crop[\"Image Data\"][\"Key Thumbnail\"]\n                    ? `/images/Cover Crop Photos/${crop[\"Image Data\"][\"Directory\"]}/${crop[\"Image Data\"][\"Key Thumbnail\"]}`\n                    : \"https://placehold.it/100x100\"\n                }\n                alt={crop[\"Cover Crop Name\"]}\n              />\n            ) : (\n              <CropImage present={false} view={\"information-sheet\"} />\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"row middleGreenStrip\">\n        <div className=\"col-6\">\n          {zoneIcon(20, 20)}\n          <span className=\"pl-2\">\n            Plant Hardiness Zone {state.zone} Dataset\n          </span>\n        </div>\n        <div className=\"col-6 text-right\">\n          {/* <PhotoLibrary /> <span className=\"pl-2\">View Photos</span> */}\n        </div>\n      </div>\n\n      <InformationSheetContent crop={crop} />\n    </div>\n  );\n};\n\nexport default InformationSheet;\n\nconst BasicCrop = () => {\n  return {\n    _id: {\n      $oid: \"5f24456fe695147b85dd78fe\",\n    },\n    \"Cover Crop Name\": \"Pea, Spring\",\n    \"Scientific Name\": \"Pisum sativum\",\n    Synonyms: \"Garden Pea\",\n    \"cv, var, or ssp to specify\": \"Spring '1020'\",\n    \"Notes: Taxonomy\":\n      \"forage pea would be better common name - actual garden peas have been bred for unpigmented seed coats and high sugar, which reduces germination\",\n    Origin: \"MCCC Species tool\",\n    \"Drought Tolerance\": 3,\n    \"Shade Tolerance\": 2,\n    \"Flood Tolerance\": 2,\n    \"Low Fertility Tolerance\": 4,\n    \"Salinity Tolerance\": 1,\n    \"Winter Survival\": [\"Never\"],\n    \"Active Growth Period\": [\"Fall\", \"Spring\", \"Summer\"],\n    Duration: [\"Annual\"],\n    \"Shape & Orientation\": [\"Semi-Erect\", \"Climbing\"],\n    \"Notes: Basic Agronomics\":\n      \"Dry matter highly dependent on planting and termination date and precipitation. Season length, habit vary by cultivar. Biomass breaks down quickly; early planting and termination reduces winter survival. Mixes well with grains when grown for forage. Bloat potential that is easily managed. Seed vigor highly variable. For grazing purposes, restrict to 30% of total ration or mixing with a grass is recommended.\",\n    \"Review Status\": \"Zone Team Start\",\n    \"Soil Drainage\": [\n      \"Somewhat poorly drained\",\n      \"Moderately well drained\",\n      \"Well drained\",\n      \"Excessively drained\",\n      \"Well drained muck\",\n    ],\n    \"Min Germination Temp (F)\": 42,\n    \"Seeds per Pound\": 3500,\n    \"Inoculant Type (Legumes Only)\": [\"pea/vetch\"],\n    \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"58-104\",\n    \"Seeding Rate: Drilled (lbs/A)\": \"50-100\",\n    \"Seeding Rate: Aerial (lbs/A)\": \"Not Recommended\",\n    \"Drilled Depth Min\": 1,\n    \"Loosens Topsoil\": 2,\n    \"Frees P & K\": 5,\n    \"Growing Window\": \"Short\",\n    \"Ease of Establishment\": 2,\n    \"Family Common Name\": \"Pea family\",\n    \"Family Scientific Name\": \"Fabaceae\",\n    \"Soil Textures\": [\"medium\", \"coarse\"],\n    \"Minimum Tolerant Soil pH\": 6,\n    \"Maximum Tolerant Soil pH\": 7.5,\n    \"Soil Moisture Use\": \"Medium\",\n    \"Cover Crop Group\": \"Legume\",\n    \"Heat Tolerance\": 3,\n    \"Seed Price per Pound\": 3,\n    \"USDA Symbol\": \"PISA6\",\n    \"Zone Decision\": \"Include\",\n    \"Zone Use\": \"Emerging\",\n    \"Shape & Orientation-USDA PLANTS\": \"Climbing\",\n    \"Flooding Tolerance\": \"Poor\",\n    \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 40,\n    \"Dry Matter Min (lbs/A/y)\": 1000,\n    \"C to N Ratio\": 1,\n    \"Active Growth Period-USDA PLANTS\": [\"Spring\", \"Summer\"],\n    \"Notes: Termination [Goal: Method: Timing]\":\n      \"If using herbicides to terminate use a tank mixture (e.g., glyphosate + dicamba or 2,4-d)\",\n    \"Loosens Subsurface Soil\": 1,\n    \"Supports Mycorrhizae\": 3,\n    \"Early Spring Growth\": 3,\n    \"Flowering Trigger\": [\"Plant Size\"],\n    \"Establishes Quickly\": 2,\n    \"Root Architecture\": [\"Tap\"],\n    \"Root Depth\": \"Shallow\",\n    \"Notes: Growth, Roots, and Nutrients\": \"Minimum Germination Temp. ~ 41˚F\",\n    \"Tillage Termination at Vegetative\": 4,\n    \"Pollinator Habitat\": 4,\n    \"Pollinator Food\": 2,\n    \"Tillage Termination at Flowering\": 4,\n    \"Freezing Termination at Vegetative\": 2,\n    \"Freezing Termination at Flowering\": 5,\n    \"Chemical Termination at Flowering\": 5,\n    \"Mow Termination at Flowering\": 5,\n    \"Chemical Termination at Vegetative\": 5,\n    \"Mow Tolerance at Vegetative\": 5,\n    \"Roller Crimp Tolerance at Flowering\": 3,\n    \"Roller Crimp Tolerance at Vegetative\": 1,\n    \"Volunteer Establishment\": 5,\n    Persistence: 1,\n    \"Notes: Weeds\":\n      \" Late planting increases heaving. Weak plant with low volunteer seed survivability.\",\n    \"Seed price per acre: Drilled/Cultipack and Cultivation\": 3,\n    \"Seed price per acre: Broadcast (w/cultivation)\": 3,\n    \"Improve Soil Organic Matter\": 1,\n    \"Increase Soil Aggregation\": 2,\n    \"Lasting Residue\": 1,\n    \"Penetrates Plow Pan\": 1,\n    \"Base Seeding Rate Min (lbs/A)\": 40,\n    \"Base Seeding Rate Max (lbs/A)\": 100,\n    \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 100,\n    \"Dry Matter Max (lbs/A/y)\": 2500,\n    \"Drilled Depth Max\": 1.5,\n    \"Reduces Topsoil Compaction\": 2,\n    \"March, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"March, Mid\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"April, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"April, Mid\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"May, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"May, Mid\": [\"Reliable establishment/growth\"],\n    \"August, Early\": [\"Reliable establishment/growth\", \"Early seeding rate\"],\n    \"August, Mid\": [\"Reliable establishment/growth\", \"Standard seeding rate\"],\n    \"September, Early\": [\"Reliable establishment/growth\", \"Late seeding rate\"],\n    \"September, Mid\": [\"Reliable establishment/growth\"],\n    \"Prevent Fall Soil Erosion\": 1,\n    \"Prevent Spring Soil Erosion\": 3,\n    \"Promote Water Quality\": 1,\n    \"Nitrogen Fixation\": 3,\n    \"Nitrogen Scavenging\": 1,\n    \"Good Grazing\": 3,\n    \"Forage Harvest Value\": 4,\n    \"C to N Ratio - 3 stars\": 1,\n    \"Residue Suppresses Summer Annual Weeds\": 2,\n    \"Outcompetes Summer Annual Weeds\": 3,\n    \"Disoucrages Nematodes\": 2,\n    \"Promotes Nematodes\": 3,\n    \"Discourages Pest Insects\": 2,\n    \"Promotes Pest Insects\": 1,\n    \"Notes: Disease & Non-Weed Pests\":\n      \"Information too limited to rate P and K effect. Some cultivars, nematode resistant. Poor host for soybean cyst nematode. With late planting,  biomass is low and spring pea won't suppress winter weeds. Good cool season component for grazing mixes. Quick cool season nitrogen fixer. Susceptible to sclerotinia in East;  Late planting increases heaving. Host for root knot nematode, Penetrans Root-Lesion Nematode and sugarbeet cyst nematode.  Weak plant with low volunteer seed survivability.\",\n    \"Suppresses Cash Crop Disease\": 2,\n    \"Promotes Cash Crop Disease\": 1,\n    \"Early Spring Seeding Rate Date Start\": \"2020-02-15\",\n    \"Early Spring Seeding Rate Date End\": \"2020-07-15\",\n    \"Standard Spring Seeding Rate Date Start\": \"2020-02-15\",\n    \"Standard Spring Seeding Rate Date End\": \"2020-05-15\",\n    \"Suppresses Winter Annual Weeds\": 2,\n    Notes:\n      \"Best mixed with cereals to prevent lodging. Less competitive against summer annual weeds in hot-summer areas (such as Contintental hardiness zone 6).\",\n    \"Reliable Establishment/Growth Start\": \"2020-02-15\",\n    \"Reliable Establishment/Growth End\": \"2020-05-15\",\n    \"Notes: Pollinators\":\n      \"Self-pollinated so not particularly useful for pollinators compared to other legumes\",\n    \"Notes: Nematodes\":\n      \"Some cultivars, nematode resistant. Poor host for soybean cyst nematode.  Host for root knot nematode, Penetrans Root-Lesion Nematode and sugarbeet cyst nematode. \",\n    __id: \"rec1KNI87iZslbLy2\",\n    \"February, Early\": [\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"Image Data\": {\n      \"Cover Crop\": \"Pea, Spring\",\n      \"Key Thumbnail\": \"Spring_pea_flowering_Brown_2020.JPG\",\n      Notes: null,\n      Directory: \"Pea, Spring\",\n    },\n    \"Crop Description\":\n      \"Also known as Yellow Pea or Canadian Spring Pea. Winter-kills if planted in fall. Excellent spring cover crop. Plant early for lush growth; fast-growing varieties are available. Inoculate the seed with appropriate Rhizobium spp. Cross inoculates vetch. Mixes well with spring oat, forage radish. Lower biomass and total N fixation compared to overwintered peas.\",\n    \"Discourages Nematodes\": 2,\n    id: \"rec1KNI87iZslbLy2\",\n    Drought: 3,\n    Flood: 2,\n    Heat: 3,\n    \"Low Fertility\": 4,\n    Salinity: 1,\n    Shade: 2,\n    \"Tillage at Vegetative\": 4,\n    \"Tillage at Flowering\": 4,\n    \"Freezing at Flowering\": 5,\n    \"Freezing at Vegetative\": 2,\n    \"Chemical at Vegetative\": 5,\n    \"Chemical at Flowering\": 5,\n    \"Mow at Flowering\": 5,\n    \"Roller Crimp at Flowering\": 3,\n    \"Frost Seeding\": -999,\n    \"Aerial Seeding\": -999,\n  };\n};\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport Header from \"../Header/header\";\nimport {\n  Typography,\n  Button,\n  useTheme,\n  isWidthDown,\n  isWidthUp,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport InformationSheetDictionary from \"../InformationSheet/InformationSheetDictionary\";\nimport { CustomStyles } from \"../../shared/constants\";\n\nconst HelpComponent = (props) => {\n  // const theme = useTheme();\n  // const styles = theme =>({\n  //   boxContainerStyle:{\n  //   minHeight: \"520px\",\n  //   [theme.breakpoints.down(\"md\")]: {\n  //     width: \"100%\",\n  //     margin: \"auto\",\n  //     padding: \"initial\",\n  //   },\n  // }\n  // });\n  // console.log(isWidthUp(\"xl\"));\n  const resizeIframe = (obj) => {\n    obj.style.height =\n      obj.contentWindow.document.documentElement.scrollHeight + \"px\";\n  };\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <div className=\"contentWrapper\">\n      <Header />\n      <div className=\"container-fluid mt-5\">\n        <div\n          className=\"row boxContainerRow\"\n          style={\n            // isWidthDown(\"md\")\n            // ? { minHeight: \"520px\", width: \"100%\", padding: \"initial\" }\n            // : { minHeight: \"520px\" }\n            { minHeight: \"520px\" }\n          }\n        >\n          <div className=\"col-12 row\">\n            <div className=\"col-lg-4 col-12 px-0\">\n              <div\n                className=\"d-flex flex-column pb-2\"\n                style={{\n                  border: `1px solid ${CustomStyles().darkGreen}`,\n                  borderRight: \"0px\",\n                }}\n              >\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(0)}\n                  variant={value === 0 ? `contained` : `text`}\n                  color={value === 0 ? `secondary` : `default`}\n                >\n                  How to Use the NECCC Species Selector Tool\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(1)}\n                  variant={value === 1 ? `contained` : `text`}\n                  color={value === 1 ? `secondary` : `default`}\n                >\n                  Frequently Asked Questions\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(2)}\n                  variant={value === 2 ? `contained` : `text`}\n                  color={value === 2 ? `secondary` : `default`}\n                >\n                  Data Dictionary\n                </Button>\n                <Button\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-start\",\n                    borderRadius: \"0px\",\n                  }}\n                  onClick={() => handleChange(3)}\n                  variant={value === 3 ? `contained` : `text`}\n                  color={value === 3 ? `secondary` : `default`}\n                >\n                  Information Sheets\n                </Button>\n              </div>\n            </div>\n            <div\n              className=\"col-lg-8 col-12 p-2\"\n              style={{\n                overflow: \"hidden\",\n                border: `1px solid ${CustomStyles().darkGreen}`,\n              }}\n            >\n              <div>\n                <RenderContent value={value} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HelpComponent;\n\nconst RenderContent = ({ value = 0 }) => {\n  switch (value) {\n    case 0:\n      return (\n        <Fragment>\n          <Typography component=\"div\" variant=\"body1\" align=\"left\">\n            <ol>\n              <li className=\"font-weight-bold\">\n                Start with the Species Selector Wizard\n              </li>\n              <ul className=\"pb-3\">\n                <li>Define your location:</li>\n                <ul>\n                  <li>\n                    Enter your location so we can identify your zone and pin\n                    your location on the map. Please note that we do not store\n                    your data, meaning that once you leave our website, your\n                    instance closes, and any data you provided is not retained.\n                  </li>\n                  <li>\n                    Draw an outline of the field you plan to cover crop so we\n                    can auto populate your local soils and weather data.\n                  </li>\n                </ul>\n                <li>Refine your soils data:</li>\n                <ul>\n                  <li>\n                    Review your local soils data, populated from the USGS Web\n                    Soil Survey, or provide your own data if you did not draw an\n                    outline of your field.\n                  </li>\n                  <li>\n                    Specify if you have tiling -- tiling will affect your\n                    drainage class.\n                  </li>\n                  <li>Your soils data is used to filter your results.</li>\n                </ul>\n                <li>Refine your weather data:</li>\n                <ul>\n                  <li>\n                    Review your local weather data, populated from the Precision\n                    Sustainable Agriculture Weather API, or provide your own\n                    data if you did not specify a location.\n                  </li>\n                  <li>\n                    At this time, we are not using your historical weather data\n                    to filter results. We ask you to specify your weather data\n                    so that it is fresh in your mind when you choose your cover\n                    crops. Cover crop performance in this tool is based on an\n                    \"average\" year. Performance in years that are notably\n                    hotter, colder, wetter, drier, or combinations thereof may\n                    vary.\n                  </li>\n                </ul>\n                <li>Choose your goals</li>\n                <ul>\n                  <li>\n                    Specify up to three cover cropping goals in order of\n                    priority.\n                  </li>\n                  <li>\n                    The list of recommended cover crop species will be filtered\n                    based on these goals.\n                  </li>\n                </ul>\n              </ul>\n              <li className=\"font-weight-bold\">\n                Add cover crops to My Cover Crop List\n              </li>\n              <ul className=\"pb-3\">\n                <li>\n                  Filter your results by additional requirements, if desired\n                </li>\n                <li>\n                  Look at the calendar view for details on planting dates on\n                  active growth periods.\n                </li>\n                <li>\n                  Click “View Details” to review all of our data on the cover\n                  crop of interest.\n                </li>\n                <li>\n                  If the cover crop is one you would like to consider, add it to\n                  your cover crop list.\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">\n                Download spreadsheets or PDFs of your cover crops\n              </li>\n              <ul className=\"pb-3\">\n                <li>\n                  View your cover crop list to remove cover crops or download a\n                  PDF or spreadsheet of the cover crop list you have curated.\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">Visit the Explorer</li>\n              <ul className=\"pb-3\">\n                <li>\n                  At any point in your experience you can use the Explorer to\n                  filter through and search for any cover crop in our data set.\n                </li>\n                <li>\n                  You need to specify a{\" \"}\n                  <a\n                    href=\"https://planthardiness.ars.usda.gov/PHZMWeb/\"\n                    target=\"_blank\"\n                  >\n                    hardiness zone\n                  </a>{\" \"}\n                  to use the Explorer.\n                </li>\n              </ul>\n            </ol>\n          </Typography>\n        </Fragment>\n      );\n\n    case 1:\n      return (\n        <Fragment>\n          <Typography component=\"div\" variant=\"body1\" align=\"left\">\n            <ol>\n              <li className=\"font-weight-bold\">\n                What is the difference between dormant and non-dormant alfalfa?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  “Dormant” alfalfa varieties are those traditionally grown as\n                  perennials in northern climates; they have varying degrees of\n                  cold hardiness but would generally be expected to survive the\n                  winter. “Non dormant” alfalfa varieties are far less strongly\n                  perennial in cold climates due to lower levels of cold\n                  hardiness. There are some differences in growth pattern and\n                  forage quality between the two groups, as well. Non-dormant\n                  varieties produce more biomass in the first year than dormant\n                  varieties.\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">What is a “forage brassica”?</li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Many forage brassicas are hybrids of B. oleracea and B. napus.\n                  (i.e. kale, rapeseed, turnip). Some are bred for their leaf\n                  production, others for their roots. Be aware of what you are\n                  buying depending on your needs.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                What is the difference between a forage, daikon, tillage, and\n                oilseed radish?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Radishes have been bred for many purposes, including (human)\n                  food, (animal) feed and forage, and ability to improve soil\n                  structure. Confusion as to naming abounds, and is worsened by\n                  the fact that the various types of radish readily interbreed.\n                  Cover crop radishes are generally referred to as daikon-type\n                  radishes (as opposed to the globe-shaped radishes that feature\n                  in salads). According to Extension resources, ‘Tillage’ radish\n                  is actually a specific brand of radish bred to be a cover\n                  crop. Oilseed radishes have smaller, more branching roots than\n                  forage radishes. Be aware of what you are buying depending on\n                  your needs.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                What is the difference between a forage turnip vs ‘Purple Top’\n                turnip?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Forage turnips have been bred for use as animal feed (i.e.\n                  large tonnage per acre), as opposed to ‘Purple Top’ and\n                  similar cultivars traditionally grown for human food (i.e.\n                  bulb production). Seed costs vary widely. Be aware of what you\n                  are buying depending on your needs.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                What do you mean by “mustard”?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Our tool groups several species under the term “mustard”,\n                  including Sinapis alba (white mustard) and Brassica juncea\n                  (brown, Oriental, or Indian mustard). We include notes in the\n                  comments/notes sections on the information sheet where there\n                  are differences in characteristics or uses among the species.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                What’s the difference between canola and rapeseed?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  In practice for cover croppers, not much. Some rapeseed was\n                  bred to have lower levels of compounds not good for human\n                  consumption, making it better for the production of cooking\n                  oil. The varieties good for the production of oil for human\n                  consumption are referred to as “canola”. Canola seed is\n                  generally more expensive than rapeseed seed.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                What is the difference between “winter” and “spring” small\n                grains?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  We are referring to germplasm type. For example, “winter”\n                  wheat varieties are those that would be expected to usually\n                  survive winter and require vernalization (i.e. cold) to\n                  trigger flowering. “Spring” wheat varieties are much less cold\n                  hardy and do not require vernalization to flower.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                Can spring small grains be planted in fall and vice versa? Why\n                would you do so?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Winter small grain cultivars can be planted in spring, but\n                  they won't flower (which may be useful since they don't get as\n                  tall and are good for a low-growing ground cover). Likewise,\n                  spring small grains may be planted in the fall (and will\n                  therefore likely winter-kill, preventing the need for spring\n                  termination).\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                Why do ratings for a given cover crop vary by hardiness zone?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  USDA hardiness zones are based on average minimum temperatures\n                  and are a simple proxy for the length of the growing season\n                  across the Northeast US. Ratings differ because these climatic\n                  features affect planting dates, crop management, and plant\n                  growth.\n                </li>\n                <li>\n                  In addition, the experts in each zone sometimes have\n                  differences in experience with the cover crop; a cover crop\n                  may be more commonly used in a vegetable rotation in one zone\n                  and an agronomic rotation in another one, with corresponding\n                  differences in traits due to the way they are used.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                I’m applying fall manure and want a cover crop to take up the N\n                and prevent P runoff. What should I use?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Choose a cover crop ranked high for the goals of “nitrogen\n                  scavenging”, “prevent fall erosion”, and “prevent spring\n                  erosion”.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                I want a cover crop that can prevent soil crusting. What should\n                I use?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Pick a cover crop that is either alive during the time period\n                  of concern or has a good rating for “lasting residue” and that\n                  has a good rating for “soil aggregation” and “reduces topsoil\n                  compaction”.\n                </li>\n              </ul>\n\n              <li className=\"font-weight-bold\">\n                I am interested in a recommendation based on a goal you do not\n                have in your tool. What can I do?\n              </li>\n              <ul className=\"list-unstyled pl-4 pb-4\">\n                <li>\n                  Consider what existing goals and rated traits make up the goal\n                  you are interested in.\n                </li>\n                <li>\n                  <Link to=\"/feedback\">Send us feedback!</Link> Let us know.\n                </li>\n              </ul>\n            </ol>\n          </Typography>\n        </Fragment>\n      );\n\n    case 2:\n      return (\n        <div className=\"text-left pl-4\">\n          <InformationSheetDictionary zone={6} from=\"help\" />\n        </div>\n      );\n    case 3:\n      return (\n        <Fragment>\n          <Typography component=\"div\" variant=\"body1\" align=\"left\">\n            <ol>\n              <li className=\"font-weight-bold\">Cover Crops and Pollinators</li>\n              <ul className=\"pb-4\">\n                <li>\n                  Using Flowering Cover Crops for Native Pollinating Bee\n                  Conservation, Penn State Extension,\n                  <br />\n                  <a\n                    href=\"https://extension.psu.edu/using-flowering-cover-crops-for-native-pollinating-bee-conservation\"\n                    target=\"_blank\"\n                  >\n                    https://extension.psu.edu/using-flowering-cover-crops-for-native-pollinating-bee-conservation\n                  </a>\n                </li>\n                <li>\n                  Conservation Cover for Pollinators, Xerces Society for\n                  Invertebrate Conservation,\n                  <br />\n                  <a\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/03/Conservation-Cover-for-Pollinators.pdf\"\n                    target=\"_blank\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/03/Conservation-Cover-for-Pollinators.pdf\n                  </a>\n                </li>\n                <li>\n                  Planting Flowers For Bees in Connecticut, Connecticut\n                  Agricultural Experiment Station,\n                  <br />\n                  <a\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/03/Planting-Flowers-For-Bees-in-Connecticut.pdf\"\n                    target=\"_blank\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/03/Planting-Flowers-For-Bees-in-Connecticut.pdf\n                  </a>\n                </li>\n                <li>\n                  Use of Cover Crops and Green Manures to Attract Beneficial\n                  Insects, University of Connecticut Integrated Pest Management\n                  Program,\n                  <br />\n                  <a\n                    href=\"http://ipm.uconn.edu/documents/raw2/Use%20of%20Cover%20Crops%20and%20Green%20Manures%20to%20Attract%20Beneficial%20Insects/Use%20of%20Cover%20Crops%20and%20Green%20Manures%20to%20Attract%20Beneficial%20Insects.php?display=print\"\n                    target=\"_blank\"\n                  >\n                    http://ipm.uconn.edu/documents/raw2/Use%20of%20Cover%20Crops%20and%20Green%20Manures%20to%20Attract%20Beneficial%20Insects/Use%20of%20Cover%20Crops%20and%20Green%20Manures%20to%20Attract%20Beneficial%20Insects.php?display=print\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">\n                Cover Crops for Weed Suppression\n              </li>\n              <ul className=\"pb-4\">\n                <li>\n                  Suppressing Weeds Using Cover Crops in Pennsylvania, Penn\n                  State Extension,\n                  <br />\n                  <a\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/04/Suppressing-Weeds-Using-Cover-Crops-in-Pennsylvania.pdf\"\n                    target=\"_blank\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/04/Suppressing-Weeds-Using-Cover-Crops-in-Pennsylvania.pdf\n                  </a>\n                </li>\n                <li>\n                  Cover Crops as a Weed Management Tool, Getting Rid of Weeds,\n                  <br />\n                  <a href=\"https://growiwm.org/cover-crops\" target=\"_blank\">\n                    https://growiwm.org/cover-crops\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">\n                Cover Cropping in Fruit, Vegetable, or Perennial Systems\n              </li>\n              <ul className=\"pb-4\">\n                <li>\n                  Between Two Rows: Cover Crops for Perennial Plants, NH\n                  Vegetable and Fruit News,\n                  <br />\n                  <a\n                    href=\"https://nhvegfruitnews.wordpress.com/2016/06/27/between-two-rows-cover-crops-for-perennial-plants/\"\n                    target=\"_blank\"\n                  >\n                    https://nhvegfruitnews.wordpress.com/2016/06/27/between-two-rows-cover-crops-for-perennial-plants/\n                  </a>\n                </li>\n                <li>\n                  Spring Planted Cover Crops for Vegetable Rotations, University\n                  of Delaware Cooperative Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.udel.edu/weeklycropupdate/?p=9950\"\n                  >\n                    https://extension.udel.edu/weeklycropupdate/?p=9950\n                  </a>\n                </li>\n                <li>\n                  Cover Crops and Green Manures (New England Vegetable\n                  Management Guide), University of Massachusetts Amherst,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://nevegetable.org/cultural-practices/cover-crops-and-green-manures\"\n                  >\n                    https://nevegetable.org/cultural-practices/cover-crops-and-green-manures\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">Cover Crop Planting</li>\n              <ul className=\"pb-4\">\n                <li>\n                  NH 340 Cover Crop Planting Specification Guide, USDA NRCS,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/03/NH-340-Cover-Crop-Planting-Specification-Guide-2.pdf\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/03/NH-340-Cover-Crop-Planting-Specification-Guide-2.pdf\n                  </a>\n                </li>\n                <li>\n                  Tips for Interseeding Cover Crops, University of Vermont\n                  Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/02/Tips-for-Interseeding-Cover-Crops.pdf\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/02/Tips-for-Interseeding-Cover-Crops.pdf\n                  </a>\n                </li>\n                <li>\n                  Aerial Seeding Helps Farmers Plant Cover Crops in the\n                  Northeast, Lancaster Farming,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"http://www.lancasterfarming.com/news/northern_edition/aerial-seeding-helps-farmers-plant-cover-crops-in-northeast/article_1d4fbe53-e72e-5c37-ae24-98ce2ca8b2bb.html\"\n                  >\n                    http://www.lancasterfarming.com/news/northern_edition/aerial-seeding-helps-farmers-plant-cover-crops-in-northeast/article_1d4fbe53-e72e-5c37-ae24-98ce2ca8b2bb.html\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">\n                Cover Crops and Herbicide Carryover\n              </li>\n              <ul className=\"pb-4\">\n                <li>\n                  Cover Crop Interseeder – Potential for Injury from Corn\n                  Herbicides, Penn State Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"http://northeastcovercrops.com/wp-content/uploads/2018/04/Cover-Crop-Interseeder-Potential-for-Injury-from-Corn-Herbicides.pdf\"\n                  >\n                    http://northeastcovercrops.com/wp-content/uploads/2018/04/Cover-Crop-Interseeder-Potential-for-Injury-from-Corn-Herbicides.pdf\n                  </a>\n                </li>\n                <li>\n                  Herbicides Persistence and Rotation to Cover Crops, Penn State\n                  Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.psu.edu/herbicides-persistence-and-rotation-to-cover-crops\"\n                  >\n                    https://extension.psu.edu/herbicides-persistence-and-rotation-to-cover-crops\n                  </a>\n                </li>\n                <li>\n                  Herbicide Considerations for Cover and Forage Crops, Penn\n                  State Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.psu.edu/herbicide-considerations-for-cover-and-forage-crops\"\n                  >\n                    https://extension.psu.edu/herbicide-considerations-for-cover-and-forage-crops\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">Cover Crop Termination</li>\n              <ul className=\"pb-4\">\n                <li>\n                  Special Cover Crop Control Considerations, Penn State\n                  Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.psu.edu/special-cover-crop-control-considerations\"\n                  >\n                    https://extension.psu.edu/special-cover-crop-control-considerations\n                  </a>\n                </li>\n                <li>\n                  Cover Crop Rollers for Northeastern Grain Production, Penn\n                  State Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.psu.edu/cover-crop-rollers-for-northeastern-grain-production\"\n                  >\n                    https://extension.psu.edu/cover-crop-rollers-for-northeastern-grain-production\n                  </a>\n                </li>\n                <li>\n                  Cover Crop Termination Options, Getting Rid of Weeds,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://growiwm.org/cover-crop-termination-options/\"\n                  >\n                    https://growiwm.org/cover-crop-termination-options/\n                  </a>\n                </li>\n              </ul>\n              <li className=\"font-weight-bold\">Planting Green</li>\n              <ul className=\"pb-4\">\n                <li>\n                  Planting Green – A New Cover Crop Management Technique, Penn\n                  State Extension,\n                  <br />\n                  <a\n                    target=\"_blank\"\n                    href=\"https://extension.psu.edu/planting-green-a-new-cover-crop-management-technique\"\n                  >\n                    https://extension.psu.edu/planting-green-a-new-cover-crop-management-technique\n                  </a>\n                </li>\n              </ul>\n            </ol>\n          </Typography>\n        </Fragment>\n      );\n    default: {\n      return <div></div>;\n    }\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"../Header/header\";\n\nconst FeedbackComponent = (props) => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header />\n      <div className=\"container-fluid pt-4\" style={{ minHeight: \"70vh\" }}>\n        <div\n          className=\"mx-auto d-flex justify-content-center align-center\"\n          style={{ width: \"80%\", minHeight: \"600px\", alignItems: \"center\" }}\n        >\n          <iframe\n            className=\"airtable-embed\"\n            src=\"https://airtable.com/embed/shr1UBoR7bqCbNhvW?backgroundColor=yellow\"\n            frameBorder=\"0\"\n            style={{\n              background: \"transparent\",\n              border: \"1px solid #ccc\",\n              width: \"100%\",\n              height: \"733px\",\n            }}\n          ></iframe>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FeedbackComponent;\n"],"sourceRoot":""}