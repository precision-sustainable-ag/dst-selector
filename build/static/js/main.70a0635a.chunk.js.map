{"version":3,"sources":["components/Header/dateComponent.js","shared/constants.js","components/GreenBar/greenBarComponent.js","components/Header/header.js","components/Well/wellComponent.js","App.js","serviceWorker.js","index.js"],"names":["DateComponent","today","Date","month","n","getMonth","state","date","getDate","getFullYear","this","Component","locationIcon","w","h","width","height","viewBox","fill","xmlns","d","zoneIcon","cloudIcon","GreenBarComponent","props","flag","checkIfWellUpdated","undefined","wellState","console","log","address","formattedAddress","toString","substring","className","Button","size","formatterZone","zoneText","Header","setProgressBackground","progressInterval","setInterval","a","localStorage","getItem","JSON","parse","setState","progress","isNaN","document","getElementsByClassName","classList","add","clearTimeout","alt","src","logoPath","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","LightButton","withStyles","root","backgroundColor","borderRadius","color","padding","WellComponent","myMap","React","createRef","queryGEORevAPI","lat","lon","fetch","method","then","ret","ok","json","data","latlng","display_name","setZoneState","postcode","addressVerified","zip","res","zone","length","charAt","parseInt","addMarker","e","markers","pop","push","lng","handleSnackClose","snackOpen","snackMessage","handleMapClick","event","long","handleAddressChangeByText","target","value","showAddressChangeBtn","updateAddressOnClick","q","zoom","addCropToBasket","cropId","cropName","btnId","cropArray","container","getElementById","selectedCrops","contains","textContent","querySelector","innerHTML","remove","removeIndex","map","item","indexOf","selectedCropsCopy","splice","getRating","ratng","rating","getCropImageFromAPI","query","encodeURI","headers","Headers","append","isExpansionExpanded","updateSelectedGoals","newGoalArr","oldIndex","newIndex","newGoals","arrayMove","selectedGoals","renderProgress","fluid","style","backgroundImage","backgroundSize","id","fontWeight","onClick","setWellProgress","Grid","alignItems","justify","marginTop","GridList","children","cols","cellHeight","boxShadow","margin","textAlign","GridListTile","md","noValidate","autoComplete","FormControl","variant","InputLabel","disabled","Select","labelId","onChange","MenuItem","TextField","label","marginLeft","Map","center","minZoom","maxZoom","ref","TileLayer","attribution","url","position","idx","Marker","key","Popup","sm","caret","header","href","rel","allGoals","fields","startsWith","Tooltip","title","interactive","arrow","Chip","toUpperCase","goals","index","clickable","Typography","ExpansionPanel","defaultExpanded","onTouchEnd","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","values","renderList","renderItem","goal","cropData","crop","trim","display","flexDirection","flexBasis","paddingLeft","modalOpen","modalBody","isValid","progressBar","setLocalStorage","snackBar","Snackbar","anchorOrigin","vertical","snackVertical","horizontal","snackHorizontal","autoHideDuration","open","onClose","ContentProps","message","toggleModal","showModal","isOpen","modalSize","toggle","Object","keys","Box","Card","CardContent","flex","component","CardMedia","image","flexGrow","border","startIcon","aria-label","hdr2","response","records","addToCartBtnText","stateObj","setItem","stringify","minHeight","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","addEventListener","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70a0635a.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nexport class DateComponent extends Component {\n  constructor() {\n    super();\n\n    var today = new Date();\n\n    var month = [];\n    month[0] = \"January\";\n    month[1] = \"February\";\n    month[2] = \"March\";\n    month[3] = \"April\";\n    month[4] = \"May\";\n    month[5] = \"June\";\n    month[6] = \"July\";\n    month[7] = \"August\";\n    month[8] = \"September\";\n    month[9] = \"October\";\n    month[10] = \"November\";\n    month[11] = \"December\";\n    var n = month[today.getMonth()];\n\n    this.state = {\n      date: `${n} ${today.getDate()}, ${today.getFullYear()}`\n    };\n  }\n\n  render() {\n    return this.state.date;\n  }\n}\n","import React from \"react\";\n\nexport const locationIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 14 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7 0C3.13 0 0 3.13 0 7C0 12.25 7 20 7 20C7 20 14 12.25 14 7C14 3.13 10.87 0 7 0ZM7 9.5C5.62 9.5 4.5 8.38 4.5 7C4.5 5.62 5.62 4.5 7 4.5C8.38 4.5 9.5 5.62 9.5 7C9.5 8.38 8.38 9.5 7 9.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\nexport const zoneIcon = (w, h) => {\n  return (\n    <svg\n      height={h}\n      width={w}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM6 15.5C4.62 15.5 3.5 14.38 3.5 13C3.5 11.62 4.62 10.5 6 10.5C7.38 10.5 8.5 11.62 8.5 13C8.5 14.38 7.38 15.5 6 15.5ZM7.5 6C7.5 4.62 8.62 3.5 10 3.5C11.38 3.5 12.5 4.62 12.5 6C12.5 7.38 11.38 8.5 10 8.5C8.62 8.5 7.5 7.38 7.5 6ZM14 15.5C12.62 15.5 11.5 14.38 11.5 13C11.5 11.62 12.62 10.5 14 10.5C15.38 10.5 16.5 11.62 16.5 13C16.5 14.38 15.38 15.5 14 15.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport const cloudIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 24 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M19.35 6.04C18.67 2.59 15.64 0 12 0C9.11 0 6.6 1.64 5.35 4.04C2.34 4.36 0 6.91 0 10C0 13.31 2.69 16 6 16H19C21.76 16 24 13.76 24 11C24 8.36 21.95 6.22 19.35 6.04Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n","import React, { Component } from \"react\";\n// import Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@material-ui/core\";\nimport \"../../styles/greenBar.css\";\n// import LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport { locationIcon, zoneIcon } from \"../../shared/constants.js\";\n\nexport class GreenBarComponent extends Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props.wellState);\n  }\n\n  componentDidUpdate() {\n    this.checkIfWellUpdated();\n  }\n  flag = false;\n  checkIfWellUpdated = () => {\n    // is props.wellState == undefined ?\n    if (this.props.wellState === undefined) {\n      console.log(`undefined`);\n      this.flag = false;\n    } else if (\n      this.props.wellState.address === undefined ||\n      this.props.wellState === \"stepperState\"\n    ) {\n      // console.log(this.props.wellState);\n      this.flag = false;\n      // console.log(`address undefined`);\n    } else {\n      this.flag = true;\n    }\n  };\n\n  formattedAddress = () => {\n    let address = this.props.wellState.address.toString().substring(0, 19);\n    return (\n      <div className=\"addressBar\">\n        <Button size=\"small\">\n          {locationIcon(20, 20)}\n          &nbsp; {address}\n        </Button>\n      </div>\n    );\n  };\n  formatterZone = () => {\n    return (\n      // <div className=\"zoneBar\">Plant Hardiness {this.props.wellState.zoneText}</div>\n      <div className=\"zoneBar\">\n        <Button size=\"small\">\n          {zoneIcon(20, 20)}\n          &nbsp; Plant Hardiness {this.props.wellState.zoneText}\n        </Button>\n      </div>\n    );\n  };\n  render() {\n    return (\n      <div className=\"greenBarContainer\">\n        {this.flag === true && this.props.wellState.address !== \"Enter Address\"\n          ? this.formattedAddress()\n          : \"\"}\n\n        {this.flag === true && this.props.wellState.zoneText !== undefined\n          ? this.formatterZone()\n          : \"\"}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"../../styles/header.css\";\n\nimport { Button } from \"@material-ui/core\";\n\nimport { DateComponent } from \"./dateComponent\";\nimport { GreenBarComponent } from \"../GreenBar/greenBarComponent\";\n\n// const flexContainer = {\n//   display: \"flex\",\n//   flexDirection: \"row\",\n//   padding: 0\n// };\n\nclass Header extends Component {\n  index;\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  progressInterval;\n  // BUG(Rohit Bandooni): Responsiveness, breakpoints have not been set\n  // BUG(Rohit Bandooni): logo cropping on smaller screens\n  // TODO: Alternative for navigation? with hamberger menu ?\n\n  setProgressBackground = () => {\n    this.progressInterval = setInterval(() => {\n      var a = localStorage.getItem(\"stepperState\");\n      a = JSON.parse(a);\n      // console.log(a.progress);\n      if (a === \"stepperState\" || a === \"\") {\n        this.setState({\n          progress: 2\n        });\n      } else {\n        if (!isNaN(a.progress)) {\n          this.setState({\n            progress: 2\n          });\n        }\n      }\n      if (this.state.progress) {\n        document\n          .getElementsByClassName(`itemButton${this.state.progress}`)[0]\n          .classList.add(\"active\");\n      }\n      this.setState({\n        wellState: a\n      });\n      // console.log(this.progressInterval);\n    }, 100);\n    return this.progressInterval;\n  };\n\n  componentDidMount() {\n    this.setProgressBackground();\n  }\n  componentWillUnmount() {\n    clearTimeout(this.progressInterval);\n  }\n  render() {\n    // const logo = {\n    //   width: \"100%\",\n    //   height: \"80px\",\n    //   backgroundSize: \"cover\",\n    //   backgroundImage: `url(${this.props.logoPath})`\n    // };\n    return (\n      // <header>\n      //   <Grid container maxWidth=\"xl\">\n      //     {/* This banner is good for desktop sizes, need something different for mobile, or probably ged rid of the borders */}\n      //     <div id=\"banner\">\n      // <ul>\n      //   <li>\n      //     <a href=\"\">ABOUT</a>\n      //   </li>\n      //   <li>\n      //     <a href=\"\">NECCC</a>\n      //   </li>\n      //   <li>\n      //     <a href=\"\">USDA NRCS</a>\n      //   </li>\n      //   <li>\n      //     <a href=\"\">NE SARE</a>\n      //   </li>\n      //   <li>\n      //     <a href=\"\">HELP</a>\n      //   </li>\n      //   <li>\n      //     <a href=\"\">FEEDBACK</a>\n      //   </li>\n      // </ul>\n      //     </div>\n\n      //     <Grid container direction=\"row\" alignItems=\"center\">\n      //       <Grid item md={3} sm={12} className=\"logoGrid\">\n      //         <Grid item md={12} style={logo}></Grid>\n      //       </Grid>\n      //       <Grid\n      //         item\n      //         md={3}\n      //         className=\"dateGrid\"\n      //         style={{ paddingLeft: \"1em\" }}\n      //       >\n      //         <DateComponent />\n      //       </Grid>\n      //     </Grid>\n      //     <div style={{ padding: \"15px\" }}></div>\n      //     <List component=\"nav\" style={flexContainer}>\n      //       <ListItem button className=\"listitemButton itemButton1\">\n      //         <ListItemText\n      //           disableTypography\n      //           primary={\n      //             <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\n      //               COVER CROP EXPLORER\n      //             </Typography>\n      //           }\n      //         />\n      //       </ListItem>\n      //       <ListItem button className=\"listitemButton itemButton2\">\n      //         <ListItemText\n      //           disableTypography\n      //           primary={\n      //             <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\n      //               SPECIES SELECTOR\n      //             </Typography>\n      //           }\n      //         />\n      //       </ListItem>\n      //       <ListItem button className=\"listitemButton itemButton3\">\n      //         <ListItemText\n      //           disableTypography\n      //           primary={\n      //             <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\n      //               MIX MAKER\n      //             </Typography>\n      //           }\n      //         />\n      //       </ListItem>\n      //       <ListItem button className=\"listitemButton itemButton4\">\n      //         <ListItemText\n      //           disableTypography\n      //           primary={\n      //             <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\n      //               SEED RATE CALCULATOR\n      //             </Typography>\n      //           }\n      //         />\n      //       </ListItem>\n      //       <ListItem button className=\"listitemButton itemButton5\">\n      //         <ListItemText\n      //           disableTypography\n      //           primary={\n      //             <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\n      //               MY COVER CROP LIST\n      //             </Typography>\n      //           }\n      //         />\n      //       </ListItem>\n      //     </List>\n      //   </Grid>\n      //   <GreenBarComponent {...this.state} />\n      // </header>\n      <header>\n        <div className=\"topHeader\">\n          <ul>\n            <li>\n              <Button>ABOUT</Button>\n            </li>\n            <li>\n              <Button>NECCC</Button>\n            </li>\n            <li>\n              <Button>USDA NRCS</Button>\n            </li>\n            <li>\n              <Button>NE SARE</Button>\n            </li>\n            <li>\n              <Button>HELP</Button>\n            </li>\n            <li>\n              <Button>FEEDBACK</Button>\n            </li>\n          </ul>\n        </div>\n        <div className=\"bottomHeader\">\n          <section>\n            <div className=\"logoContainer\">\n              <img alt=\"Logo\" src={this.props.logoPath}></img>\n            </div>\n            <div>\n              <DateComponent />\n            </div>\n          </section>\n          <ul>\n            {/* <li> */}\n            <Button size=\"large\" className=\"listitemButton itemButton1\">\n              COVER CROP EXPLORER\n            </Button>\n            {/* </li> */}\n            {/* <li className=\"active\"> */}\n            <Button size=\"large\" className=\"listitemButton itemButton2\">\n              SPECIES SELECTOR\n            </Button>\n            {/* </li> */}\n            {/* <li> */}\n            <Button size=\"large\" className=\"listitemButton itemButton3\">\n              MIX MAKER\n            </Button>\n            {/* </li> */}\n            {/* <li> */}\n            <Button size=\"large\" className=\"listitemButton itemButton4\">\n              SEED RATE CALCULATOR\n            </Button>\n            {/* </li> */}\n            {/* <li> */}\n            <Button size=\"large\" className=\"listitemButton itemButton5\">\n              MY COVER CROP LIST\n            </Button>\n            {/* </li> */}\n          </ul>\n        </div>\n        <GreenBarComponent {...this.state} />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"../../styles/wellComponent.css\";\n// import DoneIcon from \"@material-ui/icons/Done\";\nimport PictureAsPdfIcon from \"@material-ui/icons/PictureAsPdf\";\nimport PhotoLibraryIcon from \"@material-ui/icons/PhotoLibrary\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport GroupWorkIcon from \"@material-ui/icons/GroupWork\";\nimport {\n  MDBContainer as Container,\n  MDBRow as Row,\n  MDBCol as Col,\n  MDBJumbotron,\n  MDBCardTitle,\n  // MDBBtn,\n  // MDBIcon,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBDataTable,\n  MDBModal,\n  MDBModalHeader,\n  MDBModalBody\n} from \"mdbreact\";\nimport \"../../styles/listViewComponent.css\";\nimport { List, arrayMove } from \"react-movable\";\n\n/* Since we are not using redux here, all our state variables are local state variables by default ( local to the component).\n   we would be putting all the state data to our local storage once the steps are completed and access them when required\n   another benefit of this would be tha tif the user returns in the future, they might not need to fill up everything and we can \n   show a button to skip all if this (as we would already have their data into the local storage)\n*/\n\n/*\nBug List:\n1. If user clicks the Map component and the lat,long from open street maps does not contain zip, our API calls break for getting zone info!\n2. ...\n*/\nimport {\n  Button,\n  Grid,\n  GridList,\n  GridListTile,\n  TextField,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Snackbar,\n  // ButtonGroup,\n  // SnackBarMessage,\n  // Popper,\n  Chip,\n  Tooltip,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  Typography,\n  ExpansionPanelDetails,\n  Card,\n  CardContent,\n  CardMedia,\n  Box\n  // Table,\n  // TableHead,\n  // TableRow,\n  // TableCell,\n  // TableBody\n} from \"@material-ui/core\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { cloudIcon } from \"../../shared/constants.js\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import DragSortableList from \"react-drag-sortable\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n// import ListView from \"./ListView/listViewComponent\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\nconst LightButton = withStyles({\n  root: {\n    backgroundColor: \"#e3f2f4\",\n    borderRadius: \"20px\",\n    color: \"#000\",\n    padding: \"10px 20px 10px 20px\",\n    \"&:hover\": {\n      backgroundColor: \"#48a8ab\",\n      color: \"#fff\"\n    }\n  }\n})(Button);\n\n// const [items, setItems] = React.useState([\"Item 1\", \"Item 2\", \"Item 3\"]);\n\nexport default class WellComponent extends Component {\n  myMap = React.createRef();\n\n  constructor() {\n    super();\n    //   https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=3&view=Taxonomy%20%26%20Listing\" \\\n    // -H \"Authorization: Bearer ***REMOVED***\n    const hdr2 = new Headers();\n    hdr2.append(\"Authorization\", \"Bearer ***REMOVED***\");\n    fetch(\n      \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))\",\n      {\n        headers: hdr2\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        // console.log(data.records);\n        // console.log(data);\n\n        this.setState({\n          cropData: data.records\n        });\n      });\n\n    this.state = {\n      progress: 3,\n      address: \"Enter Address\",\n      markers: [[39.03, -76.92]],\n      showAddressChangeBtn: false,\n      allGoals: [],\n      cropData: [],\n      selectedCrops: [],\n      selectedGoals: [],\n      zoom: 13,\n      addressVerified: false,\n      snackOpen: false,\n      snackVertical: \"bottom\",\n      snackHorizontal: \"center\",\n      snackMessage: \"\",\n      modalOpen: false,\n      modalSize: \"lg\", //sm,md,lg,fluid\n      modalBody: {},\n      addToCartBtnText: \"add to list\",\n      zoneText: \"0\"\n    };\n    // this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  componentDidMount() {\n    // set progress into local storage for the header\n    this.setLocalStorage(\"stepperState\", this.state);\n    // connect to airtable api -- CURRENTLY USING JSONBIN!\n    // TODO: Change jsonbin api to a more stable api source\n\n    // const hdrs = new Headers();\n    // hdrs.append(\"Content-Type\", \"application/json\");\n    // hdrs.append(\n    //   \"secret-key\",\n    //   \"$2b$10$cB.vdtYXdwSORs8uKPq9.uWi1vLDspYmJoHamkfLZxiwvZHsswg4m\"\n    // );\n\n    const hdr2 = new Headers();\n    hdr2.append(\"Authorization\", \"Bearer ***REMOVED***\");\n    // fetch('https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?api_key=***REMOVED***')\n    // .then((resp) => resp.json())\n    // .then(data => {\n    //   console.log(data);\n    // }\n    //     // this.setState({ items: data.records.crover }\n    //       );\n    // })\n\n    fetch(\n      \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crop%20Goals?maxRecords=300\",\n      {\n        headers: hdr2\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        // console.log(data.records.fields);\n        // console.log(data);\n        this.setState({\n          allGoals: data.records\n        });\n      });\n\n    // fetch(\"https://api.jsonbin.io/b/5daab0ecee19b1311aa10fcf/latest\", {\n    //   headers: hdrs\n    // })\n    //   .then(resp => resp.json())\n\n    //   .then(result => {\n    //     console.log(result);\n    //     this.setState({\n    //       cropData: result.items\n    //     });\n    //   });\n  }\n\n  setLocalStorage(stateObj) {\n    localStorage.setItem(\"stepperState\", JSON.stringify(stateObj));\n  }\n\n  //   fetch(`https://httpbin.org/get`,{\n  //     method: `GET`,\n  //     headers: {\n  //         'authorization': 'BaseAuth W1lcmxsa='\n  //     }\n  // }).then((res)=>{\n  //     if(res.ok) {\n  //         return res.json();\n  //     }\n  // }).then((res)=>{\n  //     console.log(res); // It is like final answer of XHR or jQuery Ajax\n  // })\n\n  queryGEORevAPI = (lat, lon) => {\n    fetch(\n      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`,\n      {\n        method: \"GET\"\n      }\n    )\n      .then(ret => {\n        if (ret.ok) {\n          return ret.json();\n        }\n      })\n      .then(data => {\n        let latlng = data.display_name;\n        // console.log(data.address.postcode);\n        // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n        this.setZoneState(data.address.postcode);\n        this.setState({\n          address: latlng,\n          addressVerified: true\n        });\n        // let latlng = data.results.map((latlng) => {\n\n        // })\n      });\n  };\n\n  setZoneState = zip => {\n    console.log(zip);\n    fetch(`https://phzmapi.org/${zip}.json`, {\n      method: \"GET\"\n    })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n      })\n      .then(data => {\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then(zone => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            this.setState({\n              zoneText: \"Zone 2 & 3\"\n            });\n          } else {\n            this.setState({\n              zoneText: `Zone ${zone}`\n            });\n          }\n        } else {\n          this.setState({\n            zoneText: \"Zone 7\"\n          });\n        }\n      });\n  };\n\n  addMarker = e => {\n    const { markers } = this.state;\n    markers.pop();\n    markers.push(e.latlng);\n    this.setState({ markers });\n    // console.log(markers[0]);\n    let lon = markers[0].lng;\n    let lat = markers[0].lat;\n    this.queryGEORevAPI(lat, lon);\n  };\n  handleSnackClose = () => {\n    this.setState({ snackOpen: false, snackMessage: \"\" });\n  };\n  setWellProgress(index) {\n    if (index === 2) {\n      // validate address before proceeding to step 3\n      if (this.state.addressVerified) {\n        // if address has been verified then go to next step else throw error\n        this.setState({\n          progress: index\n        });\n      } else {\n        this.setState({\n          snackOpen: true,\n          snackMessage: \"Please select a valid address first!\"\n        });\n      }\n    } else {\n      this.setState({\n        progress: index\n      });\n    }\n\n    console.log(index);\n  }\n  isParent() {\n    if (this.state.progress === 0) return true;\n    else return false;\n  }\n  handleMapClick = event => {\n    const { lat, long } = event.latlng;\n    console.log(`Clicked at ${lat}, ${long}`);\n  };\n\n  handleAddressChangeByText = event => {\n    this.setState({\n      address: event.target.value,\n      showAddressChangeBtn: true\n    });\n  };\n\n  updateAddressOnClick = () => {\n    // update the new text address from state to map with a new marker!\n\n    // get currect address from state\n    var q = this.state.address;\n    // https://nominatim.openstreetmap.org/search/?q=1139%20crab%20orchard%20drive&format=json\n    fetch(`https://nominatim.openstreetmap.org/search/?q=${q}&format=json`, {\n      method: \"GET\"\n    })\n      .then(ret => {\n        if (ret.ok) {\n          return ret.json();\n        }\n      })\n      .then(data => {\n        console.log(data);\n        if (data.length === 1) {\n          // th;\n          this.setState({\n            markers: [[data[0].lat, data[0].lon]],\n            zoom: 15,\n            addressVerified: true,\n            address: data[0].display_name\n          });\n        } else {\n          this.setState({\n            address: \"\",\n            addressVerified: false,\n            snackOpen: true,\n            snackMessage: \"Please complete the address\"\n          });\n        }\n\n        // let latlng = data.display_name;\n        // this.setState({\n        //   address: latlng\n        // });\n        // let latlng = data.results.map((latlng) => {\n\n        // })\n      })\n      .then(() => {\n        this.setState({\n          showAddressChangeBtn: false\n        });\n      });\n  };\n\n  addCropToBasket = (cropId, cropName, btnId) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (document.getElementById(btnId).textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n      console.log(document.getElementById(btnId).textContent);\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (this.state.selectedCrops.length > 0) {\n      // let flag = null;\n      // let idx = 0;\n      var removeIndex = this.state.selectedCrops\n        .map(function(item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        this.setState({\n          selectedCrops: [...this.state.selectedCrops, selectedCrops],\n          snackOpen: true,\n          snackMessage: `${cropName} Added`\n        });\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = this.state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        this.setState({\n          selectedCrops: selectedCropsCopy,\n          snackOpen: true,\n          snackMessage: `${cropName} Removed`\n        });\n        // this.state.selectedCrops.splice(removeIndex, 1);\n      }\n    } else {\n      //   // DONE: add the selected crop to state and change the state, show snackbar\n      this.setState({\n        selectedCrops: [cropArray],\n        snackOpen: true,\n        snackMessage: `${cropName} Added`\n      });\n    }\n\n    // this.setState({\n\n    // })\n  };\n\n  getRating = ratng => {\n    let rating = parseInt(ratng);\n    if (rating === 0) {\n      return (\n        <div className=\"rating-0\">\n          <span></span>\n        </div>\n      );\n    } else if (rating === 1) {\n      return (\n        <div className=\"rating-1\">\n          <span></span>\n        </div>\n      );\n    } else if (rating === 2) {\n      return (\n        <div className=\"rating-2\">\n          <span></span>\n        </div>\n      );\n    } else if (rating === 3) {\n      return (\n        <div className=\"rating-3\">\n          <span></span>\n        </div>\n      );\n    } else if (rating === 4) {\n      return (\n        <div className=\"rating-4\">\n          <span></span>\n        </div>\n      );\n    } else if (rating === 5) {\n      return (\n        <div className=\"rating\">\n          <span></span>\n        </div>\n      );\n    }\n  };\n\n  getCropImageFromAPI = query => {\n    // BUG: API call returns random image and is restricted to 200 calls per hour! Not useful!!\n\n    query = encodeURI(query);\n    const headers = new Headers();\n    headers.append(\n      \"Authorization\",\n      \"563492ad6f91700001000001bad1d7b7cf55408ca4d272cea7c088da\"\n    );\n    fetch(`https://api.pexels.com/v1/search?query=${query}&per_page=1&page=1`, {\n      headers: headers\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log(data);\n      });\n  };\n  isExpansionExpanded = true;\n  updateSelectedGoals = (newGoalArr, oldIndex, newIndex) => {\n    let newGoals = arrayMove(newGoalArr, oldIndex, newIndex);\n    this.setState({\n      selectedGoals: newGoals,\n      snackOpen: true,\n      snackMessage: \"Goal Priority Changed\"\n    });\n    // this.setState({\n    //   snackOpen: true,\n    //   snackMessage: \"Please select a valid address first!\"\n    // });\n  };\n\n  renderProgress = () => {\n    switch (this.state.progress) {\n      case 0:\n        return (\n          <Container fluid className=\"pl-0 pr-0 pt-0 mt-0\">\n            <Row>\n              <Col className=\"parentJumbotronRow\" size=\"12\">\n                <MDBJumbotron fluid style={{ padding: 0 }} className=\"mb-0\">\n                  <Col\n                    className=\"text-white text-center parentJumbotronCol\"\n                    style={{\n                      backgroundImage: `url(/images/cover-crop-field.png)`,\n                      backgroundSize: \"cover\"\n                    }}\n                  >\n                    <Col id=\"mainJumbotronWrapper\" className=\"py-5\" style={{}}>\n                      <div id=\"mainJumbotronTextWrapper\" style={{}}>\n                        <MDBCardTitle className=\"h1-responsive pt-3 m-5 font-bold\">\n                          Welcome to the NECCC Cover Crop Decision Support Tool\n                        </MDBCardTitle>\n                        <p className=\"mb-5 text-left\">\n                          You are currently interacting with a Beta version of\n                          the Cover Crop DSTs. The purpose of this interaction\n                          is so that we may gather feedback about the usability\n                          and usefulness of these tools.\n                        </p>\n                        <p className=\"mb-5 text-left\">\n                          The cover crop data you will see has been created by\n                          the NECCC Data Verification Team of cover crop\n                          experts, the original MCCC species selector tool, a\n                          seeding rate calculator developd by NRCS NY, and\n                          several other data sources. Please note: these data\n                          are still being finalized by NECCC teams for each of\n                          the plant hardiness zones. The data shown are a\n                          preview and are yet to be finalized.\n                        </p>\n                        <p\n                          className=\"mb-5 text-left\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          Thank you for your time and consideration. We look\n                          forward to your feedback and hope to build a pleasant\n                          cover crop tool experience for you to effectively\n                          select and manage your cover crops.\n                        </p>\n                      </div>\n                      <LightButton\n                        className=\"mb-5 mt-5\"\n                        onClick={() => {\n                          this.setWellProgress(1);\n                        }}\n                      >\n                        NEXT\n                      </LightButton>\n                    </Col>\n                  </Col>\n                </MDBJumbotron>\n              </Col>\n            </Row>\n          </Container>\n        );\n      case 1:\n        return (\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{ marginTop: \"5em\" }}\n          >\n            <GridList\n              children={2}\n              cols={2}\n              cellHeight={300}\n              style={{\n                backgroundColor: \"rgba(255,255,255,1)\",\n                boxShadow: \"rgb(136, 136, 136) 0px 0px 1px\",\n                width: \"90%\",\n                margin: \"0 auto\",\n                textAlign: \"\",\n                padding: \"20px\"\n              }}\n            >\n              <GridListTile item md={6}>\n                <h1>Where is your field located? </h1>\n                <p>\n                  Select plant hardiness zone for least site specific results.\n                  Enter address or zip code for county-level specificity. For\n                  more specific results, mark out your field boundary in the\n                  map.\n                </p>\n\n                {/* <p style={{ fontWeight: \"bold\" }}>asd</p> */}\n                <form noValidate autoComplete=\"off\">\n                  <FormControl variant=\"outlined\" style={{ width: \"40%\" }}>\n                    <InputLabel id=\"demo-simple-select-outlined-label\" disabled>\n                      Plant Hardiness Zone\n                    </InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-outlined-label\"\n                      id=\"demo-simple-select-outlined\"\n                      onChange={() => {}}\n                      disabled\n                    >\n                      <MenuItem value=\"\">\n                        <em>None</em>\n                      </MenuItem>\n                      <MenuItem value={0}>Zone 2 and 3</MenuItem>\n                      <MenuItem value={1}>Zone 4</MenuItem>\n                      <MenuItem value={2}>Zone 5</MenuItem>\n                      <MenuItem value={3}>Zone 6</MenuItem>\n                      <MenuItem value={4}>Zone 7</MenuItem>\n                    </Select>\n                  </FormControl>\n                  &nbsp;&nbsp;\n                  <TextField\n                    value={this.state.address === \"\" ? \"\" : this.state.address}\n                    id=\"locationAddress\"\n                    label=\"Location\"\n                    variant=\"outlined\"\n                    style={{ width: \"40%\" }}\n                    onChange={this.handleAddressChangeByText}\n                  />\n                  {this.state.showAddressChangeBtn ? (\n                    <LightButton\n                      style={{ marginLeft: \"15px\", marginTop: \"5px\" }}\n                      onClick={this.updateAddressOnClick}\n                    >\n                      Update\n                    </LightButton>\n                  ) : (\n                    \"\"\n                  )}\n                </form>\n              </GridListTile>\n              <GridListTile item md={6}>\n                <Map\n                  style={{ height: \"100%\", width: \"100%\" }}\n                  center={this.state.markers[0]}\n                  zoom={this.state.zoom}\n                  minZoom={3}\n                  maxZoom={20}\n                  onClick={this.addMarker}\n                  ref={this.myMap}\n                >\n                  <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?\"\n                  />\n                  {this.state.markers.map((position, idx) => (\n                    <Marker key={`marker-${idx}`} position={position}>\n                      <Popup>\n                        <span>{this.state.address}</span>\n                      </Popup>\n                    </Marker>\n                  ))}\n                </Map>\n              </GridListTile>\n            </GridList>\n          </Grid>\n        );\n      case 2:\n        return (\n          <Container fluid className=\"secondStepContainer\">\n            <Row>\n              <Col md=\"6\" sm=\"12\">\n                {\" \"}\n                <Row className=\"case2FirstRow\">\n                  {/* <MDBCol size=\"4\">.col-4</MDBCol>\n              <MDBCol size=\"4\">.col-4</MDBCol>\n              <MDBCol size=\"4\">.col-4</MDBCol> */}\n                  <Col md=\"4\" sm=\"12\">\n                    <Map\n                      style={{ width: \"100%\", height: \"100%\" }}\n                      center={this.state.markers[0]}\n                      zoom={this.state.zoom}\n                      minZoom={14}\n                      maxZoom={20}\n                      onClick={this.addMarker}\n                      ref={this.myMap}\n                    >\n                      <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?\"\n                      />\n                      {this.state.markers.map((position, idx) => (\n                        <Marker key={`marker-${idx}`} position={position}>\n                          <Popup>\n                            <span>{this.state.address}</span>\n                          </Popup>\n                        </Marker>\n                      ))}\n                    </Map>\n                  </Col>\n                  <Col md=\"8\" sm=\"12\">\n                    <h2>Location Details</h2>\n                    <div>\n                      Your cover crop recommendations will come from the Plant\n                      Hardiness{\" \"}\n                      <MDBDropdown className=\"zoneDrowdown\" size=\"sm\">\n                        <MDBDropdownToggle caret color=\"primary\">\n                          {this.state.zoneText !== undefined\n                            ? `${this.state.zoneText}`\n                            : \"Zone 7\"}\n                        </MDBDropdownToggle>\n                        <MDBDropdownMenu>\n                          <MDBDropdownItem header>Zones</MDBDropdownItem>\n                          <MDBDropdownItem>Zone 2 &amp; 3</MDBDropdownItem>\n                          <MDBDropdownItem>Zone 4</MDBDropdownItem>\n                          <MDBDropdownItem>Zone 5</MDBDropdownItem>\n                          <MDBDropdownItem>Zone 6</MDBDropdownItem>\n                          <MDBDropdownItem>Zone 7</MDBDropdownItem>\n                        </MDBDropdownMenu>\n                      </MDBDropdown>\n                      NECC Dataset\n                    </div>\n                  </Col>\n                  <Col size=\"12\" className=\"mt-3\">\n                    <TextField\n                      value={this.state.address}\n                      style={{ width: \"100%\" }}\n                      label=\"Location\"\n                      variant=\"outlined\"\n                      disabled\n                    ></TextField>\n                  </Col>\n                  <Col size=\"12\" className=\"mt-3\">\n                    <p>\n                      Disclaimer: Cover crop recommendations are based omn\n                      expert opitions. Your cover crop performance will vary\n                      based on location, management, cultivars, and many other\n                      variables. Consult an{\" \"}\n                      <a\n                        href=\"https://google.com\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        NRCS Extension Expert\n                      </a>{\" \"}\n                      for detailed guidance.\n                    </p>\n                  </Col>\n                </Row>\n              </Col>\n              <Col size=\"6\">\n                {/* TODO: Weather Data */}\n                <h2>Weather Conditions? </h2>\n\n                <p>{cloudIcon(20, 20)} Historical Weather Data</p>\n                <p>Average Frost Dates</p>\n                <p>Average Precipitation</p>\n                <p>Frost Free Days</p>\n              </Col>\n            </Row>\n          </Container>\n        );\n      case 3:\n        return (\n          <Container fluid className=\"thirdStepContainer\">\n            <Row className=\"case3FirstRow\" sm={12}>\n              <h1>What are your cover cropping goals</h1>\n            </Row>\n            <Row sm={12} className=\"case3SecondRow\">\n              <p>Select upto three. Hover for more information</p>\n            </Row>\n            <Row className=\"case3ThirdRow mt-4 mb-4\">\n              {this.state.allGoals.map((item, key) => {\n                // return chips for all goals that dont start with TBD\n                if (!item.fields[\"Cover Crop Goal\"].startsWith(\"TBD\")) {\n                  return (\n                    <Col size=\"auto\">\n                      <Tooltip\n                        title={\n                          <div className=\"tooltipText\">\n                            {item.fields[\"Description\"]}\n                          </div>\n                        }\n                        interactive\n                        arrow\n                      >\n                        <Chip\n                          label={item.fields[\"Cover Crop Goal\"].toUpperCase()}\n                          onClick={() => {\n                            // check if state array is empty\n                            // get a copy of selected goals\n                            const goals = [...this.state.selectedGoals];\n                            if (\n                              goals.indexOf(item.fields[\"Cover Crop Goal\"]) ===\n                              -1\n                            ) {\n                              // does not exist\n\n                              // set state\n                              this.setState({\n                                selectedGoals: [\n                                  ...this.state.selectedGoals,\n                                  item.fields[\"Cover Crop Goal\"]\n                                ]\n                              });\n\n                              // make it darker on the ui\n\n                              document\n                                .getElementById(`chip${key}`)\n                                .classList.add(\"active\");\n                            } else {\n                              // exists, remove it from the state and update the state\n\n                              let index = goals.indexOf(\n                                item.fields[\"Cover Crop Goal\"]\n                              );\n                              goals.splice(index, 1);\n                              this.setState({\n                                selectedGoals: goals\n                              });\n\n                              // make it lighter on the ui\n\n                              document\n                                .getElementById(`chip${key}`)\n                                .classList.remove(\"active\");\n                            }\n                            // this.setState({\n                            //   sortableGoals: this.listGenerator()\n                            // });\n                          }}\n                          clickable={true}\n                          variant=\"outlined\"\n                          className={`chip`}\n                          id={`chip${key}`}\n                          size=\"medium\"\n                        />\n                      </Tooltip>\n                    </Col>\n                  );\n                } else return \"\";\n              })}\n            </Row>\n          </Container>\n          // TODO: Maintain styling for selectedGoals on prev/next click\n        );\n      case 4:\n        return (\n          <div className=\"container-fluid\">\n            <div className=\"row mt-5 mainWrapperRow1\">\n              <div className=\"col-md-1 col-sm-12\"></div>\n              <div className=\"col-md-10 col-sm-12 mainCol1\">\n                {/* TODO: Ideal place for a list/grid view toggle */}\n              </div>\n              <div className=\"col-md-1 col-sm-12\"></div>\n            </div>\n            <div className=\"row mt-5 mainWrapperRow2\">\n              {/* <div className=\"col-lg-1 hidden-md\"></div> */}\n              <div className=\"col-lg-12 col-md-12 mainCol2\">\n                <div className=\"row\">\n                  <div className=\"col-md-2\">\n                    <div className=\"sidebarTitle\">\n                      <Typography variant=\"h6\">FILTER</Typography>\n                    </div>\n                    <div className=\"sidebarContents\">\n                      <ExpansionPanel\n                        className=\"sideBar\"\n                        defaultExpanded={this.isExpansionExpanded}\n                        onTouchEnd={() => {\n                          this.isExpansionExpanded = !this.isExpansionExpanded;\n                        }}\n                      >\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel1a-content\"\n                          id=\"panel1a-header\"\n                        >\n                          <Typography\n                            className=\"sidePanelCollapsibleHeading\"\n                            variant=\"subtitle1\"\n                          >\n                            COVER CROP GOALS\n                          </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          <div>\n                            <Typography variant=\"subtitle1\" className=\"mb-2\">\n                              Goal Priority Order\n                            </Typography>\n                            <List\n                              values={this.state.selectedGoals}\n                              onChange={({ oldIndex, newIndex }) =>\n                                this.updateSelectedGoals(\n                                  this.state.selectedGoals,\n                                  oldIndex,\n                                  newIndex\n                                )\n                              }\n                              renderList={({ children, props }) => (\n                                <ol className=\"goalsListFilter\" {...props}>\n                                  {children}\n                                </ol>\n                              )}\n                              renderItem={({ value, props }) => (\n                                <li {...props}>{value.toUpperCase()}</li>\n                              )}\n                            />\n                            <Typography variant=\"subtitle1\" className=\"mt-2\">\n                              Drag to reorder\n                            </Typography>\n\n                            {/* ))} */}\n                            {/* </ul> */}\n                          </div>\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                      <ExpansionPanel className=\"sideBar\">\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel1b-content\"\n                          id=\"panel1b-header\"\n                        >\n                          <Typography className=\"sidePanelCollapsibleHeading\">\n                            CASH CROP\n                          </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          Details for Cash Crops\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                      <ExpansionPanel className=\"sideBar\">\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel1c-content\"\n                          id=\"panel1c-header\"\n                        >\n                          <Typography className=\"sidePanelCollapsibleHeading\">\n                            COVER CROP FILTERS\n                          </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          Cover Crop Filters Details\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                    </div>\n                  </div>\n                  <div className=\"col-md-10 no-padding-left\">\n                    <div className=\"table-responsive\">\n                      <table className=\"table\">\n                        <thead className=\"tableheadWrapper\">\n                          <tr>\n                            <th>COVER CROP</th>\n                            {this.state.selectedGoals.length !== 0\n                              ? this.state.selectedGoals.map((goal, index) => (\n                                  <th>{goal.toUpperCase()}</th>\n                                ))\n                              : \"\"}\n                            <th>GROWTH WINDOW</th>\n                            <th>\n                              MY LIST\n                              <br />\n                              {`[${this.state.selectedCrops.length} CROPS]`}\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"tableBodyWrapper\">\n                          {this.state.cropData.map((crop, index) => {\n                            if (\n                              !crop.fields[\"Cover Crop Name\"].trim() !==\n                              \"Ok hopefully he answers me soon.\".trim()\n                            ) {\n                              return (\n                                <tr>\n                                  <td\n                                    style={{\n                                      display: \"flex\",\n                                      flexDirection: \"row\"\n                                    }}\n                                  >\n                                    {/* {this.getCropImageFromAPI(\n                                      crop.fields[\"Cover Crop Name\"]\n                                    )} */}\n                                    <img\n                                      src=\"http://lorempixel.com/200/100/\"\n                                      alt=\"placeholder\"\n                                      style={{\n                                        flexBasis: \"40%\"\n                                      }}\n                                    />\n                                    <div\n                                      className=\"cropDetailsText\"\n                                      style={{\n                                        display: \"flex\",\n                                        flexBasis: \"60%\",\n                                        flexDirection: \"column\",\n                                        paddingLeft: \"2em\"\n                                      }}\n                                    >\n                                      <span className=\"cropCategory\">\n                                        {crop.fields[\"Family Common Name\"]}\n                                      </span>\n                                      <span className=\"cropName\">\n                                        {crop.fields[\"Cover Crop Name\"]}\n                                      </span>\n                                      <span className=\"cropScientificName\">\n                                        {crop.fields[\"Scientific Name\"]}\n                                      </span>\n                                      <span className=\"cropDuration\">\n                                        {crop.fields[\"Duration\"]}\n                                      </span>\n                                    </div>\n                                  </td>\n                                  {this.state.selectedGoals.length !== 0\n                                    ? this.state.selectedGoals.map(\n                                        (goal, index) => (\n                                          <td>\n                                            {this.getRating(crop.fields[goal])}\n                                          </td>\n                                        )\n                                      )\n                                    : \"\"}\n                                  <td>GROWTH WINDOW</td>\n                                  <td style={{}}>\n                                    <div className=\"button1\">\n                                      <LightButton\n                                        id={`cartBtn${index}`}\n                                        style={{\n                                          borderRadius: \"0px\",\n                                          width: \"130px\"\n                                        }}\n                                        onClick={() => {\n                                          this.addCropToBasket(\n                                            crop.id,\n                                            crop.fields[\"Cover Crop Name\"],\n                                            `cartBtn${index}`\n                                          );\n                                        }}\n                                      >\n                                        ADD TO LIST\n                                      </LightButton>\n                                    </div>\n                                    <br />\n                                    <div className=\"button2\">\n                                      <Button\n                                        size=\"small\"\n                                        onClick={() => {\n                                          this.setState({\n                                            modalOpen: true,\n                                            modalBody: crop.fields\n                                          });\n                                        }}\n                                      >\n                                        View Crop Details\n                                      </Button>\n                                    </div>\n                                  </td>\n                                </tr>\n                              );\n                            } else return \"\";\n                          })}\n                        </tbody>\n                      </table>\n                      {/* <MDBDataTable striped hover data={this.data} /> */}\n                    </div>\n\n                    <div className=\"cropGoals\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {/* </div> */}\n            {/* <div className=\"col-lg-1 hidden-md\"></div> */}\n          </div>\n          // </div>\n        );\n      // return (\n      //   <Container fluid className=\"fourthStepContainer\">\n      //     <Row></Row>\n      //   </Container>\n      // );\n      default:\n        return \"non handled case\";\n    }\n  };\n  // handleClose = event => {\n  //   const anchorRef = React.useRef(null);\n  //   if (anchorRef.current && anchorRef.current.contains(event.target)) {\n  //     return;\n  //   }\n\n  //   setOpen(false);\n  // };\n  isValid = () => {\n    // check if it is progress no. 3\n    if (this.state.progress === 3) {\n      // change logic from atleast to atmost\n      // check if a̶t̶l̶e̶a̶s̶t̶ atmost 3 goals have been selected\n      if (this.state.selectedGoals.length > 3) {\n        return true;\n      } else return false;\n    } else return false;\n  };\n  progressBar = () => {\n    return (\n      <Container className=\"progressContainer\">\n        <Row md=\"12\">\n          <Col md=\"4\">\n            <LightButton\n              onClick={() => {\n                this.setWellProgress(this.state.progress - 1);\n                this.setLocalStorage(this.state);\n              }}\n            >\n              Back\n            </LightButton>\n            <LightButton\n              disabled={this.isValid()}\n              style={{ marginLeft: \"3px\" }}\n              onClick={() => {\n                this.setWellProgress(this.state.progress + 1);\n                this.setLocalStorage(this.state);\n              }}\n            >\n              Next\n            </LightButton>\n          </Col>\n          <Col md=\"4\" className=\"offset-md-4\">\n            <div className=\"progress\">\n              <div className=\"progress-track\"></div>\n              <div\n                id=\"step1\"\n                className=\"progress-step\"\n                style={\n                  this.state.progress !== 1\n                    ? { backgroundColor: \"#f0f7eb\", color: \"black\" }\n                    : { backgroundColor: \"#8abc62\" }\n                }\n              ></div>\n\n              <div\n                id=\"step2\"\n                className=\"progress-step\"\n                style={\n                  this.state.progress !== 2\n                    ? { backgroundColor: \"#f0f7eb\", color: \"black\" }\n                    : { backgroundColor: \"#8abc62\" }\n                }\n              ></div>\n\n              <div\n                id=\"step3\"\n                className=\"progress-step\"\n                style={\n                  this.state.progress !== 3\n                    ? { backgroundColor: \"#f0f7eb\", color: \"black\" }\n                    : { backgroundColor: \"#8abc62\" }\n                }\n              ></div>\n\n              <div\n                id=\"step4\"\n                className=\"progress-step\"\n                style={\n                  this.state.progress !== 4\n                    ? { backgroundColor: \"#f0f7eb\", color: \"black\" }\n                    : { backgroundColor: \"#8abc62\" }\n                }\n              ></div>\n            </div>\n          </Col>\n        </Row>\n        <Row md=\"12\">\n          <Col md=\"4\" className=\"offset-md-8\" style={{ textAlign: \"center\" }}>\n            <p>Question {this.state.progress} of 4</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  };\n  snackBar = () => {\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: this.state.snackVertical,\n          horizontal: this.state.snackHorizontal\n        }}\n        key={{\n          vertical: this.state.snackVertical,\n          horizontal: this.state.snackHorizontal\n        }}\n        autoHideDuration={5000}\n        open={this.state.snackOpen}\n        onClose={this.handleSnackClose}\n        ContentProps={{\n          \"aria-describedby\": \"message-id\"\n        }}\n        message={this.state.snackMessage}\n      />\n    );\n  };\n\n  toggleModal = () => {\n    this.setState({ modalOpen: !this.state.modalOpen });\n  };\n  showModal = () => {\n    return (\n      <MDBModal\n        isOpen={this.state.modalOpen}\n        size={this.state.modalSize}\n        toggle={() => this.toggleModal()}\n      >\n        <MDBModalHeader\n          className=\"modalHeader\"\n          toggle={() => this.toggleModal()}\n        ></MDBModalHeader>\n        <MDBModalBody className=\"col-12\">\n          {Object.keys(this.state.modalBody).length > 0 ? (\n            <div className=\"modalBodyHeader\">\n              <Box width=\"100%\">\n                <Card style={{ display: \"flex\" }}>\n                  <div\n                    className=\"classDetails\"\n                    style={{ display: \"flex\", flexDirection: \"column\" }}\n                  >\n                    <CardContent style={{ flex: \"1 0 auto\" }}>\n                      <Typography component=\"h5\" variant=\"h5\">\n                        {this.state.modalBody[\"Cover Crop Name\"]}\n                      </Typography>\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                        {this.state.modalBody[\"Family Common Name\"]}\n                      </Typography>\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                        {this.state.modalBody[\"Duration\"]}\n                      </Typography>\n                    </CardContent>\n                    <div style={{}}></div>\n                  </div>\n                  <CardMedia\n                    style={{ width: 151 }}\n                    className=\"\"\n                    image=\"/images/temp.jpg\"\n                    title=\"Live from space album cover\"\n                  />\n                  <CardMedia\n                    style={{ width: 151 }}\n                    className=\"\"\n                    image=\"/images/temp.jpg\"\n                    title=\"Live from space album cover\"\n                  />\n                  <CardMedia\n                    style={{ width: 151 }}\n                    className=\"\"\n                    image=\"/images/temp.jpg\"\n                    title=\"Live from space album cover\"\n                  />\n                </Card>\n                <div\n                  className=\"buttonStripe\"\n                  style={{\n                    width: \"100%\",\n                    //height: \"50px\",\n                    backgroundColor: \"#2d7b7b\",\n                    display: \"flex\"\n                  }}\n                >\n                  {/* <div className=\"row\"> */}\n                  {/* <div className=\"col-12\"> */}\n                  {/* <div className=\"col-6\"> */}\n                  <div className=\"leftSideModalBtns\" style={{ flexGrow: 2 }}>\n                    <Button\n                      style={{\n                        backgroundColor: \"transparent\",\n                        border: \"none\",\n                        boxShadow: \"none\",\n                        color: \"white\"\n                      }}\n                      variant=\"contained\"\n                      size=\"small\"\n                      startIcon={<GroupWorkIcon />}\n                      aria-label={`Plant Hardiness Zone ${this.state.zoneText} Dataset`}\n                    >\n                      {`Plant Hardiness Zone ${this.state.zoneText} Dataset`}\n                    </Button>\n                  </div>\n                  <div className=\"midSideModalBtns\" style={{ flexGrow: 0 }}>\n                    <Button\n                      style={{\n                        backgroundColor: \"transparent\",\n                        border: \"none\",\n                        boxShadow: \"none\",\n                        color: \"white\"\n                      }}\n                      variant=\"contained\"\n                      size=\"small\"\n                      startIcon={<PhotoLibraryIcon />}\n                      aria-label={`View Photos`}\n                    >\n                      {`View Photos`}\n                    </Button>\n                  </div>\n                  <div className=\"semiMidSideModalBtns\" style={{ flexGrow: 1 }}>\n                    <Button\n                      style={{\n                        backgroundColor: \"transparent\",\n                        border: \"none\",\n                        boxShadow: \"none\",\n                        color: \"white\"\n                      }}\n                      variant=\"contained\"\n                      size=\"small\"\n                    >\n                      Download:\n                    </Button>\n                    <Button\n                      style={{\n                        backgroundColor: \"transparent\",\n                        border: \"none\",\n                        boxShadow: \"none\",\n                        color: \"white\"\n                      }}\n                      variant=\"contained\"\n                      size=\"small\"\n                      startIcon={<PictureAsPdfIcon />}\n                      aria-label={`Download as pdf`}\n                    >\n                      {`PDF`}\n                    </Button>\n                  </div>\n\n                  {/* </div> */}\n                  {/* </div> */}\n                  {/* </div> */}\n                </div>\n              </Box>\n              {/* <Card className={classes.card}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            Live From Space\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            Mac Miller\n          </Typography>\n        </CardContent>\n        <div className={classes.controls}>\n          <IconButton aria-label=\"previous\">\n            {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />}\n          </IconButton>\n          <IconButton aria-label=\"play/pause\">\n            <PlayArrowIcon className={classes.playIcon} />\n          </IconButton>\n          <IconButton aria-label=\"next\">\n            {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />}\n          </IconButton>\n        </div>\n      </div>\n      <CardMedia\n        className={classes.cover}\n        image=\"/static/images/cards/live-from-space.jpg\"\n        title=\"Live from space album cover\"\n      />\n    </Card> */}\n              {/* <div className=\"leftSide \">\n              <span className=\"cropCategory\">\n                {this.state.modalBody[\"Family Common Name\"]}\n              </span>\n              <span className=\"cropName\">\n                {this.state.modalBody[\"Cover Crop Name\"]}\n              </span>\n              <span className=\"cropScientificName\">\n                {this.state.modalBody[\"Scientific Name\"]}\n              </span>\n              <span className=\"cropDuration\">\n                {this.state.modalBody[\"Duration\"]}\n              </span>\n              </div> */}\n            </div>\n          ) : (\n            \":(\"\n          )}\n          {/* <div className=\"bodyHeader\">\n            <span className=\"cropCategory\">\n              {crop.fields[\"Family Common Name\"]}\n            </span>\n            <span className=\"cropName\">{crop.fields[\"Cover Crop Name\"]}</span>\n            <span className=\"cropScientificName\">\n              {crop.fields[\"Scientific Name\"]}\n            </span>\n            <span className=\"cropDuration\">{crop.fields[\"Duration\"]}</span>\n          </div> */}\n        </MDBModalBody>\n      </MDBModal>\n    );\n  };\n  render() {\n    return (\n      <div className=\"\" style={{ width: \"100%\", minHeight: \"50vh\" }}>\n        {this.renderProgress()}\n\n        {this.state.progress === 0 || this.state.progress >= 4\n          ? \"\"\n          : this.progressBar()}\n\n        {this.snackBar()}\n        {this.showModal()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\n// import Header from \"./components/Header/header\";\n// import Body from \"./components/body\";\nimport { Box } from \"@material-ui/core\";\n// import Navigation from \"./components/navigation\";\n// import Footer from \"./components/Footer/footer\";\nimport Header from \"./components/Header/header\";\nimport WellComponent from \"./components/Well/wellComponent\";\n// import { GreenBarComponent } from \"./components/GreenBar/greenBarComponent\";\n// import BodyComponent from \"./components/body\";\n\nconst logoPath = \"/images/neccc_wide_logo_color_web.jpg\";\n\nfunction App() {\n  // const isRootRoute = this.props.path == \"/\" ? true : false;\n  return (\n    <div>\n      <Box component=\"div\" className=\"mainContainer\">\n        {/* Our header.js file exports the reusable Header component.\n      It is just a simple Grid based header with logo on the left hand side and typography on the right  */}\n\n        <Header logoPath={`${logoPath}`} />\n\n        <WellComponent />\n        {/* <BodyComponent /> */}\n        {/* {isRootRoute ? <Header logoPath={`${logoPath}`} /> : \"\"} */}\n\n        {/*\n      Our Main part of this application would be this Navigation component. It contains code for our main navigation\n      It is using a material-ui tab panel for simplicity and ease of use.\n      Each tab contains/would-contain components individually, as required.\n      */}\n\n        {/* <Navigation /> */}\n\n        {/* body.js is just a temporary code, that would eventually be replaced by footer.js\n      Until production, this can serve as a playground!!\n      */}\n\n        {/* <Body /> */}\n      </Box>\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}