{"version":3,"sources":["store/Reducer.js","store/Store.js","components/Header/DateComponent.js","shared/constants.js","components/Location/Map.js","components/Location/LiveLocation.js","components/Location/AutoComplete.js","components/Location/LocationToggle.js","components/Location/MapContext.js","components/Location/Location.js","components/Location/WeatherConditions.js","components/Location/WeatherModal.js","components/Location/SoilCondition.js","components/Header/Greenbar/Greenbar.js","components/Header/ForecastComponent.js","components/Header/header.js","components/Landing/Landing.js","shared/ProgressButtonsInner.js","shared/ProgressButtons.js","shared/ProgressBar.js","components/GoalsSelector/GoalTag.js","components/GoalsSelector/GoalsSelector.js","components/Location/LocationConfirmation.js","components/CropSelector/GrowthWindow.js","components/InformationSheet/SoilDrainageTimeline.js","components/InformationSheet/PhotoComponent.js","components/InformationSheet/DictionaryContent.js","components/InformationSheet/InformationSheetDictionary.js","components/InformationSheet/InformationSheetContent.js","components/CropSelector/CropDetailsModal.js","components/CropSelector/CropLegendModal.js","components/CropSelector/CropTable.js","components/MyCoverCropList/MyCoverCropCardsComponent.js","components/MyCoverCropList/MyCoverCropComparisonComponent.js","components/MyCoverCropList/MyCoverCropList.js","components/CropSelector/CropCalendarView.js","shared/keys.js","components/CropSelector/Filters/CoverCropType.js","components/CropSelector/Filters/EnvironmentalTolerance.js","components/CropSelector/Filters/Seeds.js","components/CropSelector/Filters/SeedingMethods.js","components/CropSelector/Filters/Growth.js","components/CropSelector/Filters/TerminationMethods.js","components/CropSelector/Filters/Beneficials.js","components/CropSelector/Filters/Weeds.js","components/CropSelector/Filters/DiseaseAndNonWeedPests.js","components/CropSelector/Filters/Roots.js","components/CropSelector/Filters/SoilConditions.js","components/CropSelector/CropSidebar.js","components/CropSelector/CropSelector.js","App.js","serviceWorker.js","index.js","components/Footer/footer.js","components/About/About.js","components/SeedingRateCalculator/SeedingRateCalculator.js","components/MixMaker/MixMaker.js","components/CoverCropExplorer/ExplorerCardView.js","components/CoverCropExplorer/CoverCropExplorer.js","components/InformationSheet/InformationSheet.js","components/Help/Help.js","components/Feedback/Feedback.js"],"names":["Reducer","state","action","type","data","progress","weatherDataReset","markers","address","showAddressChangeBtn","zoneText","zone","selectedGoals","addressVerified","markersCopy","snackOpen","snackMessage","allGoals","cropData","selectedCrops","myCoverCropActivationFlag","speciesSelectorActivationFlag","weatherData","frostFreeDays","averageFrost","averagePrecipitation","thisMonth","annual","ajaxInProgress","cropDetailModal","isSoilDataLoading","selectedCheckboxes","selectedStars","soilData","Map_Unit_Name","Drainage_Class","Flooding_Frequency","Ponding_Frequency","for","soilDataOriginal","cashCropData","dateRange","startDate","endDate","addressSearchPreference","zipCode","filterString","filterKeys","activeGrowthPeriod","cropDataFormatter","tjson","filter","crop","map","val","fields","monthStringBuilder","img","Notes","Directory","desc","loremText","vals","forEach","param","valStart","moment","valEnd","str","valuesArray","isSameOrBefore","get","push","format","add","key","prev","z6AllCrops","z6crops","z5AllCrops","z5crops","z7CropData","z7crops","initialState","zip","zoom","snackVertical","snackHorizontal","modalOpen","modalSize","modalBody","addToCartBtnText","firstFrostDate","month","day","lastFrostDate","greenbarExpanded","name","zone7CropData","zone6CropData","zone5CropData","zone7Dictionary","z7Dict","zone6Dictionary","z6Dict","zone5Dictionary","z5Dict","Context","createContext","Store","children","useReducer","dispatch","Provider","value","setTodaysDate","now","tzdata","tz","guess","DateComponent","useState","date","setDate","useEffect","JSZip","require","JSZipUtils","saveAs","ReferenceTooltip","props","sourceURL","url","sourceName","source","content","hasLink","Tooltip","title","href","target","rel","interactive","arrow","Info","fontSize","placement","Typography","variant","DataTooltip","className","zoneIcon","w","h","height","width","viewBox","fill","xmlns","d","GreenSwitch","withStyles","thumb","backgroundColor","track","input","color","Switch","UnderConstructionText","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","abbrRegion","to","i","regions","concat","replace","txt","charAt","toUpperCase","substr","toLowerCase","length","LightButton","root","borderRadius","padding","borderColor","Button","getRating","ratng","parseInt","allMonths","localeData","monthsShort","greenBarExpansionPanelHeight","trimString","stringFull","size","isNaN","substring","RenderSeedPriceIcons","MonetizationOn","opacity","CropImage","present","src","alt","view","onClick","lazyHeight","imageStyle","maxWidth","maxHeight","fallback","flipCoverCropName","cropName","cropNames","split","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","editableLayers","FeatureGroup","drawPluginOptions","position","draw","polygon","allowIntersection","drawError","message","shapeOptions","polyline","circle","rectangle","marker","circlemarker","edit","featureGroup","remove","Control","Draw","LiveLocationComponent","useContext","React","checkedL","lstate","setlState","setZoneState","a","axios","then","response","undefined","isUndefined","FormGroup","row","FormControlLabel","control","checked","onChange","event","navigator","geolocation","getCurrentPosition","lat","coords","latitude","long","longitude","fullAddress","display_name","mrkrArr","postcode","console","log","alert","enableHighAccuracy","maximumAge","timeout","label","display","marginTop","useStyles","makeStyles","theme","formControl","margin","minWidth","selectEmpty","modal","justifyContent","paper","palette","background","border","boxShadow","shadows","AutoCompleteComponent","classes","open","setOpen","setAddress","suggestedAddress","setSuggestedAddress","handleOpen","handleClose","checkAddresses","query","fetch","json","Modal","onClose","BackdropProps","BackdropComponent","Backdrop","Fade","in","id","index","Link","component","parseFloat","lon","setBoundingBoxAndAddress","FormControl","TextField","fullWidth","aria-haspopup","InputProps","endAdornment","InputAdornment","IconButton","addressData","Search","LocationToggleComponent","defaultValue","setDefaultValue","ToggleButton","selected","ToggleButtonGroup","exclusive","e","MapContext","LayersControl","BaseLayer","Overlay","minzoom","maxzoom","from","show","setShow","mapCenter","setMapCenter","isPoly","setIsPoly","showEditControl","setShowEditControl","updateGlobalMarkers","markersArray","editableFG","setEditableFG","minZoom","maxZoom","center","getPolyCenter","ref","featureGroupRef","onEdited","onCreated","drawnItems","leafletElement","_layers","Object","keys","layerid","layer","removeLayer","layerType","_latlng","lng","latlngs","_latlngs","latlngArr","latlng","onDeleted","line","showArea","metric","Polygon","positions","Marker","TileLayer","attribution","arr","x","y","Math","min","max","LocationComponent","align","InputLabel","Select","labelId","textAlign","MenuItem","keuy","LiveLocation","AutoComplete","LocationToggle","textField","marginLeft","marginRight","WeatherConditions","months","setMonths","currentMonthFull","setCurrentMonthFull","setDidChange","setCaller","weatherDataShadow","setWeatherDataShadow","lastFrostDayHelper","setLastFrostDayHelper","firstFrostDayHelper","setFirstFrostDayHelper","firstFrostDayError","setFirstFrostDayError","lastFrostDayError","setLastFrostDayError","firstFrostMonth","setFirstFrostMonth","firstFrostDay","setFirstFrostDay","lastFrostMonth","setLastFrostMonth","lastFrostDay","setLastFrostDay","setAveragePrecipitation","setFrostFreeDays","caller","modalBtnDisabled","cursor","Opacity","AcUnit","WbSunnyOutlined","aria-labelledby","aria-describedby","closeAfterTransition","htmlFor","native","inputProps","multiline","helperText","error","maxLength","step","disabled","broadcastObject","SoilCondition","switchBase","grey","transform","common","white","primary","main","tilingCheck","setTilingCheck","getSSURGOData","longLatString","soilDataQuery","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","result","mapUnitString","stringSplit","el","indexOf","elm","join","drainageClasses","catch","updateDrainageClass","drainages","splice","updateFloodingFrequency","RenderFloodingOptions","flooding","Chip","RenderDrainageClasses","drainage","includes","Terrain","LocalDrinkOutlined","arrayEquals","every","InvertColors","WavesOutlined","b","sort","Array","isArray","expansionPanelBaseStyle","greenBarWrapperBackground","Greenbar","expansionPanelComponent","setExpansionPanelComponent","document","addEventListener","evt","getElementById","greenBarParent","targetElement","parentNode","handleAddressBtnClick","greenbarExpansionElement","handleSoilBtnClick","handleWeatherBtnClick","window","location","pathname","LocationOn","getAddress","toString","currentMonth","getWeatherData","Location","ForecastComponent","showTempIcon","setShowTempIcon","unit","iconURL","iconDescription","temp","setTemp","setShowFeatures","trace","callWeatherApi","iconId","weather","icon","String","description","tempObj","temp_min","temp_max","reverseGEO","localityInfo","informative","lastInfo","addressString","city","makeURLString","fetchData","jsonData","params","Number","toFixed","Header","useTheme","history","useMediaQuery","breakpoints","up","between","useHistory","collapse","setCollapse","isRoot","setIsRoot","redirectToRoot","isActive","getUSDAZone","getAverageFrostDates","Axios","resp","totalYears","mostRecentYearData","maxDate","minDate","averageFrostObject","revAPIURL","locality","principalSubdivision","frostFreeDaysURL","frostFreeDatesURL","frostFreeDaysObject","hasOwnProperty","obj","currentMonthInt","averageRainForAMonthURL","fiveYearAvgRainURL","averagePrecipitationForCurrentMonth","status","fiveYearAvgRainAnnual","z7Formattedgoal","zone7Goal","goal","z6Formattedgoal","zone6Goal","z5Formattedgoal","zone5Goal","setmyCoverCropActivationFlag","setSpeciesSelectorActivationFlag","activeClassName","onContextMenu","NavLink","exact","Badge","badgeContent","light","fluid","isOpen","navbar","active","Landing","backgroundWrapper","bg","backgroundSize","flexDirection","paddingLeft","paddingRight","Box","overflow","paddingBottom","marginBottom","gutterBottom","fontWeight","incVal","ProgressButtonsInner","isDisabled","changeProgress","renderProgressButtons","ProgressButtons","setIsDisabled","disableLogic","goalsLength","checkProgressStatus","actualProgress","expectedProgress","ProgressBar","GoalTag","goalDescription","goalTitle","goaltTitle","getElementsByClassName","classList","enterDelay","enterNextDelay","avatar","Avatar","goals","updateSelectedGoals","flexWrap","goalSkeletonStyle","GoalsSelector","Skeleton","animation","LocationConfirmation","GrowthWindowComponent","cropLegendObj","Early","Mid","class","isCashCropMonth","fullMonth","setMonthVals","cropDataLegendLabel_Early","cropDataLegendLabel_Mid","borderLeft","v","SoilDrainageTimeline","Timeline","drainageClass","fullLength","TimelineItem","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","PhotoComponent","imageData","imagesApiUrl","imageList","setImageList","getImages","LuminousGallery","querySelectorAll","arrowNavigation","caption","trigger","dataset","data-caption","getPhotoCredits","fileName","baseName","fileNameArray","last","secondLast","year","path","separator","windowsSeparator","slice","lastIndexOf","DictionaryContent","dictData","groupedCats","setGroupedCats","allCats","useMemo","dict","property","groupedCategories","reduce","acc","cur","RenderCats","innerCat","index2","InformationSheetDictionary","dictionary","setDictionary","borderTopLeftRadius","borderTopRightRadius","InformationSheetContent","overflowX","whiteSpace","WebkitOverflowScrolling","getMonthDayString","GrowthWindow","FiberManualRecord","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","top","left","AccordionSummaryIcon","borderBottom","expanded","MuiAccordion","MuiAccordionSummary","MuiAccordionDetails","CropDetailsModalComponent","modalData","setModalData","Taxonomy","Environmental","Growth","Planting","Termination","Weeds","handleModalClose","setModalOpen","disableBackdropClick","disableEscapeKeyDown","Close","PhotoLibrary","download","PictureAsPdf","FormatListBulleted","localStorage","setItem","JSON","stringify","Print","CropLegendModal","legendModal","handleLegendModal","CloseRounded","CropTableComponent","inactiveCropData","activeCropData","useSnackbar","enqueueSnackbar","closeSnackbar","setSelectedCropsIds","selectedBtns","showGrowthWindow","setShowGrowthWindow","setLegendModal","selectedIds","getCardFlex","indexKey","TableCell","cropId","btnId","cropArray","contains","textContent","querySelector","innerHTML","removeIndex","selectedCropsCopy","addCropToBasket","handleModalOpen","activeCropPresent","inactiveCropPresent","RenderActiveInactiveCropData","TableRow","TableContainer","Table","stickyHeader","TableHead","colSpan","borderRight","sortPreference","sortAllCrops","ArrowDownward","ArrowUpward","startIcon","AddCircle","ele","bottom","zIndex","wordBreak","TableBody","CropDetailsModal","CircularProgress","card","media","MyCoverCropCardsComponent","Card","CardMedia","image","CardContent","textDecoration","CardActionArea","lightBorder","borderBottomLeftRadius","lightBG","RenderRelevantData","filterKey","RenderSeedingData","GetAverageGoalRating","goalRating","MyCoverCropComparisonComponent","sidebarDefinitionsz7","sidebarDefs","setSidebarDefs","sidebarDefinitionsz6","sidebarDefinitionsz5","removeCrop","getTooltipData","keyName","exactObject","find","Variable","Description","borderTop","Cancel","titleAccess","MyCoverCropList","comparisonView","redirectToSpeciesSelector","TopBar","selectedCropNames","pdf","csv","count","filename","getBinaryContent","err","file","binary","generateAsync","downloadAllPDF","Add","itemNo","CropCalendarViewComponent","currentYear","Date","getFullYear","fetchRecordsIfUnavailable","Promise","resolve","reject","records","lineHeight","growthMonth","checkIfGrowthMonth","growthMonthSeparator","paddingTop","getAverageGoalRating","CoverCropType","forwardRef","setSelected","setSidebarFilterOptions","sidebarFilterOptions","useImperativeHandle","resetFilters","filters","values","removed","chipVals","added","handleClick","EnvironmentalTolerance","dangerouslySetInnerHTML","__html","alternateName","newVal","newValue","Seeds","SeedingMethods","handleChange","selections","Checkbox","Duration","RenderChips","subFilter","filtername","filtered","roots","handleChipClick","borderBottomRightRadius","TerminationMethods","setProps","Beneficials","Persistence","DiseaseAndNonWeedPests","Roots","areCommonElements","arr1","arr2","arr2Set","Set","some","has","SoilConditions","setActiveCropData","setInactiveCropData","filterSidebarItems","newActives","newInactives","_","listItemRoot","formControlLabel","listSubHeaderRoot","nested","subNested","CropSidebarComponent","isListView","cropFiltersOpen","setCropFiltersOpen","showFilters","setShowFilters","cashCropOpen","setCashCropOpen","goalsOpen","setGoalsOpen","dateRangeOpen","setDateRangeOpen","setDateRange","sidebarFilters","setSidebarFilters","sidebarFiltersOpen","setSidebarFiltersOpen","seedingMethodRef","useRef","beneficialsRef","coverCropTypeRef","diseaseRef","growthRef","rootsRef","seedsRef","weedsRef","terminationRef","envTolRef","setResetFilters","firstUpdate","current","crop_data","nonZeroKeys2","nonZeroKeys","growthArray","arrayKeys","booleanKeys","totalActiveFilters","keyObject","intersection","inactives","filtersSelected","setFiltersSelected","resetAllFilters","filterData","filterTitles","cropDataChanged","growthWindowVisible","setGrowthWindowVisible","keysArray","keysArrChanged","toISOString","setGrowthWindow","sortEnvTolCropData","listRoot","subheader","ListSubheader","ListItem","button","ListItemText","ExpandLess","Collapse","unmountOnExit","disablePadding","oldIndex","newIndex","newGoalArr","newGoals","arrayMove","renderList","renderItem","readOnly","CalendarTodayRounded","range","newSidebarFiltersOpen","toggleSidebarFilterItems","CropSelector","setSortAllGoals","setSortPreference","disabledIds","starDisabledIds","coverCropName","setCoverCropName","setIsListView","setComparisonView","setCropData","setDisabledIdsTextNodes","setCropDataChanged","allIds","disabledIdssTextNodes","innerText","updatedCropData","crops1","crops2","Compare","CalendarToday","onInput","crops","CropSidebar","objDataArr","objData","sortBy","activeObjKeys","orderBy","CropTable","sortAllGoals","activeCropDataCopy","inactiveCropDataCopy","updatedInactives","CropCalendarView","RouteNotFound","App","calcHeight","setCalcHeight","parentDocHeight","getBoundingClientRect","headerHeight","logo","loadRelevantRoute","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","WrappedComponent","Footer","monthYear","setMonthYear","fetchDate","auth","username","password","lastCommitDate","commit","committer","lastCommitDateFormatted","getMonth","tableStyles","td","About","SeedingRateCalculator","MixMaker","ExplorerCardView","CoverCropExplorer","anchorEl","setAnchorEl","setCropName","crop_name","scientific_name","startAdornment","inputMode","placeholder","print","aria-controls","currentTarget","KeyboardArrowUp","KeyboardArrowDown","Menu","keepMounted","InformationSheet","getItem","parse","BasicCrop","setCrop","createRef","getElementsByTagName","removeItem","closeModal","_id","$oid","Synonyms","Origin","__id","Drought","Flood","Heat","Salinity","Shade","HelpComponent","frameBorder","FeedbackComponent","createMuiTheme","secondary","overrides","MuiTooltip","tooltip","MuiChip","colorSecondary","colorPrimary","WrapperWithFooter","maxSnack","ReactDOM","render","URL","process","origin","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.69264251.chunk.js","sourcesContent":["const Reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_PROGRESS\": {\n      if (action.data.type === \"INCREMENT\") {\n        return { ...state, progress: state.progress + 1 };\n      } else if (action.data.type === \"DECREMENT\") {\n        return { ...state, progress: state.progress - 1 };\n      } else if (action.data.type === \"HOME\") {\n        return { ...state, progress: 0 };\n      } else {\n        break;\n      }\n    }\n    case \"WEATHER_DATA_RESET\": {\n      return { ...state, weatherDataReset: action.data.weatherDataReset };\n    }\n    case \"CHANGE_ADDRESS_BY_TYPING\": {\n      if (action.data.markers) {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn,\n          markers: action.data.markers,\n        };\n      } else {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn,\n        };\n      }\n    }\n    case \"UPDATE_ZONE_TEXT\": {\n      return {\n        ...state,\n        zoneText: action.data.zoneText,\n        zone: action.data.zone,\n        selectedGoals: [],\n      };\n    }\n    case \"UPDATE_ZONE\": {\n      return {\n        ...state,\n        zoneText: action.data.zoneText,\n        zone: action.data.zone,\n      };\n    }\n    case \"CHANGE_ADDRESS\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified,\n      };\n    }\n    case \"UPDATE_MARKER\": {\n      return {\n        ...state,\n        markers: action.data.markers,\n      };\n    }\n    case \"UPDATE_MARKER_COPY\": {\n      return {\n        ...state,\n        markersCopy: action.data.markersCopy,\n      };\n    }\n    case \"UPDATE_ADDRESS_ON_MAP_CLICK\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n    case \"TOGGLE_ADDRESS_CHANGE_BUTTON\": {\n      return {\n        ...state,\n        showAddressChangeBtn: action.data.showAddressChangeBtn,\n      };\n    }\n    case \"ADD_GOALS\": {\n      return {\n        ...state,\n        allGoals: action.data,\n      };\n    }\n\n    case \"SNACK\": {\n      return {\n        ...state,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"UPDATE_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data,\n      };\n    }\n    case \"ADD_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: [...state.selectedGoals, action.data],\n      };\n    }\n\n    case \"DRAG_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data.selectedGoals,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"PULL_CROP_DATA\": {\n      return {\n        ...state,\n        cropData: action.data,\n      };\n    }\n\n    case \"SELECTED_CROPS_MODIFIER\": {\n      return {\n        ...state,\n        selectedCrops: action.data.selectedCrops,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage,\n      };\n    }\n\n    case \"ACTIVATE_MY_COVER_CROP_LIST_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag:\n          action.data.speciesSelectorActivationFlag,\n      };\n    }\n\n    case \"ACTIVATE_SPECIES_SELECTOR_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag:\n          action.data.speciesSelectorActivationFlag,\n      };\n    }\n\n    case \"UPDATE_WEATHER_CONDITIONS\": {\n      return {\n        ...state,\n        weatherData: action.data.weatherData,\n      };\n    }\n\n    case \"UPDATE_FROST_FREE_DAYS\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          frostFreeDays: action.data.frostFreeDays,\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_FROST_DATES\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averageFrost: action.data.averageFrost,\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            thisMonth: action.data.thisMonth,\n          },\n        },\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_ANNUAL\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            annual: action.data.annual,\n          },\n        },\n      };\n    }\n\n    case \"SET_AJAX_IN_PROGRESS\": {\n      return {\n        ...state,\n        ajaxInProgress: action.data,\n      };\n    }\n    case \"TOGGLE_CROP_DETAIL_MODAL\": {\n      return {\n        ...state,\n        cropDetailModal: action.data.cropDetailModal,\n      };\n    }\n\n    case \"TOGGLE_SOIL_LOADER\": {\n      return {\n        ...state,\n        isSoilDataLoading: action.data.isSoilDataLoading,\n      };\n    }\n    case \"UPDATE_SELCTED_CHECKBOXES\": {\n      return {\n        ...state,\n        selectedCheckboxes: action.data.selectedCheckboxes,\n      };\n    }\n\n    case \"UPDATE_SELECTED_STARS\": {\n      return {\n        ...state,\n        selectedStars: action.data.selectedStars,\n      };\n    }\n\n    case \"UPDATE_SOIL_DATA\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Map_Unit_Name: action.data.Map_Unit_Name,\n          Drainage_Class: action.data.Drainage_Class,\n          Flooding_Frequency: action.data.Flooding_Frequency,\n          Ponding_Frequency: action.data.Ponding_Frequency,\n          for: action.data.for,\n        },\n      };\n    }\n    case \"UPDATE_SOIL_DATA_ORIGINAL\": {\n      return {\n        ...state,\n        soilDataOriginal: {\n          ...state.soilDataOriginal,\n          Map_Unit_Name: action.data.Map_Unit_Name,\n          Drainage_Class: action.data.Drainage_Class,\n          Flooding_Frequency: action.data.Flooding_Frequency,\n          Ponding_Frequency: action.data.Ponding_Frequency,\n          for: action.data.for,\n        },\n      };\n    }\n\n    case \"UPDATE_DATE_RANGE\": {\n      return {\n        ...state,\n        cashCropData: {\n          ...state.cashCropData,\n          dateRange: {\n            startDate: action.data.startDate,\n            endDate: action.data.endDate,\n          },\n        },\n      };\n    }\n\n    case \"UPDATE_ADDRESS_SEARCH_PREFERENCE\": {\n      return {\n        ...state,\n        addressSearchPreference: action.data.addressSearchPreference,\n      };\n    }\n\n    case \"UPDATE_ZIP_CODE\": {\n      return {\n        ...state,\n        zipCode: action.data.zipCode,\n      };\n    }\n\n    case \"UPDATE_FILTER_STRING\": {\n      return {\n        ...state,\n        filterString: action.data.filterString,\n      };\n    }\n    case \"UPDATE_FILTER_KEYS\": {\n      return {\n        ...state,\n        filterKeys: action.data.filterKeys,\n      };\n    }\n    case \"UPDATE_ACTIVE_GROWTH_PERIOD\": {\n      return {\n        ...state,\n        activeGrowthPeriod: action.data.activeGrowthPeriod,\n      };\n    }\n\n    case \"UPDATE_DRAINAGE_CLASS\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Drainage_Class: action.data,\n        },\n      };\n    }\n\n    case \"UPDATE_FLOODING_FREQUENCY\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Flooding_Frequency: action.data,\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","import React, { createContext, useReducer } from \"react\";\nimport Reducer from \"./Reducer\";\nimport crops from \"../shared/crop-data.json\";\nimport z7crops from \"../shared/json/zone7/crop-data.json\";\nimport z6crops from \"../shared/json/zone6/crop-data.json\";\nimport z5crops from \"../shared/json/zone5/crop-data.json\";\nimport moment from \"moment-timezone\";\nimport img from \"../shared/image-dictionary.json\";\nimport desc from \"../shared/crop-descriptions.json\";\n\nimport z7Dict from \"../shared/json/zone7/data-dictionary.json\";\nimport z6Dict from \"../shared/json/zone6/data-dictionary.json\";\nimport z5Dict from \"../shared/json/zone6/data-dictionary.json\";\n\nconst cropDataFormatter = (cropData = [{}]) => {\n  let tjson = cropData.filter((crop) => {\n    if (\n      crop[\"Zone Decision\"] !== \"Include\" ||\n      crop[\"Cover Crop Name\"] === \"__Open Discussion Row\"\n    ) {\n      return false;\n    } else return true;\n  });\n\n  return tjson.map((crop) => {\n    // val[\"fields\"] = val;\n\n    // remove open discussion row and zone decision !== include\n\n    let val = { fields: crop };\n\n    val = monthStringBuilder(val);\n\n    val.fields[\"Image Data\"] = img[val.fields[\"Cover Crop Name\"]]\n      ? img[val.fields[\"Cover Crop Name\"]]\n      : {\n          \"Cover Crop\": val.fields[\"Cover Crop Name\"],\n          \"Key Thumbnail\": null,\n          Notes: null,\n          Directory: null,\n        };\n\n    val.fields[\"Crop Description\"] = desc[val.fields[\"Cover Crop Name\"]]\n      ? desc[val.fields[\"Cover Crop Name\"]]\n      : loremText();\n\n    val.fields[\"Discourages Nematodes\"] = val.fields[\"Disoucrages Nematodes\"];\n    val.fields[\"id\"] = val.fields[\"__id\"];\n    val.fields[\"Drought\"] = val.fields[\"Drought Tolerance\"];\n    val.fields[\"Flood\"] = val.fields[\"Flood Tolerance\"];\n    val.fields[\"Heat\"] = val.fields[\"Heat Tolerance\"];\n    val.fields[\"Low Fertility\"] = val.fields[\"Low Fertility Tolerance\"];\n    val.fields[\"Salinity\"] = val.fields[\"Salinity Tolerance\"];\n    val.fields[\"Shade\"] = val.fields[\"Shade Tolerance\"];\n    val.fields[\"Tillage at Vegetative\"] =\n      val.fields[\"Tillage Termination at Vegetative\"];\n    val.fields[\"Tillage at Flowering\"] =\n      val.fields[\"Tillage Termination at Flowering\"];\n\n    val.fields[\"Freezing at Flowering\"] =\n      val.fields[\"Freezing Termination at Flowering\"];\n\n    val.fields[\"Freezing at Vegetative\"] =\n      val.fields[\"Freezing Termination at Vegetative\"];\n    val.fields[\"Chemical at Vegetative\"] =\n      val.fields[\"Chemical Termination at Vegetative\"];\n    val.fields[\"Chemical at Flowering\"] =\n      val.fields[\"Chemical Termination at Flowering\"];\n\n    val.fields[\"Mow at Flowering\"] = val.fields[\"Mow Termination at Flowering\"];\n    val.fields[\"Roller Crimp at Flowering\"] =\n      val.fields[\"Roller Crimp Tolerance at Flowering\"];\n\n    if (!val.fields[\"Frost Seeding\"]) {\n      val.fields[\"Frost Seeding\"] = false;\n    } else {\n      val.fields[\"Frost Seeding\"] = true;\n    }\n    if (!val.fields[\"Can Aerial Seed\"]) {\n      val.fields[\"Aerial Seeding\"] = false;\n    } else {\n      val.fields[\"Aerial Seeding\"] = true;\n    }\n\n    //TODO: not using anymore\n    if (!val.fields[\"Pollinator Habitat\"]) {\n      val.fields[\"Pollinator Habitat\"] = 0;\n    }\n    if (!val.fields[\"Pollinator Food\"]) {\n      val.fields[\"Pollinator Food\"] = 0;\n    }\n\n    // not mutating\n\n    // delete val.fields[\"Drought Tolerance\"];\n    // delete val.fields[\"Flood Tolerance\"];\n    // delete val.fields[\"Heat Tolerance\"];\n    // delete val.fields[\"Low Fertility Tolerance\"];\n    // delete val.fields[\"Salinity Tolerance\"];\n    // delete val.fields[\"Shade Tolerance\"];\n\n    return val;\n  });\n};\n\nconst monthStringBuilder = (vals) => {\n  const params = [\n    \"Reliable Establishment/Growth\",\n    \"Temperature/Moisture Risk to Establishment\",\n    \"Late Fall/Winter Planting Date\",\n    \"Early Fall/ Winter Seeding Rate\",\n    \"Second Reliable Establishment/Growth\",\n    \"Standard Fall/Winter Seeding Rate Date\",\n    \"Standard Spring Seeding Rate Date\",\n  ];\n  let val = vals;\n  params.forEach((param) => {\n    if (val.fields[param + \" Start\"]) {\n      const valStart = moment(val.fields[param + \" Start\"], \"YYYY-MM-DD\");\n      const valEnd = val.fields[param + \" End\"]\n        ? moment(val.fields[param + \" End\"], \"YYYY-MM-DD\")\n        : moment(val.fields[param + \" Stop\"], \"YYYY-MM-DD\");\n      let str = \"\";\n      let valuesArray = [];\n      while (valStart.isSameOrBefore(valEnd)) {\n        let val = [];\n        if (valStart.get(\"D\") <= 15 && valStart.get(\"D\") >= 1) {\n          str = \"Early\";\n        } else {\n          str = \"Mid\";\n        }\n\n        valuesArray.push([`${valStart.format(\"MMMM\")}, ${str}`]);\n        valStart.add(\"15\", \"days\");\n      }\n\n      valuesArray.forEach((key) => {\n        const prev = val.fields[key] || [];\n        prev.push(param);\n        val.fields[key] = prev;\n      });\n    }\n  });\n  return val;\n};\n\nconst loremText = () => {\n  return \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. At imperdiet dui accumsan sit. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Porta non pulvinar neque laoreet suspendisse interdum. Malesuada fames ac turpis egestas integer eget. Eget arcu dictum varius duis at consectetur lorem donec massa. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Enim praesent elementum facilisis leo vel fringilla est ullamcorper. Neque viverra justo nec ultrices dui sapien eget mi proin. Egestas maecenas pharetra convallis posuere. Tortor condimentum lacinia quis vel eros donec. Ultricies integer quis auctor elit sed. Nisi scelerisque eu ultrices vitae auctor eu. Eget felis eget nunc lobortis mattis aliquam faucibus. Mattis aliquam faucibus purus in massa tempor nec.\";\n};\nconst z7AllCrops = z7crops;\nconst z6AllCrops = z6crops;\nconst z5AllCrops = z5crops;\n\nconst z7CropData = cropDataFormatter(z7AllCrops);\nconst z6CropData = cropDataFormatter(z6AllCrops);\nconst z5CropData = cropDataFormatter(z5AllCrops);\n\n// console.log(tjs);\n\n// const StoreContext = createContext();\n\nconst initialState = {\n  // progress: 2,\n  progress: 0,\n  // progress: 5,\n  address: \"\",\n  addressSearchPreference: \"address\",\n  zip: 0,\n  zipCode: 0,\n  markersCopy: [],\n  markers: [[39.0255, -76.924]],\n  // markers: [\n  //   [42.43893008983507, -71.6220123358556],\n  //   [42.437694893227764, -71.6226775236913],\n  //   [42.4370772857936, -71.62188358982289],\n  //   [42.43746131164466, -71.62125058849537],\n  //   [42.438162053781895, -71.621003825266],\n  //   [42.4387044307342, -71.62120767315113],\n  // ],\n  showAddressChangeBtn: false,\n  selectedCheckboxes: [],\n  selectedStars: {},\n  allGoals: [],\n  cropData: z7CropData,\n  selectedCrops: [],\n  selectedGoals: [],\n  // selectedGoals: [\n  //   \"Improve Soil Organic Matter\",\n  //   \"Increase Soil Aggregation\",\n  //   \"Lasting Residue\",\n  // ],\n  zoom: 13,\n  addressVerified: false,\n  snackOpen: false,\n  snackVertical: \"bottom\",\n  snackHorizontal: \"right\",\n  snackMessage: \"\",\n  modalOpen: false,\n  modalSize: \"lg\", //sm,md,lg,fluid\n  modalBody: {},\n  addToCartBtnText: \"add to list\",\n  zoneText: \"Zone 7\",\n  zone: 7,\n  soilData: {\n    Map_Unit_Name: \"\",\n    Drainage_Class: [],\n    Flooding_Frequency: \"\",\n    Ponding_Frequency: \"\",\n  },\n  soilDataOriginal: {\n    Map_Unit_Name: \"\",\n    Drainage_Class: [],\n    Flooding_Frequency: \"\",\n    Ponding_Frequency: \"\",\n  },\n\n  weatherData: {\n    averageFrost: {\n      firstFrostDate: {\n        month: \"October\",\n        day: 21,\n      },\n      lastFrostDate: {\n        month: \"April\",\n        day: 20,\n      },\n    },\n    averagePrecipitation: {\n      thisMonth: 3.6, //inches\n      annual: 43, //inches\n    },\n    frostFreeDays: 173,\n  },\n  myCoverCropActivationFlag: false,\n  speciesSelectorActivationFlag: true,\n  ajaxInProgress: false,\n  cropDetailModal: false,\n  greenbarExpanded: false,\n  isSoilDataLoading: false,\n  cashCropData: {\n    name: \"\",\n    dateRange: {\n      startDate: \"\",\n      endDate: \"\",\n    },\n  },\n  zone7CropData: z7CropData,\n  zone6CropData: z6CropData,\n  zone5CropData: z5CropData,\n  zone7Dictionary: z7Dict,\n  zone6Dictionary: z6Dict,\n  zone5Dictionary: z5Dict,\n  weatherDataReset: false,\n  filterString: \"\",\n  filterKeys: [],\n  activeGrowthPeriod: [],\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\nexport const Context = createContext(initialState);\nexport default Store;\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n\nconst DateComponent = () => {\n  const [date, setDate] = useState(null);\n\n  useEffect(() => {\n    setDate(setTodaysDate);\n  }, []);\n\n  return date;\n};\n\nconst setTodaysDate = () => {\n  let now = moment();\n  let tzdata = moment.tz.guess();\n  return now.tz(tzdata).format(\"LL\");\n};\n\nexport default DateComponent;\n","import React, { useContext, Fragment, Suspense } from \"react\";\nimport {\n  withStyles,\n  Button,\n  Switch,\n  Grid,\n  Typography,\n  Tooltip,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { Info, MonetizationOn } from \"@material-ui/icons\";\nconst JSZip = require(\"jszip\");\nconst JSZipUtils = require(\"jszip-utils\");\nconst saveAs = require(\"save-as\");\n\nexport const airtableAPIURL = {\n  Z5: \"https://api.airtable.com/v0/appASoBfIRYbb8V7o\",\n  Z7: \"https://api.airtable.com/v0/app2q3UaKHXutMQyt\",\n  Z6: \"https://api.airtable.com/v0/appC47111lCOTaMYe\",\n};\n\nexport const ReferenceTooltip = (props) => {\n  let sourceURL = props.url;\n  let sourceName = props.source;\n  let type = props.type || \"link\";\n  let content = props.content || \"\";\n  let hasLink = props.hasLink ? true : false;\n  return type === \"link\" ? (\n    <Tooltip\n      title={\n        <div>\n          Source{\": \"}\n          <a href={sourceURL} target=\"_blank\" rel=\"noreferrer\">\n            {sourceName}\n          </a>\n        </div>\n      }\n      interactive\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  ) : hasLink ? (\n    <Tooltip title={props.title} placement=\"right\" interactive arrow>\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  ) : (\n    <Tooltip\n      title={\n        <div>\n          <Typography variant=\"body1\">{content}</Typography>\n        </div>\n      }\n      placement=\"right\"\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  );\n};\n\nexport const DataTooltip = ({\n  data,\n  interactive = true,\n  placement = \"top-start\",\n}) => {\n  return (\n    <Tooltip\n      title={<div className=\"text-center\">{data}</div>}\n      interactive={interactive}\n      placement={placement}\n      arrow\n    >\n      <Info fontSize=\"small\" />\n    </Tooltip>\n  );\n};\n\nexport const locationIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 14 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7 0C3.13 0 0 3.13 0 7C0 12.25 7 20 7 20C7 20 14 12.25 14 7C14 3.13 10.87 0 7 0ZM7 9.5C5.62 9.5 4.5 8.38 4.5 7C4.5 5.62 5.62 4.5 7 4.5C8.38 4.5 9.5 5.62 9.5 7C9.5 8.38 8.38 9.5 7 9.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\nexport const zoneIcon = (w, h) => {\n  return (\n    <svg\n      height={h}\n      width={w}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM6 15.5C4.62 15.5 3.5 14.38 3.5 13C3.5 11.62 4.62 10.5 6 10.5C7.38 10.5 8.5 11.62 8.5 13C8.5 14.38 7.38 15.5 6 15.5ZM7.5 6C7.5 4.62 8.62 3.5 10 3.5C11.38 3.5 12.5 4.62 12.5 6C12.5 7.38 11.38 8.5 10 8.5C8.62 8.5 7.5 7.38 7.5 6ZM14 15.5C12.62 15.5 11.5 14.38 11.5 13C11.5 11.62 12.62 10.5 14 10.5C15.38 10.5 16.5 11.62 16.5 13C16.5 14.38 15.38 15.5 14 15.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport const cloudIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 24 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M19.35 6.04C18.67 2.59 15.64 0 12 0C9.11 0 6.6 1.64 5.35 4.04C2.34 4.36 0 6.91 0 10C0 13.31 2.69 16 6 16H19C21.76 16 24 13.76 24 11C24 8.36 21.95 6.22 19.35 6.04Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n\nexport const GreenSwitch = withStyles({\n  thumb: {\n    backgroundColor: \"rgb(138, 188, 98, 1)\",\n  },\n  track: {\n    backgroundColor: \"rgb(138, 188, 98, 0.5)\",\n  },\n  input: {\n    \"&:checked\": {\n      color: \"rgb(240, 247, 235)\",\n    },\n  },\n  // \"&:checked\": {\n  //   color: \"rgb(240, 247, 235)\",\n  // },\n})(Switch);\n\nexport const GetMonthString = (month) => {\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return months[month].toUpperCase();\n};\n\nexport const UnderConstructionText = () => {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Grid item xs={3}>\n        <Typography variant=\"h3\">Under Construction</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport const abbrRegion = (input, to) => {\n  var states = [\n    [\"Alabama\", \"AL\"],\n    [\"Alaska\", \"AK\"],\n    [\"American Samoa\", \"AS\"],\n    [\"Arizona\", \"AZ\"],\n    [\"Arkansas\", \"AR\"],\n    [\"Armed Forces Americas\", \"AA\"],\n    [\"Armed Forces Europe\", \"AE\"],\n    [\"Armed Forces Pacific\", \"AP\"],\n    [\"California\", \"CA\"],\n    [\"Colorado\", \"CO\"],\n    [\"Connecticut\", \"CT\"],\n    [\"Delaware\", \"DE\"],\n    [\"District Of Columbia\", \"DC\"],\n    [\"Florida\", \"FL\"],\n    [\"Georgia\", \"GA\"],\n    [\"Guam\", \"GU\"],\n    [\"Hawaii\", \"HI\"],\n    [\"Idaho\", \"ID\"],\n    [\"Illinois\", \"IL\"],\n    [\"Indiana\", \"IN\"],\n    [\"Iowa\", \"IA\"],\n    [\"Kansas\", \"KS\"],\n    [\"Kentucky\", \"KY\"],\n    [\"Louisiana\", \"LA\"],\n    [\"Maine\", \"ME\"],\n    [\"Marshall Islands\", \"MH\"],\n    [\"Maryland\", \"MD\"],\n    [\"Massachusetts\", \"MA\"],\n    [\"Michigan\", \"MI\"],\n    [\"Minnesota\", \"MN\"],\n    [\"Mississippi\", \"MS\"],\n    [\"Missouri\", \"MO\"],\n    [\"Montana\", \"MT\"],\n    [\"Nebraska\", \"NE\"],\n    [\"Nevada\", \"NV\"],\n    [\"New Hampshire\", \"NH\"],\n    [\"New Jersey\", \"NJ\"],\n    [\"New Mexico\", \"NM\"],\n    [\"New York\", \"NY\"],\n    [\"North Carolina\", \"NC\"],\n    [\"North Dakota\", \"ND\"],\n    [\"Northern Mariana Islands\", \"NP\"],\n    [\"Ohio\", \"OH\"],\n    [\"Oklahoma\", \"OK\"],\n    [\"Oregon\", \"OR\"],\n    [\"Pennsylvania\", \"PA\"],\n    [\"Puerto Rico\", \"PR\"],\n    [\"Rhode Island\", \"RI\"],\n    [\"South Carolina\", \"SC\"],\n    [\"South Dakota\", \"SD\"],\n    [\"Tennessee\", \"TN\"],\n    [\"Texas\", \"TX\"],\n    [\"US Virgin Islands\", \"VI\"],\n    [\"Utah\", \"UT\"],\n    [\"Vermont\", \"VT\"],\n    [\"Virginia\", \"VA\"],\n    [\"Washington\", \"WA\"],\n    [\"West Virginia\", \"WV\"],\n    [\"Wisconsin\", \"WI\"],\n    [\"Wyoming\", \"WY\"],\n  ];\n\n  // So happy that Canada and the US have distinct abbreviations\n  var provinces = [\n    [\"Alberta\", \"AB\"],\n    [\"British Columbia\", \"BC\"],\n    [\"Manitoba\", \"MB\"],\n    [\"New Brunswick\", \"NB\"],\n    [\"Newfoundland\", \"NF\"],\n    [\"Northwest Territory\", \"NT\"],\n    [\"Nova Scotia\", \"NS\"],\n    [\"Nunavut\", \"NU\"],\n    [\"Ontario\", \"ON\"],\n    [\"Prince Edward Island\", \"PE\"],\n    [\"Quebec\", \"QC\"],\n    [\"Saskatchewan\", \"SK\"],\n    [\"Yukon\", \"YT\"],\n  ];\n\n  var regions = states.concat(provinces);\n\n  var i; // Reusable loop variable\n  if (to === \"abbr\") {\n    input = input.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][0] === input) {\n        return regions[i][1];\n      }\n    }\n  } else if (to === \"name\") {\n    input = input.toUpperCase();\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][1] === input) {\n        return regions[i][0];\n      }\n    }\n  }\n};\n\nexport const CustomStyles = () => {\n  return {\n    progressColor: \"#2b7b79\",\n    darkGreen: \"#598444\",\n    defaultFontSize: \"1em\",\n    lighterGreen: \"#598445\",\n    lightGreen: \"#add08f\",\n    greenishWhite: \"#f0f7eb\",\n    primaryProgressBtnColor: \"#49a8ab\",\n    primaryProgressBtnBorderColor: \"#62b8bc\",\n    secondaryProgressBtnColor: \"#e3f2f4\",\n    secondaryProgressBtnBorderColor: \"#e3f2f4\",\n    fullyRoundedRadius: \"200px\",\n    semiRoundedRadius: \"10px\",\n    _10pxRoundedRadius: \"10px\",\n    _5pxRoundedRadius: \"5px\",\n    mildlyRoundedRadius: \"5px\",\n    nonRoundedRadius: \"0px\",\n    defaultButtonPadding: \"10px 20px 10px 20px\",\n  };\n};\n\nexport const LightButton = withStyles({\n  root: {\n    backgroundColor: CustomStyles().secondaryProgressBtnBorderColor,\n    borderRadius: CustomStyles().fullyRoundedRadius,\n    color: \"#000\",\n    padding: CustomStyles().defaultButtonPadding,\n    borderColor: CustomStyles().secondaryProgressBtnBorderColor,\n    \"&:hover\": {\n      borderColor: CustomStyles().primaryProgressBtnBorderColor,\n      backgroundColor: CustomStyles().primaryProgressBtnColor,\n      color: \"#fff\",\n    },\n  },\n})(Button);\n\nexport const getRating = (ratng) => {\n  let rating = parseInt(ratng);\n\n  switch (rating) {\n    case 0:\n      return (\n        <div className=\"rating-0\">\n          <span></span>\n        </div>\n      );\n    case 1:\n      return (\n        <div className=\"rating-1\">\n          <span></span>\n        </div>\n      );\n    case 2:\n      return (\n        <div className=\"rating-2\">\n          <span></span>\n        </div>\n      );\n    case 3:\n      return (\n        <div className=\"rating-3\">\n          <span></span>\n        </div>\n      );\n    case 4:\n      return (\n        <div className=\"rating-4\">\n          <span></span>\n        </div>\n      );\n    case 5:\n      return (\n        <div className=\"rating\">\n          <span></span>\n        </div>\n      );\n    default:\n      return (\n        <div className=\"rating-0\">\n          <span></span>\n        </div>\n      );\n  }\n};\n\nexport const allMonths = moment().localeData().monthsShort();\nexport const cropDataURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))\";\n\n// const cropDataURL =\n// \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Zone Decision},'Exclude',''))\";\n\nexport const allGoalsURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crop%20Goals?maxRecords=300\";\n\nexport const greenBarExpansionPanelHeight = {\n  large: \"70vh\",\n  medium: \"600px\",\n  small: \"600px\",\n};\n\nexport const trimString = (stringFull, size) => {\n  if (!isNaN(size)) {\n    let postStr = \"...\";\n\n    return (\n      stringFull.substring(0, size) + `${stringFull.length > 25 ? \"...\" : \"\"}`\n    );\n  } else return stringFull;\n};\n\nexport const sidebarFilters = [\n  {\n    category: \"Taxonomy\",\n    data: [\n      {\n        Variable: \"Cover Crop Group\",\n        Description: \"Common name for categories of cover crops\",\n        \"Data Source\": [\"ZTL Team\"],\n        Values: \"[Legume, Grass, Brassica, Broadleaf]\",\n        Category: \"Taxonomy\",\n        \"Cover Crop Goals\": [\"rech7T61et0rrvgOc\", \"recxUYrkzT3lNknLR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Family Common Name\",\n        Description: \"Family common name\",\n        \"Data Source\": [\"ZTL Team\"],\n        \"USDA.PLANTS Term\": \"Family.Common.Name\",\n        Values:\n          \"[Grass family, Nonlegumes, Legumes, Mustard family, Aster family, Pea family, Buckwheat family, Flax family, Borage family]\",\n        Category: \"Taxonomy\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Environmental Tolerances\",\n    data: [\n      {\n        Variable: \"Shade Tolerance\",\n        Description: \"Ability to tolerate shade relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Shade.Tolerance\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flood Tolerance\",\n        Description: \"Ability to tolerate flood relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Heat Tolerance\",\n        Description: \"Ability to tolerate heat relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Winter Survival\",\n        Description: \"Likelihood of cover crop survival over the winter.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          \"Can we indicate winter kill temp for diff maturity? or comments?\",\n        Values: \"[Never, Seldom, Expected]\",\n        Category: \"Environmental Tolerances\",\n        \"Cover Crop Goals\": [\"reccbLXAvA9tM3TT1\", \"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Salinity Tolerance\",\n        Description:\n          \"Ability to tolerate high salinity relative to other species. Scale 1-5\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Salinity.Tolerance\",\n        \"Team Notes\":\n          \"[Low = tolerant to 2.1-4.0 dS/m; Medium = tolerant to 4.1-8.0 dS/m; High = tolerant to greater than 8.0 dS/m.]\",\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Low Fertility Tolerance\",\n        Description:\n          \"Ability to tolerate poor fertility in general (an amalgamation of low pH soils and/or below-optimum soil tests for N, P, and/or K, sandy soil)\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Fertiility Requirement\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drought Tolerance\",\n        Description: \"Ability to tolerate drought relative to other species\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Droght Tolerance\",\n        \"Team Notes\": 'Each team must define the \"low medium high\" VALUES',\n        Values:\n          \"1 star = none/intolerant, 2 = low, 3 = low-med (cutoff), 4 stars = high-med, 5 = high/tolerant\",\n        Category: \"Environmental Tolerances\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Basic Agronomics\",\n    data: [\n      {\n        Variable: \"Shape & Orientation\",\n        Description: \"Growth form or predominant shape of an individual plant.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Erect, Semi-Erect, Climbing, Prostrate, Columnar, Decumbent]\",\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recJcA1wm7sdCHzQl\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Hessian Fly-Free Date\",\n        Description:\n          \"Hessian Fly-Free Date, after which wheat and other plants can be planted to avoid cereal rust.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"Yes, No\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"check box\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Dry Matter Min (lbs/A/y)\",\n        Description:\n          \"Amount of dry biomass the cover crop produces in a year, lbs/A.\\n\\nImpacts the following cover cropping goals: improve soil organic matter, lasting residue, prevent soil eriosion, promote water quality, nitrogen fixation, nitrogen scavanging, and weed suppression.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<1000, 1000<Med<3000, High>3000]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Duration\",\n        Description:\n          \"Some plants have different Durations depending on environment or location, so a plant can have more than one value. Multiple values are reported in order of increasing longevity in nature.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Duration\",\n        Values: \"[Annual, Perennial, Short-lived Perennial, Biennial]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Active Growth Period\",\n        Description: \"Season in which plants have active growth.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"Active Growth Period\",\n        Values: \"[Spring, Summer, Winter, Fall]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\",\n        Description:\n          \"Amount of N a legume species contains, lbs/A. This is combined nitrogen fixed plus nitrogen taken up from the soil.\\n\\nImpacts the following cover cropping goals: nitrogen source\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<50; 50<Med<100; High>100]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\"rech7T61et0rrvgOc\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"C to N Ratio\",\n        Description:\n          \"C:N ratio is the percentage of organic carbon divided by the percentage of total nitrogen in organic material. Note that the C:N ratio of grasses (warm season annuals) is lower at the vegetative state then at the flowering state.\\n\\n1 to 5 rating. General guide for cover crops at flowering, but there are exceptions:\\n1 - Legumes\\n2 - Succulent broadleafs\\n3 - Woodier broadleafs (sunflowers, annual rye grass)\\n4 - Cereal grains\\n5 - Warm season annuals\\n\\n\\nImpacts following goals: Improve soil organic matter, lasting residue, prevent soil erosion, weed suppression\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"CN Ratio\",\n        \"Team Notes\":\n          \"Team must define the values, range, and options. Proposed Baseline: [0<Low<12; 12<Medium<20; High>20]\",\n        Values:\n          \"1 - Legumes, 2 - Succulent broadleafs, 3 - Woodier broadleafs (sunflowers, annual rye grass), 4 - Cereal grains, 5 - Warm season annuals\",\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Zone Use\",\n        Description:\n          \"Is it commonly used in the zone or only beginning to gain adoption?\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"USDA.PLANTS Term\": \"????\",\n        Values: \"[Common, Emerging]\",\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Dry Matter Max (lbs/A/y)\",\n        Description:\n          \"Amount of dry biomass the cover crop produces in a year, lbs/A.\\n\\nImpacts the following cover cropping goals: improve soil organic matter, lasting residue, prevent soil eriosion, promote water quality, nitrogen fixation, nitrogen scavanging, and weed suppression.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<1000, 1000<Med<3000, High>3000]',\n        Category: \"Basic Agronomics\",\n        \"Cover Crop Goals\": [\n          \"recVx4qMQys9OMoZX\",\n          \"recW6SQB6uiWF7hsX\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n          \"recJcA1wm7sdCHzQl\",\n          \"recIBqnwWp5SEwyuI\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\",\n        Description:\n          \"Amount of N a legume species contains, lbs/A. This is combined nitrogen fixed plus nitrogen taken up from the soil.\\n\\nImpacts the following cover cropping goals: nitrogen source\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        \"Team Notes\":\n          'Each team must define the \"low medium high\" VALUES. Proposed Baseline: [0<Low<50; 50<Med<100; High>100]',\n        Category: \"Basic Agronomics\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Soil Conditions\",\n    data: [\n      {\n        Variable: \"Soil Drainage\",\n        Description:\n          \"Level of soil drainage needed for acceptable cover crop growth given regular rainfall.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"[Very poorly drained, Poorly drained, Somewhat poorly drained, Moderately well drained, Well drained, Excessively drained, Saturated muck, Well drained muck]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Soil Textures\",\n        Description:\n          \"Ability to establish and grow in soil with coarse, medium, and fine textured soils given regular rainfall.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Adapted to X Soils\",\n        Values: \"[Coarse, Medium, Fine]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Minimum Tolerant Soil pH\",\n        Description:\n          \"The minimum soil pH, of the top 12 inches of soil, within the plant’s known geographical range.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"pH Min\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"decimal (1.0)\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Maximum Tolerant Soil pH\",\n        Description:\n          \"The maximum soil pH, of the top 12 inches of soil, within the plant’s known geographical range.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"pH Max\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"decimal (1.0)\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Soil Moisture Use\",\n        Description:\n          \"Ability to use (i.e., remove) available soil moisture relative to other species.\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Moisture Use\",\n        Values: \"[Low, Medium, High]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flooding/Ponding Tolerance\",\n        Description: \"Cover crop survival under flooding/ponding conditions\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Poor, Moderate, Good]\",\n        Category: \"Soil Conditions\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Loosens Topsoil\",\n        Description:\n          \"Relative ability of cover crop to loosen topsoil (0 to 6 inches).\\n\\nImpacts the following cover cropping goals: reduces topsoil compaction\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recPxyjmEenzGEvZj\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Supports Mycorrhizae\",\n        Description:\n          \"Relative activity of mycorrhizal fungi in the rhizosphere.\\n\\nImpacts the following goals: Increase soil aggregation, promote water quality\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recu78NjkZLLgegx0\", \"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Loosens Subsurface Soil\",\n        Description:\n          \"Relative ability of cover crop to break up subsurface soil compaction (6 to 12 inches). Including management induced compaction.\\n\\nImpacts the following cover cropping goals: reduces subsurface soil compaction\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Soil Conditions\",\n        \"Cover Crop Goals\": [\"recFKZEppkGOSk8qE\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Growth\",\n    data: [\n      {\n        Variable: \"Innoculant Type (Legumes Only)\",\n        Description:\n          \"Type of inoculant that needs to applied to legume seed to promote N fixation\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"[none, alfalfa, berseem clover, cowpea, crimson clover, lespedeza, lima bean, pea/vetch, pea/vetch/lentil, peanut, red clover, soybean, sweetclover, white clover]\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Flowering Trigger\",\n        Description:\n          \"Details about when flowering occurs, triggers for flowering\",\n        Values:\n          \"[Requires vernalization (spring), Intermediate day (11-13 hrs), Long day (>14 hrs), Based on plant size]\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Early Spring Growth\",\n        Description:\n          \"Speed in the spring at which the cover crop breaks dormancy and grows. No star means that early spring growth is not applicable.\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"rech7T61et0rrvgOc\",\n          \"recxUYrkzT3lNknLR\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Root Depth\",\n        Description:\n          \"How deeply rooted is this cover crop? Consider the relative ability of the roots to go deeper the previous crop was (where residual nitrogen lies).\\n\\nImpacts the following goals: Promote water quality, reduces topsoil compaction, nitrogen scavenging\",\n        Values: \"[Shallow, Medium, Deep]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recNAKTF4fwK3CONR\",\n          \"recFKZEppkGOSk8qE\",\n          \"recPxyjmEenzGEvZj\",\n          \"recxUYrkzT3lNknLR\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Establishes Quickly\",\n        Description:\n          \"Speed at which the cover crop establishes once planted.\\n1 - slow to establish\\n5 - quick to establish\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recRlVowCsSXpRXN2\",\n          \"recNAKTF4fwK3CONR\",\n          \"recxUYrkzT3lNknLR\",\n          \"recDewfUdf5fLOAVC\",\n          \"recJcA1wm7sdCHzQl\",\n        ],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Root Architecture\",\n        Description:\n          \"What is the primary root structure: tap or fibrous?\\n\\nImpacts the following goals:  Increase soil aggregation, prevent soil erosion, proote water quality, reduces subsurface soil compaction, reduces topsoil compaction\",\n        Values: \"[Tap, Fibrous]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\n          \"recu78NjkZLLgegx0\",\n          \"recRlVowCsSXpRXN2\",\n          \"reccbLXAvA9tM3TT1\",\n          \"recNAKTF4fwK3CONR\",\n          \"recFKZEppkGOSk8qE\",\n          \"recPxyjmEenzGEvZj\",\n        ],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select many\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Growing Window\",\n        Description:\n          \"Relative length of time that is suitable for growing and terminating a cover crop. For example, cover crops with a very short growing window may be suitable for growing and terminating during a very short period (e.g., 6-8 weeks) between cash crops.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"[Very Short, Short, Medium, Long, Very Long]\",\n        Category: \"Growth\",\n        \"Cover Crop Goals\": [\"recNAKTF4fwK3CONR\"],\n        \"Filter Field\": true,\n        Type: \"string\",\n        \"Units/Details\": \"select one\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Ease of Establishment\",\n        Description:\n          \"Degree of difficulty in getting cover crop established.\\n1 - difficult to establish\\n5 - very easy to establish\",\n        Category: \"Growth\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Planting\",\n    data: [\n      {\n        Variable: \"Min Germination Temp (F)\",\n        Description:\n          \"Minimum temperature required for cover crop seed to germinate within 5 days.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"F\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Seeds per Pound\",\n        Description: \"Average number of cover crop seeds in a pound of seed\",\n        \"Data Source\": [\"USDA PLANTS\"],\n        \"USDA.PLANTS Term\": \"Seeds.per.Pound\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rounded to the nearest tens\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drilled Depth Min\",\n        Description: \"Depth to plant seed in fractions of an inch\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"inches, down to quarter, half, and eigths\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Broadcast Frost Seeding\",\n        Description: \"Cover crop can be seeded when ground is frozen.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values: \"Yes, No\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"checkbox\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Seed Price per Pound\",\n        Description:\n          \"Relative cost of seed per pound. One star is least expensive, 3 stars is most expensive. Rating is relative.\",\n        \"Data Source\": [\"Green Cover Crop Seed\"],\n        \"Team Notes\":\n          \"Each team should recommend a data source for pricing, e.g. green cover crop seed\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-3\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Can Aerial Seed?\",\n        Description: \"Can aerial seeding methods be used for this crop?\",\n        \"Data Source\": [\"Paul Salon\"],\n        Values: \"Yes, No\",\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"boolean\",\n        \"Units/Details\": \"checkbox\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Base Seeding Rate Min (lbs/A)\",\n        Description:\n          \"The base seeding rate (PLS) represents optimal planting time, optimal termination time, optimal planting method (drilled/cultivate and cultipack), conventional tillage method, no planting green, and no interseeding in a monoculture context. Lower limit (min) is approx 30% ground coverage.\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Base Seeding Rate Max (lbs/A)\",\n        Description:\n          \"The base seeding rate (PLS)  represents optimal planting time, optimal termination time, optimal planting method (drilled/cultivate and cultipack), conventional tillage method, no planting green, and no interseeding in a monoculture context. Upper limit (Max) is for intensive activity such as weed suppression or forage.\",\n        \"Data Source\": [\"Zone Team\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"lbs/Acre/year\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Drilled Depth Max\",\n        Description: \"Depth to plant seed in fractions of an inch\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Planting\",\n        \"Filter Field\": true,\n        Type: \"float\",\n        \"Units/Details\": \"inches, down to quarter, half, and eigths\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Termination\",\n    data: [\n      {\n        Variable: \"Tillage Termination at Vegetative\",\n        Description:\n          \"Likelihood that tillage (i.e. destructive mechanical operations that disturb the soil, as with disking or rotovating) will successfully terminate the cover crop while it is in the vegetative stage. The expert group premises that all cover crops can be terminated with tillage, but that 1 represents hard to terminate with tillage and requires an aggressive technique, where as 5 is easy to terminate with tillage and requires the least aggressive technique. The techniques are categoriezed as follows.\\n\\n5-light disk\\n4-heavy disk\\n3-chisel plow\\n2-rototill\\n1-moldboard\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"5-light disk 4-heavy disk 3-chisel plow 2-rototill 1-moldboard\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Planting Green\",\n        Description:\n          \"Planting cash crop then immediately terminating cover crop (prior to cash crop emergence). Note: any crop can be planted green with the correct equipment; this column represents general considerations.\",\n        \"Data Source\": [\"Paul Salon\"],\n        Values: \"Yes, No\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Freezing Termination at Flowering\",\n        Description:\n          \"Likelihood that conditions below 32 degrees F will successfully terminate the cover crop while it is in the flowering stage.\",\n        Values:\n          \"5. Likely to terminate in mild freeze 1. Requires a very significant freeze to terminate\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Chemical Termination at Vegetative\",\n        Description:\n          \"Likelihood that herbicide application will successfully terminate the cover crop while it is in the vegetative stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Tillage Termination at Flowering\",\n        Description:\n          \"Likelihood that tillage (i.e. destructive mechanical operations that disturb the soil, as with disking or rotovating) will successfully terminate the cover crop while it is in the flowering stage. The expert group premises that all cover crops can be terminated with tillage, but that 1 represents hard to terminate with tillage and requires an aggressive technique, where as 5 is easy to terminate with tillage and requires the least aggressive technique. The techniques are categoriezed as follows.\\n\\n5-light disk\\n4-heavy disk\\n3-chisel plow\\n2-rototill\\n1-moldboard\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Values:\n          \"5-light disk 4-heavy disk 3-chisel plow 2-rototill 1-moldboard\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Freezing Termination at Vegetative\",\n        Description:\n          \"Likelihood that conditions below 32 degrees F will successfully terminate the cover crop while it is in the vegetative stage.\",\n        Values:\n          \"5 likely to terminate in mild freeze  1 requires a very significant freeze to terminate\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Chemical Termination at Flowering\",\n        Description:\n          \"Likelihood that herbicide application will successfully terminate the cover crop while it is in the flowering stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Mow Termination at Flowering\",\n        Description:\n          \"Likelihood that mowing (i.e. destructive mechanical operations that do not disturb the soil) will successfully terminate the cover crop while it is in the flowering stage.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Roller Crimp Termination at Flowering\",\n        Description:\n          \"Likelihood that roller-crimping will successfully terminate the cover crop while it is in the flowering stage. Termination is most successful at higher crop densities (3+ tons of drymatter per acre).\\n\\nRoller crimping is usually used in tandem with chemical termination outside of organic systems.\",\n        Category: \"Termination\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Grazers & Pollinators\",\n    data: [\n      {\n        Variable: \"Pollinator Habitat\",\n        Description:\n          \"Extent to which the cover crop can serve as habitat for pollinators.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Grazers & Pollinators\",\n        \"Cover Crop Goals\": [\"recdbvSJ6Q8iT2haq\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Pollinator Food\",\n        Description:\n          \"Extent to which the cover crop provides food (i.e. leaves, nectar, pollen) for pollinators.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Grazers & Pollinators\",\n        \"Cover Crop Goals\": [\"recdbvSJ6Q8iT2haq\"],\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Weeds\",\n    data: [\n      {\n        Variable: \"Volunteer Establishment\",\n        Description:\n          \"Risk of previous cover crop volunteering in current cash crop due to management (i.e. the previous cover crop setting seed that became part of the soil weed seedbank). 1=rarely volunteers, 5=frequently volunteers\\nShorter-term issue, relies more on management. May be positive if you want it to re-seed. Impact depends on crop rotation.\",\n        Category: \"Weeds\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Persistence\",\n        Description:\n          'Indicator of likelihood that the cover crop seed, once planted, will sit in the soil for an extended time then germinate at an inopportune moment (e.g., during cash crop growth). 1= rarely has hard seed, 5=hard seed is a frequent concern. \\n\"Hardseedness\" in MW tool \"Risk is in the CC seedbag\", long-term issue.',\n        Category: \"Weeds\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n  {\n    category: \"Disease & Non-Weed Pests\",\n    data: [\n      {\n        Variable: \"Discourages Nematodes\",\n        Description:\n          \"Ability of a cover crop to decrease nematode populations (e.g., trap crop). 1=poor choice for discouraging nematodes, 5=excellent choice\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Nematodes\",\n        Description:\n          \"Ability of a cover crop to increase nematode populations. \\n1=does not support nematode populations, 5=excellent for increasing nematode populations\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Discourages Pest Insects\",\n        Description:\n          \"Ability of a cover crop to decrease insect pest populations. 1=poor choice for discouraging insect pests, 5=excellent choice\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Pest Insects\",\n        Description:\n          \"Ability of a cover crop to increase insect pest populations. 1=does not promote insect populations, 5=frequently promotes pest insects\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Suppresses Cash Crop Disease\",\n        Description:\n          \"Relative ranking of cover crop's impact in suppressing disease in the following cash crop. \\n1 - does not suppress disease in following cash crop.\\n5 - very likely to suppress disease in following cash crop.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n      {\n        Variable: \"Promotes Cash Crop Disease\",\n        Description:\n          \"Relative ranking of cover crop's impact on promoting disease in the following cash crop. \\n1 - does not promote disease in following cash crop.\\n5 - very likely to promote disease in following cash crop.\",\n        \"Data Source\": [\"MCCC Species Tool\"],\n        Category: \"Disease & Non-Weed Pests\",\n        \"Filter Field\": true,\n        Type: \"integer\",\n        \"Units/Details\": \"rating 1-5\",\n        \"Information Sheet\": true,\n      },\n    ],\n  },\n];\n\nexport const downloadAllPDF = (selectedCropNames) => {\n  let zip = new JSZip();\n  let count = 0;\n  var zipFilename = \"Information-Sheets.zip\";\n  selectedCropNames.forEach((val) => {\n    let filename = val.name + \".pdf\";\n    JSZipUtils.getBinaryContent(val.pdf, (err, data) => {\n      if (err) {\n        throw err; // or handle the error\n      }\n      zip.file(filename, data, { binary: true });\n      count++;\n      if (count === selectedCropNames.length) {\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\n          saveAs.saveAs(content, zipFilename);\n        });\n      }\n    });\n  });\n};\nexport const downloadAllCSV = (selectedCropNames) => {\n  let zip = new JSZip();\n  let count = 0;\n  var zipFilename = \"Information-Sheets-CSV.zip\";\n  selectedCropNames.forEach((val) => {\n    let filename = val.name + \".csv\";\n    JSZipUtils.getBinaryContent(val.csv, (err, data) => {\n      if (err) {\n        throw err; // or handle the error\n      }\n      zip.file(filename, data, { binary: true });\n      count++;\n      if (count === selectedCropNames.length) {\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\n          saveAs.saveAs(content, zipFilename);\n        });\n      }\n    });\n  });\n};\n\nexport const RenderSeedPriceIcons = ({ val }) => {\n  switch (parseInt(val)) {\n    case 1:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n    case 2:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\", opacity: 0.2 }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n    case 3:\n      return (\n        <Fragment>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n          <span style={{ color: \"#35999b\" }}>\n            <MonetizationOn />\n          </span>\n        </Fragment>\n      );\n  }\n};\n\nexport const CropImage = ({\n  present = true,\n  src = \"\",\n  alt = \"\",\n  view = \"\",\n  className = \"\",\n  onClick = () => {},\n}) => {\n  const placeholder = \"//placehold.it/100x100\";\n  const lazyHeight =\n    view === \"calendar\" ? 50 : view === \"information-sheet\" ? 250 : 100;\n\n  let imageStyle = {};\n\n  switch (view) {\n    case \"calendar\":\n      imageStyle = {\n        width: \"50px\",\n        height: \"50px\",\n        maxWidth: \"50px\",\n        maxHeight: \"50px\",\n      };\n      break;\n    case \"information-sheet\":\n      imageStyle = {\n        width: \"255px\",\n        height: \"250px\",\n      };\n      break;\n    case \"photo-grid\":\n      imageStyle = {\n        width: \"200px\",\n        height: \"200px\",\n      };\n      break;\n    default:\n      imageStyle = {\n        width: \"100px\",\n        height: \"100px\",\n        maxWidth: \"100px\",\n        maxHeight: \"100px\",\n      };\n  }\n\n  return (\n    <Suspense\n      fallback={\n        <img\n          height={lazyHeight}\n          width={lazyHeight}\n          src={placeholder}\n          alt={\"Placeholder image\"}\n        />\n      }\n    >\n      <img\n        className={className ? className : `image-for-${alt}`}\n        onClick={onClick}\n        src={present ? src : placeholder}\n        alt={present ? alt : \"Placeholder\"}\n        style={imageStyle}\n      />\n    </Suspense>\n  );\n};\n\nexport const flipCoverCropName = (cropName = \"\") => {\n  let cropNames = cropName.split(\",\");\n\n  if (cropNames.length > 1) {\n    return `${cropNames[1]}, ${cropNames[0]}`;\n  } else {\n    return cropName;\n  }\n};\n","import React, { useEffect, useContext, useState, Fragment } from \"react\";\nimport {\n  Map,\n  TileLayer,\n  Marker,\n  Popup,\n  Polygon,\n  FeatureGroup,\n  Circle,\n  LayersControl,\n  LayerGroup,\n} from \"react-leaflet\";\n// import { EditControl } from \"react-leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Context } from \"../../store/Store\";\nimport axios from \"axios\";\nimport StateAbbreviations from \"./StateAbbreviations\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { Button } from \"@material-ui/core\";\n\nimport \"../../styles/map.scss\";\nimport { CustomStyles } from \"../../shared/constants\";\n\n// work around broken icons when using webpack, see https://github.com/PaulLeCam/react-leaflet/issues/255\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n});\n\nconst editableLayers = new L.FeatureGroup();\nconst drawPluginOptions = {\n  position: \"topright\",\n  draw: {\n    polygon: {\n      allowIntersection: false, // Restricts shapes to simple polygons\n      drawError: {\n        color: \"#e1e100\", // Color the shape will turn when intersects\n        message: \"<strong>Oh snap!<strong> you can't draw that!\", // Message that will show when intersect\n      },\n      shapeOptions: {\n        color: \"#97009c\",\n      },\n    },\n    // disable toolbar item by setting it to false\n    polyline: false,\n    circle: false, // Turns off this drawing tool\n    rectangle: false,\n    marker: true,\n    circlemarker: false,\n  },\n  edit: {\n    featureGroup: editableLayers, //REQUIRED!!\n    remove: true,\n  },\n};\nlet drawControl = new L.Control.Draw(drawPluginOptions);\n\nconst MapComponent = ({ width, height, minzoom, maxzoom }) => {\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    console.log(\"---Map.js---\");\n    var container = L.DomUtil.get(\"map\");\n    if (container != null) {\n      container._leaflet_id = null;\n    }\n    // get default marker\n\n    let center = state.markers[0];\n    // console.log(center)\n    let map;\n    let polygon = null;\n    let myMarker = null;\n    // Create the map\n    if (state.progress === 2) {\n      map = L.map(\"map\", { zoomControl: false }).setView(center, maxzoom - 4);\n    } else {\n      map = L.map(\"map\").setView(center, maxzoom - 4);\n    }\n    // Initialise the FeatureGroup to store editable layers\n    // map.eachLayer((layer) => {\n    //   map.removeLayer(layer);\n    //   // console.log(layer);\n    // });\n    // Set up the ESRI layer\n\n    // L.tileLayer(\"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\", {\n    //   maxZoom: 20,\n    //   subdomains: [\"mt0\", \"mt1\", \"mt2\", \"mt3\"],\n    //   attribution: \"Google\",\n    // }).addTo(map);\n\n    var mapLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    var wholink =\n      \"i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\";\n\n    L.tileLayer(\n      \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n      {\n        attribution: \"&copy; \" + mapLink + \", \" + wholink,\n        maxZoom: 18,\n      }\n    ).addTo(map);\n\n    // L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    //   attribution:\n    //     'Data © <a href=\"http://osm.org/copyright\">OpenStreetMap</a>',\n    //   maxZoom: 18,\n    // }).addTo(map);\n\n    // add a default marker in the given location\n    // let marker = L.marker(center).addTo(map);\n\n    L.EditToolbar.Delete.include({\n      enable: function () {\n        this.options.featureGroup.clearLayers();\n      },\n    });\n    // click\n\n    // .addLayer(editableLayers);\n    map.addLayer(editableLayers);\n\n    if (state.markers.length > 1) {\n      // window.polygon.remove()\n      // L.polygon().remove();\n      if (polygon === null) {\n        polygon = L.polygon(state.markers, {\n          color: CustomStyles().lighterGreen,\n        }).addTo(map);\n        polygon.bindPopup(\"Your Field\");\n      } else {\n        map.removeLayer(polygon);\n      }\n      // zoom the map to the polygon\n      map.fitBounds(polygon.getBounds());\n    }\n\n    if (state.markers.length === 1) {\n      // show marker\n      if (myMarker === null) {\n        myMarker = L.marker(state.markers[0], {\n          title: state.address,\n          draggable: true,\n          riseOnHover: true,\n        })\n          .addTo(map)\n          .on(\"dragend \", function (e) {\n            console.log(e);\n            var coord = String(myMarker.getLatLng()).split(\",\");\n            console.log(\"Got new coords via Map.js drag event\");\n            var lat = coord[0].split(\"(\");\n            // console.log(\"Latitude\", lat[1]);\n            var lng = coord[1].split(\")\");\n            // console.log(\"Longitude\", lng[0]);\n            myMarker.bindPopup(\"Moved to: \" + lat[1] + \", \" + lng[0] + \".\");\n            dispatch({\n              type: \"UPDATE_MARKER\",\n              data: {\n                markers: [[parseFloat(lat[1]), parseFloat(lng[0])]],\n              },\n            });\n            dispatch({\n              type: \"SNACK\",\n              data: {\n                snackOpen: true,\n                snackMessage: \"Marker Saved\",\n              },\n            });\n          });\n      } else {\n        map.removeLayer(myMarker);\n      }\n    }\n    // else {\n    //   // show polygon with selected area\n    // }\n\n    // Initialise the draw control and pass it the FeatureGroup of editable layers\n\n    if (state.progress !== 2) {\n      map.addControl(drawControl);\n      // var editableLayers = new L.FeatureGroup();\n      // map.addLayer(editableLayers);\n      map.on(\"draw:created\", function (e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        if (type === \"marker\") {\n          layer.bindPopup(\"A popup!\");\n        }\n\n        // console.log(layer._latlngs);\n        let markers = [];\n        if (layer._latlng) {\n          // single marker\n          queryGEORevAPI(layer._latlng.lat, layer._latlng.lng);\n          L.marker([layer._latlng.lat, layer._latlng.lng]).addTo(\n            editableLayers\n          );\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: [[layer._latlng.lat, layer._latlng.lng]],\n            },\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your point has been saved.\",\n            },\n          });\n        } else {\n          // editableLayers.remove().addLayer(layer);\n          // editableLayers.layer\n          editableLayers.addLayer(layer);\n          layer._latlngs.map((latlngArr, index) => {\n            latlngArr.map((latlng, index) => {\n              // console.log(latlng);\n              markers.push([latlng.lat, latlng.lng]);\n            });\n          });\n          queryGEORevAPI(markers[0][0], markers[0][1]);\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: markers,\n            },\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your field has been saved.\",\n            },\n          });\n        }\n        // console.log(polygon.getBounds().getCenter());\n      });\n    }\n  }, [state.markers]);\n\n  const addMarker = (e) => {\n    const { markers } = state;\n\n    markers.pop();\n    markers.push(e.latlng);\n\n    // console.log(markers);\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[markers[0].lat, markers[0].lng]],\n      },\n    });\n    // this.setState({ markers });\n    // console.log(markers[0]);\n    let lon = markers[0].lng;\n    let lat = markers[0].lat;\n    queryGEORevAPI(lat, lon);\n  };\n  const queryGEORevAPI = async (lat, lon) => {\n    const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;\n\n    await axios\n      .get(url)\n      .then((response) => {\n        let data = response.data;\n        let fullAddress = data.display_name;\n        console.log(\"geoorev\", data);\n        // set county, state (abbr) and zip to global state\n        let county = data.address.county;\n        let state = data.address.state;\n        let zip = data.address.postcode;\n        let stateAbbreviation = new StateAbbreviations();\n        let abbr = stateAbbreviation.getAbbreviation(state);\n        // console.log(\"Abbreviation: \", abbr);\n        // console.log(data.address.postcode);\n        // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n        setZoneState(data.address.postcode);\n        return fullAddress;\n      })\n      .then((fullAddress) => {\n        dispatch({\n          type: \"CHANGE_ADDRESS\",\n          data: { address: `${fullAddress}`, addressVerified: true },\n        });\n      })\n      .catch((error) => {\n        console.error(\"nominatim error code\", error.response.code);\n      });\n  };\n\n  const setZoneState = async (zip) => {\n    // console.log(zip);\n    await axios\n      .get(`https://phzmapi.org/${zip}.json`)\n      .then((response) => {\n        let data = response.data;\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n            // alert(zone);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then((zone) => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: \"Zone 2 & 3\",\n                zone: 2,\n              },\n            });\n          } else {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: `Zone ${zone}`,\n                zone: parseInt(zone),\n              },\n            });\n          }\n        } else {\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: \"Zone 7\",\n              zone: 7,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(\"phzmapi.org error: \", error);\n\n        // TODO:: Try anyther zip ?\n        // recursive zip trials\n        // if (error.response.status === 404) {\n        //   dispatch({\n        //     type: \"SNACK\",\n        //     data: {\n        //       snackOpen: true,\n        //       snackMessage: `Zone not found for ZIP: ${zip}`\n        //     }\n        //   });\n        // }\n      });\n  };\n  return <div id=\"map\" style={{ height: height, width: width }}></div>;\n};\n\nexport default MapComponent;\n","import React, { useContext } from \"react\";\nimport { FormGroup, FormControlLabel } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\nimport axios from \"axios\";\n// import MapComponent from \"./Map\";\n// import { UpdateLatLong } from \"../../shared/Functions\";\nimport { GreenSwitch } from \"../../shared/constants\";\n\nconst LiveLocationComponent = () => {\n  const [state, dispatch] = useContext(Context);\n  const [lstate, setlState] = React.useState({\n    checkedL: false,\n  });\n\n  const handleLocationToggle = (name) => (event) => {\n    if (event.target.checked) {\n      let options = {\n        enableHighAccuracy: false,\n        maximumAge: 60000,\n        timeout: 45000,\n      };\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          function (position) {\n            let lat = position.coords.latitude;\n            let long = position.coords.longitude;\n            if (isUndefined(lat) || isUndefined(long)) return false;\n            else {\n              const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${long}&format=json`;\n              axios\n                .get(url)\n                .then((response) => {\n                  let data = response.data;\n                  let fullAddress = data.display_name;\n                  // console.log(data);\n                  // const { markers } = state;\n                  // markers.pop();\n                  let mrkrArr = [];\n                  mrkrArr[0] = lat;\n                  mrkrArr[1] = long;\n                  // alert(mrkrArr);\n                  // console.log(\"mrkrArr: \" + mrkrArr.lat);\n                  // markers.push(mrkrArr);\n                  // console.log(e.latlng);\n                  dispatch({\n                    type: \"UPDATE_MARKER\",\n                    data: {\n                      markers: [mrkrArr],\n                    },\n                  });\n                  // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n                  if (data.address.postcode !== undefined) {\n                    setZoneState(data.address.postcode);\n                  }\n\n                  console.log(\"live location zip: \", data);\n                  return fullAddress;\n                })\n                .then((fullAddress) => {\n                  dispatch({\n                    type: \"CHANGE_ADDRESS\",\n                    data: { address: `${fullAddress}`, addressVerified: true },\n                  });\n\n                  // markers.push(mrkrArr);\n                  // console.log(e.latlng);\n                  // dispatch({\n                  //   type: \"UPDATE_MARKER\",\n                  //   data: {\n                  //     markers: markers\n                  //   }\n                  // });\n                })\n                .then(() => {});\n            }\n          },\n          function () {\n            alert(\"Oops! An error occurred. Please use the map\");\n          },\n          options\n        );\n      }\n    }\n\n    setlState({ [name]: event.target.checked });\n  };\n\n  const setZoneState = async (zip) => {\n    await axios\n      .get(`//covercrop.tools/zone.php?zip=${zip}`)\n      .then((response) => {\n        let data = response.data;\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n            // alert(zone);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then((zone) => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: \"Zone 2 & 3\",\n                zone: 2,\n              },\n            });\n          } else {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: `Zone ${zone}`,\n                zone: parseInt(zone),\n              },\n            });\n          }\n        } else {\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: \"Zone 7\",\n              zone: 7,\n            },\n          });\n        }\n      });\n  };\n\n  const isUndefined = (val) => {\n    if (val === undefined || val === \"\" || val === null) return true;\n    else return false;\n  };\n\n  return (\n    <div>\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <GreenSwitch\n              checked={state.checkedL}\n              onChange={handleLocationToggle(\"checkedL\")}\n              value=\"checkedL\"\n            />\n          }\n          label={lstate.checkedL ? \"Yes\" : \"No\"}\n        />\n      </FormGroup>\n      <small style={{ display: \"block\", marginTop: \"-10px\" }}>\n        Use Current Location\n      </small>\n    </div>\n  );\n};\n\nexport default LiveLocationComponent;\n","// TODO: Autocomplete feature is not yet implemented\n// WHY: https://operations.osmfoundation.org/policies/nominatim/ Doesn't allow the API usage for building auto-complete\n// Lancaster, Pennsylvania as default for PASA\n\nimport React, {\n  useState,\n  useEffect,\n  useContext,\n  useRef,\n  Fragment,\n} from \"react\";\n\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormControl,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  Link,\n} from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\nimport { Search } from \"@material-ui/icons\";\nimport Axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst AutoCompleteComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(false);\n  const [address, setAddress] = useState(state.address);\n  const [suggestedAddress, setSuggestedAddress] = useState({});\n\n  useEffect(() => {\n    if (state.zip === 0) {\n      setAddress(state.address);\n    } else setAddress(state.zip);\n  }, [state.address, state.addressSearchPreference, state.zip]);\n  const setBoundingBoxAndAddress = (val) => {\n    // set the polygon bounding box? OR lat long and address, then close the modal\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[parseFloat(val.lat), parseFloat(val.lon)]],\n      },\n    });\n    dispatch({\n      type: \"CHANGE_ADDRESS\",\n      data: {\n        address: val.display_name,\n        addressVerified: true,\n      },\n    });\n\n    handleClose();\n    console.log(val);\n  };\n\n  const handleToggle = () => {\n    // check if zip or address\n\n    if (state.addressSearchPreference === \"zip\") {\n      if (isNaN(address)) {\n        alert(\"Invalid ZIP Code\");\n      } else {\n        checkAddresses(address).then((data) => {\n          console.log(data[0]);\n          // let dataFloat = data[0].boundingbox.map((val) => {\n          //   return parseFloat(val);\n          // });\n\n          dispatch({\n            type: \"UPDATE_ZIP_CODE\",\n            data: {\n              zip: parseInt(address),\n            },\n          });\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: [[parseFloat(data[0].lat), parseFloat(data[0].lon)]],\n            },\n          });\n        });\n        // Axios.get(`https://geocode.xyz/${address}?geoit=json`).then(\n        //   (response) => {\n        //     console.log(response);\n        //     let val = response.data.standard;\n\n        //     // dispatch({\n        //     //   type: \"UPDATE_MARKER\",\n        //     //   data: {\n        //     //     markers: [[parseFloat(val.latt), parseFloat(val.lont)]],\n        //     //   },\n        //     // });\n        //   }\n        // );\n      }\n    } else {\n      if (address.length > 3) {\n        handleOpen();\n        // setOpen(true);\n        checkAddresses(address).then((addressData) => {\n          setSuggestedAddress(addressData);\n          console.log(addressData);\n        });\n      }\n    }\n  };\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleChange = (event) => {\n    setAddress(event.target.value);\n  };\n\n  const checkAddresses = async (query) => {\n    let url = `https://nominatim.openstreetmap.org/search?q=${query}&country=United%20States&format=json`;\n    let response = await fetch(url);\n    response = response.json();\n    return response;\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        BackdropComponent={Backdrop}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Suggested Locations</h2>\n            <div>\n              <p variant=\"body2\">\n                Server suggested {suggestedAddress.length}{\" \"}\n                {suggestedAddress.length > 1 ? \"addresses\" : \"address\"}\n              </p>\n              {suggestedAddress.length > 0 ? (\n                <ul>\n                  {suggestedAddress.map((val, index) => (\n                    <li key={index}>\n                      {\" \"}\n                      <Link\n                        component=\"button\"\n                        variant=\"body2\"\n                        color=\"secondary\"\n                        onClick={() => setBoundingBoxAndAddress(val)}\n                      >\n                        {val.display_name}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                \"\"\n              )}\n\n              <em>\n                If you don't find your location here, try typing a bit more\n              </em>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n      <FormControl\n        variant=\"filled\"\n        style={{ width: \"100%\" }}\n        className={classes.formControl}\n      >\n        <TextField\n          label=\"LOCATION\"\n          value={address}\n          onChange={handleChange}\n          fullWidth\n          aria-haspopup={true}\n          variant=\"filled\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton onClick={handleToggle}>\n                  <Search />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        ></TextField>\n      </FormControl>\n    </Fragment>\n  );\n};\n\nexport default AutoCompleteComponent;\n","import React, { useState, useContext } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { GreenSwitch } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\n\nconst LocationToggleComponent = (props) => {\n  const [defaultValue, setDefaultValue] = useState(\"address\");\n  const [state, dispatch] = useContext(Context);\n  const children = [\n    <ToggleButton\n      key={1}\n      value=\"address\"\n      selected={state.addressSearchPreference === \"address\" ? true : false}\n    >\n      Address\n    </ToggleButton>,\n    <ToggleButton\n      key={2}\n      value=\"zip\"\n      selected={state.addressSearchPreference === \"zip\" ? true : false}\n    >\n      ZIP Code\n    </ToggleButton>,\n  ];\n\n  const handleChange = (e, value) => {\n    setDefaultValue(value);\n    dispatch({\n      type: \"UPDATE_ADDRESS_SEARCH_PREFERENCE\",\n      data: {\n        addressSearchPreference: value,\n      },\n    });\n  };\n  return (\n    <ToggleButtonGroup\n      size=\"small\"\n      value={defaultValue}\n      exclusive\n      onChange={handleChange}\n      color=\"secondary\"\n    >\n      {children}\n    </ToggleButtonGroup>\n  );\n};\n\nexport default LocationToggleComponent;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polygon,\n  TileLayer,\n  Tooltip,\n} from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Search from \"react-leaflet-search\";\n\nimport { Context } from \"../../store/Store\";\n\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"../../styles/map.scss\";\nconst { BaseLayer, Overlay } = LayersControl;\n\nconst MapContext = ({ width, height, minzoom, maxzoom, from }) => {\n  const [state, dispatch] = useContext(Context);\n  const [show, setShow] = useState(true);\n  const [mapCenter, setMapCenter] = useState([]);\n  const [isPoly, setIsPoly] = useState(false);\n  const [showEditControl, setShowEditControl] = useState(true);\n\n  useEffect(() => {\n    if (from === \"location\") {\n      setShowEditControl(true);\n    } else {\n      setShowEditControl(false);\n    }\n  }, [from]);\n\n  const clearMarkers = () => {\n    // default the markers\n  };\n  const updateGlobalMarkers = (markersArray, type = \"\") => {\n    // console.log(markersArray);\n    if (type === \"marker\") {\n      setIsPoly(false);\n    } else {\n      setIsPoly(true);\n    }\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: markersArray,\n      },\n    });\n    dispatch({\n      type: \"SNACK\",\n      data: {\n        snackOpen: true,\n        snackMessage: \"Your location has been saved.\",\n      },\n    });\n  };\n\n  useEffect(() => {\n    setMapCenter(state.markers[0]);\n    if (state.markers.length === 1) {\n      // marker\n      setIsPoly(false);\n    } else {\n      // polygon\n      setIsPoly(true);\n    }\n  }, [state.markers]);\n  const [editableFG, setEditableFG] = useState(null);\n  const onFeatureGroupReady = (reactFGref) => {\n    // store the featureGroup ref for future access to content\n    setEditableFG(reactFGref);\n  };\n  const onCreated = (e) => {\n    const drawnItems = editableFG.leafletElement._layers;\n    // if the number of layers is bigger than 1 then delete the first\n    // console.log(drawnItems);\n    if (Object.keys(drawnItems).length > 1) {\n      Object.keys(drawnItems).forEach((layerid, index) => {\n        if (index > 0) return;\n\n        const layer = drawnItems[layerid];\n        editableFG.leafletElement.removeLayer(layer);\n        setShow(false);\n      });\n      if (e.layerType === \"marker\") {\n        const lat = e.layer._latlng.lat;\n        const lng = e.layer._latlng.lng;\n        // console.log([lat, lng]);\n        updateGlobalMarkers([[lat, lng]], \"marker\");\n      } else if (e.layerType === \"polygon\") {\n        const latlngs = e.layer._latlngs;\n        let markers = [];\n        latlngs.map((latlngArr, index) => {\n          latlngArr.map((latlng, index) => {\n            // console.log(latlng);\n            markers.push([latlng.lat, latlng.lng]);\n          });\n        });\n        // console.log(markers);\n        updateGlobalMarkers(markers, \"poly\");\n      } else {\n      }\n    }\n\n    // // setNewDraw(!newDraw);\n  };\n\n  return mapCenter.length > 0 ? (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Map\n          minZoom={minzoom}\n          zoom={15}\n          maxZoom={maxzoom}\n          center={isPoly ? getPolyCenter(state.markers) : mapCenter}\n          style={{ width: width, height: height }}\n        >\n          {/* {showEditControl ? (\n            <Search\n              className=\"custom-search-box\"\n              position=\"topleft\"\n              provider=\"OpenStreetMap\"\n              providerOptions={{ region: \"us\" }}\n              closeResultsOnClick={true}\n            />\n          ) : (\n            \"\"\n          )} */}\n\n          <FeatureGroup\n            ref={(featureGroupRef) => {\n              onFeatureGroupReady(featureGroupRef);\n            }}\n          >\n            {showEditControl ? (\n              <EditControl\n                edit={{ edit: false }}\n                position=\"bottomleft\"\n                onEdited={(e) => {\n                  //   console.log(\"edited\", e);\n                }}\n                onCreated={onCreated}\n                onDeleted={(e) => {\n                  console.log(\"deleted\", e);\n                }}\n                draw={{\n                  rectangle: false,\n                  circle: false,\n                  circlemarker: false,\n                  line: false,\n                  polygon: {\n                    allowIntersection: false,\n                    showArea: true,\n                    metric: false,\n                  },\n                  polyline: false,\n                  allowIntersection: false,\n                }}\n              />\n            ) : (\n              \"\"\n            )}\n            {show ? (\n              isPoly ? (\n                <Polygon positions={state.markers}>\n                  <Tooltip>Your Field</Tooltip>\n                </Polygon>\n              ) : (\n                <Marker position={state.markers[0]}>\n                  <Tooltip>Your Field</Tooltip>\n                </Marker>\n              )\n            ) : (\n              \"\"\n            )}\n          </FeatureGroup>\n          <TileLayer\n            attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          />\n        </Map>\n      </div>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default MapContext;\n\n// Compute and return center of a polygon\n// accepts [[number][number]...[number]]\n// returns [number, number]\nconst getPolyCenter = (arr) => {\n  var x = arr.map((x) => x[0]);\n  var y = arr.map((x) => x[1]);\n  var cx = (Math.min(...x) + Math.max(...x)) / 2;\n  var cy = (Math.min(...y) + Math.max(...y)) / 2;\n  return [cx, cy];\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/location.scss\";\n\n// import { cloudIcon } from \"../../shared/constants\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  makeStyles,\n  Typography,\n  // TextField,\n  // withStyles,\n  // Button\n} from \"@material-ui/core\";\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axios from \"axios\";\nimport MapComponent from \"./Map\";\nimport LiveLocation from \"./LiveLocation\";\nimport AutoComplete from \"./AutoComplete\";\nimport LocationToggleComponent from \"./LocationToggle\";\nimport MapContext from \"./MapContext\";\n// import { Link, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst LocationComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n\n  const handleAddressChangeByText = (event) => {\n    console.log(event.target.value);\n    dispatch({\n      type: \"CHANGE_ADDRESS_BY_TYPING\",\n      data: {\n        address: event.target.value,\n        showAddressChangeBtn: true,\n      },\n    });\n  };\n\n  const updateAddressOnClick = async () => {\n    // update the new text address from state to map with a new marker!\n\n    // get currect address from state\n    var q = state.address;\n    // https://nominatim.openstreetmap.org/search/?q=1139%20crab%20orchard%20drive&format=json\n    await axios\n      .get(`https://nominatim.openstreetmap.org/search/?q=${q}&format=json`)\n      .then((response) => {\n        let data = response.data;\n        // console.log(data);\n        if (data.length === 1) {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              markers: [[data[0].lat, data[0].lon]],\n              zoom: 15,\n              addressVerified: true,\n              address: data[0].display_name,\n              snackOpen: true,\n              snackMessage: \"Address Updated\",\n            },\n          });\n          // th;\n          //   this.setState({\n          //     markers: [[data[0].lat, data[0].lon]],\n          //     zoom: 15,\n          //     addressVerified: true,\n          //     address: data[0].display_name\n          //   });\n        } else {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              address: \"\",\n              addressVerified: false,\n              snackOpen: true,\n              snackMessage: \"Please complete the address\",\n            },\n          });\n        }\n\n        // let latlng = data.display_name;\n        // this.setState({\n        //   address: latlng\n        // });\n        // let latlng = data.results.map((latlng) => {\n\n        // })\n      })\n      .then(() => {\n        dispatch({\n          action: \"TOGGLE_ADDRESS_CHANGE_BUTTON\",\n          data: {\n            showAddressChangeBtn: false,\n          },\n        });\n      });\n  };\n\n  return (\n    <div\n      className=\"container-fluid pt-2\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"row boxContainerRow\" style={{ minHeight: \"480px\" }}>\n        <div className=\"col-xl-6 col-lg-12\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <Typography variant=\"h3\">\n                  Where is your field located?\n                </Typography>\n              </div>\n            </div>\n            <div className=\"row pt-3\">\n              <div className=\"col-12\">\n                <Typography variant=\"body1\" align=\"left\">\n                  Enter your USDA plant hardiness zone, address or zip code to\n                  determine your location. Then click\n                  <img\n                    height=\"20\"\n                    width=\"20\"\n                    src=\"/images/icons/pentagon.png\"\n                  />\n                  {/* <span\n                    style={{\n                      background: `url('/static/media/spritesheet.fd5728f2.svg')`,\n                      backgroundPosition: \"-77px -2px\",\n                      width: \"26px\",\n                      height: \"26px\",\n                      display: \"inline-block\",\n                    }}\n                  ></span> */}\n                  to draw your field boundary on the map.\n                </Typography>\n                <Typography variant=\"body1\" align=\"left\" className=\"pt-2\">\n                  Plant hardiness zone, zip code, or address will return the\n                  most general recommendations, whereas drawing your field on\n                  the map will return the most site-specific recommendations\n                </Typography>\n                {/* <p style={{ fontSize: \"18px\" }}>\n                  \n                </p> */}\n              </div>\n            </div>\n            <div className=\"row pt-3 mt-4\">\n              <div className=\"col-md-6 col-lg-6 col-sm-12 col-12\">\n                <FormControl\n                  variant=\"filled\"\n                  style={{ width: \"100%\" }}\n                  className={classes.formControl}\n                >\n                  <InputLabel>PLANT HARDINESS ZONE</InputLabel>\n                  <Select\n                    variant=\"filled\"\n                    labelId=\"plant-hardiness-zone-dropdown-select\"\n                    id=\"plant-hardiness-zone-dropdown-select\"\n                    style={{\n                      textAlign: \"left\",\n                    }}\n                    onChange={(event) => {\n                      //   console.log(\"evvt\" + event.target.);\n                      if (event.target.value === 3) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 3\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 4) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 4\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 5) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 5\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else if (event.target.value === 6) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 6\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      } else {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 7\",\n                            zone: parseInt(event.target.value),\n                          },\n                        });\n                      }\n                    }}\n                    value={state.zone}\n                  >\n                    <MenuItem value={0}>\n                      <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={3} key={3}>\n                      Zone 3\n                    </MenuItem>\n                    <MenuItem value={4} key={4}>\n                      Zone 4\n                    </MenuItem>\n                    <MenuItem value={5} key={5}>\n                      Zone 5\n                    </MenuItem>\n                    <MenuItem value={6} keuy={6}>\n                      Zone 6\n                    </MenuItem>\n                    <MenuItem value={7} key={7}>\n                      Zone 7\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n                <div className=\"col-md-12 row\">\n                  <LiveLocation />\n                </div>\n              </div>\n              <div className=\"col-md-6 col-sm-12 row\">\n                <AutoComplete />\n                <div className=\"col-md-12 text-left\">\n                  <LocationToggleComponent />\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div\n                className=\"col-md-6 offset-md-6 col-sm-12 row\"\n                style={{ textAlign: \"left\" }}\n              ></div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6 offset-md-6 col-sm-12\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-6 col-lg-12\">\n          {/* <MapComponent width=\"100%\" height=\"100%\" minzoom={4} maxzoom={20} /> */}\n          <MapContext\n            width=\"100%\"\n            height=\"400px\"\n            minzoom={4}\n            maxzoom={20}\n            from=\"location\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationComponent;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton, ReferenceTooltip } from \"../../shared/constants\";\n// import Slider from \"@material-ui/core/Slider\";\nimport {\n  Cloud,\n  Info,\n  Opacity,\n  AcUnit,\n  WbSunny,\n  WbSunnyOutlined,\n} from \"@material-ui/icons\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  //   FormControlLabel,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  CircularProgress,\n  Tooltip,\n  Link,\n} from \"@material-ui/core\";\n\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport WeatherModal from \"./WeatherModal\";\n\nconst isEquivalent = (a, b) => {\n  // Create arrays of property names\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  // If number of properties is different,\n  // objects are not equivalent\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    // If values of same property are not equal,\n    // objects are not equivalent\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n\n  // If we made it this far, objects\n  // are considered equivalent\n  return true;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nconst WeatherConditions = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [didChange, setDidChange] = useState(false);\n\n  const [caller, setCaller] = React.useState(\"\");\n\n  const [weatherDataShadow, setWeatherDataShadow] = useState(state.weatherData);\n\n  const [lastFrostDayHelper, setLastFrostDayHelper] = useState(\"\");\n  const [firstFrostDayHelper, setFirstFrostDayHelper] = useState(\"\");\n  const [firstFrostDayError, setFirstFrostDayError] = useState(false);\n  const [lastFrostDayError, setLastFrostDayError] = useState(false);\n\n  useEffect(() => {\n    if (!state.ajaxInProgress) {\n      setWeatherDataShadow(state.weatherData);\n    }\n  }, [state.ajaxInProgress]);\n\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual,\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n  const [open, setOpen] = useState(false);\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n    setFirstFrostDayError(false);\n    setLastFrostDayError(false);\n    setFirstFrostDayHelper(\"\");\n    setLastFrostDayHelper(\"\");\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay,\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay,\n        },\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual, //inches\n      },\n      frostFreeDays: frostFreeDays,\n    };\n\n    if (firstFrostDay > 31 || firstFrostDay <= 0) {\n      setFirstFrostDayError(true);\n      setFirstFrostDayHelper(\"Invalid Day\");\n    } else if (lastFrostDay > 31 || lastFrostDay <= 0) {\n      setLastFrostDayError(true);\n      setLastFrostDayHelper(\"Invalid Day\");\n    } else {\n      setDidChange(true);\n      dispatch({\n        type: \"UPDATE_WEATHER_CONDITIONS\",\n        data: { weatherData: broadcastObject },\n      });\n      setOpen(false);\n    }\n\n    // data incorrect\n\n    // show error on modal\n  };\n\n  const setDefaultWeatherValues = () => {\n    dispatch({\n      type: \"WEATHER_DATA_RESET\",\n      data: { weatherDataReset: !state.weatherDataReset },\n    });\n    setDidChange(!didChange);\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n\n    setFirstFrostMonth(state.weatherData.averageFrost.firstFrostDate.month);\n    setFirstFrostDay(state.weatherData.averageFrost.firstFrostDate.day);\n    setLastFrostDay(state.weatherData.averageFrost.lastFrostDate.day);\n    setLastFrostMonth(state.weatherData.averageFrost.lastFrostDate.month);\n\n    setAveragePrecipitation({\n      thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n      annual: state.weatherData.averagePrecipitation.annual,\n    });\n\n    setFrostFreeDays(state.weatherData.frostFreeDays);\n\n    if (props.caller) {\n      setCaller(props.caller);\n    } else {\n      setCaller(\"\");\n    }\n  }, [state.weatherData, props.caller]);\n\n  const handleModalOpen = () => {\n    setOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Typography variant=\"h3\" align=\"left\">\n          Weather Conditions?\n        </Typography>\n      </div>\n      <div className=\"mt-2 col-12 text-left\">\n        <Typography\n          variant=\"button\"\n          className=\"font-weight-bold text-uppercase text-left\"\n          onClick={handleModalOpen}\n          style={{ cursor: \"pointer\" }}\n        >\n          &nbsp;Click To Edit\n        </Typography>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <Opacity />\n            &nbsp; Average Precipitation &nbsp;{\" \"}\n            <ReferenceTooltip\n              type=\"text\"\n              content={\n                \"Five-year average monthly and annual precipitation from University of Georgia’s Weather App.\"\n              }\n            />\n          </Typography>\n        </div>\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{currentMonthFull.toUpperCase()}:</span> &nbsp;\n            {state.weatherData.averagePrecipitation.thisMonth} inches\n          </Typography>\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Annual\"}:</span> &nbsp;\n            {state.weatherData.averagePrecipitation.annual} inches\n          </Typography>\n        </div>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <AcUnit />\n            &nbsp; Average Frost Dates &nbsp;{\" \"}\n            <ReferenceTooltip\n              type=\"text\"\n              content={\n                \"Average dates of the first and last frosts for your location, based on frost dates for the last five years from University of Georgia’s Weather App; you may manually change this input.\"\n              }\n            />\n          </Typography>\n        </div>\n\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"First Frost Date\"}:</span> &nbsp;\n            {`${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day}`}\n          </Typography>\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Last Frost Date\"}:</span> &nbsp;\n            {`${state.weatherData.averageFrost.lastFrostDate.month} ${state.weatherData.averageFrost.lastFrostDate.day}`}\n          </Typography>\n        </div>\n      </div>\n      <div className=\"mt-3 col-12 row\">\n        <div className=\"col-12\">\n          <Typography\n            variant=\"body1\"\n            className=\"font-weight-bold text-uppercase text-left\"\n          >\n            <WbSunnyOutlined />\n            &nbsp; Average Frost Free Days &nbsp;{\" \"}\n            <ReferenceTooltip\n              type={\"text\"}\n              content={\n                \"Number of days in your growing season, based on average first and last frost dates for the last five years from University of Georgia’s Weather App\"\n              }\n            />\n          </Typography>\n        </div>\n\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"text-left\">\n            <Opacity style={{ color: \"transparent\" }} />\n            &nbsp; <span>{\"Frost Free Days\"}:</span> &nbsp;\n            {state.weatherData.frostFreeDays}\n          </Typography>\n        </div>\n      </div>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"ransition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={`modalContainer ${classes.paper}`}>\n            <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n            <div id=\"transition-modal-description\">\n              <div className=\"container-fluid\">\n                <FormGroup>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Average Frost Dates</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"age-native-simple\">\n                          First Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"First Frost Month\"\n                          native\n                          value={firstFrostMonth}\n                          onChange={(event) => {\n                            setFirstFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"age\",\n                            id: \"age-native-simple\",\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option\n                              value={moment(val, \"MMM\").format(\"MMMM\")}\n                              key={key}\n                            >\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                        {firstFrostMonth !==\n                        weatherDataShadow.averageFrost.firstFrostDate.month ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setFirstFrostMonth(\n                                weatherDataShadow.averageFrost.firstFrostDate\n                                  .month\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography variant=\"body2\">\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"First Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          multiline={true}\n                          helperText={firstFrostDayHelper}\n                          error={firstFrostDayError}\n                          maxLength={2}\n                          id=\"margin-none\"\n                          value={firstFrostDay}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFirstFrostDay(\"\");\n                              } else\n                                setFirstFrostDay(parseInt(event.target.value));\n                            } else {\n                              setFirstFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(firstFrostDay) !==\n                        parseInt(\n                          weatherDataShadow.averageFrost.firstFrostDate.day\n                        ) ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setFirstFrostDay(\n                                parseInt(\n                                  weatherDataShadow.averageFrost.firstFrostDate\n                                    .day\n                                )\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"last-frost-month\">\n                          Last Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"Last Frost Month\"\n                          native\n                          value={lastFrostMonth}\n                          onChange={(event) => {\n                            setLastFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"last-frost-month\",\n                            id: \"last-frost-month\",\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option\n                              value={moment(val, \"MMM\").format(\"MMMM\")}\n                              key={key}\n                            >\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                        {lastFrostMonth !==\n                        weatherDataShadow.averageFrost.lastFrostDate.month ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setLastFrostMonth(\n                                weatherDataShadow.averageFrost.lastFrostDate\n                                  .month\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography variant=\"body2\">\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"Last Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          helperText={lastFrostDayHelper}\n                          error={lastFrostDayError}\n                          multiline={true}\n                          maxLength={2}\n                          value={lastFrostDay}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setLastFrostDay(\"\");\n                              } else\n                                setLastFrostDay(parseInt(event.target.value));\n                            } else {\n                              setLastFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(lastFrostDay) !==\n                        parseInt(\n                          weatherDataShadow.averageFrost.lastFrostDate.day\n                        ) ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setLastFrostDay(\n                                parseInt(\n                                  weatherDataShadow.averageFrost.lastFrostDate\n                                    .day\n                                )\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">\n                        Average Precipitation\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={currentMonthFull}\n                          type=\"number\"\n                          inputProps={{ min: \"1\", max: \"100\", step: \"0.01\" }}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.thisMonth}\n                          onChange={(event) => {\n                            setAveragePrecipitation({\n                              ...averagePrecipitation,\n                              thisMonth:\n                                event.target.value === \"\"\n                                  ? 0\n                                  : event.target.value,\n                            });\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseFloat(averagePrecipitation.thisMonth) !==\n                        parseFloat(\n                          weatherDataShadow.averagePrecipitation.thisMonth\n                        ) ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setAveragePrecipitation({\n                                thisMonth: parseFloat(\n                                  weatherDataShadow.averagePrecipitation\n                                    .thisMonth\n                                ),\n                                annual: parseFloat(averagePrecipitation.annual),\n                              })\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Annual\"}\n                          type=\"number\"\n                          inputProps={{ min: \"1\", max: \"100\", step: \"0.01\" }}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.annual}\n                          onChange={(event) => {\n                            setAveragePrecipitation({\n                              ...averagePrecipitation,\n                              annual:\n                                event.target.value === \"\"\n                                  ? 0\n                                  : parseFloat(event.target.value),\n                            });\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseFloat(averagePrecipitation.annual) !==\n                        parseFloat(\n                          weatherDataShadow.averagePrecipitation.annual\n                        ) ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setAveragePrecipitation({\n                                thisMonth: parseFloat(\n                                  averagePrecipitation.thisMonth\n                                ),\n                                annual: parseFloat(\n                                  weatherDataShadow.averagePrecipitation.annual\n                                ),\n                              })\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Frost Free Days</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Frost Free Days\"}\n                          type=\"number\"\n                          step=\"0.01\"\n                          multiline={true}\n                          maxLength={4}\n                          value={frostFreeDays}\n                          onChange={(event) => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFrostFreeDays(0);\n                              } else\n                                setFrostFreeDays(parseInt(event.target.value));\n                            } else {\n                              setFrostFreeDays(0);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                        {parseInt(frostFreeDays) !==\n                        parseInt(weatherDataShadow.frostFreeDays) ? (\n                          <Button\n                            size=\"small\"\n                            onClick={() =>\n                              setFrostFreeDays(\n                                parseInt(weatherDataShadow.frostFreeDays)\n                              )\n                            }\n                          >\n                            Values changed, Reset?\n                          </Button>\n                        ) : (\n                          <Typography\n                            variant=\"body2\"\n                            style={{ marginLeft: \"8px\" }}\n                          >\n                            5 Year Average\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\"></div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <LightButton\n                        disabled={modalBtnDisabled}\n                        onClick={validateAndBroadcastModalData}\n                      >\n                        update\n                      </LightButton>\n                    </div>\n                  </div>\n                </FormGroup>\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n};\n\nexport default WeatherConditions;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n} from \"@material-ui/core\";\n\nimport moment from \"moment\";\nimport { Context } from \"../../store/Store\";\nimport { LightButton } from \"../../shared/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n}));\n\nconst WeatherModal = (props) => {\n  const classes = useStyles();\n\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(props.open);\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual,\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay,\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay,\n        },\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual, //inches\n      },\n      frostFreeDays: frostFreeDays,\n    };\n\n    // boardcast and close modal\n\n    dispatch({\n      type: \"UPDATE_WEATHER_CONDITIONS\",\n      data: { weatherData: broadcastObject },\n    });\n\n    setOpen(!open);\n\n    // data incorrect\n\n    // show error on modal\n  };\n  const handleModalOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n  }, []);\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <div className={`modalContainer ${classes.paper}`}>\n          <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n          <div id=\"transition-modal-description\">\n            <div className=\"container-fluid\">\n              <FormGroup>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Frost Dates</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"age-native-simple\">\n                        First Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"First Frost Month\"\n                        native\n                        value={firstFrostMonth}\n                        onChange={(event) => {\n                          setFirstFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"age\",\n                          id: \"age-native-simple\",\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={moment(val, \"MMM\").format(\"MMMM\")}>\n                            {val}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"First Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        id=\"margin-none\"\n                        value={firstFrostDay}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setFirstFrostDay(\"\");\n                            } else\n                              setFirstFrostDay(parseInt(event.target.value));\n                          } else {\n                            setFirstFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"last-frost-month\">\n                        Last Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"Last Frost Month\"\n                        native\n                        value={lastFrostMonth}\n                        onChange={(event) => {\n                          setLastFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"last-frost-month\",\n                          id: \"last-frost-month\",\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={val}>{val}</option>\n                        ))}\n                      </Select>\n                    </FormControl>\n\n                    {/* <TextField\n                        label=\"Last Frost Month\"\n                        id=\"margin-none\"\n                        defaultValue=\"Oct\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"Last Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        value={lastFrostDay}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setLastFrostDay(\"\");\n                            } else\n                              setLastFrostDay(parseInt(event.target.value));\n                          } else {\n                            setLastFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Last Frost Day\"\n                        id=\"margin-none\"\n                        defaultValue=\"13\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Precipitation</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={currentMonthFull}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.thisMonth}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(\n                                  state.weatherData.averagePrecipitation\n                                    .thisMonth\n                                ),\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(event.target.value),\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              thisMonth: parseFloat(\n                                state.weatherData.averagePrecipitation.thisMonth\n                              ),\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"November\"\n                        id=\"margin-none\"\n                        defaultValue=\"3.6 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={\"Annual\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.annual}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(\n                                  state.weatherData.averagePrecipitation.annual\n                                ),\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(event.target.value),\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              annual: parseFloat(\n                                state.weatherData.averagePrecipitation.annual\n                              ),\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Annual\"\n                        id=\"margin-none\"\n                        defaultValue=\"43 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Frost Free Days</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      {/* TODO */}\n                      <TextField\n                        label={\"Frost Free Days\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        value={frostFreeDays}\n                        onChange={(event) => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setFrostFreeDays(0);\n                            } else\n                              setFrostFreeDays(parseInt(event.target.value));\n                          } else {\n                            setFrostFreeDays(0);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Frost Free Days\"\n                        id=\"margin-none\"\n                        defaultValue=\"173\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\"></div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <LightButton\n                      disabled={modalBtnDisabled}\n                      onClick={validateAndBroadcastModalData}\n                    >\n                      update\n                    </LightButton>\n                  </div>\n                </div>\n              </FormGroup>\n            </div>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default WeatherModal;\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport {\n  Typography,\n  Chip,\n  Button,\n  Grid,\n  withStyles,\n  Switch,\n} from \"@material-ui/core\";\nimport {\n  Terrain,\n  LocalDrinkOutlined,\n  InvertColors,\n  WavesOutlined,\n} from \"@material-ui/icons\";\nimport { ReferenceTooltip, CustomStyles } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/soilConditions.scss\";\n\nconst AntSwitch = withStyles((theme) => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: \"flex\",\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    \"&$checked\": {\n      transform: \"translateX(12px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main,\n      },\n    },\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: \"none\",\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white,\n  },\n  checked: {},\n}))(Switch);\nconst SoilCondition = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { soilData, soilDataOriginal, markers } = state;\n  const [tilingCheck, setTilingCheck] = useState(false);\n\n  useEffect(() => {\n    // console.log(\"from soil file\");\n    let lat = markers[0][0];\n    let lon = markers[0][1];\n\n    if (soilDataOriginal.for) {\n      if (\n        soilDataOriginal.for.lat === lat &&\n        soilDataOriginal.for.lon === lon\n      ) {\n        // console.log(\"soil data exists\");\n      } else {\n        // console.log(\"markers changed\");\n        getSSURGOData(lat, lon);\n      }\n    } else {\n      //   console.log(\"no previous data\");\n      getSSURGOData(lat, lon);\n    }\n  }, [markers]);\n\n  const getSSURGOData = (lat, lon) => {\n    let markersCopy = markers;\n    // console.log(\"Inital: \", markers);\n\n    let longLatString = \"\";\n\n    markersCopy.map((val, i) => {\n      // get long lat formatted as requested by SSURGO (long lat, long lat, ...)\n      // saved as longLatString\n\n      if (i === markersCopy.length - 1) {\n        longLatString +=\n          markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\" + lon + \" \" + lat;\n      } else {\n        longLatString += markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\";\n      }\n    });\n    let soilDataQuery = \"\";\n\n    if (markersCopy.length > 1) {\n      soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, mp.mupolygonkey as MPKEY\n    FROM mapunit AS mu \n    INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey\n    INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey\n    WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))\n    AND\n    mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))`;\n    } else {\n      // point\n      soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, mp.mupolygonkey as MPKEY\n      FROM mapunit AS mu \n      INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey\n      INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey\n      WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('point (${lon} ${lat})'))\n      AND\n      mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('point (${lon} ${lat})'))`;\n    }\n\n    // console.log(soilDataQuery);\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n    var urlencoded = new URLSearchParams();\n    urlencoded.append(\"query\", soilDataQuery);\n    urlencoded.append(\"format\", \"json+columnname\");\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: \"follow\",\n    };\n\n    dispatch({\n      type: \"TOGGLE_SOIL_LOADER\",\n      data: {\n        isSoilDataLoading: true,\n      },\n    });\n\n    fetch(\n      \"https://sdmdataaccess.sc.egov.usda.gov/Tabular/post.rest\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        // success\n        // console.log(\"SSURGO: \", result);\n\n        if (result !== {}) {\n          //   let Map_Unit_Name = result[\"Table\"][1][1];\n          //   let Drainage_Class = result[\"Table\"][1][2];\n          let Flooding_Frequency = result[\"Table\"][1][3];\n          let Ponding_Frequency = result[\"Table\"][1][4];\n          let mapUnitString = \"\";\n\n          let stringSplit = [];\n\n          result[\"Table\"].map((el, index) => {\n            if (index !== 0) {\n              // if (index < result[\"Table\"].length) {\n              // mapUnitString += el[1].split(\",\") + \",\";\n              // } else {\n              if (stringSplit.indexOf(el[1].split(\",\")[0]) === -1) {\n                stringSplit.push(el[1].split(\",\")[0]);\n              }\n            }\n            // }\n          });\n\n          // console.log(stringSplit);\n          const filteredArr = stringSplit.filter((elm) => elm);\n          mapUnitString = filteredArr.join(\", \");\n\n          let drainageClasses = [];\n          result[\"Table\"].map((el, index) => {\n            if (index !== 0) {\n              if (drainageClasses.indexOf(el[2]) === -1) {\n                drainageClasses.push(el[2]);\n              }\n            }\n          });\n          drainageClasses = drainageClasses.filter(function (el) {\n            return el != null;\n          });\n          // console.log(drainageClasses);\n\n          dispatch({\n            type: \"UPDATE_SOIL_DATA\",\n            data: {\n              Map_Unit_Name: mapUnitString,\n              Drainage_Class: drainageClasses,\n              Flooding_Frequency: Flooding_Frequency,\n              Ponding_Frequency: Ponding_Frequency,\n              for: { lat: lat, lon: lon },\n            },\n          });\n          dispatch({\n            type: \"UPDATE_SOIL_DATA_ORIGINAL\",\n            data: {\n              Map_Unit_Name: mapUnitString,\n              Drainage_Class: drainageClasses,\n              Flooding_Frequency: Flooding_Frequency,\n              Ponding_Frequency: Ponding_Frequency,\n              for: { lat: lat, lon: lon },\n            },\n          });\n        }\n\n        dispatch({\n          type: \"TOGGLE_SOIL_LOADER\",\n          data: {\n            isSoilDataLoading: false,\n          },\n        });\n      })\n      .catch((error) => console.error(\"SSURGO FETCH ERROR\", error));\n  };\n\n  const updateDrainageClass = (label = \"\") => {\n    let drainages = [...state.soilData.Drainage_Class];\n    if (drainages.indexOf(label) === -1) {\n      // does not exist, dispatch to state\n      drainages.push(label);\n      dispatch({\n        type: \"UPDATE_DRAINAGE_CLASS\",\n        data: drainages,\n      });\n    } else {\n      // exists, remove it from state\n      let index = drainages.indexOf(label);\n      drainages.splice(index, 1);\n\n      dispatch({\n        type: \"UPDATE_DRAINAGE_CLASS\",\n        data: drainages,\n      });\n    }\n  };\n\n  const updateFloodingFrequency = (label = \"\") => {\n    dispatch({\n      type: \"UPDATE_FLOODING_FREQUENCY\",\n      data: label,\n    });\n  };\n\n  const resetFloodingOptions = () => {\n    dispatch({\n      type: \"UPDATE_FLOODING_FREQUENCY\",\n      data: soilDataOriginal.Flooding_Frequency,\n    });\n  };\n\n  const resetDrainageClasses = () => {\n    dispatch({\n      type: \"UPDATE_DRAINAGE_CLASS\",\n      data: soilDataOriginal.Drainage_Class,\n    });\n  };\n  const RenderFloodingOptions = ({ flooding = \"\" }) => {\n    return (\n      <div className=\"text-left\">\n        <Chip\n          label=\"None\"\n          color={flooding === \"None\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"None\");\n          }}\n        />\n        <Chip\n          label=\"Very Rare\"\n          color={flooding === \"Very rare\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Very rare\");\n          }}\n        />\n        <Chip\n          label=\"Rare\"\n          color={flooding === \"Rare\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Rare\");\n          }}\n        />\n        <Chip\n          label=\"Occasional\"\n          color={flooding === \"Occasional\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Occasional\");\n          }}\n        />\n        <Chip\n          label=\"Frequent\"\n          color={flooding === \"Frequent\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Frequent\");\n          }}\n        />\n        <Chip\n          label=\"Very Frequent\"\n          color={flooding === \"Very frequent\" ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateFloodingFrequency(\"Very frequent\");\n          }}\n        />\n      </div>\n    );\n  };\n  const RenderDrainageClasses = ({ drainage = [\"\"] }) => {\n    return (\n      <div className=\"text-left\">\n        <Chip\n          label=\"Very Poorly Drained\"\n          color={\n            drainage.includes(\"Very poorly drained\") ? \"primary\" : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Very poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Poorly Drained\"\n          color={drainage.includes(\"Poorly drained\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Somewhat Poorly Drained\"\n          color={\n            drainage.includes(\"Somewhat poorly drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Somewhat poorly drained\");\n          }}\n        />\n        <Chip\n          label=\"Moderately Well Drained\"\n          color={\n            drainage.includes(\"Moderately well drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Moderately well drained\");\n          }}\n        />\n        <Chip\n          label=\"Well Drained\"\n          color={drainage.includes(\"Well drained\") ? \"primary\" : \"secondary\"}\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Well drained\");\n          }}\n        />\n        <Chip\n          label=\"Somewhat Excessively Drained\"\n          color={\n            drainage.includes(\"Somewhat excessively drained\")\n              ? \"primary\"\n              : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Somewhat excessively drained\");\n          }}\n        />\n        <Chip\n          label=\"Excessively Drained\"\n          color={\n            drainage.includes(\"Excessively drained\") ? \"primary\" : \"secondary\"\n          }\n          className=\"m-2 drainageTag\"\n          onClick={() => {\n            updateDrainageClass(\"Excessively drained\");\n          }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Typography variant=\"h3\" align=\"left\">\n          Soil Conditions?\n        </Typography>\n      </div>\n      <div className=\"col-12 pt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <Terrain />\n            &nbsp;SOILS COMPOSITION &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    The tool auto-completes your soil composition based on\n                    location and the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n        <div className=\"col-12 pt-2 row\">\n          <div className=\"col-12\">\n            <Typography\n              variant=\"body1\"\n              style={{ color: CustomStyles().primaryProgressBtnColor }}\n              align=\"left\"\n            >\n              {soilData.Map_Unit_Name}\n            </Typography>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-12 pt-2 mt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <LocalDrinkOutlined />\n            &nbsp;DRAINAGE CLASS &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    Indicates your soil drainage based on the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>{\" \"}\n                    drainage classes; you may modify your soil drainage by\n                    clicking below.{\" \"}\n                    <a\n                      href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/ref/?cid=nrcs142p2_054253\"\n                      target=\"_blank\"\n                    >\n                      {\" \"}\n                      Definitions of values found here\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n        {arrayEquals(\n          soilDataOriginal.Drainage_Class,\n          soilData.Drainage_Class\n        ) ? (\n          \"\"\n        ) : (\n          <div className=\"col-12 pt-2\">\n            <div className=\"col-12 row\">\n              <div className=\"col\">\n                <Button\n                  size=\"small\"\n                  onClick={() => {\n                    resetDrainageClasses();\n                  }}\n                >\n                  <Typography\n                    className=\"text-danger text-uppercase font-weight-bold\"\n                    variant=\"button\"\n                  >\n                    Values changed, reset?\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"col-12\">\n          <RenderDrainageClasses drainage={soilData.Drainage_Class} />\n        </div>\n      </div>\n\n      {[\n        \"Well drained\",\n        \"Somewhat excessively drained\",\n        \"Excessively drained\",\n      ].every((e) => soilData.Drainage_Class.includes(e)) ? (\n        <div className=\"col-12 pt-2 mt-2 row\">\n          <div className=\"col-12\">\n            <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n              <InvertColors />\n              &nbsp;TILING &nbsp;\n              <ReferenceTooltip\n                type=\"text\"\n                content={\n                  \"Indicate if the field of interest has tile installed. Selecting “yes” increases your drainage class by one factor.\"\n                }\n              />\n            </Typography>\n          </div>\n          <div className=\"col-12 pt-2\">\n            <div className=\"pl-1\">\n              <Typography variant=\"body1\" display=\"inline\">\n                NO\n              </Typography>\n              <Switch\n                checked={tilingCheck}\n                onChange={(e) => {\n                  setTilingCheck(e.target.checked);\n                }}\n                name=\"checkedC\"\n              />\n              <Typography variant=\"body1\" display=\"inline\">\n                YES\n              </Typography>\n            </div>\n            {/* <Typography component=\"div\">\n              <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n                <Grid item>Off</Grid>\n                <Grid item>\n                  <AntSwitch\n                    checked={tilingCheck}\n                    onChange={(e) => {\n                      setTilingCheck(e.target.checked);\n                    }}\n                    name=\"checkedC\"\n                  />\n                </Grid>\n                <Grid item>On</Grid>\n              </Grid>\n            </Typography> */}\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"col-12 pt-2 mt-2 row\">\n        <div className=\"col-12\">\n          <Typography variant=\"body1\" className=\"soilConditionSubHeader\">\n            <WavesOutlined />\n            &nbsp;FLOODING FREQUENCY &nbsp;\n            <ReferenceTooltip\n              type=\"text\"\n              hasLink\n              title={\n                <div>\n                  <Typography variant=\"body1\">\n                    The annual probability of a flood event based on the{\" \"}\n                    <a\n                      href=\"https://websoilsurvey.sc.egov.usda.gov/App/HomePage.htm\"\n                      target=\"_blank\"\n                    >\n                      USDA NRCS Web Soil Survey\n                    </a>\n                    , where “flood” refers to the temporary inundation of an\n                    area caused by overflowing streams, by runoff from adjacent\n                    slopes, or by tides. You may modify your flooding frequency\n                    by clicking below.{\" \"}\n                    <a\n                      href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/ref/?cid=nrcs142p2_054253\"\n                      target=\"_blank\"\n                    >\n                      {\" \"}\n                      Definitions of values found here\n                    </a>\n                    .\n                  </Typography>\n                </div>\n              }\n            />\n          </Typography>\n        </div>\n        {soilData.Flooding_Frequency === soilDataOriginal.Flooding_Frequency ? (\n          \"\"\n        ) : (\n          <div className=\"col-12 pt-2\">\n            <div className=\"col-12 row\">\n              <div className=\"col\">\n                <Button\n                  size=\"small\"\n                  onClick={() => {\n                    resetFloodingOptions();\n                  }}\n                >\n                  <Typography\n                    className=\"text-danger text-uppercase font-weight-bold\"\n                    variant=\"button\"\n                  >\n                    Values changed, reset?\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"col-12\">\n          <RenderFloodingOptions flooding={soilData.Flooding_Frequency} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SoilCondition;\n\nconst arrayEquals = (a = [], b = []) => {\n  a.sort();\n  b.sort();\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index])\n  );\n};\n","import React, { useEffect, useContext, Fragment } from \"react\";\nimport { Context } from \"../../../store/Store\";\nimport {\n  locationIcon,\n  zoneIcon,\n  GetMonthString,\n  LightButton,\n  greenBarExpansionPanelHeight,\n  CustomStyles,\n} from \"../../../shared/constants\";\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\nimport FilterHdrIcon from \"@material-ui/icons/FilterHdr\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport moment from \"moment\";\nimport LocationComponent from \"../../Location/Location\";\nimport WeatherConditions from \"../../Location/WeatherConditions\";\nimport SoilCondition from \"../../Location/SoilCondition\";\nimport { LocationOn } from \"@material-ui/icons\";\nimport \"../../../styles/greenBar.scss\";\n\nconst expansionPanelBaseStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nconst greenBarWrapperBackground = {\n  backgroundColor: CustomStyles().lighterGreen,\n};\n\nconst Greenbar = () => {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [expansionPanelComponent, setExpansionPanelComponent] = React.useState({\n    component: \"\",\n  });\n\n  useEffect(() => {\n    // console.log(\"---Greeenbar.js mounted---\");\n\n    // check if 'greenbarExpanded' === true. If it is true, it should enable\n    if (expansionPanelComponent.component !== \"\") {\n      // click anywhere outside the body of a div should close it\n      // alternatively we can have a close button somewhere in the expanded green bar\n    }\n\n    document.addEventListener(\"click\", (evt) => {\n      const greenbarExpansionElement = document.getElementById(\n        \"greenBarExpansionPanel\"\n      );\n      // const muiPopover = document.getElementsByClassName(\"MuiPopover-root\")[0];\n      const greenBarParent = document.getElementById(\"greenBarParent\");\n\n      let targetElement = evt.target;\n      // console.log(\n      //   targetElement.constructor.prototype === HTMLBodyElement.prototype\n      // );\n      do {\n        // console.log(\"inside do while\");\n        // console.log(targetElement);\n        if (targetElement == greenBarParent) {\n          // This is a click inside. Do nothing, just return.\n          // console.log(\"Clicked inside!.. do nothing\");\n          return;\n        }\n\n        // Go up the DOM\n        targetElement = targetElement.parentNode;\n        // if (targetElement.constructor.prototype === HTMLBodyElement.prototype) {\n        //   targetElement = greenBarParent;\n        // } else {\n        //   targetElement = targetElement.parentNode;\n        // }\n        // console.log(targetElement);\n      } while (targetElement);\n\n      // This is a click outside.\n      // console.log(\"Clicked outside!\");\n      // close the expansion panel\n      // slideToggle.slideToggle(greenbarExpansionElement, 300);\n      // can we have a close button somewhere ?\n      // greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      // greenbarExpansionElement.style.height = \"0px\";\n      // setExpansionPanelComponent({\n      //   component: \"\"\n      // });\n    });\n  }, []);\n\n  const getAddress = () => {\n    if (state.address === \"\") {\n      return \"\";\n    } else {\n      let address = state.address.split(\",\");\n      // address = address.split(\" \");\n      //console.log(\"address: \" + address[1]);\n      address = `${address[0]}${address[1]}`;\n\n      address = address.substr(0, 20);\n\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleAddressBtnClick}\n          style={\n            expansionPanelComponent.component === \"location\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"location\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            <LocationOn />\n            &nbsp;Zone: {state.zone}\n            &nbsp; {address}\n          </span>\n        </Button>\n      );\n    }\n  };\n\n  const getZone = () => {\n    return (\n      <Fragment>\n        <Button onClick={handleClick} className=\"greenbarBtn\">\n          {zoneIcon(20, 14)}\n          &nbsp;\n          {state.zone !== 3 ? `Zone ${state.zone}` : `Zone 3`}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleZoneDropdownClose}\n        >\n          <MenuItem onClick={handleZoneDropdownClose} value={3} key={3}>\n            Zone 3\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={4} key={4}>\n            Zone 4\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={5} key={5}>\n            Zone 5\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={6} key={6}>\n            Zone 6\n          </MenuItem>\n          <MenuItem onClick={handleZoneDropdownClose} value={7} key={7}>\n            Zone 7\n          </MenuItem>\n        </Menu>\n      </Fragment>\n    );\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleAddressBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"location\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\",\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"location\",\n      });\n    }\n\n    // document.getElemen;\n    // }\n  };\n  const handleSoilBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"soil\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\",\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"soil\",\n      });\n    }\n  };\n\n  const handleWeatherBtnClick = (evt) => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n\n    if (\n      expansionPanelComponent.component === \"weather\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\",\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"weather\",\n      });\n    }\n  };\n  const getSoil = () => {\n    if (state.soilData.Flooding_Frequency === null) {\n      return \"\";\n    } else\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleSoilBtnClick}\n          style={\n            expansionPanelComponent.component === \"soil\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"soil\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            {<FilterHdrIcon />}\n            &nbsp;{\" \"}\n            {/* {`Soils: Map Unit Name (${state.soilData.Map_Unit_Name}%), Drainage Class: ${state.soilData.Drainage_Class}})`} */}\n            {`Soils: Drainage Class: ${state.soilData.Drainage_Class.toString()\n              .split(\",\")\n              .join(\", \")}`}\n          </span>\n        </Button>\n      );\n  };\n\n  const handleZoneDropdownClose = (event) => {\n    setAnchorEl(null);\n    let zoneText = \"\";\n    console.log(event.target.getAttribute(\"value\"));\n    let value = event.target.getAttribute(\"value\");\n\n    if (!isNaN(parseInt(value))) {\n      switch (parseInt(value)) {\n        case 3: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 4: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 5: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 6: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        case 7: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value,\n            },\n          });\n          break;\n        }\n        default: {\n        }\n      }\n    }\n  };\n\n  const getWeatherData = () => {\n    // TODO: convert month to string, currently returning int\n    // let currentMonth = GetMonthString(month);\n    let currentMonth = moment().format(\"MMM\");\n    // frost free days :-\n    // http://128.192.142.200:3000/hourly?location=raleigh%20nc&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3E0&output=json\n    if (state.weatherData.length === 0) return \"\";\n    else\n      return (\n        <Button\n          className=\"greenbarBtn\"\n          onClick={handleWeatherBtnClick}\n          style={\n            expansionPanelComponent.component === \"weather\"\n              ? {\n                  background: \"white\",\n                }\n              : {}\n          }\n        >\n          <span\n            style={\n              expansionPanelComponent.component === \"weather\"\n                ? {\n                    color: \"black\",\n                  }\n                : {}\n            }\n          >\n            {<CloudIcon fontSize=\"small\" />}\n            &nbsp;{\" \"}\n            {`Avg First Frost: ${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day} | Average Rain(${currentMonth}): ${state.weatherData.averagePrecipitation.thisMonth} in`}\n          </span>\n        </Button>\n      );\n  };\n  return (\n    <div className=\"greenBarParent\" id=\"greenBarParent\">\n      <div className=\"greenBarWrapper\" style={greenBarWrapperBackground}>\n        <div className=\"addressBar\">\n          {state.progress > 0 &&\n          (window.location.pathname === \"/\" || state.progress > 4)\n            ? getAddress()\n            : \"\"}\n        </div>\n\n        {/* <div className=\"zoneBar\">\n          {state.progress > 0 &&\n          (window.location.pathname === \"/\" || state.progress > 4)\n            ? getZone()\n            : \"\"}\n        </div> */}\n        <div className=\"soilBar\">\n          {state.progress > 1 &&\n          (window.location.pathname === \"/\" || state.progress > 4)\n            ? getSoil()\n            : \"\"}\n        </div>\n        <div className=\"weatherBar\">\n          {state.progress > 2 &&\n          (window.location.pathname === \"/\" || state.progress > 4)\n            ? getWeatherData()\n            : \"\"}\n        </div>\n      </div>\n      <div className=\"greenBarExpansionPanel\" id=\"greenBarExpansionPanel\">\n        {/* <Button>Close</Button> */}\n\n        {expansionPanelComponent.component === \"location\" ? (\n          <LocationComponent />\n        ) : expansionPanelComponent.component === \"soil\" ? (\n          <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n            <div className=\"boxContainerRow\">\n              <SoilCondition caller=\"greenbar\" />\n            </div>\n          </div>\n        ) : expansionPanelComponent.component == \"weather\" ? (\n          <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n            <div className=\"boxContainerRow\">\n              <WeatherConditions caller=\"greenbar\" />\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {/* <LightButton>CLOSE</LightButton> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Greenbar;\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport {\n  cloudIcon,\n  referenceTooltip,\n  ReferenceTooltip,\n} from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { InfoRounded, Info } from \"@material-ui/icons\";\nimport { Tooltip } from \"@material-ui/core\";\n\nconst apiBaseURL = \"https://api.openweathermap.org/data/2.5/weather\";\nconst apiBaseURL_weather_gov =\n  \"https://api.weather.gov/points/39.7456,-97.0892\";\nconst apiKey = \"***REMOVED***\";\n\nconst geocodeAuth = \"***REMOVED***\";\n\n// TODO: look at https://agromonitoring.com/ api\n\nconst ForecastComponent = () => {\n  const [state, dispatch] = useContext(Context);\n  const [showTempIcon, setShowTempIcon] = useState(true);\n  const [temp, setTemp] = useState({\n    min: 0,\n    max: 0,\n    unit: \"F\",\n    iconURL: `https://placehold.it/20x20`,\n    iconDescription: \"No Data\",\n  });\n  // const [loading, setLoading] = useState\n\n  useEffect(() => {\n    // console.log(\"---forecastComponent---\");\n    // console.log(\"new features\");\n    setShowFeatures();\n    // state.progress >= 1 ? setShowFeatures(true) : setShow(false);\n    // fetchOldApi().then(data => {\n    //   console.log(data);\n    //   let url = data.properties.forecast;\n    //   fetchOldApiRecords(url).then(data => {\n    //     console.log(\"forecast\", data);\n    //   });\n    // });\n  }, [state.markers, state.progress]);\n\n  //   const fetchOldApi = async () => {\n  //     return (await fetch(apiBaseURL_weather_gov)).json();\n  //   };\n\n  //   const fetchOldApiRecords = async url => {\n  //     return (await fetch(url, { cache: \"no-cache\", mode: \"no-cors\" })).json();\n  //   };\n\n  const setShowFeatures = () => {\n    // get lat long\n    let latlng = [];\n    try {\n      latlng = state.markers[0];\n    } catch (e) {\n      console.trace(\"Forecast Component\", e);\n\n      latlng = [];\n    }\n\n    let apiCall = callWeatherApi(apiBaseURL, latlng);\n\n    apiCall.then((data) => {\n      let iconId = data.weather[0].icon;\n      let iconDescription = new String(data.weather[0].description);\n\n      let tempObj = {\n        min: data.main.temp_min,\n        max: data.main.temp_max,\n        unit: \"F\",\n        iconURL: `https://openweathermap.org/img/w/${iconId}.png`,\n        iconDescription: iconDescription,\n      };\n      setTemp(tempObj);\n      setShowTempIcon(false);\n    });\n\n    // if (state.address === \"\") {\n    let data = reverseGEO(latlng[0], latlng[1]);\n    data\n      .then((data) => {\n        // if (data.success === false) {\n        //   // console.log(data);\n        //   if (data.error.code === \"006\") {\n        //     let delayInMs = 5000;\n        //     setTimeout(function () {\n        //       let data = reverseGEO(latlng[0], latlng[1]);\n        //       data\n        //         .then((data) => {\n        //           // console.log(data);\n        //           let addressString = ``;\n        //           if (data.staddress) {\n        //             addressString = `${data.staddress}, ${data.state}`;\n        //           }\n        //           dispatch({\n        //             type: \"CHANGE_ADDRESS\",\n        //             data: {\n        //               address: addressString,\n        //               addressVerified: true,\n        //             },\n        //           });\n        //         })\n        //         .catch((e) => {\n        //           console.error(\"recursive error\", e);\n        //         });\n        //     }, delayInMs);\n        //   }\n        // console.log(data);\n        // } else {\n\n        if (data.localityInfo.informative) {\n          let lastInfo =\n            data.localityInfo.informative[\n              data.localityInfo.informative.length - 1\n            ];\n          // console.log(lastInfo);\n          // let addressString = ``;\n          let addressString = `${lastInfo.name}, ${data.city}`;\n          dispatch({\n            type: \"CHANGE_ADDRESS\",\n            data: {\n              address: addressString,\n              addressVerified: true,\n            },\n          });\n        }\n        if (data.postcode) {\n          dispatch({\n            type: \"UPDATE_ZIP_CODE\",\n            data: {\n              zipCode: parseInt(data.postcode),\n            },\n          });\n        }\n      })\n      // }\n      // )\n      .catch((e) => {\n        console.error(\"Geocode.xyz:\", e);\n      });\n    // }\n  };\n\n  const callWeatherApi = async (url, latlng) => {\n    let fetchData = await fetch(makeURLString(url, latlng));\n    let jsonData = await fetchData.json();\n    return jsonData;\n  };\n\n  const makeURLString = (url, params) => {\n    return `${url}?lat=${params[0]}&lon=${params[1]}&appid=${apiKey}&units=imperial`;\n  };\n\n  const reverseGEO = async (lat, lng) => {\n    // let url = `https://geocode.xyz/${lat},${lng}?json=1;\n    let url = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}&localityLanguage=en`;\n    let data = await fetch(url);\n    data = data.json();\n\n    return data;\n    // let ltlng =\n  };\n\n  return state.progress >= 1 ? (\n    showTempIcon ? (\n      <Fragment>\n        Forecast:&nbsp;\n        {cloudIcon(14, 20)}&nbsp; Loading..\n      </Fragment>\n    ) : (\n      <Fragment>\n        Forecast:\n        <img\n          width=\"50\"\n          height=\"50\"\n          src={temp.iconURL}\n          alt={temp.iconDescription}\n          title={temp.iconDescription}\n        />\n        {Number(temp.max.toFixed(1))} | {Number(temp.min.toFixed(1))}&nbsp;\n        {temp.unit}\n        <span className=\"ml-2\">\n          <ReferenceTooltip\n            source={\"openweathermap.org\"}\n            url={\"https://openweathermap.org/\"}\n          />\n        </span>\n      </Fragment>\n    )\n  ) : (\n    \"\"\n  );\n};\n\nexport default ForecastComponent;\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/header.scss\";\nimport DateComponent from \"./DateComponent\";\nimport Greenbar from \"./Greenbar/Greenbar\";\nimport { abbrRegion, airtableAPIURL } from \"../../shared/constants\";\nimport {\n  MDBNavbar,\n  MDBContainer,\n  MDBHamburgerToggler,\n  MDBCollapse,\n  MDBNavbarNav,\n  MDBNavItem,\n} from \"mdbreact\";\nimport { Button, Badge, Typography } from \"@material-ui/core\";\nimport { Redirect, Link, useHistory, NavLink } from \"react-router-dom\";\nimport ForecastComponent from \"./ForecastComponent\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\n// import { AirtableBearerKey } from \"../../shared/keys\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n// import cropData from \"../../shared/crop-data.json\";\nimport zone7Goal from \"../../shared/json/zone7/crop-goals.json\";\nimport zone6Goal from \"../../shared/json/zone6/crop-goals.json\";\nimport zone5Goal from \"../../shared/json/zone5/crop-goals.json\";\n// var sentimentAnalysis = require(\"sentiment-analysis\");\n// import { Link, Button } from \"@material-ui/core\";\nconst Header = () => {\n  const theme = useTheme();\n  const matchesLGUp = useMediaQuery(theme.breakpoints.up(\"lg\"));\n  const matchesMDBelow = useMediaQuery(theme.breakpoints.between(\"xs\", \"sm\"));\n  let history = useHistory();\n  const [state, dispatch] = useContext(Context);\n  const [collapse, setCollapse] = React.useState(false);\n  const [isRoot, setIsRoot] = React.useState(false);\n  const [redirectToRoot, setRedirectToRoot] = React.useState(false);\n  let isActive = {};\n\n  // const getAddressFromMarkers = async (lat, lon) => {\n  //   return (await fetch(`https://geocode.xyz/${lat},${lon}?geoit=json`)).json();\n  // };\n  const getUSDAZone = async (zip) => {\n    return await fetch(`//covercrop.tools/zone.php?zip=` + zip);\n  };\n\n  useEffect(() => {\n    if (state.zipCode !== 0) {\n      getUSDAZone(state.zipCode)\n        .then((response) => {\n          let data = response.json();\n          data.then((data) => {\n            let zipCode = data.zip;\n            let zone = data.zone;\n\n            if (state.zipCode === parseInt(zipCode)) {\n              dispatch({\n                type: \"UPDATE_ZONE\",\n                data: {\n                  zoneText: `Zone ${zone}`,\n                  zone: parseInt(zone),\n                },\n              });\n            }\n          });\n        })\n        .catch((e) => {\n          console.error(e);\n        });\n    }\n  }, [state.zipCode]);\n\n  const getAverageFrostDates = async (url) => {\n    await Axios.get(url).then((resp) => {\n      try {\n        let totalYears = resp.data.length;\n        // get last years value\n        // TODO: Take all years data into account\n        let mostRecentYearData = resp.data[totalYears - 1];\n\n        let maxDate = mostRecentYearData[\"max(date)\"];\n        let minDate = mostRecentYearData[\"min(date)\"];\n\n        let averageFrostObject = {\n          firstFrostDate: {\n            month: moment(minDate).format(\"MMMM\"),\n            day: parseInt(moment(minDate).format(\"D\")),\n          },\n          lastFrostDate: {\n            month: moment(maxDate).format(\"MMMM\"),\n            day: parseInt(moment(maxDate).format(\"D\")),\n          },\n        };\n        // firstFrostDate: {\n        //   month: \"October\",\n        //   day: 21\n        // },\n        // lastFrostDate: {\n        //   month: \"April\",\n        //   day: 20\n        // }\n        dispatch({\n          type: \"UPDATE_AVERAGE_FROST_DATES\",\n          data: {\n            averageFrost: averageFrostObject,\n          },\n        });\n      } catch (e) {\n        console.error(\"Average Frost Dates API::\", e);\n      }\n    });\n  };\n\n  useEffect(() => {\n    let { markers } = state;\n\n    if (state.progress === 0) {\n      // landing page\n      // get user ip\n      //NOTE: SSL Unavailabe for free version\n      // maybe https://ip-location.icu/ ?\n      // Axios.get(\"http://ip-api.com/json\").then((resp) => {\n      //   let ipData = resp.data;\n      //   let addressObjectPromise = getAddressFromMarkers(\n      //     ipData.lat,\n      //     ipData.lon\n      //   );\n      //   addressObjectPromise.then((data) => {\n      //     console.log(\"addressObject\", data);\n      //   });\n      // });\n    }\n\n    // update address on marker change\n    // ref forecastComponent\n\n    let lat = markers[0][0];\n    let lon = markers[0][1];\n\n    // let addressObjectPromise = getAddressFromMarkers(lat, lon);\n    // addressObjectPromise.then(data => {\n    //   console.log(\"addressObject\", data);\n    // });\n    // since this updates with state; ideally, weather and soil info should be updated here\n\n    // get current lat long and get county, state and city\n    // if (isRoot && state.progress < 4 && state.progress > 1) {\n    if (state.progress >= 2 && state.markers.length > 0) {\n      let revAPIURL = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`;\n\n      // console.log(revAPIURL);\n      // if(!state.ajaxInProgress)\n      // {\n\n      // }\n      Axios.get(revAPIURL)\n        .then(async (resp) => {\n          let city = resp.data.locality.toLowerCase();\n          let zip = resp.data.postcode;\n          let state = abbrRegion(\n            resp.data.principalSubdivision,\n            \"abbr\"\n          ).toLowerCase();\n\n          if (resp.data.postcode) {\n            dispatch({\n              type: \"UPDATE_ZIP_CODE\",\n              data: {\n                zipCode: parseInt(resp.data.postcode),\n              },\n            });\n          }\n\n          // call weather API to fetch details\n\n          // Get: Frost Free Days\n          // Dynamic Dates not set!\n          let frostFreeDaysURL = `http://128.192.142.200:3000/hourly?location=${city}%20${state}&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3e0&output=json`;\n          let frostFreeDatesURL = `http://128.192.142.200:3000/hourly?lat=${lat}&lon=${lon}&start=2014-07-01&end=2019-07-01&stats=min(date),max(date)&where=frost&group=growingyear&options=nomrms&output=json`;\n          // let frostFreeDaysURL = `http://128.192.142.200:3000/hourly?lat=${lat}&lon=${lon}&start=2014-07-01&end=2019-07-01&stats=min(date),max(date)&where=frost&group=growingyear&options=nomrms`;\n          let frostFreeDays = 0;\n\n          await Axios.get(frostFreeDaysURL)\n            .then((resp) => {\n              // console.log(resp);\n              getAverageFrostDates(frostFreeDatesURL);\n              let frostFreeDaysObject = resp.data[0];\n              for (var key in frostFreeDaysObject) {\n                if (frostFreeDaysObject.hasOwnProperty(key)) {\n                  // alert(key);\n                  frostFreeDays = frostFreeDaysObject[key];\n                }\n              }\n              return { frostFreeDays: frostFreeDays, city: city, state: state };\n            })\n            .then((obj) => {\n              // console.log(obj.frostFreeDays);\n              dispatch({\n                type: \"UPDATE_FROST_FREE_DAYS\",\n                data: { frostFreeDays: obj.frostFreeDays },\n              });\n\n              return obj;\n            })\n            .then(async (obj) => {\n              let currentMonthInt = moment().month() + 1;\n\n              // What was the 5-year average rainfall for city st during the month of currentMonthInt?\n              //  Dynamic dates ?\n              let averageRainForAMonthURL = `http://128.192.142.200:3000/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&where=month=${currentMonthInt}&output=json`;\n              // console.log(averageRainForAMonthURL);\n              // What was the 5-year average annual rainfall for city st?\n              let fiveYearAvgRainURL = `http://128.192.142.200:3000/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&output=json`;\n              if (!state.ajaxInProgress) {\n                dispatch({\n                  type: \"SET_AJAX_IN_PROGRESS\",\n                  data: true,\n                });\n                await Axios.get(averageRainForAMonthURL)\n                  .then((resp) => {\n                    // console.log(resp);\n                    let averagePrecipitationForCurrentMonth =\n                      resp.data[0][\"sum(precipitation)/5\"];\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth\n                    ).toFixed(2);\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth * 0.03937\n                    ).toFixed(2);\n                    dispatch({\n                      type: \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\",\n                      data: { thisMonth: averagePrecipitationForCurrentMonth },\n                    });\n                  })\n                  .catch((error) => {\n                    dispatch({\n                      type: \"SNACK\",\n                      data: {\n                        snackOpen: true,\n                        snackMessage: `Weather API error code: ${error.response.status} for getting 5 year average rainfall for this month`,\n                      },\n                    });\n                  });\n\n                if (!state.ajaxInProgress) {\n                  dispatch({\n                    type: \"SET_AJAX_IN_PROGRESS\",\n                    data: true,\n                  });\n                  await Axios.get(fiveYearAvgRainURL)\n                    .then((resp) => {\n                      let fiveYearAvgRainAnnual =\n                        resp.data[0][\"sum(precipitation)/5\"];\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual\n                      ).toFixed(2);\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual * 0.03937\n                      ).toFixed(2);\n                      dispatch({\n                        type: \"UPDATE_AVERAGE_PRECIP_ANNUAL\",\n                        data: { annual: fiveYearAvgRainAnnual },\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false,\n                      });\n                    })\n                    .catch((error) => {\n                      dispatch({\n                        type: \"SNACK\",\n                        data: {\n                          snackOpen: true,\n                          snackMessage: `Weather API error code: ${\n                            error.response.status\n                          } for getting 5 year average rainfall for ${obj.city.toUpperCase()}, ${obj.state.toUpperCase()}`,\n                        },\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false,\n                      });\n                    });\n                }\n              }\n            });\n        })\n        .then(() => {\n          dispatch({\n            type: \"SET_AJAX_IN_PROGRESS\",\n            data: false,\n          });\n        });\n    }\n    // check if isRoot\n\n    if (window.location.pathname === \"/\") {\n      setIsRoot(true);\n      // setRedirectToRoot(true);\n    } else {\n      setIsRoot(false);\n    }\n    // check value of progress state\n\n    switch (state.progress) {\n      case 0:\n        isActive[\"val\"] = 0;\n        break;\n    }\n\n    // document.getElementsByClassName('.nav-toggle')[0].addEventListener\n\n    // header contentWrapper padding for state.progess > 0\n\n    // if (state.progress !== 0) {\n    //   if (document.getElementsByClassName(\"contentWrapper\")) {\n    //     document\n    //       .getElementsByClassName(\"contentWrapper\")[0]\n    //       .classList.add(\"pb-5\");\n    //   }\n    // } else {\n    //   if (document.getElementsByClassName(\"contentWrapper\")) {\n    //     document\n    //       .getElementsByClassName(\"contentWrapper\")[0]\n    //       .classList.remove(\"pb-5\");\n    //   }\n    // }\n  }, [state.markers, state.progress, state.zone, state.weatherDataReset]);\n\n  useEffect(() => {\n    const z7Formattedgoal = zone7Goal.map((goal) => {\n      return { fields: goal };\n    });\n    const z6Formattedgoal = zone6Goal.map((goal) => {\n      return { fields: goal };\n    });\n    const z5Formattedgoal = zone5Goal.map((goal) => {\n      return { fields: goal };\n    });\n\n    switch (parseInt(state.zone)) {\n      case 7: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone7CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z7Formattedgoal,\n        });\n        // console.log(\"z7 data dispatched\");\n        break;\n      }\n      case 6: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone6CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z6Formattedgoal,\n        });\n        // console.log(\"z6 data dispatched\");\n        break;\n      }\n      case 5: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone5CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z5Formattedgoal,\n        });\n        // console.log(\"z5 data dispatched\");\n        break;\n      }\n      default: {\n        dispatch({\n          type: \"PULL_CROP_DATA\",\n          data: state.zone7CropData,\n        });\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: z7Formattedgoal,\n        });\n        // console.log(\"default data dispatched\");\n        break;\n      }\n    }\n  }, [state.zone]);\n\n  const toggleClass = (el, className) => el.classList.toggle(className);\n\n  const burgurClick = () => {\n    toggleClass(document.querySelector(\"body\"), \"nav-open\");\n  };\n\n  const toggleSingleCollapse = () => {\n    setCollapse(!collapse);\n  };\n  const setmyCoverCropActivationFlag = () => {\n    if (window.location.pathname === \"/\") {\n      if (state.progress > 4) {\n        dispatch({\n          type: \"ACTIVATE_MY_COVER_CROP_LIST_TILE\",\n          data: {\n            myCoverCropActivationFlag: true,\n            speciesSelectorActivationFlag: false,\n          },\n        });\n      }\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  const setSpeciesSelectorActivationFlag = () => {\n    // if (state.progress) {\n    if (window.location.pathname === \"/\") {\n      // console.log(\"pathname\", \"/\");\n      dispatch({\n        type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n        data: {\n          speciesSelectorActivationFlag: true,\n          myCoverCropActivationFlag: false,\n        },\n      });\n    } else {\n      // console.log(\"pathname\", window.location.pathname);\n      history.push(\"/\");\n      // return <Redirect to=\"/\" />;\n    }\n  };\n\n  return redirectToRoot ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <header className=\"d-print-none\">\n      <div className=\"topHeader\">\n        <NavLink to=\"/about\" activeClassName={`active`}>\n          ABOUT\n        </NavLink>\n        <span className=\"line\"></span>\n        <NavLink to=\"/help\" activeClassName={`active`}>\n          HELP\n        </NavLink>\n        <span className=\"line\"></span>\n        <NavLink to=\"/feedback\" activeClassName={`active`}>\n          FEEDBACK\n        </NavLink>\n      </div>\n\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-lg-2 col-12\">\n            <img\n              src=\"/images/neccc_wide_logo_color_web.jpg\"\n              alt=\"NECCC Logo\"\n              width=\"100%\"\n              onContextMenu={() => {\n                return false;\n              }}\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_PROGRESS\",\n                  data: {\n                    type: \"HOME\",\n                  },\n                });\n                // setRedirectToRoot(!redirectToRoot);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </div>\n          <div className=\"col-12 col-lg-10 col-sm-12 row\">\n            <div className=\"col-lg-4 col-12 d-flex align-items-center text-left\">\n              <div>\n                <Typography variant=\"body1\" className=\"font-weight-bold\">\n                  Cover Crop Decision Support Tools\n                </Typography>\n\n                <Typography variant=\"body1\">\n                  <DateComponent />\n                </Typography>\n              </div>\n            </div>\n            <div className=\"col-lg-8 col-12 d-flex align-items-center\">\n              <div>\n                <ForecastComponent />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"bottomHeader\">\n        <Button\n          size=\"large\"\n          component={NavLink}\n          exact\n          to={\"/cover-crop-explorer\"}\n          activeClassName=\"active\"\n        >\n          COVER CROP EXPLORER\n        </Button>\n        <Button\n          // className={state.speciesSelectorActivationFlag ? \"active\" : \"\"}\n          className={\n            isRoot ? (state.speciesSelectorActivationFlag ? \"active\" : \"\") : \"\"\n          }\n          onClick={setSpeciesSelectorActivationFlag}\n          size=\"large\"\n        >\n          SPECIES SELECTOR TOOL\n        </Button>\n\n        {state.progress >= 5 || state.selectedCrops.length > 0 ? (\n          <Badge\n            badgeContent={\n              state.selectedCrops.length > 0 ? state.selectedCrops.length : 0\n            }\n            color={\"error\"}\n          >\n            <Button\n              size=\"large\"\n              className={state.myCoverCropActivationFlag ? \"active\" : \"\"}\n              onClick={setmyCoverCropActivationFlag}\n            >\n              MY COVER CROP LIST\n            </Button>\n          </Badge>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <MDBNavbar light className=\"ham-navWrapper\">\n        <MDBContainer fluid>\n          <MDBHamburgerToggler\n            color=\"#598443\"\n            id=\"hamburger1\"\n            onClick={() => toggleSingleCollapse()}\n          />\n          <MDBCollapse isOpen={collapse} navbar>\n            <MDBNavbarNav className=\"ham-nav\">\n              <MDBNavItem>COVER CROP EXPLORER</MDBNavItem>\n              <MDBNavItem\n                onClick={setSpeciesSelectorActivationFlag}\n                active={\n                  isRoot\n                    ? state.speciesSelectorActivationFlag\n                      ? true\n                      : false\n                    : false\n                }\n              >\n                SPECIES SELECTOR TOOL\n              </MDBNavItem>\n              {state.progress >= 5 ? (\n                <MDBNavItem\n                  onClick={setmyCoverCropActivationFlag}\n                  active={state.myCoverCropActivationFlag ? true : false}\n                >\n                  MY COVER CROP LIST\n                </MDBNavItem>\n              ) : (\n                \"\"\n              )}\n            </MDBNavbarNav>\n          </MDBCollapse>\n        </MDBContainer>\n      </MDBNavbar>\n\n      <Greenbar />\n\n      {window.location.pathname === \"/about\" ||\n      window.location.pathname === \"/help\" ||\n      (window.location.pathname === \"/feedback\" &&\n        window.location.pathname !== \"/cover-crop-explorer\") ||\n      state.progress === 0 ? (\n        <div className=\"topBar\"></div>\n      ) : (\n        \"\"\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from \"react\";\nimport \"../../styles/landing.scss\";\nimport { Context } from \"../../store/Store\";\n// import { Typography, Button } from \"@material-ui/core\";\nimport { LightButton } from \"../../shared/constants\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nconst Landing = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const height = props.height;\n  const backgroundWrapper = {\n    background: `url(${props.bg})`,\n    backgroundSize: \"cover\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    paddingLeft: \"0px\",\n    paddingRight: \"0px\",\n  };\n  const boxWrapper = {\n    paddingBottom: \"0px\",\n    marginBottom: \"50px\",\n    backgroundColor: \"rgba(240,247,235,.8)\",\n    borderRadius: \"10px\",\n    border: \"1px solid #598445\",\n  };\n\n  const incrementProgress = (incVal) => {\n    incVal = parseInt(incVal);\n    if (incVal === 1) {\n      if (state.progress === 0) {\n        dispatch({\n          type: \"UPDATE_PROGRESS\",\n          data: {\n            type: \"INCREMENT\",\n          },\n        });\n      }\n    }\n  };\n  return (\n    <Box\n      style={{\n        background: `url(${props.bg})`,\n        backgroundSize: \"cover\",\n        height: `${height}px`,\n        overflow: \"hidden\",\n      }}\n    >\n      <div className=\"container-fluid\" style={backgroundWrapper}>\n        <div className=\"row boxContainerRow mt-2\" style={boxWrapper}>\n          <div className=\"col-12\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <Typography variant=\"h5\" align=\"center\">\n                    Welcome to the Northeast Cover Crop Species Selector Tool\n                  </Typography>\n                </div>\n                <div className=\"row pt-4 text-left\">\n                  <div className=\"col-12\">\n                    <Typography\n                      variant=\"body1\"\n                      gutterBottom\n                      style={{ paddingBottom: \"1em\" }}\n                    >\n                      You are currently interacting with the Beta version of the\n                      Northeast Cover Crop Species Selector Tool. We seek\n                      feedback about the usability and usefulness of this tool.\n                      Our goal is to encourage and support the use of cover\n                      crops in the Northeast US.\n                    </Typography>\n\n                    <Typography\n                      variant=\"body1\"\n                      gutterBottom\n                      style={{ paddingBottom: \"1em\" }}\n                    >\n                      The cover crop data you will see built upon information\n                      found in the Midwest Cover Crops Council (MCCC) species\n                      selector tool, the USDA PLANTS database, and a seeding\n                      rate calculator developed by USDA NRCS in NY. These\n                      initial data have been reviewed, modified, and greatly\n                      expanded upon by cover crop experts in the Northeast in\n                      each USDA plant hardiness zone to best match the cropping\n                      system types, goals, and constraints found in our region.\n                    </Typography>\n                    <Typography\n                      variant=\"body1\"\n                      gutterBottom\n                      style={{ paddingBottom: \"1em\" }}\n                    >\n                      In the future, this platform will host a variety of tools\n                      including a cover crop mixture and seeding rate calculator\n                      and an economics calculator. Our ultimate goal is to\n                      provide a suite of interconnected tools that function\n                      together seamlessly.\n                    </Typography>\n                    <Typography\n                      variant=\"body1\"\n                      style={{ fontWeight: \"bold\", paddingBottom: \"1em\" }}\n                      align=\"left\"\n                      gutterBottom\n                    >\n                      Thank you for your time and consideration. We look forward\n                      to your feedback. You may provide input by visiting our\n                      Feedback page.\n                    </Typography>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row pt-4 pb-4\">\n          <div className=\"col-12\">\n            <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n          </div>\n        </div>\n      </div>\n    </Box>\n  );\n};\n\nexport default Landing;\n\n// <aside className=\"landingWrapper\" style={setWrapperStyle(props.bg)}>\n//       <div className=\"boxWrapper\">\n//         <aside className=\"text-left\">\n//           <h2>Welcome to the Northeast Cover Crop Species Selector Tool</h2>\n//           <p>\n//             You are currently interacting with the Beta version of the Northeast\n//             Cover Crop Species SelectorDecision Support Tool. We seek feedback\n//             about the usability and usefulness of this tool. Our goal is to\n//             encourage and support the use of cover crops in the Northeast US\n//           </p>\n//           <p>\n//             The cover crop data you will see built upon information found in the\n//             Midwest Cover Crops Council (MCCC) species selector tool, the USDA\n//             PLANTS database, and a seeding rate calculator developed by USDA\n//             NRCS in NY. These initial data have been reviewed, modified, and\n//             greatly expanded upon by cover crop experts in the Northeast in each\n//             USDA plant hardiness zone to best match the cropping system types,\n//             goals, and constraints found in our region\n//           </p>\n//           <p>\n//             In the future, this platform will host a variety of tools including\n//             a cover crop mixture and seeding rate calculator and an economics\n//             calculator. Our ultimate goal is to provide a suite of\n//             interconnected tools that function together seamlessly.\n//           </p>\n\n//           <p className=\"mt-4\">\n//             {\" \"}\n//             Thank you for your time and consideration. We look forward to your\n//             feedback. You may provide input by visiting our Feedback page.\n//           </p>\n//         </aside>\n//         <div className=\"nextButton pt-4\">\n\n//           <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n//         </div>\n//       </div>\n//     </aside>\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../store/Store\";\nimport { LightButton } from \"./constants\";\n\nconst ProgressButtonsInner = props => {\n  let isDisabled = props.disabled;\n\n  const [state, dispatch] = useContext(Context);\n\n  const changeProgress = type => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\"\n        }\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\"\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <LightButton onClick={() => changeProgress(\"decrement\")}>\n        {\" \"}\n        back\n      </LightButton>\n      <LightButton\n        onClick={() => changeProgress(\"increment\")}\n        disabled={isDisabled}\n        className=\"ml-3\"\n      >\n        next\n      </LightButton>\n    </Fragment>\n  );\n};\n\nexport default ProgressButtonsInner;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport ProgressButtonsInner from \"./ProgressButtonsInner\";\n\nconst ProgressButtons = () => {\n  const [state, dispatch] = useContext(Context);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  useEffect(() => {\n    disableLogic(state.progress, state.selectedGoals.length, state.soilData);\n  }, [state]);\n\n  const disableLogic = (progress, goalsLength, soilData) => {\n    // console.log(parseInt(progress));\n    switch (parseInt(progress)) {\n      case 1: {\n        // location selection state\n        if (state.zone === 0 || state.address === \"\") {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n        break;\n      }\n      // case 2: {\n      //   if (\n      //     // soilData.Drainage_Class.length === 0 ||\n      //     // soilData.Drainage_Class === \"\" ||\n      //     // soilData.Flooding_Frequency === null ||\n      //     // soilData.Flooding_Frequency.length === 0 ||\n      //     // soilData.Flooding_Frequency === \"\"\n      //     false\n      //   ) {\n      //     setIsDisabled(true);\n      //   } else {\n      //     setIsDisabled(false);\n      //   }\n      // }\n      case 4: {\n        // goals selection state\n        if (goalsLength > 3 || goalsLength < 1) {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n        break;\n      }\n      default: {\n        setIsDisabled(false);\n        break;\n      }\n    }\n  };\n\n  return renderProgressButtons(state.progress, isDisabled);\n};\n\nconst renderProgressButtons = (progress, isDisabled) => {\n  if (progress === 0) return \"\";\n  else {\n    return (\n      <div>\n        <ProgressButtonsInner disabled={isDisabled} />\n      </div>\n    );\n  }\n};\n\nexport default ProgressButtons;\n","import React from \"react\";\n// import { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport \"../styles/progressIndicator.scss\";\nimport { Typography } from \"@material-ui/core\";\n\nconst checkProgressStatus = (actualProgress, expectedProgress) => {\n  if (actualProgress === expectedProgress) {\n    // exact progress\n    return \"progress-step active\";\n  } else if (actualProgress > expectedProgress) {\n    return \"progress-step active\";\n  } else {\n    return \"progress-step\";\n  }\n};\n\nconst ProgressBar = () => {\n  const [state, dispatch] = React.useContext(Context);\n  return (\n    <div className=\"gprogress\">\n      <Typography variant=\"body1\" className=\"progress-track\" component=\"div\">\n        Question {state.progress} of 4\n      </Typography>\n      <div className=\"progress-diagram\">\n        <div\n          id=\"step1\"\n          className={checkProgressStatus(state.progress, 1)}\n        ></div>\n\n        <div\n          id=\"step2\"\n          className={checkProgressStatus(state.progress, 2)}\n        ></div>\n\n        <div\n          id=\"step3\"\n          className={checkProgressStatus(state.progress, 3)}\n        ></div>\n\n        <div\n          id=\"step4\"\n          className={checkProgressStatus(state.progress, 4)}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Badge, Chip, Tooltip, Avatar } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nconst GoalTag = (props) => {\n  const [state, dispatch] = useContext(Context);\n\n  let goalDescription = props.goalDescription;\n  let goalTitle = props.goaltTitle;\n  let key = props.id;\n  let goal = props.goal;\n\n  useEffect(() => {\n    if (state.selectedGoals.length > 0) {\n      state.selectedGoals.forEach((val, index) => {\n        document\n          .getElementsByClassName(val.toUpperCase())[0]\n          .classList.add(\"active\");\n      });\n    }\n  }, []);\n  const updateSelectedGoals = (item, key) => {\n    const goals = [...state.selectedGoals];\n\n    if (goals.indexOf(item.fields[\"Cover Crop Goal\"]) === -1) {\n      // does not exist, dispatch to state and add to local state\n\n      document.getElementById(`chip${key}`).classList.add(\"active\");\n      dispatch({\n        type: \"ADD_SELECTED_GOALS\",\n        data: item.fields[\"Cover Crop Goal\"],\n      });\n\n      //   document.getElementById(`avatar${key}`).innerHTML =\n    } else {\n      // exists, remove it from the state and update the state\n      let index = goals.indexOf(item.fields[\"Cover Crop Goal\"]);\n      goals.splice(index, 1);\n\n      // make it lighter on the ui\n\n      document.getElementById(`chip${key}`).classList.remove(\"active\");\n\n      dispatch({\n        type: \"UPDATE_SELECTED_GOALS\",\n        data: goals,\n      });\n    }\n  };\n  return (\n    <Tooltip\n      enterDelay={1000}\n      enterNextDelay={1000}\n      id={`tooltip-${props.id}`}\n      placement=\"top-end\"\n      arrow\n      title={\n        <div className=\"tooltipTextContainer text-center\">\n          <p>{goalDescription}</p>\n        </div>\n      }\n      key={`tooltip${key}`}\n    >\n      <Chip\n        disabled={\n          state.selectedGoals.length >= 3\n            ? state.selectedGoals.includes(goalTitle)\n              ? false\n              : true\n            : false\n        }\n        avatar={\n          state.selectedGoals.length !== 0 &&\n          state.selectedGoals.includes(goalTitle) ? (\n            <Avatar id={`avatar${key}`}>\n              {state.selectedGoals.indexOf(goalTitle) + 1}\n            </Avatar>\n          ) : (\n            <Avatar className=\"d-none\"></Avatar>\n          )\n        }\n        // style={{ textAlign: \"left\" }}\n        label={goalTitle.toUpperCase()}\n        onClick={() => updateSelectedGoals(goal, key)}\n        key={`chip${key}`}\n        id={`chip${key}`}\n        size=\"medium\"\n        variant=\"outlined\"\n        // color={\"primary\"}\n        className={`goal enabled ${goalTitle.toUpperCase()}`}\n      />\n    </Tooltip>\n  );\n};\n\nexport default GoalTag;\n","// TODO: Goal tags are not responsive!\nimport React, { useContext, useEffect } from \"react\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/goalsSelector.scss\";\nimport { CircularProgress, makeStyles, Typography } from \"@material-ui/core\";\n\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport GoalTag from \"./GoalTag\";\nimport { airtableAPIURL } from \"../../shared/constants\";\nimport { AirtableBearerKey } from \"../../shared/keys\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst goalSkeletonStyle = {\n  height: \"50px\",\n  width: \"100%\",\n  borderRadius: \"10px\",\n};\n\nconst GoalsSelector = () => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n\n  const goalsURL = \"/Cover%20Crop%20Goals?maxRecords=300\";\n\n  const headers = new Headers();\n\n  const fetchGoals = async (apiBase) => {\n    let finalGoalsURL = apiBase + goalsURL;\n    // console.log(finalGoalsURL);\n    dispatch({\n      type: \"SET_AJAX_IN_PROGRESS\",\n      data: true,\n    });\n    headers.append(\"Authorization\", `Bearer ${AirtableBearerKey}`);\n    await fetch(finalGoalsURL, { headers: headers })\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        let fields = response.records;\n        let records = [];\n        for (let index in fields) {\n          if (fields[index].fields[\"Include\"]) {\n            // console.log(fields[index].fields);\n            records.push(fields[index]);\n          }\n        }\n        // if (response.records.fields[\"Include\"]) {\n\n        // }\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: records,\n        });\n      })\n      .then(() => {\n        dispatch({\n          type: \"SET_AJAX_IN_PROGRESS\",\n          data: false,\n        });\n      });\n  };\n\n  return (\n    <div\n      className=\"container-fluid mt-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        className=\"row boxContainerRow goalsContainer\"\n        style={{ height: \"480px\" }}\n      >\n        <div className=\"col-12 goalsBoxContainer\">\n          <Typography variant=\"h4\" gutterBottom>\n            What are your cover cropping goals?\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            align=\"center\"\n            color=\"secondary\"\n            gutterBottom\n          >\n            Select up to three. Hover for more information\n          </Typography>\n          {state.allGoals.length === 0 ? (\n            <div className=\"goals col-lg-12\">\n              <div className=\"row\">\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n                <div className=\"col-3\">\n                  <Skeleton style={goalSkeletonStyle} />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div\n              className=\"goals row pt-4\"\n              style={{ justifyContent: \"center\" }}\n            >\n              {state.allGoals.length > 0 ? (\n                state.allGoals.map((goal, key) =>\n                  goal.fields[\"Include\"] ? (\n                    <div key={key} className={`${classes.root} col`}>\n                      <GoalTag\n                        goal={goal}\n                        id={key}\n                        goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                        goalDescription={goal.fields[\"Description\"]}\n                      />\n                    </div>\n                  ) : (\n                    \"\"\n                  )\n                )\n              ) : (\n                <Skeleton\n                  animation=\"pulse\"\n                  height=\"100\"\n                  width=\"100\"\n                  variant=\"rect\"\n                />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GoalsSelector;\n\n{\n  /* <div className=\"goalsContainer mt-5\">\n<div\n  className=\"row boxContainerRow goalsBoxContainer\"\n  style={{ height: \"480px\" }}\n>\n  <div className=\"col-xl-12\">\n    <h1 className=\"text-center\">What are your cover cropping goals?</h1>\n  </div>\n  <div className=\"col-xl-12\">\n    <p className=\"text-center\">\n      Select up to three. Hover for more information\n    </p>\n  </div>\n  {state.allGoals.length === 0 ? (\n    <div className=\"goals col-lg-12\">\n\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n        <div className=\"col-3\">\n          <Skeleton style={goalSkeletonStyle} />\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"goals row\" style={{ justifyContent: \"center\" }}>\n      {state.allGoals.length > 0 ? (\n        state.allGoals.map((goal, key) =>\n          goal.fields[\"Include\"] ? (\n            <div key={key} className={`${classes.root} col`}>\n              <GoalTag\n                goal={goal}\n                id={key}\n                goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                goalDescription={goal.fields[\"Description\"]}\n              />\n            </div>\n          ) : (\n            \"\"\n          )\n        )\n      ) : (\n        <Skeleton\n          animation=\"pulse\"\n          height=\"100\"\n          width=\"100\"\n          variant=\"rect\"\n        />\n      )}\n    </div>\n  )}\n</div>\n</div> */\n}\n","import React, { useContext } from \"react\";\nimport MapComponent from \"./Map\";\nimport { Context } from \"../../store/Store\";\n// import AutoCompleteComponent from \"./AutoComplete\";\nimport SoilConditions from \"./SoilConditions\";\nimport WeatherConditions from \"./WeatherConditions\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport MapContext from \"./MapContext\";\nimport { Typography } from \"@material-ui/core\";\nimport SoilCondition from \"./SoilCondition\";\n// import { TextField } from \"@material-ui/core\";\n\nconst LocationConfirmation = () => {\n  const [state, dispatch] = useContext(Context);\n  return (\n    <div\n      className=\"container-fluid mt-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        className=\"row boxContainerRow\"\n        style={{ textAlign: \"left\", minHeight: \"480px\" }}\n      >\n        <div className=\"col-xl-6 col-lg-12\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-lg-6\">\n                {/* <MapComponent\n                  width=\"100%\"\n                  height=\"100%\"\n                  minzoom={4}\n                  maxzoom={20}\n                  \n                /> */}\n                <MapContext\n                  width=\"100%\"\n                  height=\"200px\"\n                  minzoom={4}\n                  maxzoom={20}\n                  from=\"confirmation\"\n                />\n              </div>\n              <div className=\"col-lg-6\">\n                <div className=\"col-12\">\n                  <Typography variant=\"h3\">Location Details</Typography>\n                </div>\n                <div className=\"col-12 pt-2\">\n                  <Typography variant=\"body1\">\n                    Your cover crop recommendations will come from the Plant\n                    Hardiness Zone {state.zone} NECCC dataset.\n                  </Typography>\n                </div>\n                <div className=\"col-12\">\n                  <Typography\n                    variant=\"body1\"\n                    className=\"pt-2 font-weight-bold\"\n                    style={{\n                      color: CustomStyles().lighterGreen,\n                    }}\n                  >\n                    {state.address.length > 0\n                      ? `${state.address.toString().substring(0, 35)}...`\n                      : \"Loading...\"}\n                  </Typography>\n                </div>\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\"></div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\">\n                <Typography variant=\"body1\">\n                  Disclaimer: Cover crop recommendations are based on expert\n                  opinions. Your cover crop performance and seeding rates will\n                  vary based on location, management, cultivars, and many other\n                  variables. Consult an{\" \"}\n                  <a\n                    href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detailfull/national/programs/financial/csp/?&cid=nrcsdev11_000242\"\n                    title=\"click to consult an nrcs extension expert\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    NRCS Extension Expert\n                  </a>{\" \"}\n                  for detailed guidance for detailed guidance. Cover crop\n                  incentive programs may dictate seeding rate ranges and methods\n                  and planting and termination dates. Consult your program\n                  contact to ensure your plans complyent, cultivars, and many\n                  other variables.\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-5 offset-xl-1 col-lg-12\">\n          <div className=\"container-fluid\">\n            {state.progress === 2 ? <SoilCondition /> : \"\"}\n            {state.progress === 3 ? <WeatherConditions /> : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationConfirmation;\n","import React, { useEffect, useState, Fragment, useContext } from \"react\";\nimport moment from \"moment\";\nimport { Tooltip, withStyles, Typography } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/growthWindow.scss\";\n\nconst GrowthWindowComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  //   const [isCashCropMonth, setIsCashCropMonth] = useState(false);\n  let isCashCropMonth = false;\n  let from = props.from;\n  let cropData = props.data;\n  let month = props.month;\n  let id = props.id;\n  let cropLegendObj = {\n    Early: \"\",\n    Mid: \"\",\n    class: \"\",\n    isCashCropMonth: false,\n  };\n\n  var fullMonth = moment().localeData().months();\n\n  const setMonthVals = (id) => {\n    let cropDataLegendLabel_Early = cropData[`${fullMonth[id]}, Early`]\n      ? cropData[`${fullMonth[id]}, Early`]\n      : [];\n\n    let cropDataLegendLabel_Mid = cropData[`${fullMonth[id]}, Mid`]\n      ? cropData[`${fullMonth[id]}, Mid`]\n      : [];\n\n    if (\n      state.cashCropData.dateRange.startDate !== \"\" &&\n      state.cashCropData.dateRange.endDate !== \"\"\n    ) {\n      if (\n        id >= state.cashCropData.dateRange.startDate - 1 ||\n        id <= state.cashCropData.dateRange.endDate - 1\n      ) {\n        cropLegendObj.isCashCropMonth = true;\n      } else {\n        cropLegendObj.isCashCropMonth = false;\n      }\n    }\n\n    if (cropDataLegendLabel_Early || cropDataLegendLabel_Mid) {\n      if (cropDataLegendLabel_Early) {\n        cropLegendObj.Early = cropDataLegendLabel_Early;\n      } else {\n        cropLegendObj.Early = \"\";\n      }\n      if (cropDataLegendLabel_Mid) {\n        cropLegendObj.Mid = cropDataLegendLabel_Mid;\n      } else {\n        cropLegendObj.Mid = \"\";\n      }\n    } else {\n      cropLegendObj.Early = \"\";\n      cropLegendObj.Mid = \"\";\n    }\n  };\n\n  const sanitizeLabels = () => {\n    // IF: check if cropLegendObj values are same ? or different.\n    // Reliable establishment/growth : className = \"reliableEstablishment\"\n    // Temperature/moisture risk to establishment/growth: \"t_mRiskToEstablishment\"\n    // Frost Seeding: \"frostSeeding\"\n\n    if (cropLegendObj.Early === cropLegendObj.Mid) {\n      // good to go\n    } else {\n    }\n  };\n\n  switch (month) {\n    case 0: {\n      setMonthVals(0);\n\n      break;\n    }\n    case 1: {\n      setMonthVals(1);\n      break;\n    }\n    case 2: {\n      setMonthVals(2);\n      break;\n    }\n    case 3: {\n      setMonthVals(3);\n      break;\n    }\n    case 4: {\n      setMonthVals(4);\n      break;\n    }\n    case 5: {\n      setMonthVals(5);\n      break;\n    }\n    case 6: {\n      setMonthVals(6);\n      break;\n    }\n    case 7: {\n      setMonthVals(7);\n      break;\n    }\n    case 8: {\n      setMonthVals(8);\n    }\n    case 9: {\n      setMonthVals(9);\n      break;\n    }\n    case 10: {\n      setMonthVals(10);\n      break;\n    }\n    case 11: {\n      setMonthVals(11);\n      break;\n    }\n    default: {\n      setMonthVals(0);\n      break;\n    }\n  }\n\n  return from === \"calendar\" ? (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer `\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n      style={\n        month >= 11\n          ? { borderLeft: \"none\", paddingBottom: \"0px\" }\n          : { paddingBottom: \"0px\" }\n      }\n    >\n      {/* {month} */}\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? \"legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row\"\n                : \"legendContainer legendColor d-flex flex-direction-row\"\n              : \"legendContainer legendColor d-flex flex-direction-row\"\n            : \"legendContainer legendColor d-flex flex-direction-row\"\n        }\n      >\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              {cropLegendObj.Early.map((v, i) => (\n                <em key={i}>\n                  <Typography variant=\"body1\">{v}</Typography>\n                </em>\n              ))}\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early.join(\" \")}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`midPart ${cropLegendObj.Mid}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  ) : from === \"tableOnlyCashCropWindow\" ? (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer`\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n    >\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? `legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row `\n                : \"legendContainer legendColor d-flex flex-direction-row \"\n              : \"legendContainer legendColor d-flex flex-direction-row \"\n            : `legendContainer legendColor d-flex flex-direction-row `\n        }\n      >\n        <div\n          className={`earlyPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n        <div\n          className={`midPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n      </div>\n    </td>\n  ) : (\n    <td\n      className={\n        state.cashCropData.dateRange.startDate !== \"\"\n          ? month >=\n            moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n              \"M\"\n            ) -\n              1 //these two should come from sidebar dateRange\n            ? month <=\n              moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1\n              ? `growthWindowCell ${id} cashCropLegendContainer linear`\n              : `growthWindowCell ${id}`\n            : `growthWindowCell ${id}`\n          : `growthWindowCell ${id}`\n      }\n    >\n      <div className=\"legendContainer legendColor d-flex flex-direction-row \">\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Early}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Mid}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  );\n};\n\nexport default GrowthWindowComponent;\n","import React from \"react\";\nimport Timeline from \"@material-ui/lab/Timeline\";\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport { Typography } from \"@material-ui/core\";\n\nconst SoilDrainageTimeline = ({ drainage = [] }) => {\n  const drainageClasses = [\n    \"Very poorly drained\",\n    \"Poorly drained\",\n    \"Somewhat poorly drained\",\n    \"Moderately well drained\",\n    \"Well drained\",\n    \"Excessively drained\",\n    \"Saturated muck\",\n    \"Well drained muck\",\n  ];\n  //   const classIntersection = drainageClasses.filter((x) => drainage.includes(x));\n  //   console.log(classIntersection);\n  return (\n    <Timeline align=\"right\">\n      {drainageClasses.map((drainageClass, index) => {\n        const fullLength = drainageClasses.length;\n        return (\n          <TimelineItem key={index}>\n            <TimelineSeparator>\n              {drainage.includes(drainageClass) ? (\n                <TimelineDot\n                  style={{\n                    backgroundColor: CustomStyles().progressColor,\n                  }}\n                />\n              ) : (\n                \"\"\n              )}\n              {index === fullLength - 1 ? \"\" : <TimelineConnector />}\n            </TimelineSeparator>\n\n            <TimelineContent className=\"text-capitalize\">\n              {drainage.includes(drainageClass) ? (\n                <Typography variant=\"body1\" className=\"font-weight-bold\">\n                  {drainageClass}\n                </Typography>\n              ) : (\n                <Typography variant=\"body1\">{drainageClass}</Typography>\n              )}\n            </TimelineContent>\n          </TimelineItem>\n        );\n      })}\n    </Timeline>\n  );\n};\n\nexport default SoilDrainageTimeline;\n","import React, { useState, useEffect, Fragment, Suspense } from \"react\";\nimport Axios from \"axios\";\n// import { CropImage } from \"../../shared/constants\";\n// import Carousel, { Modal, ModalGateway } from \"react-images\";\nimport { LuminousGallery } from \"luminous-lightbox\";\nimport \"../../../node_modules/luminous-lightbox/dist/luminous-basic.css\";\nimport { Typography } from \"@material-ui/core\";\n\nconst PhotoComponent = ({\n  imageData = {\n    Directory: \"\",\n    Notes: null,\n    \"Key Thumbnail\": \"\",\n    \"Cover Crop\": \"\",\n  },\n}) => {\n  const imagesApiUrl = imageData\n    ? `//covercrop.tools/files.php?dir=${imageData.Directory}`\n    : null;\n  const [imageList, setImageList] = useState([]);\n\n  const getImages = async () => {\n    return await Axios({\n      url: imagesApiUrl,\n      method: \"get\",\n    });\n  };\n\n  useEffect(() => {\n    let imagePromise = getImages();\n    imagePromise\n      .then((response) => {\n        if (response.data.result === \"success\") {\n          if (response.data.data.length !== 0) {\n            // response.data.data.forEach((url) => {});\n          } else {\n            setImageList([]);\n          }\n          setImageList(response.data.data);\n        }\n      })\n      .then(() => {\n        var galleryOpts = {\n          // Whether pressing the arrow keys should move to the next/previous slide.\n          arrowNavigation: true,\n        };\n\n        var luminousOpts = {\n          // These options have the same defaults and potential values as the Luminous class.\n          caption: (trigger) => {\n            return trigger.dataset.caption;\n          },\n        };\n        new LuminousGallery(\n          document.querySelectorAll(\".Photo\"),\n          galleryOpts,\n          luminousOpts\n        );\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }, []);\n\n  return imageData !== null && imageList.length !== 0 ? (\n    <Suspense fallback={<div className=\"col\">Loading..</div>}>\n      {imageList.map((url, index) => (\n        <div\n          className=\"p-2 d-flex flex-column align-items-center justify-content-center\"\n          key={`Photo${index}`}\n        >\n          <a\n            className=\"Photo\"\n            href={`/${url}`}\n            data-caption={getPhotoCredits(url, imageData[\"Cover Crop\"])}\n          >\n            <img\n              alt={`Photo ${index}`}\n              src={`/${url}`}\n              height=\"125\"\n              width=\"200\"\n            />\n          </a>\n\n          <div>\n            <Typography variant=\"caption\">\n              {getPhotoCredits(url, imageData[\"Cover Crop\"])}\n            </Typography>\n          </div>\n        </div>\n      ))}\n    </Suspense>\n  ) : (\n    \"\"\n  );\n};\n\nexport default PhotoComponent;\n\nconst getPhotoCredits = (url = \"\", cropName = \"\") => {\n  // get base file name\n  let fileName = baseName(url);\n\n  let fileNameArray = fileName.split(\"_\");\n\n  // get last value of array\n  const {\n    length,\n    [length - 1]: last,\n    [length - 2]: secondLast,\n  } = fileNameArray;\n  const year = parseInt(last);\n\n  return `${cropName} - ${secondLast} [${year}]`;\n};\n\nconst baseName = (path = \"\") => {\n  let separator = \"/\";\n  const windowsSeparator = \"\\\\\";\n  if (path.includes(windowsSeparator)) {\n    separator = windowsSeparator;\n  }\n  return path.slice(path.lastIndexOf(separator) + 1);\n};\n","import React, { useState, useEffect, Fragment, useMemo } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst DictionaryContent = ({ dictData = [{}] }) => {\n  const [groupedCats, setGroupedCats] = useState({});\n\n  const groupBy = (arr, property) => {\n    return arr.reduce((acc, cur) => {\n      acc[cur[property]] = [...(acc[cur[property]] || []), cur];\n      return acc;\n    }, {});\n  };\n\n  const allCats = useMemo(() => {\n    return dictData.filter(\n      (dict) =>\n        dict[\"Information Sheet\"] === \"checked\" ||\n        dict[\"Infromation Sheet\"] === \"checked\"\n    );\n  }, [dictData]);\n\n  useEffect(() => {\n    const groupedCategories = groupBy(allCats, \"Category\");\n    setGroupedCats(groupedCategories);\n  }, [allCats]);\n\n  const RenderCats = () => {\n    const catOptions = Object.keys(groupedCats).map((key, index) => (\n      <div className=\"row col-12\" key={index}>\n        <div className=\"col-12\">\n          <Typography variant=\"h6\"> {key}</Typography>\n        </div>\n        {groupedCats[key].map((innerCat, index2) => (\n          <div className=\"col-6\" key={index2}>\n            <Typography variant=\"body1\" className=\"p-3\">\n              <b>{innerCat[\"Variable\"]}:</b> {innerCat[\"Description\"]}\n            </Typography>\n          </div>\n        ))}\n      </div>\n    ));\n\n    return catOptions;\n  };\n\n  return (\n    <div className=\"row pt-4 dictionaryContentWrapper\">\n      {Object.keys(groupedCats).length > 0 ? <RenderCats /> : \"\"}\n    </div>\n  );\n};\n\nexport default DictionaryContent;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport { Context } from \"../../store/Store\";\nimport z7Dict from \"../../shared/json/zone7/data-dictionary.json\";\nimport z6Dict from \"../../shared/json/zone6/data-dictionary.json\";\nimport z5Dict from \"../../shared/json/zone6/data-dictionary.json\";\nimport DictionaryContent from \"./DictionaryContent\";\n\nconst InformationSheetDictionary = (props) => {\n  const [dictionary, setDictionary] = useState([]);\n  const { zone } = useContext(Context);\n\n  useEffect(() => {\n    document.title = \"Data Dictionary\";\n    switch (parseInt(zone)) {\n      case 7: {\n        setDictionary(z7Dict);\n        break;\n      }\n      case 6: {\n        setDictionary(z6Dict);\n        break;\n      }\n      case 5: {\n        setDictionary(z5Dict);\n        break;\n      }\n      default: {\n        setDictionary(z7Dict);\n        break;\n      }\n    }\n  }, [zone]);\n\n  return (\n    <Fragment>\n      <div className=\"row pt-4\">\n        <div\n          className=\"col-12\"\n          style={{\n            backgroundColor: \"rgb(43, 123, 121)\",\n            height: \"50px\",\n            borderTopLeftRadius: \"20px\",\n            borderTopRightRadius: \"20px\",\n          }}\n        ></div>\n      </div>\n      <div className=\"row mt-4 p-3\">\n        <div className=\" col-12\">\n          <Typography variant=\"h4\">Information Sheet Dictionary</Typography>\n        </div>\n        <div className=\"col-12\">\n          <Typography variant=\"body2\">\n            <Info style={{ color: \"rgb(43, 123, 121)\" }} /> &nbsp; These terms\n            and definitions are based on expert opinion\n          </Typography>\n        </div>\n      </div>\n      <hr />\n\n      <DictionaryContent dictData={dictionary} />\n    </Fragment>\n  );\n};\n\nexport default InformationSheetDictionary;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  getRating,\n  RenderSeedPriceIcons,\n  allMonths,\n} from \"../../shared/constants\";\nimport {\n  Typography,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from \"@material-ui/core\";\nimport SoilDrainageTimeline from \"./SoilDrainageTimeline\";\n\nimport { ExpandMore, FiberManualRecord } from \"@material-ui/icons\";\nimport PhotoComponent from \"./PhotoComponent\";\nimport InformationSheetDictionary from \"./InformationSheetDictionary\";\nimport GrowthWindowComponent from \"../CropSelector/GrowthWindow\";\nimport moment from \"moment-timezone\";\nconst InformationSheetContent = (props) => {\n  const crop = props.crop;\n  const from = props.from || \"direct\";\n  useEffect(() => {\n    document.title = `Information Sheet for ${crop[\"Cover Crop Name\"]}`;\n  }, []);\n\n  return from === \"direct\" ? (\n    <Fragment>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Cover Crop Description\n          </Typography>\n\n          <Typography variant=\"body1\" className=\"p-3\">\n            {crop[\"Crop Description\"]}\n          </Typography>\n        </div>\n      </div>\n      <div\n        className=\"d-flex justify-content-center mt-1 mb-1 photosWrapper\"\n        style={{\n          overflowX: \"auto\",\n          whiteSpace: \"nowrap\",\n          flexWrap: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n        }}\n      >\n        <PhotoComponent\n          imageData={crop[\"Image Data\"] ? crop[\"Image Data\"] : null}\n        />\n      </div>\n      <div className=\"row mt-2 coverCropGoalsWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Goals\n          </Typography>\n          <div className=\"row col-12 py-4 text-right\">\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Growing Window</Typography>\n              </span>\n\n              <span className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Growing Window\"]}\n                  </Typography>\n                </div>\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Penetrates Plow Pan</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Penetrates Plow Pan\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Nitrogen Scavenging</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Nitrogen Scavenging\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Reduces Topsoil Compaction\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Reduces Topsoil Compaction\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Lasting Residue</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Lasting Residue\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Improve Soil Organic Matter\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Improve Soil Organic Matter\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Prevent Fall Soil Erosion\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Prevent Fall Soil Erosion\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Increase Soil Aggregation\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Increase Soil Aggregation\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">\n                  Prevent Spring Soil Erosion\n                </Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Prevent Spring Soil Erosion\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Supports Mycorrhizae</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Supports Mycorrhizae\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Promote Water Quality</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Promote Water Quality\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Good Grazing</Typography>\n              </span>\n              <span className=\"col-3\">{getRating(crop[\"Good Grazing\"])}</span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Forage Harvest Value</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Forage Harvest Value\"])}\n              </span>\n            </div>\n            <div className=\"col-6 mb-2 row\">\n              <span className=\"col\">\n                <Typography variant=\"body1\">Pollinator Food</Typography>\n              </span>\n              <span className=\"col-3\">\n                {getRating(crop[\"Pollinator Food\"])}\n              </span>\n            </div>\n            {crop[\"Nitrogen Fixation\"] ? (\n              <Fragment>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Nitrogen Fixation</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Nitrogen Fixation\"])}\n                  </span>\n                </div>\n              </Fragment>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"row otherRows\">\n        <div className=\"col-6 weedsRowWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Weeds\n            </Typography>\n          </div>\n          <div className=\"row col-12 py-4 text-right\">\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Residue Suppresses Summer Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Residue Suppresses Summer Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Outcompetes Summer Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Outcompetes Summer Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">\n                Suppresses Winter Annual Weeds\n              </Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Suppresses Winter Annual Weeds\"])}\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Persistence</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Persistence\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Volunteer Establishment</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Volunteer Establishment\"])}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 envTolWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Environmental Tolerances\n            </Typography>\n          </div>\n          <div className=\"row col-12 py-4 text-right\">\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Winter Survival</Typography>\n            </div>\n            {/* <div className=\"col-3 mb-2\">\n              {getRating(crop[\"Winter Survival\"].toString())}\n            </div> */}\n            <div className=\"col-3 mb-2\">\n              <div className=\"blue-bg\">\n                <Typography variant=\"body1\">\n                  {crop[\"Winter Survival\"]}\n                </Typography>\n              </div>\n            </div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Low Fertility</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Low Fertility\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Drought</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Drought\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Heat</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Heat\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Shade</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Shade\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Flood</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Flood\"])}</div>\n            <div className=\"col-9 mb-2\">\n              <Typography variant=\"body1\">Salinity</Typography>\n            </div>\n            <div className=\"col-3 mb-2\">{getRating(crop[\"Salinity\"])}</div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Basic Agronomics\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Duration</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">{crop[\"Duration\"]}</Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Zone Use</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">{crop[\"Zone Use\"]}</Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Shape And Orientation</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {crop[\"Shape & Orientation\"].map((val, index) => (\n                  <div className=\"blue-bg bordered\" key={index}>\n                    <Typography variant=\"body1\">{val}</Typography>\n                  </div>\n                ))}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Active Growth Period</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {crop[\"Active Growth Period\"].map((val, index) => (\n                  <div className=\"blue-bg bordered\" key={index}>\n                    <Typography variant=\"body1\">{val}</Typography>\n                  </div>\n                ))}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">C:N</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"C to N Ratio\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Dry Matter (Lbs/A/Yr)</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    {`${crop[\"Dry Matter Min (lbs/A/y)\"]} - ${crop[\"Dry Matter Max (lbs/A/y)\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil Texture</Typography>\n              </div>\n              <div className=\"col-3 mb-2 text-capitalize\">\n                {crop[\"Soil Textures\"].map((val, index) => (\n                  <div className=\"blue-bg bordered\" key={index}>\n                    <Typography variant=\"body1\">{val}</Typography>\n                  </div>\n                ))}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil PH</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    {`${crop[\"Minimum Tolerant Soil pH\"]} - ${crop[\"Maximum Tolerant Soil pH\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Soil Moisture Use</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Soil Moisture Use\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Hessian Fly Free Date?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Hessian Fly Free Date\"]\n                      ? crop[\"Hessian Fly Free Date\"]\n                      : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              {crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"] ? (\n                <Fragment>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Nitrogen Accumulation (Lbs/A/Yr)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"]} - ${crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Soil Drainage\n            </Typography>\n            <div className=\"col-12 py-4 text-right\">\n              <SoilDrainageTimeline drainage={crop[\"Soil Drainage\"]} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Growth\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Ease Of Establishment</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Ease of Establishment\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Establishes Quickly</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Establishes Quickly\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Early Spring Growth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Early Spring Growth\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Flowering Trigger</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Flowering Trigger\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Root Architecture</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Root Architecture\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Root Depth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">{crop[\"Root Depth\"]}</Typography>\n                </div>\n              </div>\n              {crop[\"Inoculant Type (Legumes Only)\"] ? (\n                <Fragment>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Inoculant Type</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {crop[\"Inoculant Type (Legumes Only)\"].map((val, index) => (\n                      <div className=\"blue-bg bordered\" key={index}>\n                        <Typography variant=\"body1\" className=\"text-capitalize\">\n                          {val}\n                        </Typography>\n                      </div>\n                    ))}\n                  </div>\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Planting\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Seeds Per Lb</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Seeds per Pound\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Seed Price Per Lb</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg no-bg\">\n                  <RenderSeedPriceIcons val={crop[\"Seed Price per Pound\"]} />\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Base Seeding Rate (Lbs/A)\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {`${crop[\"Base Seeding Rate Min (lbs/A)\"]} - ${crop[\"Base Seeding Rate Max (lbs/A)\"]}`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Drilled Depth</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {`${crop[\"Drilled Depth Min\"]}\" - ${crop[\"Drilled Depth Max\"]}\"`}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Aerial Seed?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Aerial Seeding\"] ? \"Yes\" : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Frost Seed?</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Frost Seeding\"] ? \"Yes\" : \"No\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Min Germination Temp (&deg;F)\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Min Germination Temp (F)\"]}\n                  </Typography>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Termination\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Tillage At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Tillage at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Tillage At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Tillage at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Freezing At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Freezing at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Freezing At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Freezing at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Chemical At Vegetative</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Chemical at Vegetative\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Chemical At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Chemical at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Mow At Flowering</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Mow at Flowering\"])}\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Roller-Crimp At Flowering\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {getRating(crop[\"Roller Crimp at Flowering\"])}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div className=\"col-12 otherHeaderRow p-0\">\n            <Typography variant=\"h6\" className=\"px-3 py-2\">\n              Planting Dates\n            </Typography>\n            <div className=\"row col-12 py-4 text-right\">\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Frost Seeding</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Frost Seeding\"]\n                      ? `${moment(crop[\"Frost Seeding Start\"], \"YYYY-MM-DD\")\n                          .format(\"MM/DD\")\n                          .toString()} - ${moment(\n                          crop[\"Frost Seeding End\"],\n                          \"YYYY-MM-DD\"\n                        )\n                          .format(\"MM/DD\")\n                          .toString()}`\n                      : \"N/A\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Reliable Establishment</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {getMonthDayString(\"reliable\", crop)}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">\n                  Temperature/Moisture Risk\n                </Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {getMonthDayString(\"temperature\", crop)}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Can Interseed</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Interseed possible\"] ? \"Yes\" : \"N/A\"}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Winter Survival</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                <div className=\"blue-bg\">\n                  <Typography variant=\"body1\">\n                    {crop[\"Winter Survival\"]}\n                  </Typography>\n                </div>\n              </div>\n              <div className=\"col-9 mb-2\">\n                <Typography variant=\"body1\">Active Growth Period</Typography>\n              </div>\n              <div className=\"col-3 mb-2\">\n                {crop[\"Active Growth Period\"].map((val, index) => (\n                  <div className=\"blue-bg bordered\" key={index}>\n                    <Typography variant=\"body1\">{val}</Typography>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"row col-12 text-right\">\n              <div className=\"col-12\">\n                <table style={{ width: \"100%\", height: \"40px\" }}>\n                  <tbody>\n                    <tr>\n                      {allMonths.map((month, index) => (\n                        <GrowthWindowComponent\n                          from=\"tableAll\"\n                          data={crop}\n                          key={index}\n                          id={`growthCell${index}`}\n                          month={index}\n                        />\n                      ))}\n                    </tr>\n                    <tr>\n                      {allMonths.map((month, index) => (\n                        <td key={index}>{month}</td>\n                      ))}\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"col-12 row d-none d-print-block text-left\">\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"reliable\" />\n                    <span className=\"pl-3\">{\"Reliable Establishment\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"temperatureRisk\" />\n                    <span className=\"pl-3\">\n                      {\"Temperature Risk To Establishment\"}\n                    </span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"frostPossible\" />\n                    <span className=\"pl-3\">{\"Frost Seeding Possible\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"cashCrop\" />\n                    <span className=\"pl-3\">{\"Cash Crop Growth Window\"}</span>\n                  </Typography>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Extended Comments\n          </Typography>\n          {crop[\"Notes: Goals\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Goals:</b> {crop[\"Notes: Goals\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n\n          {crop[\"Notes: Weeds\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Weeds:</b> {crop[\"Notes: Weeds\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n\n          {crop[\"Notes: Planting\"] ? (\n            <Typography variant=\"body1\" className=\"p-3\">\n              {\" \"}\n              <b>Weeds:</b> {crop[\"Notes: Planting\"]}\n            </Typography>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n      <InformationSheetDictionary />\n    </Fragment>\n  ) : (\n    <Fragment>\n      <div className=\"row coverCropDescriptionWrapper\">\n        <div className=\"col-12 p-0\">\n          <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n            Cover Crop Description\n          </Typography>\n\n          <Typography variant=\"body1\" className=\"p-3\">\n            {crop[\"Crop Description\"]}\n          </Typography>\n        </div>\n      </div>\n      <div\n        className=\"d-flex justify-content-center mt-2 mb-2 photosWrapper\"\n        style={{\n          overflowX: \"auto\",\n          whiteSpace: \"nowrap\",\n          flexWrap: \"nowrap\",\n          WebkitOverflowScrolling: \"touch\",\n        }}\n      >\n        <PhotoComponent\n          imageData={crop[\"Image Data\"] ? crop[\"Image Data\"] : null}\n        />\n      </div>\n      <div className=\"row mt-2 coverCropGoalsWrapper\">\n        <div className=\"col-12 p-0\">\n          <Accordion defaultExpanded>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"h6\" className=\"text-uppercase px-3 py-2\">\n                Goals\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 py-4 text-right\">\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Growing Window</Typography>\n                  </span>\n                  {/* <span className=\"col-3\">{crop[\"Growing Window\"]}</span> */}\n                  <span className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Growing Window\"]}\n                      </Typography>\n                    </div>\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Penetrates Plow Pan</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Penetrates Plow Pan\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Nitrogen Scavenging</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Nitrogen Scavenging\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Reduces Topsoil Compaction\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Reduces Topsoil Compaction\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Lasting Residue</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Lasting Residue\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Improve Soil Organic Matter\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Improve Soil Organic Matter\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Prevent Fall Soil Erosion\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Prevent Fall Soil Erosion\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Increase Soil Aggregation\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Increase Soil Aggregation\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Prevent Spring Soil Erosion\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Prevent Spring Soil Erosion\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Supports Mycorrhizae\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Supports Mycorrhizae\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Promote Water Quality\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Promote Water Quality\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Good Grazing</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Good Grazing\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">\n                      Forage Harvest Value\n                    </Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Forage Harvest Value\"])}\n                  </span>\n                </div>\n                <div className=\"col-6 mb-2 row\">\n                  <span className=\"col\">\n                    <Typography variant=\"body1\">Pollinator Food</Typography>\n                  </span>\n                  <span className=\"col-3\">\n                    {getRating(crop[\"Pollinator Food\"])}\n                  </span>\n                </div>\n                {crop[\"Nitrogen Fixation\"] ? (\n                  <Fragment>\n                    <div className=\"col-6 mb-2 row\">\n                      <span className=\"col\">\n                        <Typography variant=\"body1\">\n                          Nitrogen Fixation\n                        </Typography>\n                      </span>\n                      <span className=\"col-3\">\n                        {getRating(crop[\"Nitrogen Fixation\"])}\n                      </span>\n                    </div>\n                  </Fragment>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </div>\n      <div className=\"row otherRows pb-5\">\n        <div className=\"col-6 weedsRowWrapper\">\n          <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <div className=\"col-12 otherHeaderRow p-0\">\n                <Typography variant=\"h6\" className=\"px-3 py-2\">\n                  Weeds\n                </Typography>\n              </div>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 py-4 text-right\">\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Residue Suppresses Summer Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Residue Suppresses Summer Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Outcompetes Summer Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Outcompetes Summer Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Suppresses Winter Annual Weeds\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Suppresses Winter Annual Weeds\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Persistence</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Persistence\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">\n                    Volunteer Establishment\n                  </Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Volunteer Establishment\"])}\n                </div>\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <div className=\"col-6 envTolWrapper\">\n          <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <div className=\"col-12 otherHeaderRow p-0\">\n                <Typography variant=\"h6\" className=\"px-3 py-2\">\n                  Environmental Tolerances\n                </Typography>\n              </div>\n            </AccordionSummary>\n            <AccordionDetails>\n              <div className=\"row col-12 py-4 text-right\">\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Winter Survival</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  <div className=\"blue-bg\">\n                    <Typography variant=\"body1\">\n                      {crop[\"Winter Survival\"]}\n                    </Typography>\n                  </div>\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Low Fertility</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">\n                  {getRating(crop[\"Low Fertility\"])}\n                </div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Drought</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Drought\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Heat</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Heat\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Shade</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Shade\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Flood</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Flood\"])}</div>\n                <div className=\"col-9 mb-2\">\n                  <Typography variant=\"body1\">Salinity</Typography>\n                </div>\n                <div className=\"col-3 mb-2\">{getRating(crop[\"Salinity\"])}</div>\n              </div>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Basic Agronomics\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 py-4 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Duration</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Duration\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Zone Use</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Zone Use\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Shape And Orientation\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {crop[\"Shape & Orientation\"].map((val, index) => (\n                      <div className=\"blue-bg bordered\" key={index}>\n                        <Typography variant=\"body1\">{val}</Typography>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Active Growth Period\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {crop[\"Active Growth Period\"].map((val, index) => (\n                      <div className=\"blue-bg bordered\" key={index}>\n                        <Typography variant=\"body1\">{val}</Typography>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">C:N</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"C to N Ratio\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Dry Matter (Lbs/A/Yr)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {\" \"}\n                        {`${crop[\"Dry Matter Min (lbs/A/y)\"]} - ${crop[\"Dry Matter Max (lbs/A/y)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil Texture</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2 text-capitalize\">\n                    {crop[\"Soil Textures\"].map((val, index) => (\n                      <div className=\"blue-bg bordered\" key={index}>\n                        <Typography variant=\"body1\">{val}</Typography>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil PH</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {\" \"}\n                        {`${crop[\"Minimum Tolerant Soil pH\"]} - ${crop[\"Maximum Tolerant Soil pH\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Soil Moisture Use</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Soil Moisture Use\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Hessian Fly Free Date?\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Hessian Fly Free Date\"]\n                          ? crop[\"Hessian Fly Free Date\"]\n                          : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  {crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"] ? (\n                    <Fragment>\n                      <div className=\"col-9 mb-2\">\n                        <Typography variant=\"body1\">\n                          Nitrogen Accumulation (Lbs/A/Yr)\n                        </Typography>\n                      </div>\n                      <div className=\"col-3 mb-2\">\n                        <div className=\"blue-bg\">\n                          <Typography variant=\"body1\">\n                            {`${crop[\"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"]} - ${crop[\"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"]}`}\n                          </Typography>\n                        </div>\n                      </div>\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Soil Drainage\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"col-12 py-4 text-right\">\n                  <SoilDrainageTimeline drainage={crop[\"Soil Drainage\"]} />\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Growth\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 py-4 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Ease Of Establishment\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Ease of Establishment\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Establishes Quickly</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Establishes Quickly\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Early Spring Growth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Early Spring Growth\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Flowering Trigger</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Flowering Trigger\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Root Architecture</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {crop[\"Root Architecture\"].map((val, index) => (\n                      <div className=\"blue-bg bordered\" key={index}>\n                        <Typography variant=\"body1\" className=\"text-capitalize\">\n                          {val}\n                        </Typography>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Root Depth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Root Depth\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  {crop[\"Inoculant Type (Legumes Only)\"] ? (\n                    <Fragment>\n                      <div className=\"col-9 mb-2\">\n                        <Typography variant=\"body1\">Inoculant Type</Typography>\n                      </div>\n                      <div className=\"col-3 mb-2\">\n                        {crop[\"Inoculant Type (Legumes Only)\"].map(\n                          (val, index) => (\n                            <div className=\"blue-bg bordered\" key={index}>\n                              <Typography\n                                variant=\"body1\"\n                                className=\"text-capitalize\"\n                              >\n                                {val}\n                              </Typography>\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Planting\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 py-4 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Seeds Per Lb</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Seeds per Pound\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Seed Price Per Lb</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg no-bg\">\n                      <RenderSeedPriceIcons\n                        val={crop[\"Seed Price per Pound\"]}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Base Seeding Rate (Lbs/A)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Base Seeding Rate Min (lbs/A)\"]} - ${crop[\"Base Seeding Rate Max (lbs/A)\"]}`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Drilled Depth</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {`${crop[\"Drilled Depth Min\"]}\" - ${crop[\"Drilled Depth Max\"]}\"`}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Aerial Seed?</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Aerial Seeding\"] ? \"Yes\" : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Frost Seed?</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Frost Seeding\"] ? \"Yes\" : \"No\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Min Germination Temp (&deg;F)\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Min Germination Temp (F)\"]}\n                      </Typography>\n                    </div>\n                  </div>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Termination\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 py-4 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Tillage At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Tillage at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Tillage At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Tillage at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Freezing At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Freezing at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Freezing At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Freezing at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Chemical At Vegetative\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Chemical at Vegetative\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Chemical At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Chemical at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Mow At Flowering</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Mow at Flowering\"])}\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Roller-Crimp At Flowering\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    {getRating(crop[\"Roller Crimp at Flowering\"])}\n                  </div>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n        <div className=\"col-6 basicAgWrapper\">\n          <div\n            className=\"col-12 otherHeaderRow p-0\"\n            style={{ marginTop: \"1em\" }}\n          >\n            <Accordion defaultExpanded style={{ border: \"1px solid #2b7b79\" }}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography\n                  variant=\"h6\"\n                  className=\"px-3 py-2\"\n                  style={{ border: \"0px\" }}\n                >\n                  Planting Dates\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <div className=\"row col-12 py-4 text-right\">\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Frost Seeding</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Frost Seeding\"]\n                          ? `${moment(crop[\"Frost Seeding Start\"], \"YYYY-MM-DD\")\n                              .format(\"MM/DD\")\n                              .toString()} - ${moment(\n                              crop[\"Frost Seeding End\"],\n                              \"YYYY-MM-DD\"\n                            )\n                              .format(\"MM/DD\")\n                              .toString()}`\n                          : \"N/A\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Reliable Establishment\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {getMonthDayString(\"reliable\", crop)}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">\n                      Temperature/Moisture Risk\n                    </Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {getMonthDayString(\"temperature\", crop)}\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"col-9 mb-2\">\n                    <Typography variant=\"body1\">Can Interseed</Typography>\n                  </div>\n                  <div className=\"col-3 mb-2\">\n                    <div className=\"blue-bg\">\n                      <Typography variant=\"body1\">\n                        {crop[\"Interseed possible\"] ? \"Yes\" : \"N/A\"}\n                      </Typography>\n                    </div>\n                  </div>\n                  <table style={{ width: \"100%\", height: \"40px\" }}>\n                    <tbody>\n                      <tr>\n                        {allMonths.map((month, index) => (\n                          <GrowthWindowComponent\n                            from=\"tableAll\"\n                            data={crop}\n                            key={index}\n                            id={`growthCell${index}`}\n                            month={index}\n                          />\n                        ))}\n                      </tr>\n                      <tr>\n                        {allMonths.map((month, index) => (\n                          <td key={index}>{month}</td>\n                        ))}\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </AccordionDetails>\n            </Accordion>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default InformationSheetContent;\n\nconst DummyText = () => {\n  return \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. At imperdiet dui accumsan sit. Adipiscing tristique risus nec feugiat in fermentum posuere urna. Porta non pulvinar neque laoreet suspendisse interdum. Malesuada fames ac turpis egestas integer eget. Eget arcu dictum varius duis at consectetur lorem donec massa. Congue nisi vitae suscipit tellus mauris a diam maecenas sed. Posuere urna nec tincidunt praesent semper feugiat nibh sed pulvinar. Enim praesent elementum facilisis leo vel fringilla est ullamcorper. Neque viverra justo nec ultrices dui sapien eget mi proin. Egestas maecenas pharetra convallis posuere. Tortor condimentum lacinia quis vel eros donec. Ultricies integer quis auctor elit sed. Nisi scelerisque eu ultrices vitae auctor eu. Eget felis eget nunc lobortis mattis aliquam faucibus. Mattis aliquam faucibus purus in massa tempor nec.\";\n};\nconst getMonthDayString = (type = \"\", crop = {}) => {\n  switch (type) {\n    case \"reliable\": {\n      const startDate = moment(\n        crop[\"Reliable Establishment/Growth Start\"],\n        \"YYYY-MM-DD\"\n      );\n      const endDate = moment(\n        crop[\"Reliable Establishment/Growth End\"],\n        \"YYYY-MM-DD\"\n      );\n\n      return `${startDate.format(\"MM/DD\")} - ${endDate.format(\"MM/DD\")}`;\n    }\n    case \"temperature\": {\n      return \"N/A\";\n    }\n    default:\n      return \"\";\n  }\n};\n","import React, { useState, useContext, useEffect, Fragment } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { zoneIcon, getRating, CropImage } from \"../../shared/constants\";\nimport cropDesc from \"../../shared/crop-descriptions.json\";\nimport \"../../styles/cropDetailsModal.scss\";\nimport {\n  Button,\n  Typography,\n  Modal,\n  Fade,\n  Backdrop,\n  makeStyles,\n  withStyles,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n} from \"@material-ui/core\";\nimport MuiAccordion from \"@material-ui/core/Accordion\";\nimport MuiAccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport MuiAccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport {\n  PhotoLibrary,\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Close,\n} from \"@material-ui/icons\";\nimport InformationSheetContent from \"../InformationSheet/InformationSheetContent\";\n\n// import Axios from \"axios\";\n// import html2canvas from \"html2canvas\";\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"10%\",\n    overflow: \"scroll\",\n    height: \"100%\",\n    display: \"block\",\n    // display: \"block\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"0px\",\n    // padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200,\n  },\n  AccordionSummaryIcon: {\n    \"& div.MuiAccordionSummary-expandIcon.Mui-expanded\": {\n      transform: \"rotate(45deg)\",\n    },\n  },\n}));\nconst Accordion = withStyles({\n  root: {\n    border: \"1px solid rgba(0, 0, 0, .125)\",\n    boxShadow: \"none\",\n    \"&:not(:last-child)\": {\n      borderBottom: 0,\n    },\n    \"&:before\": {\n      display: \"none\",\n    },\n    \"&$expanded\": {\n      margin: \"auto\",\n    },\n  },\n  expanded: {},\n})(MuiAccordion);\n\nconst AccordionSummary = withStyles({\n  root: {\n    backgroundColor: \"rgba(0, 0, 0, .03)\",\n    borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\n    marginBottom: -1,\n    minHeight: 56,\n    \"&$expanded\": {\n      minHeight: 56,\n    },\n  },\n  content: {\n    \"&$expanded\": {\n      margin: \"12px 0\",\n    },\n  },\n  expanded: {},\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiAccordionDetails);\n\nconst CropDetailsModalComponent = (props) => {\n  let crop = props.crop;\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  // const [modalOpen, setModalOpen] = useState(true);\n  const [modalData, setModalData] = useState({});\n  const [expanded, setExpanded] = useState(\"panel2\");\n  const [print, setPrint] = useState(false);\n  const handleAccordionChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n  const [sideBarData, setSideBarData] = useState({\n    Taxonomy: [\n      \"Cover Crop Name\",\n      \"Scientific Name\",\n      \"Synonyms\",\n      \"cv, var, or ssp to specify\",\n      \"Cover Crop Group\",\n      \"Family Common Name\",\n      \"Family Scientific Name\",\n      \"Origin\",\n      \"Notes: Taxonomy\",\n    ],\n    Environmental: [\n      \"Drought Tolerance\",\n      \"Flood Tolerance\",\n      \"Heat Tolerance\",\n      \"Low Fertility Tolerance\",\n      \"Salinity Tolerance\",\n      \"Shade Tolerance\",\n      \"Notes: Environmental Tolerances\",\n    ],\n    \"Basic Agronomics\": [\n      \"Zone Use\",\n      \"Active Growth Period\",\n      \"Duration\",\n      \"Shape & Orientation\",\n      \"Hessian Fly-Free Date\",\n      \"C to N Ratio\",\n      \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\",\n      \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\",\n      \"Dry Matter Min (lbs/A/y)\",\n      \"Dry Matter Max (lbs/A/y)\",\n      \"Notes: Basic Agronomics\",\n    ],\n    \"Soil Conditions\": [\n      \"Soil Drainage\",\n      \"Soil Textures\",\n      \"Minimum Tolerant Soil pH\",\n      \"Maximum Tolerant Soil pH\",\n      \"Soil Moisture Use\",\n      \"Loosens Subsurface Soil\",\n      \"Loosens Topsoil\",\n      \"Supports Mycorrhizae\",\n      \"Notes: Soil Conditions\",\n    ],\n    Growth: [\n      \"Ease of Establishment\",\n      \"Establishes Quickly\",\n      \"Early Spring Growth\",\n      \"Flowering Trigger\",\n      \"Growing Window\",\n      \"Root Architecture\",\n      \"Root Depth\",\n      \"Innoculant Type (Legumes Only)\",\n      \"Frees P & K\",\n      \"Notes: Growth, Roots, and Nutrients\",\n    ],\n    Planting: [\n      \"Seeds per Pound\",\n      \"Seed Price per Pound\",\n      \"Base Seeding Rate Min (lbs/A)\",\n      \"Base Seeding Rate Max (lbs/A)\",\n      \"Drilled Depth Min\",\n      \"Drilled Depth Max\",\n      \"Can Aerial Seed?\",\n      \"Broadcast Frost Seeding\",\n      \"Min Germination Temp (F)\",\n      \"Notes: Planting\",\n    ],\n    Termination: [\n      \"Tillage Termination at Vegetative\",\n      \"Tillage Termination at Flowering\",\n      \"Freezing Termination at Vegetative\",\n      \"Freezing Termination at Flowering\",\n      \"Chemical Termination at Vegetative\",\n      \"Chemical Termination at Flowering\",\n      \"Mow Termination at Flowering\",\n      \"Roller Crimp Termination at Flowering\",\n      \"Planting Green\",\n      \"Notes: Termination\",\n    ],\n    \"Grazers & Pollinators\": [\n      \"Harvestability\",\n      \"Grazing Tolerance\",\n      \"Good Grazing\",\n      \"Pollinator Food\",\n      \"Pollinator Habitat\",\n      \"Notes: Grazers & Pollinators\",\n    ],\n    Weeds: [\n      \"Volunteer Establishment\",\n      \"Persistence\",\n      \"Hard Seededness\",\n      \"Outcompetes Weeds\",\n      \"Allelopathic to Weeds\",\n      \"Notes: Weeds\",\n    ],\n    \"Disease and Non-weed Pests\": [\n      \"Discourages Nematodes\",\n      \"Promotes Nematodes\",\n      \"Discourages Pest Insects\",\n      \"Promotes Pest Insects\",\n      \"Suppresses Cash Crop Disease\",\n      \"Promotes Cash Crop Disease\",\n      \"Notes: Disease and Non-weed Pests\",\n    ],\n  });\n\n  const [images, setImages] = useState([\"https://placehold.it/100x100\"]);\n\n  useEffect(() => {\n    setModalData(crop);\n    // get 5 images related to crop\n  }, [crop]);\n\n  const handleModalClose = () => {\n    props.setModalOpen(!props.modalOpen);\n  };\n\n  // const setPrintContents = (id) => {\n  //   // setPrint(true);\n  //   setPrint(!print);\n  //   html2canvas(document.getElementById(`cropDetailModal-${id}`))\n  //     .then((canvas) => {\n  //       // document.body.appendChild(canvas)\n  //       const dataUrl = canvas.toDataURL();\n  //       let windowContent = \"<!DOCTYPE html>\";\n  //       windowContent += \"<html>\";\n  //       windowContent += \"<head><title>Print View</title></head>\";\n  //       windowContent += \"<body>\";\n  //       windowContent += '<img src=\"' + dataUrl + '\">';\n  //       windowContent += \"</body>\";\n  //       windowContent += \"</html>\";\n\n  //       const printWin = window.open(\n  //         \"\",\n  //         \"\",\n  //         \"width=\" +\n  //           window.screen.availWidth +\n  //           \",height=\" +\n  //           window.screen.availHeight\n  //       );\n  //       printWin.document.open();\n  //       printWin.document.write(windowContent);\n\n  //       printWin.document.addEventListener(\n  //         \"load\",\n  //         function () {\n  //           printWin.focus();\n  //           // printWin.print();\n  //           // printWin.document.close();\n  //           // printWin.close();\n  //         },\n  //         true\n  //       );\n  //     })\n  //     .then(() => {\n  //       setPrint(!print);\n  //     });\n  //   // console.log(divId);\n  //   // let innerContents = document.getElementById(`modal-` + divId);\n  //   // let newWindow = window.open(\n  //   //   \"\",\n  //   //   \"mywindow\",\n  //   //   \"status=1,width=350,height=150\"\n  //   // );\n  //   // newWindow.document.write(innerContents);\n\n  //   // let printconf = window.print();\n  //   // console.log(printconf);\n  // };\n\n  // useEffect(() => {\n  //   console.log(\"run\");\n  // });\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={props.modalOpen}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n      disableBackdropClick={false}\n      disableEscapeKeyDown={false}\n      // id={`modal-${props.crop.fields[\"id\"]}`}\n    >\n      <Fade in={props.modalOpen}>\n        {modalData.fields ? (\n          <div\n            className={`cropTableModal modalContainer ${classes.paper}`}\n            id={`cropDetailModal-${modalData.fields[\"id\"]}`}\n          >\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div\n                  className=\"col-12\"\n                  style={{\n                    background: \"#2D7B7B\",\n                    color: \"white\",\n                    height: \"auto\",\n                    borderTopLeftRadius: \"5px\",\n                    borderTopRightRadius: \"5px\",\n                  }}\n                >\n                  <div className=\"row\">\n                    <div className=\"col-2 offset-10 text-right\">\n                      {\" \"}\n                      <Button\n                        style={{ color: \"white\" }}\n                        onClick={handleModalClose}\n                      >\n                        <Close />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\" id=\"coverCropModalPrimary\">\n                <div className=\"col-12\">\n                  <div className=\"row\">\n                    <div className=\"col mt-2\">\n                      <div>{modalData.fields[\"Cover Crop Group\"]}</div>\n                      <div className=\"font-weight-bold\">\n                        {modalData.fields[\"Cover Crop Name\"]}\n                      </div>\n                      <div>{modalData.fields[\"Scientific Name\"]}</div>\n                    </div>\n                    <div\n                      className=\"col\"\n                      style={{\n                        textAlign: \"right\",\n                        paddingRight: \"0px\",\n                        paddingLeft: \"0px\",\n                      }}\n                    >\n                      {crop.fields[\"Image Data\"] ? (\n                        <CropImage\n                          present={true}\n                          src={\n                            crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                              ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                              : \"https://placehold.it/100x100\"\n                          }\n                          alt={crop.fields[\"Cover Crop Name\"]}\n                        />\n                      ) : (\n                        <CropImage present={false} />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div\n                  className=\"col-12\"\n                  style={{ background: \"#2D7B7B\", color: \"white\" }}\n                >\n                  <div className=\"row\">\n                    <div className=\"col-4\">\n                      <Button\n                        style={{ color: \"white\" }}\n                        className=\"dataDict\"\n                        onClick={() => {\n                          window.open(\"/data-dictionary\", \"_blank\");\n                        }}\n                      >\n                        {zoneIcon(20, 20)}\n                        <span className=\"pl-2\">\n                          Plant Hardiness Zone {state.zone} Dataset\n                        </span>\n                      </Button>\n                    </div>\n                    <div className=\"col-2\">\n                      <Button style={{ color: \"white\" }}>\n                        <PhotoLibrary />{\" \"}\n                        <span className=\"pl-2\">View Photos</span>\n                      </Button>\n                    </div>\n                    <div className=\"col-4\">\n                      <Button style={{ color: \"white\" }}>Download :</Button>\n                      <Button\n                        href={`/information-sheets/${crop.fields[\"Cover Crop Name\"]}.pdf`}\n                        style={{ color: \"white\" }}\n                        download={`${crop.fields[\"Cover Crop Name\"]}`}\n                      >\n                        <PictureAsPdf />\n                        <span className=\"pl-2\">PDF</span>\n                      </Button>\n                      <Button\n                        style={{ color: \"white\" }}\n                        href={`/csv/${crop.fields[\"Cover Crop Name\"]}.csv`}\n                        download={`${crop.fields[\"Cover Crop Name\"]}`}\n                      >\n                        <FormatListBulleted />\n                        <span className=\"pl-2\">SPREADSHEET</span>\n                      </Button>\n                    </div>\n                    <div className=\"col-2 text-right\">\n                      <Button\n                        style={{ color: \"white\" }}\n                        // href={`http://covercrop.tools/information-sheets/${encodeURIComponent(\n                        //   crop.fields[\"Cover Crop Name\"]\n                        // )}.pdf`}\n                        // target=\"_blank\"\n                        onClick={() => {\n                          window.localStorage.setItem(\n                            \"infosheet\",\n                            JSON.stringify(crop.fields)\n                          );\n                          window.open(\"/information-sheet\", \"_blank\");\n                        }}\n                      >\n                        <Print /> <span className=\"pl-2\">PRINT</span>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"\">\n                <InformationSheetContent crop={crop.fields} from=\"modal\" />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div></div>\n        )}\n      </Fade>\n    </Modal>\n  );\n};\nfunction printDiv(divName) {\n  if (document.getElementById(divName)) {\n    var printContents = document.getElementById(divName).innerHTML;\n    var originalContents = document.body.innerHTML;\n\n    document.body.innerHTML = printContents;\n\n    window.print();\n\n    document.body.innerHTML = originalContents;\n  }\n}\nexport default CropDetailsModalComponent;\n","import React from \"react\";\nimport {\n  Modal,\n  Backdrop,\n  Fade,\n  Button,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { CloseRounded, FiberManualRecord } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"1em\",\n    width: \"30%\",\n    // padding: theme.spacing(2, 4, 3)\n  },\n}));\n\nconst CropLegendModal = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Modal\n      open={props.legendModal}\n      onClose={props.handleLegendModal}\n      BackdropComponent={Backdrop}\n      disableBackdropClick={props.disableBackdropClick}\n      className={classes.modal}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={props.legendModal}>\n        <div className={`modalLegendPaper ${classes.paper}`}>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <Typography variant=\"h4\">LEGEND</Typography>\n              </div>\n              <div className=\"col-6 text-right\">\n                <Button onClick={props.handleLegendModal}>\n                  <CloseRounded />\n                </Button>\n              </div>\n            </div>\n            <div className=\"row mt-5\">\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"reliable\" />\n                  <span className=\"pl-3\">{\"Reliable Establishment\"}</span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"temperatureRisk\" />\n                  <span className=\"pl-3\">\n                    {\"Temperature Risk To Establishment\"}\n                  </span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"frostPossible\" />\n                  <span className=\"pl-3\">{\"Frost Seeding Possible\"}</span>\n                </Typography>\n              </div>\n              <div className=\"col-12 legendModalRow\">\n                <Typography variant=\"body1\">\n                  <FiberManualRecord className=\"cashCrop\" />\n                  <span className=\"pl-3\">{\"Cash Crop Growth Window\"}</span>\n                </Typography>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default CropLegendModal;\n","import React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  LightButton,\n  CustomStyles,\n  allMonths,\n  getRating,\n  trimString,\n  CropImage,\n  flipCoverCropName,\n} from \"../../shared/constants\";\nimport {\n  Button,\n  Typography,\n  Table,\n  CircularProgress,\n  TableHead,\n  TableBody,\n  TableContainer,\n  TableRow,\n  TableCell,\n  ButtonBase,\n} from \"@material-ui/core\";\n\nimport \"../../styles/cropTable.scss\";\nimport {\n  ArrowUpward,\n  ArrowDownward,\n  AddCircle,\n  FiberManualRecord,\n  CloseRounded,\n  RemoveCircle,\n} from \"@material-ui/icons\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport CropDetailsModalComponent from \"./CropDetailsModal\";\nimport CropLegendModal from \"./CropLegendModal\";\n\nconst CropTableComponent = (props) => {\n  // let cropTableElement = document.getElementById(\"#primaryCropTable\");\n  // cropTableElement.addEventListener(\"scroll\", (e) => {\n  //   let tableHead = document.querySelector(\"thead\");\n  //   let scrollTop = cropTableElement.scrollTop;\n  //   tableHead.style.transform = \"translateY(\" + scrollTop + \"px)\";\n  // });\n\n  const cropData = props.cropData || [];\n  const inactiveCropData = props.inactiveCropData || [];\n  const activeCropData = props.activeCropData || [];\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const [state, dispatch] = useContext(Context);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const [selectedCropsIds, setSelectedCropsIds] = useState([]);\n  const selectedBtns = state.selectedCrops.map((crop) => {\n    return crop.id;\n  });\n\n  const handleModalOpen = (crop) => {\n    // setModalOpen(true);\n    // put data inside modal\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n\n  const [showGrowthWindow, setShowGrowthWindow] = useState(true);\n  const [legendModal, setLegendModal] = useState(false);\n  const handleLegendModal = () => {\n    setLegendModal(!legendModal);\n  };\n\n  useEffect(() => {\n    props.showGrowthWindow\n      ? setShowGrowthWindow(true)\n      : setShowGrowthWindow(false);\n\n    // console.log(cropData);\n  }, [props.showGrowthWindow]);\n\n  useEffect(() => {\n    if (state.selectedCrops.length > 0) {\n      let selectedIds = state.selectedCrops.map((crop) => {\n        return crop[\"id\"];\n      });\n\n      setSelectedCropsIds(selectedIds);\n    }\n  }, [state.progress]);\n\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (container.textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: false,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Added`);\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: false,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Removed`);\n      }\n    } else {\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: false,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Added`);\n    }\n  };\n\n  const getCardFlex = (crop, indexKey) => {\n    let goalsLength = state.selectedGoals.length;\n\n    return (\n      <Fragment>\n        {goalsLength > 0\n          ? state.selectedGoals.map((goal, index) => (\n              <TableCell style={{ textAlign: \"center\" }} key={index}>\n                {getRating(crop.fields[goal])}\n              </TableCell>\n            ))\n          : \"\"}\n        {showGrowthWindow ? (\n          <TableCell style={goalsLength === 0 ? { width: \"50%\" } : {}}>\n            <table style={{ width: \"100%\", height: \"40px\" }}>\n              <tbody>\n                <tr>\n                  {allMonths.map((month, index) => (\n                    <GrowthWindowComponent\n                      from=\"tableAll\"\n                      data={crop.fields}\n                      key={index}\n                      id={`growthCell${index}`}\n                      month={index}\n                    />\n                  ))}\n                </tr>\n                <tr>\n                  {state.selectedGoals.length === 0\n                    ? allMonths.map((month, index) => (\n                        <td key={index}>{month}</td>\n                      ))\n                    : allMonths.map((month, index) =>\n                        month === \"Jan\" || month === \"Dec\" ? (\n                          <td\n                            key={index}\n                            style={index === 11 ? { textAlign: \"right\" } : {}}\n                          >\n                            {month}\n                          </td>\n                        ) : (\n                          <td key={index}></td>\n                        )\n                      )}\n                </tr>\n              </tbody>\n            </table>\n          </TableCell>\n        ) : (\n          \"\"\n        )}\n\n        <TableCell style={{ maxWidth: \"150px\", textAlign: \"center\" }}>\n          <LightButton\n            id={`cartBtn${indexKey}`}\n            style={{\n              borderRadius: CustomStyles().nonRoundedRadius,\n              width: \"150px\",\n            }}\n            className={\n              selectedBtns.includes(crop.fields.id)\n                ? \"activeCartBtn\"\n                : \"inactiveCartBtn\"\n            }\n            onClick={() => {\n              addCropToBasket(\n                crop.fields[\"id\"],\n                crop.fields[\"Cover Crop Name\"],\n                `cartBtn${indexKey}`,\n                crop.fields\n              );\n            }}\n          >\n            {selectedBtns.includes(crop.fields.id) ? \"ADDED\" : \"ADD TO LIST\"}\n          </LightButton>{\" \"}\n          <br />\n          <Button size=\"small\" onClick={() => handleModalOpen(crop)}>\n            View Details\n          </Button>\n        </TableCell>\n      </Fragment>\n    );\n  };\n\n  const activeCropPresent = () => {\n    if (activeCropData.length > 0) return true;\n    else {\n      return false;\n    }\n  };\n  const inactiveCropPresent = () => {\n    if (inactiveCropData.length > 0) return true;\n    else return false;\n  };\n\n  const RenderActiveInactiveCropData = () => {\n    return (\n      <Fragment>\n        {activeCropPresent\n          ? activeCropData.map((crop, index) => {\n              if (crop.fields[\"Zone Decision\"] === \"Include\")\n                return (\n                  <TableRow key={`croprow${index}`} id={crop.fields[\"id\"]}>\n                    <TableCell\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      {crop.fields[\"Image Data\"] ? (\n                        <CropImage\n                          present={true}\n                          src={\n                            crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                              ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                              : \"https://placehold.it/100x100\"\n                          }\n                          alt={crop.fields[\"Cover Crop Name\"]}\n                        />\n                      ) : (\n                        <CropImage present={false} />\n                      )}\n\n                      <div className=\"cropDetailsText\" style={{}}>\n                        <div className=\"part1_ut\">\n                          <span className=\"cropCategory text-uppercase\">\n                            {crop.fields[\"Cover Crop Group\"]}\n                          </span>\n                          <span className=\"cropName font-weight-lighter\">\n                            {flipCoverCropName(crop.fields[\"Cover Crop Name\"])}\n                          </span>\n                          <span className=\"cropScientificName\">\n                            {trimString(crop.fields[\"Scientific Name\"], 25)}\n                          </span>\n                        </div>\n                        <div className=\"part2_lt\">\n                          <span className=\"cropDuration text-uppercase font-weight-bold\">\n                            {crop.fields[\"Duration\"]}\n                          </span>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell style={{ textAlign: \"left\" }}>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          C TO N RATIO:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {crop.fields[\"C to N Ratio\"]}\n                        </Typography>\n                      </div>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          N FIXED:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {\n                            crop.fields[\n                              \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"\n                            ]\n                          }\n                          -\n                          {\n                            crop.fields[\n                              \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"\n                            ]\n                          }{\" \"}\n                          lbs/A/y\n                        </Typography>\n                      </div>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          DRY MATTER:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {crop.fields[\"Dry Matter Min (lbs/A/y)\"]}-\n                          {crop.fields[\"Dry Matter Max (lbs/A/y)\"]} lbs/A/y\n                        </Typography>\n                      </div>\n                    </TableCell>\n                    {getCardFlex(crop, index)}\n                  </TableRow>\n                );\n            })\n          : \"\"}\n\n        {inactiveCropPresent\n          ? inactiveCropData.map((crop, index) => {\n              if (crop.fields[\"Zone Decision\"] === \"Include\")\n                return (\n                  <TableRow\n                    key={`croprow${index}`}\n                    id={crop.fields[\"id\"]}\n                    style={{ opacity: \"0.2\" }}\n                  >\n                    <TableCell\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      {/* {this.getCropImageFromAPI(\n                crop.fields[\"Cover Crop Name\"]\n              )} */}\n                      {crop.fields[\"Image Data\"] ? (\n                        <CropImage\n                          present={true}\n                          src={\n                            crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                              ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                              : \"https://placehold.it/100x100\"\n                          }\n                          alt={crop.fields[\"Cover Crop Name\"]}\n                        />\n                      ) : (\n                        <CropImage present={false} />\n                      )}\n\n                      <div className=\"cropDetailsText\" style={{}}>\n                        <div className=\"part1_ut\">\n                          <span className=\"cropCategory text-uppercase\">\n                            {crop.fields[\"Cover Crop Group\"]}\n                          </span>\n                          <span className=\"cropName font-weight-lighter\">\n                            {crop.fields[\"Cover Crop Name\"]}\n                          </span>\n                          <span className=\"cropScientificName\">\n                            {trimString(crop.fields[\"Scientific Name\"], 25)}\n                          </span>\n                        </div>\n                        <div className=\"part2_lt\">\n                          <span className=\"cropDuration text-uppercase font-weight-bold\">\n                            {crop.fields[\"Duration\"]}\n                          </span>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell style={{ textAlign: \"left\" }}>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          C TO N RATIO:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {crop.fields[\"C to N Ratio\"]}\n                        </Typography>\n                      </div>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          N FIXED:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {\n                            crop.fields[\n                              \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\"\n                            ]\n                          }\n                          -\n                          {\n                            crop.fields[\n                              \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\"\n                            ]\n                          }{\" \"}\n                          lbs/A/y\n                        </Typography>\n                      </div>\n                      <div>\n                        <Typography\n                          variant=\"subtitle2\"\n                          component=\"b\"\n                          className=\"font-weight-bold\"\n                        >\n                          DRY MATTER:{\" \"}\n                        </Typography>\n                        <Typography variant=\"subtitle2\" component=\"b\">\n                          {crop.fields[\"Dry Matter Min (lbs/A/y)\"]}-\n                          {crop.fields[\"Dry Matter Max (lbs/A/y)\"]} lbs/A/y\n                        </Typography>\n                      </div>\n                    </TableCell>\n                    {getCardFlex(crop, index)}\n                  </TableRow>\n                );\n            })\n          : \"\"}\n      </Fragment>\n    );\n  };\n\n  return cropData.length !== 0 ? (\n    <Fragment>\n      <TableContainer\n        className=\"table-responsive calendarViewTableWrapper\"\n        component=\"div\"\n        style={{ maxHeight: 850 }}\n      >\n        <Table\n          stickyHeader\n          className=\"table table-borderless table-sm\"\n          id=\"primaryCropTable\"\n        >\n          <TableHead className=\"tableHeadWrapper\">\n            <TableRow className=\"theadFirst\">\n              <TableCell\n                style={{\n                  backgroundColor: \"white\",\n                }}\n                colSpan=\"2\"\n              ></TableCell>\n\n              {state.selectedGoals.length > 0 ? (\n                <TableCell\n                  colSpan={state.selectedGoals.length}\n                  style={{\n                    borderRight: \"5px solid white\",\n                    backgroundColor: \"#abd08f\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  <Typography variant=\"body2\">\n                    <Button\n                      onClick={() => {\n                        console.log(props.sortPreference);\n                        props.sortAllCrops(\n                          props.sortPreference === \"desc\" ? \"asc\" : \"desc\"\n                        );\n                      }}\n                    >\n                      {props.sortPreference === \"asc\" ? (\n                        <ArrowDownward fontSize=\"inherit\" />\n                      ) : (\n                        <ArrowUpward fontSize=\"inherit\" />\n                      )}\n                      &nbsp; COVER CROPPING GOALS\n                    </Button>\n                  </Typography>\n                </TableCell>\n              ) : (\n                \"\"\n              )}\n\n              <TableCell\n                style={{ backgroundColor: \"#abd08f\", textAlign: \"center\" }}\n              >\n                <Typography variant=\"body2\">\n                  <Button\n                    startIcon={<AddCircle />}\n                    onClick={() => {\n                      const ele = document.getElementById(\"legendWrapper\");\n                      if (ele.classList.contains(\"d-none\")) {\n                        ele.classList.remove(\"d-none\");\n                      } else {\n                        ele.classList.add(\"d-none\");\n                      }\n                    }}\n                  >\n                    {\" \"}\n                    LEGEND\n                  </Button>\n                </Typography>\n\n                <div\n                  id=\"legendWrapper\"\n                  className=\"d-none\"\n                  style={{\n                    position: \"fixed\",\n                    backgroundColor: \"rgba(171, 208, 143, 0.8)\",\n                    bottom: 0,\n                    zIndex: 999,\n                    textAlign: \"left\",\n                  }}\n                >\n                  <div className={`modalLegendPaper`}>\n                    <div className=\"container-fluid\">\n                      <div className=\"row\">\n                        <div className=\"col-6\">\n                          <Typography variant=\"h5\">LEGEND</Typography>\n                        </div>\n\n                        <div className=\"col-6 text-right\">\n                          <Button\n                            onClick={() => {\n                              const ele = document.getElementById(\n                                \"legendWrapper\"\n                              );\n                              ele.classList.add(\"d-none\");\n                            }}\n                          >\n                            <CloseRounded />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"row mt-2\">\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"reliable\" />\n                            <span className=\"pl-3\">\n                              {\"Reliable Establishment\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"temperatureRisk\" />\n                            <span className=\"pl-3\">\n                              {\"Temperature Risk To Establishment\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"frostPossible\" />\n                            <span className=\"pl-3\">\n                              {\"Frost Seeding Possible\"}\n                            </span>\n                          </Typography>\n                        </div>\n                        <div className=\"col-12 legendModalRow\">\n                          <Typography variant=\"body1\">\n                            <FiberManualRecord className=\"cashCrop\" />\n                            <span className=\"pl-3\">\n                              {\"Cash Crop Growth Window\"}\n                            </span>\n                          </Typography>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell\n                style={{\n                  backgroundColor: \"white\",\n                }}\n              ></TableCell>\n            </TableRow>\n            <TableRow className=\"theadSecond\">\n              <TableCell style={{ width: \"28%\", backgroundColor: \"#abd08f\" }}>\n                <Typography variant=\"body1\">\n                  <Button>COVER CROPS</Button>\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"18%\", backgroundColor: \"#abd08f\" }}>\n                <Typography variant=\"body1\">\n                  {\" \"}\n                  <Button>AGRONOMICS</Button>\n                </Typography>\n              </TableCell>\n              {state.selectedGoals.length > 0\n                ? state.selectedGoals.map((goal, index) => (\n                    <TableCell\n                      key={index}\n                      style={{\n                        wordBreak: \"break-word\",\n                        maxWidth: \"185px\",\n                        backgroundColor: \"#abd08f\",\n                        textAlign: \"center\",\n                      }}\n                    >\n                      <Typography variant=\"body1\">\n                        <Button>{goal.toUpperCase()}</Button>\n                      </Typography>\n                    </TableCell>\n                  ))\n                : \"\"}\n\n              {showGrowthWindow ? (\n                <TableCell\n                  style={{ backgroundColor: \"#abd08f\", textAlign: \"center\" }}\n                >\n                  <Typography variant=\"body1\">\n                    {\" \"}\n                    <Button>PLANTING WINDOW</Button>\n                  </Typography>\n                </TableCell>\n              ) : (\n                \"\"\n              )}\n\n              <TableCell\n                style={{ backgroundColor: \"#abd08f\", textAlign: \"center\" }}\n              >\n                <Typography variant=\"body1\">\n                  {\" \"}\n                  <Button>MY LIST</Button>\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody className=\"tableBodyWrapper\">\n            {/* {activeCropData.length > 0 || inactiveCropData.length > 0 ? (\n                <RenderActiveInactiveCropData />\n              ) : ( */}\n            {activeCropData.length > 0 || inactiveCropData.length > 0 ? (\n              <RenderActiveInactiveCropData />\n            ) : (\n              // <RenderDefaultCropData />\n              <TableRow>\n                <TableCell>Loading</TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <div className=\"cropGoals\"></div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n      <CropLegendModal\n        legendModal={legendModal}\n        handleLegendModal={handleLegendModal}\n        disableBackdropClick={false}\n      />\n    </Fragment>\n  ) : (\n    <div className=\"table-responsive calendarViewTableWrapper\">\n      <div className=\"circularCentered\">\n        <CircularProgress size={\"6em\"} />\n      </div>\n    </div>\n  );\n};\n\nexport default CropTableComponent;\n","import React, { useContext, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Context } from \"../../store/Store\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: 230,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst MyCoverCropCardsComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const data = props.data;\n  const btnId = props.btnId;\n  const classes = useStyles();\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const handleModalOpen = () => {\n    // put data inside modal\n\n    setModalData({ fields: data });\n\n    setModalOpen(true);\n  };\n\n  const removeCrop = () => {\n    var removeIndex = state.selectedCrops\n      .map(function (item) {\n        return item.btnId;\n      })\n      .indexOf(`${btnId}`);\n\n    if (removeIndex === -1) {\n      // element not in array\n      // not possible ?\n    } else {\n      // alert(removeIndex);\n      let selectedCropsCopy = state.selectedCrops;\n\n      selectedCropsCopy.splice(removeIndex, 1);\n      // console.log(selectedCropsCopy);\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: selectedCropsCopy,\n          snackOpen: true,\n          snackMessage: `Removed`,\n        },\n      });\n\n      // this.state.selectedCrops.splice(removeIndex, 1);\n    }\n  };\n  return (\n    <div className=\"p-2\">\n      <Card className={classes.card}>\n        <CardMedia\n          image={\n            data[\"Image Data\"][\"Key Thumbnail\"]\n              ? `/images/Cover Crop Photos/${data[\"Image Data\"][\"Directory\"]}/${data[\"Image Data\"][\"Key Thumbnail\"]}`\n              : \"https://placehold.it/100x100?text=Placeholder\"\n          }\n          className={classes.media}\n          title={data[\"Cover Crop Name\"]}\n        />\n        <CardContent>\n          <div\n            className=\"font-weight-bold text-muted text-uppercase\"\n            style={{ fontSize: \"10pt\" }}\n          >\n            {data[\"Family Common Name\"]}\n          </div>\n          <div className=\"font-weight-bold \" style={{ fontSize: \"16pt\" }}>\n            {data[\"Cover Crop Name\"]}\n          </div>\n          <small className=\"font-italic text-muted\">\n            {data[\"Scientific Name\"]}\n          </small>\n          <div>\n            <small className=\"text-muted\">\n              <a\n                style={{\n                  textDecoration: \"underline\",\n                  color: \"rgb(53, 153, 155)\",\n                }}\n                onClick={() => handleModalOpen()}\n              >\n                View Crop Details\n              </a>\n            </small>\n          </div>\n        </CardContent>\n\n        <CardActionArea\n          style={{\n            backgroundColor: \"#e3f2f4\",\n            textAlign: \"center\",\n            padding: \"0.5em\",\n          }}\n          onClick={removeCrop}\n        >\n          <Typography\n            variant=\"body2\"\n            className=\"text-uppercase\"\n            style={{\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n          >\n            REMOVE\n          </Typography>\n        </CardActionArea>\n      </Card>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </div>\n  );\n};\n\nexport default MyCoverCropCardsComponent;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport {\n  Card,\n  CardMedia,\n  CardContent,\n  Button,\n  Typography,\n  CardActionArea,\n  CardActions,\n} from \"@material-ui/core\";\nimport \"../../styles/cropComparisonView.scss\";\nimport {\n  DataTooltip,\n  getRating,\n  RenderSeedPriceIcons,\n} from \"../../shared/constants\";\nimport { MonetizationOn, Cancel } from \"@material-ui/icons\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/MyCoverCropComparisonComponent.scss\";\nimport sidebarDefinitionsz7 from \"../../shared/json/zone7/data-dictionary.json\";\nimport sidebarDefinitionsz6 from \"../../shared/json/zone6/data-dictionary.json\";\nimport sidebarDefinitionsz5 from \"../../shared/json/zone5/data-dictionary.json\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\n\nconst lightBorder = {\n  border: \"1px solid #35999b\",\n  padding: \"5px\",\n  marginBottom: \"5px\",\n  borderTopLeftRadius: \"10px\",\n  borderBottomLeftRadius: \"10px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n};\nconst lightBG = {\n  border: \"1px solid white\",\n  backgroundColor: \"#f1f7eb\",\n  padding: \"5px\",\n  marginBottom: \"5px\",\n  textAlign: \"center\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  fontWeight: \"bold\",\n  minHeight: \"36px\",\n};\nconst MyCoverCropComparisonComponent = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { filterKeys, zone } = state;\n  const [sidebarDefs, setSidebarDefs] = useState(sidebarDefinitionsz7);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const handleModalOpen = (crop) => {\n    // put data inside modal\n\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n\n  useEffect(() => {\n    switch (parseInt(zone)) {\n      case 7: {\n        setSidebarDefs(sidebarDefinitionsz7);\n        break;\n      }\n      case 6: {\n        setSidebarDefs(sidebarDefinitionsz6);\n        break;\n      }\n      case 5: {\n        setSidebarDefs(sidebarDefinitionsz5);\n        break;\n      }\n      default: {\n        setSidebarDefs(sidebarDefinitionsz7);\n        break;\n      }\n    }\n  }, [zone]);\n\n  const removeCrop = (btnId) => {\n    var removeIndex = state.selectedCrops\n      .map(function (item) {\n        return item.btnId;\n      })\n      .indexOf(`${btnId}`);\n\n    if (removeIndex === -1) {\n      // element not in array\n      // not possible ?\n    } else {\n      // alert(removeIndex);\n      let selectedCropsCopy = state.selectedCrops;\n\n      selectedCropsCopy.splice(removeIndex, 1);\n      // console.log(selectedCropsCopy);\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: selectedCropsCopy,\n          snackOpen: true,\n          snackMessage: `Removed`,\n        },\n      });\n\n      // this.state.selectedCrops.splice(removeIndex, 1);\n    }\n  };\n\n  const getTooltipData = (keyName = \"\") => {\n    const exactObject = sidebarDefs.find((keys) => keys.Variable === keyName);\n\n    if (exactObject) {\n      return exactObject.Description;\n    } else {\n      return \"No Data\";\n    }\n  };\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-xl-3 col-lg-4 col-md-4\">\n          <div className=\"row pt-3\">\n            <div className=\"col-12\">\n              <Card style={{ width: \"100%\", boxShadow: \"none\" }}>\n                <CardMedia\n                  children={\n                    <img\n                      src=\"https://via.placeholder.com/10/FFFFFF/FFFFFF\"\n                      style={{ opacity: 0 }}\n                    />\n                  }\n                  style={{ width: \"100%\", height: \"100px\" }}\n                />\n                <CardContent>\n                  <div\n                    className=\"font-weight-bold text-uppercase\"\n                    style={{ fontSize: \"10pt\", color: \"white\" }}\n                  >\n                    {\"Family Common Name\"}\n                  </div>\n                  <div\n                    className=\"font-weight-bold \"\n                    style={{ fontSize: \"16pt\", color: \"white\" }}\n                  >\n                    {\"Cover Crop Name\"}\n                  </div>\n                  <small className=\"font-italic\" style={{ color: \"white\" }}>\n                    {\"Scientific Name\"}\n                  </small>\n                  <div>\n                    <small className=\"text-muted\">\n                      <a\n                        style={{\n                          textDecoration: \"underline\",\n                          color: \"white\",\n                        }}\n                        onClick={() => {}}\n                      >\n                        View Crop Details\n                      </a>\n                    </small>\n                  </div>\n                </CardContent>\n                <hr style={{ borderTop: \"1px solid rgba(0,0,0,0)\" }} />\n                <CardContent\n                  style={{ paddingRight: \"0px\", paddingLeft: \"0px\" }}\n                >\n                  {filterKeys.map((keys, index) => (\n                    <div style={lightBorder} key={index}>\n                      <span>\n                        <DataTooltip\n                          data={getTooltipData(keys)}\n                          interactive={false}\n                          placement=\"top-start\"\n                        />\n                      </span>\n                      <span>\n                        <Typography variant=\"body2\" className=\"text-capitalize\">\n                          {keys === \"Cover Crop Group\"\n                            ? \"Cover Crop Type\"\n                            : keys}\n                        </Typography>\n                      </span>\n                    </div>\n                  ))}\n                  <div style={lightBorder}>\n                    <span>\n                      <DataTooltip\n                        data={\"Average rating of all selected goals\"}\n                        interactive={false}\n                        placement=\"top-start\"\n                      />\n                    </span>\n                    <span>\n                      <Typography variant=\"body2\">\n                        Average Goal Rating\n                      </Typography>\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-9 col-lg-8 col-md-8 comparisonContainer\">\n          <div className=\"row pt-3\">\n            {props.selectedCrops.map((crop, index) => (\n              <div className=\"col-xl-3 col-lg-5\" key={index}>\n                <Card className=\"mainComparisonCard\" style={{ width: \"100%\" }}>\n                  <span\n                    onClick={() => removeCrop(crop.btnId)}\n                    className=\"cardCloseIcon\"\n                  >\n                    <Cancel titleAccess=\"Remove Crop\" />\n                  </span>\n                  {crop.data[\"Image Data\"] ? (\n                    <CardMedia\n                      image={\n                        crop.data[\"Image Data\"][\"Key Thumbnail\"]\n                          ? `/images/Cover Crop Photos/${crop.data[\"Image Data\"][\"Directory\"]}/${crop.data[\"Image Data\"][\"Key Thumbnail\"]}`\n                          : \"https://placehold.it/100x100?text=Placeholder\"\n                      }\n                      // image=\"https://placehold.it/100x100\"\n                      title={crop.cropName}\n                      style={{ width: \"100%\", height: \"100px\" }}\n                    />\n                  ) : (\n                    <CardMedia\n                      children={\n                        <img\n                          src=\"https://via.placeholder.com/100/?text=Placeholder\"\n                          style={{ width: \"100%\", height: \"100px\" }}\n                          alt=\"Placeholder\"\n                        />\n                      }\n                    />\n                  )}\n\n                  <CardContent>\n                    <div\n                      className=\"font-weight-bold text-muted text-uppercase\"\n                      style={{ fontSize: \"10pt\" }}\n                    >\n                      {crop.data[\"Family Common Name\"]}\n                    </div>\n                    <div\n                      className=\"font-weight-bold \"\n                      style={{ fontSize: \"16pt\" }}\n                    >\n                      {crop.data[\"Cover Crop Name\"]}\n                    </div>\n                    <small className=\"font-italic text-muted\">\n                      {crop.data[\"Scientific Name\"]}\n                    </small>\n                    <div>\n                      <small className=\"text-muted\">\n                        <a\n                          style={{\n                            textDecoration: \"underline\",\n                            color: \"rgb(53, 153, 155)\",\n                          }}\n                          // href={`/information-sheet/${crop.data[\"Cover Crop Name\"]}`}\n                          onClick={() => handleModalOpen({ fields: crop.data })}\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          View Crop Details\n                        </a>\n                      </small>\n                    </div>\n                  </CardContent>\n                  <hr />\n                  <CardContent\n                    style={{\n                      paddingRight: \"0px\",\n                      paddingLeft: \"0px\",\n                      paddingBottom: \"0px\",\n                    }}\n                  >\n                    {filterKeys.map((filterKey, index) => (\n                      <RenderRelevantData\n                        key={index}\n                        filterKey={filterKey}\n                        data={crop.data}\n                        index={index}\n                      />\n                    ))}\n                    <div style={lightBG}>\n                      <GetAverageGoalRating crop={crop} />\n                    </div>\n                  </CardContent>\n                  <CardActionArea\n                    style={{\n                      backgroundColor: \"#e3f2f4\",\n                      textAlign: \"center\",\n                      padding: \"0.5em\",\n                    }}\n                    onClick={() => removeCrop(crop.btnId)}\n                  >\n                    <Typography\n                      variant=\"body2\"\n                      className=\"text-uppercase\"\n                      style={{\n                        color: \"black\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      REMOVE\n                    </Typography>\n                  </CardActionArea>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </div>\n  );\n};\n\nconst RenderGrowthWindow = ({ window }) => {\n  const growingWindows = [\"Very Short\", \"Short\", \"Medium\", \"Long\", \"Very Long\"];\n  const index = growingWindows.indexOf(window);\n\n  switch (index) {\n    case 0:\n      return getRating(1);\n    case 1:\n      return getRating(2);\n    case 2:\n      return getRating(3);\n    case 3:\n      return getRating(4);\n    case 4:\n      return getRating(5);\n    default:\n      return getRating(0);\n  }\n};\n\nconst RenderRelevantData = ({ filterKey = \"\", data = [], index = 0 }) => {\n  if (typeof data[filterKey] === \"number\") {\n    if (data[filterKey].toString().length === 1) {\n      if (filterKey === \"Seed Price per Pound\") {\n        return (\n          <div style={lightBG}>\n            <RenderSeedPriceIcons val={data[\"Seed Price per Pound\"]} />\n          </div>\n        );\n      } else return <div style={lightBG}>{getRating(data[filterKey])}</div>;\n    } else {\n      return (\n        <div style={lightBG}>\n          <Typography variant=\"body2\">{data[filterKey]}</Typography>\n        </div>\n      );\n    }\n  } else {\n    if (filterKey === \"Frost Seeding\" || filterKey === \"Aerial Seeding\") {\n      return (\n        <div style={lightBG}>\n          <RenderSeedingData data={data} filterKey={filterKey} />\n        </div>\n      );\n    } else\n      return (\n        <div style={lightBG}>\n          <Typography variant=\"body2\">{data[filterKey].toString()}</Typography>\n        </div>\n      );\n  }\n};\n\nconst RenderSeedingData = ({ filterKey, data }) => {\n  if (data[filterKey]) {\n    return <Typography variant=\"body2\">Yes</Typography>;\n  } else {\n    return <Typography variant=\"body2\">N/A</Typography>;\n  }\n};\nconst GetAverageGoalRating = ({ crop }) => {\n  const [state, dispatch] = useContext(Context);\n  let goalRating = 0;\n  if (state.selectedGoals.length > 0) {\n    state.selectedGoals.map((goal) => {\n      if (crop.data[goal]) {\n        goalRating += crop.data[goal];\n      }\n    });\n  }\n  // console.log(goalRating);\n  return getRating(goalRating / state.selectedGoals.length);\n};\n\nconst RenderCtoNRatioText = ({ ratio }) => {\n  switch (parseInt(ratio)) {\n    case 1:\n      return \"LOW\";\n    case 2:\n      return \"MEDIUM\";\n    case 3:\n      return \"HIGH\";\n    default:\n      return \"NO DATA\";\n  }\n};\n\nexport default MyCoverCropComparisonComponent;\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport MyCoverCropCardsComponent from \"./MyCoverCropCardsComponent\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { PictureAsPdf, ListAlt, Add } from \"@material-ui/icons\";\nimport MyCoverCropComparisonComponent from \"./MyCoverCropComparisonComponent\";\nimport { downloadAllPDF, downloadAllCSV } from \"../../shared/constants\";\n\nconst MyCoverCropList = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const comparisonView = props.comparisonView;\n\n  const redirectToSpeciesSelector = () => {\n    dispatch({\n      type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n      data: {\n        speciesSelectorActivationFlag: true,\n        myCoverCropActivationFlag: false,\n      },\n    });\n  };\n\n  const TopBar = ({ comparisonView }) => {\n    const { selectedCrops } = state;\n    const selectedCropNames = selectedCrops.map((crop) => {\n      return {\n        name: crop.cropName,\n        pdf: `/pdf/${crop.cropName}.pdf`,\n        csv: `/csv/${crop.cropName}.csv`,\n      };\n    });\n    return (\n      <div className=\"row\">\n        <div\n          className=\"col-12 myCoverCropsBlueBar\"\n          style={{\n            backgroundColor: \"#35999b\",\n            height: \"40px\",\n            borderTopLeftRadius: \"5px\",\n            borderTopRightRadius: \"5px\",\n          }}\n        >\n          <div className=\"row\">\n            {comparisonView ? (\n              <div className=\"col-8\">\n                <Button style={{ color: \"white\" }}>Download:</Button>\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={() => downloadAllPDF(selectedCropNames)}\n                >\n                  <PictureAsPdf /> <span className=\"pl-2\">PDF</span>\n                </Button>\n\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={redirectToSpeciesSelector}\n                >\n                  <Add /> <span className=\"pl-2\">ADD A CROP</span>\n                </Button>\n              </div>\n            ) : (\n              <div className=\"col-8\">\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={redirectToSpeciesSelector}\n                >\n                  <Add /> <span className=\"pl-2\">ADD A CROP</span>\n                </Button>\n              </div>\n            )}\n\n            <div className=\"col-6\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"container-fluid\">\n      {state.selectedCrops.length === 0 ? (\n        <Typography variant=\"body1\">\n          Your list is empty.{\" \"}\n          <Button onClick={redirectToSpeciesSelector}>Add Crops</Button>\n        </Typography>\n      ) : comparisonView ? (\n        <Fragment>\n          <TopBar comparisonView={comparisonView} />\n          <div className=\"row mt-2\">\n            <MyCoverCropComparisonComponent\n              selectedCrops={state.selectedCrops}\n            />\n          </div>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <TopBar comparisonView={comparisonView} />\n          <div className=\"d-flex flex-wrap mt-2\">\n            {state.selectedCrops.map((crop, index) => (\n              <MyCoverCropCardsComponent\n                key={index}\n                data={crop.data}\n                btnId={crop.btnId}\n                itemNo={index}\n              />\n            ))}\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default MyCoverCropList;\n","import React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport {\n  Typography,\n  Button,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  CircularProgress,\n  Table,\n  TableHead,\n  TableContainer,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\nimport {\n  LightButton,\n  allMonths,\n  cropDataURL,\n  allGoalsURL,\n  getRating,\n  CropImage,\n  CustomStyles,\n} from \"../../shared/constants\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\n// import { AddCircle, FiberManualRecord, CloseRounded } from \"@material-ui/icons\";\n// import CropLegendModal from \"./CropLegendModal\";\nimport { AirtableBearerKey } from \"../../shared/keys\";\n// import RenderCashCropOverlay from \"./RenderCashCropOverlay\";\n\nconst CropCalendarViewComponent = (props) => {\n  const { cropData } = props;\n\n  const [state, dispatch] = useContext(Context);\n\n  const [selectedCropsIds, setSelectedCropsIds] = useState([]);\n  const selectedBtns = state.selectedCrops.map((crop) => {\n    return crop.btnId;\n  });\n\n  // DONE: Check year logic ? currently Juliet wants to return current year if month is before november\n  // ref. useeffect();\n  let currentYear = new Date().getFullYear();\n\n  useEffect(() => {\n    if (state.selectedCrops.length > 0) {\n      let selectedIds = state.selectedCrops.map((crop) => {\n        return crop.id;\n      });\n\n      setSelectedCropsIds(selectedIds);\n    }\n  }, [state.progress]);\n\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (document.getElementById(btnId).textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n      console.log(document.getElementById(btnId).textContent);\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: true,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: true,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n\n        // this.state.selectedCrops.splice(removeIndex, 1);\n      }\n    } else {\n      // DONE: add the selected crop to state and change the state, show snackbar\n\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: true,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n    }\n  };\n\n  const headers = new Headers();\n  headers.append(\"Authorization\", `Bearer ${AirtableBearerKey}`);\n\n  useEffect(() => {\n    let initialized = fetchRecordsIfUnavailable();\n    initialized.then(() => {\n      let currentMonth = moment().format(\"MMM\");\n      // console.log(currentMonth);\n      if (currentMonth === \"Nov\" || currentMonth === \"Dec\") {\n        currentYear = currentYear + 1;\n      }\n      console.log(\"goal values set\");\n\n      // putGoalValues();\n    });\n  }, []);\n\n  const getAverageGoalRating = (selectedGoals, crop) => {\n    // get goal rating for each crop and calculate+render rating\n    let goalRating = 0;\n    selectedGoals.map((goal, index) => {\n      if (crop.fields[goal]) {\n        goalRating += crop.fields[goal];\n      }\n    });\n\n    return getRating(goalRating / selectedGoals.length);\n  };\n\n  const putGoalValues = () => {\n    console.log(state.allGoals.length);\n    state.allGoals.map((goal, index) => {\n      let goalName = goal.fields[\"Cover Crop Goal\"];\n      cropData.map((crop, index2) => {\n        // let cropId =\n\n        console.log(\n          goalName + \" for \" + crop.fields[\"Cover Crop Name\"],\n          crop.fields[goalName]\n        );\n      });\n    });\n  };\n  const fetchRecordsIfUnavailable = () => {\n    // get crop data if unavailable\n\n    let _promise = new Promise(async function (resolve, reject) {\n      if (cropData.length === 0) {\n        // get crop data\n        dispatch({\n          type: \"SET_AJAX_IN_PROGRESS\",\n          data: true,\n        });\n        let records = await fetch(cropDataURL, { headers: headers });\n        let json = records.json();\n\n        json\n          .then((val) => {\n            // console.log(val);\n            dispatch({\n              type: \"PULL_CROP_DATA\",\n              data: val.records,\n            });\n          })\n          .then(async () => {\n            if (state.allGoals.length === 0) {\n              // get all goals\n              let records = await fetch(allGoalsURL, { headers: headers });\n              // console.log(records.json());\n              let json = records.json();\n              json\n                .then((val) => {\n                  dispatch({\n                    type: \"ADD_GOALS\",\n                    data: val.records,\n                  });\n                })\n                .then(() => {\n                  resolve(\"worked\");\n                });\n            } else resolve(\"worked\");\n          });\n      } else resolve(\"worked\");\n    }).then(() => {\n      dispatch({\n        type: \"SET_AJAX_IN_PROGRESS\",\n        data: false,\n      });\n    });\n    // let isResolved = false;\n\n    return _promise;\n  };\n\n  const checkIfGrowthMonth = (month) => {\n    const { activeGrowthPeriod } = state;\n\n    if (activeGrowthPeriod.length !== 0) {\n      if (activeGrowthPeriod.includes(month)) return true;\n      else return false;\n    } else {\n      return false;\n    }\n  };\n  return (\n    <Fragment>\n      {/* <div className=\"table-responsive calendarViewTableWrapper\"> */}\n      {state.ajaxInProgress ? (\n        <div className=\"circularCentered\">\n          <CircularProgress size={\"6em\"} />\n        </div>\n      ) : (\n        // <div className=\"row\">\n        <TableContainer\n          component=\"div\"\n          className=\"table-responsive calendarTableViewWrapper\"\n          style={{ lineHeight: \"0.5\", maxHeight: 850 }}\n        >\n          <Table\n            stickyHeader\n            className=\"table calendarViewTable table-sm table-borderless\"\n            style={{}}\n          >\n            <TableHead className=\"tableHeadWrapper\">\n              <TableRow>\n                <TableCell\n                  colSpan={state.activeGrowthPeriod.length === 0 ? 2 : 1}\n                  style={{ backgroundColor: \"white\" }}\n                ></TableCell>\n                {state.activeGrowthPeriod.length === 0 ? (\n                  <TableCell\n                    colSpan=\"12\"\n                    style={{\n                      borderBottom: \"5px solid white\",\n                    }}\n                  >\n                    <Typography variant=\"body1\">\n                      {currentYear} COVER CROP GROWTH WINDOW\n                    </Typography>\n                  </TableCell>\n                ) : (\n                  <Fragment>\n                    <TableCell\n                      colSpan=\"1\"\n                      style={{\n                        borderBottom: \"5px solid white\",\n                      }}\n                    >\n                      <Typography variant=\"body1\">\n                        ACTIVE GROWTH PERIOD\n                      </Typography>\n                    </TableCell>\n\n                    {state.activeGrowthPeriod.includes(\"Jan\") ? (\n                      <TableCell\n                        style={{\n                          borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                          backgroundColor: CustomStyles().darkGreen,\n                          borderRight: \"1px solid black\",\n                        }}\n                        colSpan=\"2\"\n                      >\n                        <Typography variant=\"body1\">WINTER</Typography>\n                      </TableCell>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"2\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Mar\") ? (\n                      <TableCell\n                        style={{\n                          borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                          backgroundColor: CustomStyles().darkGreen,\n                          borderRight: \"1px solid black\",\n                        }}\n                        colSpan=\"3\"\n                      >\n                        <Typography variant=\"body1\">SPRING</Typography>\n                      </TableCell>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Jun\") ? (\n                      <TableCell\n                        style={{\n                          borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                          backgroundColor: CustomStyles().darkGreen,\n                          borderRight: \"1px solid black\",\n                        }}\n                        colSpan=\"3\"\n                      >\n                        <Typography variant=\"body1\">SUMMER</Typography>\n                      </TableCell>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n\n                    {state.activeGrowthPeriod.includes(\"Sep\") ? (\n                      <TableCell\n                        style={{\n                          borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                          backgroundColor: CustomStyles().darkGreen,\n                          borderRight: \"1px solid black\",\n                        }}\n                        colSpan=\"3\"\n                      >\n                        <Typography variant=\"body1\">FALL</Typography>\n                      </TableCell>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"3\"\n                      ></TableCell>\n                    )}\n                    {state.activeGrowthPeriod.includes(\"Dec\") ? (\n                      <TableCell\n                        style={{\n                          borderBottom: \"5px solid \" + CustomStyles().darkGreen,\n                          backgroundColor: CustomStyles().darkGreen,\n                          borderRight: \"1px solid black\",\n                        }}\n                        colSpan=\"1\"\n                      ></TableCell>\n                    ) : (\n                      <TableCell\n                        style={{ borderBottom: \"5px solid white\" }}\n                        colSpan=\"1\"\n                      ></TableCell>\n                    )}\n                  </Fragment>\n                )}\n\n                <TableCell style={{ backgroundColor: \"white\" }}></TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell\n                  style={{ width: \"16%\", borderRight: \"5px solid white\" }}\n                >\n                  <Typography variant=\"body1\">COVER CROPS</Typography>\n                </TableCell>\n                {state.selectedGoals.length === 0 ? (\n                  \"\"\n                ) : (\n                  <TableCell\n                    style={{ width: \"10%\", borderRight: \"5px solid white\" }}\n                  >\n                    <Typography variant=\"body1\">AVERAGE GOAL RATING</Typography>\n                  </TableCell>\n                )}\n\n                {allMonths.map((month, index) => {\n                  const growthMonth = checkIfGrowthMonth(month);\n                  const growthMonthSeparator = growthMonth\n                    ? month === \"Feb\" ||\n                      month === \"May\" ||\n                      month === \"Aug\" ||\n                      month === \"Nov\"\n                      ? true\n                      : false\n                    : false;\n\n                  return (\n                    <TableCell\n                      key={`monthskey${index}`}\n                      className={`calendarSecondHeadMonth ${\n                        growthMonth ? `activeGrowthMonth` : ``\n                      } ${growthMonthSeparator ? `growthMonthSeparator` : ``}`}\n                    >\n                      <Typography variant=\"body1\">{month}</Typography>\n                    </TableCell>\n                  );\n                })}\n\n                <TableCell\n                  style={{ width: \"10%\", borderLeft: \"5px solid white\" }}\n                >\n                  <Typography variant=\"body1\">MY LIST</Typography>\n                  <Typography variant=\"subtitle1\">\n                    {/* <br /> */}\n                    {`[${state.selectedCrops.length} CROPS]`}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody className=\"calendarTableBodyWrapper\">\n              {cropData\n                ? cropData.map((crop, index) => {\n                    if (crop.fields[\"Zone Decision\"] === \"Include\")\n                      return (\n                        <TableRow key={`cropRow${index}`}>\n                          <TableCell\n                            className=\"calendarTableCell\"\n                            style={{\n                              paddingBottom: \"0px\",\n                            }}\n                          >\n                            <div className=\"tdContainer d-flex justify-content-between flex-wrap\">\n                              {crop.fields[\"Image Data\"] ? (\n                                <CropImage\n                                  view={\"calendar\"}\n                                  present={true}\n                                  src={\n                                    crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                                      ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                                      : \"https://placehold.it/100x100\"\n                                  }\n                                  alt={crop.fields[\"Cover Crop Name\"]}\n                                />\n                              ) : (\n                                <CropImage view={\"calendar\"} present={false} />\n                              )}\n\n                              <Button\n                                size=\"small\"\n                                style={{\n                                  borderRadius: \"0px\",\n                                  paddingTop: \"0px\",\n                                }}\n                              >\n                                {crop.fields[\"Cover Crop Name\"]}\n                              </Button>\n                            </div>\n                          </TableCell>\n                          {state.selectedGoals.length === 0 ? (\n                            \"\"\n                          ) : (\n                            <TableCell\n                              style={{\n                                paddingBottom: \"0px\",\n                                textAlign: \"center\",\n                              }}\n                            >\n                              {getAverageGoalRating(state.selectedGoals, crop)}\n                            </TableCell>\n                          )}\n\n                          {allMonths.map((month, index) => (\n                            <GrowthWindowComponent\n                              from=\"calendar\"\n                              data={crop.fields}\n                              key={index}\n                              id={`growthCell${index}`}\n                              month={index}\n                            />\n                          ))}\n\n                          <TableCell\n                            style={{\n                              paddingBottom: \"0px\",\n                            }}\n                          >\n                            {\" \"}\n                            <LightButton\n                              id={`cartBtn${index}`}\n                              style={{\n                                borderRadius: \"0px\",\n                                width: \"130px\",\n                              }}\n                              className={\n                                selectedBtns.includes(`cartBtn${index}`)\n                                  ? \"activeCartBtn\"\n                                  : \"inactiveCartBtn\"\n                              }\n                              onClick={() => {\n                                addCropToBasket(\n                                  crop.id,\n                                  crop.fields[\"Cover Crop Name\"],\n                                  `cartBtn${index}`,\n                                  crop.fields\n                                );\n                              }}\n                            >\n                              {selectedBtns.includes(`cartBtn${index}`)\n                                ? \"ADDED\"\n                                : \"ADD TO LIST\"}\n                            </LightButton>\n                          </TableCell>\n                        </TableRow>\n                      );\n                  })\n                : \"\"}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        // </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default CropCalendarViewComponent;\n","export const AirtableBearerKey = \"***REMOVED***\";\n\n// rohit's access token\nexport const owner = \"sudokita\";\nexport const repo = \"covercrops\";\nexport const accessToken = \"87f1038ea3c511be15c209e3f6a5487598415a34\";\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Chip, Grid } from \"@material-ui/core\";\n\nconst CoverCropType = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({ \"Cover Crop Group\": [] });\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Cover Crop Group\": [] });\n    },\n  }));\n\n  const handleClick = (name, val) => {\n    if (selected[\"Cover Crop Group\"].includes(val)) {\n      const removed = selected[\"Cover Crop Group\"].filter(\n        (chipVals) => chipVals !== val\n      );\n      setSelected({ ...selected, \"Cover Crop Group\": removed });\n    } else {\n      const added = selected[\"Cover Crop Group\"];\n      added.push(val);\n\n      setSelected({ ...selected, \"Cover Crop Group\": added });\n    }\n  };\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item key={index}>\n          <Chip\n            onClick={() => handleClick(props.filters.name, val.name)}\n            component=\"li\"\n            size=\"medium\"\n            label={val.name}\n            color={\n              props.sidebarFilterOptions[\"Cover Crop Group\"].includes(val.name)\n                ? \"primary\"\n                : \"default\"\n            }\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n});\n\nexport default CoverCropType;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst EnvironmentalTolerance = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Drought Tolerance\": [], //int\n    \"Flood Tolerance\": [], // int\n    \"Heat Tolerance\": [], // int\n    \"Low Fertility Tolerance\": [], // int\n    \"Salinity Tolerance\": [], // int\n    \"Shade Tolerance\": [], // int\n  });\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Drought Tolerance\": [], //int\n        \"Flood Tolerance\": [], // int\n        \"Heat Tolerance\": [], // int\n        \"Low Fertility Tolerance\": [], // int\n        \"Salinity Tolerance\": [], // int\n        \"Shade Tolerance\": [], // int\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"tooltipTextContainer text-center\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.alternateName]}\n                onChange={(evt, newVal) =>\n                  handleChange(newVal, val.alternateName)\n                }\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(1)\n                      ? \"selected first-btn\"\n                      : \"not-selected first-btn\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(5)\n                      ? \"selected last-btn\"\n                      : \"not-selected last-btn\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nconst sidebarNameSubtractor = (name) => {\n  // props.sidebarFilterOptions[[val.name]] + \"Tolerance\"\n  return name;\n};\nconst getKeyByValue = (object, value) => {\n  return Object.keys(object).filter((key) => object[key] === value);\n};\n\nexport default EnvironmentalTolerance;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nconst Seeds = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({ \"Seed Price per Pound\": [] });\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Seed Price per Pound\": [] });\n    },\n  }));\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Fragment key={index}>\n          <Grid item xs={12}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"tooltipTextContainer text-left\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <Grid item xs={12}>\n            <ToggleButtonGroup\n              value={selected[val.name]}\n              onChange={(evt, newVal) => handleChange(newVal, val.name)}\n              className=\"starRatingParent\"\n            >\n              <ToggleButton\n                value={1}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(1)\n                    ? \"selected first-btn\"\n                    : \"not-selected first-btn\"\n                }\n              >\n                &#36;\n              </ToggleButton>\n              <ToggleButton\n                value={2}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(2)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#36;&#36;\n              </ToggleButton>\n              <ToggleButton\n                value={3}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(3)\n                    ? \"selected last-btn\"\n                    : \"not-selected last-btn\"\n                }\n              >\n                &#36;&#36;&#36;\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Fragment>\n      ))}\n    </Grid>\n  );\n});\n\nexport default Seeds;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, FormControlLabel, Checkbox, Tooltip } from \"@material-ui/core\";\n\nconst SeedingMethods = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Frost Seeding\": props.sidebarFilterOptions[\"Frost Seeding\"],\n    \"Aerial Seeding\": props.sidebarFilterOptions[\"Aerial Seeding\"],\n  });\n\n  const checkIfSelected = (name) => {\n    if (props.sidebarFilterOptions[name].length === 0) {\n      return false;\n    } else {\n      if (props.sidebarFilterOptions[name].includes(\"true\")) return true;\n      else return false;\n    }\n  };\n  const handleChange = (event) => {\n    if (event.target.checked) {\n      setSelected({ ...selected, [event.target.name]: [\"true\"] });\n    } else {\n      setSelected({ ...selected, [event.target.name]: [] });\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({ \"Frost Seeding\": [], \"Aerial Seeding\": [] });\n    },\n  }));\n\n  useEffect(() => {\n    let selections = selected;\n\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selections,\n    });\n  }, [selected]);\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item xs={12} key={index}>\n          <Tooltip\n            interactive\n            arrow\n            placement=\"right\"\n            title={\n              <div className=\"tooltipTextContainer text-left\">\n                <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n              </div>\n            }\n            key={`tooltip${index}`}\n          >\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkIfSelected(val.name)}\n                  onChange={handleChange}\n                  name={val.name}\n                  color=\"primary\"\n                />\n              }\n              label={<small>{val.name}</small>}\n            />\n          </Tooltip>\n        </Grid>\n      ))}\n    </Grid>\n  );\n});\n\nconst objFilter = (obj, predicate) => {\n  let result = {},\n    key;\n\n  for (key in obj) {\n    if (obj.hasOwnProperty(key) && !predicate(obj[key])) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n};\nexport default SeedingMethods;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Chip, Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nconst Growth = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    Duration: [], // array\n    \"Active Growth Period\": [], //array\n    \"Growing Window\": [], // string\n    \"Establishes Quickly\": [], // int\n    \"Ease of Establishment\": [], // int\n    \"Winter Survival\": [], // array\n    \"Early Spring Growth\": [], // int\n    \"Flowering Trigger\": [], // array\n  });\n  const handleChipClick = (filtername, val) => {\n    if (selected[filtername].includes(val)) {\n      let filtered = selected[filtername].filter((vals) => vals !== val);\n      setSelected({ ...selected, [filtername]: filtered });\n    } else {\n      let roots = selected[filtername];\n      roots.push(val);\n      setSelected({ ...selected, [filtername]: roots });\n    }\n  };\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        Duration: [], // array\n        \"Active Growth Period\": [], //array\n        \"Growing Window\": [], // string\n        \"Establishes Quickly\": [], // int\n        \"Ease of Establishment\": [], // int\n        \"Winter Survival\": [], // array\n        \"Early Spring Growth\": [], // int\n        \"Flowering Trigger\": [], // array\n      });\n    },\n  }));\n\n  const RenderChips = (props) => {\n    return props.subFilter.values.map((val, index) => (\n      <Grid item key={index}>\n        <Chip\n          onClick={() => handleChipClick(props.subFilter.name, val)}\n          component=\"li\"\n          size=\"medium\"\n          label={val}\n          color={\n            props.sidebarFilterOptions[props.subFilter.name].includes(val)\n              ? \"primary\"\n              : \"default\"\n          }\n        />\n      </Grid>\n    ));\n  };\n\n  return props.filters.values.map((val, index) => (\n    <Grid container key={index} spacing={1}>\n      {val.type === \"chip\" ? (\n        <Fragment key={index}>\n          <Grid item xs={12} style={{ marginTop: \"1em\" }}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"tooltipTextContainer text-center\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <RenderChips\n            sidebarFilterOptions={props.sidebarFilterOptions}\n            subFilter={val}\n            index={index}\n          />\n        </Fragment>\n      ) : (\n        <Fragment key={index}>\n          <Grid item xs={12} style={{ marginTop: \"1em\" }}>\n            <Tooltip\n              interactive\n              arrow\n              placement=\"right\"\n              title={\n                <div className=\"tooltipTextContainer text-left\">\n                  <p dangerouslySetInnerHTML={{ __html: val.description }}></p>\n                </div>\n              }\n              key={`tooltip${index}`}\n            >\n              <small>{val.name}</small>\n            </Tooltip>\n          </Grid>\n          <Grid item xs={12}>\n            <ToggleButtonGroup\n              value={selected[val.name]}\n              onChange={(evt, newVal) => handleChange(newVal, val.name)}\n              className=\"starRatingParent\"\n            >\n              <ToggleButton\n                value={1}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(1)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n                style={{\n                  borderTopLeftRadius: \"20px\",\n                  borderBottomLeftRadius: \"20px\",\n                }}\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={2}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(2)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={3}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(3)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={4}\n                size=\"small\"\n                className={\n                  props.sidebarFilterOptions[val.name].includes(4)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n              <ToggleButton\n                value={5}\n                size=\"small\"\n                color=\"primary\"\n                style={{\n                  borderTopRightRadius: \"20px\",\n                  borderBottomRightRadius: \"20px\",\n                }}\n                className={\n                  props.sidebarFilterOptions[val.name].includes(5)\n                    ? \"selected\"\n                    : \"not-selected\"\n                }\n              >\n                &#x2605;\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Fragment>\n      )}\n      {/* {subFilter.values.map((val, index2) => subFilter.type)} */}\n    </Grid>\n  ));\n});\n\nexport default Growth;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst TerminationMethods = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Tillage Termination at Vegetative\": [], // int\n    \"Tillage Termination at Flowering\": [], // int\n    \"Freezing Termination at Vegetative\": [], // int\n    \"Chemical Termination at Vegetative\": [], // int\n    \"Chemical Termination at Flowering\": [], // int\n    \"Mow Termination at Flowering\": [], // int\n    \"Roller Crimp Tolerance at Flowering\": [], // int\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Tillage Termination at Vegetative\": [], // int\n        \"Tillage Termination at Flowering\": [], // int\n        \"Freezing Termination at Vegetative\": [], // int\n        \"Chemical Termination at Vegetative\": [], // int\n        \"Chemical Termination at Flowering\": [], // int\n        \"Mow Termination at Flowering\": [], // int\n        \"Roller Crimp Tolerance at Flowering\": [], // int\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"tooltipTextContainer text-left\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.alternateName]}\n                onChange={(evt, newVal) =>\n                  handleChange(newVal, val.alternateName)\n                }\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.alternateName].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default TerminationMethods;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst Beneficials = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Supports Mycorrhizae\": [],\n    \"Pollinator Habitat\": [],\n    \"Pollinator Food\": [],\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Supports Mycorrhizae\": [],\n        \"Pollinator Habitat\": [],\n        \"Pollinator Food\": [],\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"tooltipTextContainer text-left\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.name]}\n                onChange={(evt, newVal) => handleChange(newVal, val.name)}\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default Beneficials;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport \"../../../styles/filters.scss\";\n\nconst Weeds = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Volunteer Establishment\": [],\n    Persistence: [],\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Volunteer Establishment\": [],\n        Persistence: [],\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"tooltipTextContainer text-left\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[val.name]}\n                onChange={(evt, newVal) => handleChange(newVal, val.name)}\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default Weeds;\n","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Tooltip } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nimport \"../../../styles/filters.scss\";\n\nconst DiseaseAndNonWeedPests = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Discourages Nematodes\": [], // int\n    \"Promotes Nematodes\": [], // int\n    \"Discourages Pest Insects\": [], // int\n    \"Promotes Pest Insects\": [], // int\n    \"Suppresses Cash Crop Disease\": [], // int\n    \"Promotes Cash Crop Disease\": [], // int\n  });\n  const setProps = (selected) => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  };\n  useEffect(() => {\n    setProps(selected);\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Discourages Nematodes\": [], // int\n        \"Promotes Nematodes\": [], // int\n        \"Discourages Pest Insects\": [], // int\n        \"Promotes Pest Insects\": [], // int\n        \"Suppresses Cash Crop Disease\": [], // int\n        \"Promotes Cash Crop Disease\": [], // int\n      });\n    },\n  }));\n\n  const handleChange = (newValue, name) => {\n    setSelected({ ...selected, [name]: newValue });\n  };\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => {\n        let groupBtnVal = `${val.name}-${props.sidebarFilterOptions[val.name]}`;\n        let name = val.name;\n        return (\n          <Fragment key={index}>\n            <Grid item xs={12} style={{ marginTop: \"1em\" }}>\n              <Tooltip\n                interactive\n                arrow\n                placement=\"right\"\n                title={\n                  <div className=\"tooltipTextContainer text-left\">\n                    <p\n                      dangerouslySetInnerHTML={{ __html: val.description }}\n                    ></p>\n                  </div>\n                }\n                key={`tooltip${index}`}\n              >\n                <small>{val.name}</small>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12}>\n              <ToggleButtonGroup\n                value={selected[name]}\n                onChange={(evt, newVal) => handleChange(newVal, val.name)}\n                className=\"starRatingParent\"\n              >\n                <ToggleButton\n                  value={1}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(1)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                  style={{\n                    borderTopLeftRadius: \"20px\",\n                    borderBottomLeftRadius: \"20px\",\n                  }}\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={2}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(2)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={3}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(3)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={4}\n                  size=\"small\"\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(4)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n                <ToggleButton\n                  value={5}\n                  size=\"small\"\n                  color=\"primary\"\n                  style={{\n                    borderTopRightRadius: \"20px\",\n                    borderBottomRightRadius: \"20px\",\n                  }}\n                  className={\n                    props.sidebarFilterOptions[val.name].includes(5)\n                      ? \"selected\"\n                      : \"not-selected\"\n                  }\n                >\n                  &#x2605;\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n});\n\nexport default DiseaseAndNonWeedPests;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { Grid, Chip, Tooltip } from \"@material-ui/core\";\n\nconst Roots = forwardRef((props, ref) => {\n  const [selected, setSelected] = useState({\n    \"Root Architecture\": [],\n    \"Root Depth\": [],\n  });\n\n  const handleClick = (filtername, val) => {\n    // console.log(filtername, val);\n    // const combinedString = filtername + \"-\" + val;\n    if (selected[filtername].includes(val)) {\n      let filtered = selected[filtername].filter((vals) => vals !== val);\n      setSelected({ ...selected, [filtername]: filtered });\n    } else {\n      let roots = selected[filtername];\n      roots.push(val);\n      setSelected({ ...selected, [filtername]: roots });\n    }\n  };\n  useEffect(() => {\n    props.setSidebarFilterOptions({\n      ...props.sidebarFilterOptions,\n      ...selected,\n    });\n  }, [selected]);\n\n  useImperativeHandle(ref, () => ({\n    resetFilters() {\n      setSelected({\n        \"Root Architecture\": [],\n        \"Root Depth\": [],\n      });\n    },\n  }));\n\n  return props.filters.values.map((subFilter, index) => (\n    <Grid container key={index} spacing={1}>\n      <Grid item xs={12}>\n        <Tooltip\n          interactive\n          arrow\n          placement=\"right\"\n          title={\n            <div className=\"tooltipTextContainer text-center\">\n              <p\n                dangerouslySetInnerHTML={{ __html: subFilter.description }}\n              ></p>\n            </div>\n          }\n          key={`tooltip${index}`}\n        >\n          <small>{subFilter.name}</small>\n        </Tooltip>\n      </Grid>\n      {subFilter.values.map((val, index2) => (\n        <Grid item key={index2}>\n          <Chip\n            onClick={() => handleClick(subFilter.name, val)}\n            component=\"li\"\n            size=\"medium\"\n            label={val}\n            color={\n              props.sidebarFilterOptions[subFilter.name].includes(val)\n                ? \"primary\"\n                : \"default\"\n            }\n          />\n        </Grid>\n      ))}\n    </Grid>\n  ));\n});\n\nexport default Roots;\n","import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useContext,\n} from \"react\";\nimport { Grid, FormControlLabel, Checkbox, Tooltip } from \"@material-ui/core\";\nimport { Context } from \"../../../store/Store\";\n\nconst SoilConditions = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const { Flooding_Frequency, Drainage_Class } = state.soilData;\n  const [activeCropDataCopy, setActiveCropDataCopy] = useState(\n    props.activeCropData\n  );\n  const {\n    activeCropData,\n    inactiveCropData,\n    setActiveCropData,\n    setInactiveCropData,\n    cropData,\n    filterSidebarItems,\n  } = props;\n\n  const [selected, setSelected] = useState({\n    \"Soil Drainage\":\n      Drainage_Class !== \"\" && Drainage_Class.length > 0 ? true : false,\n    \"Flooding Tolerance\":\n      Flooding_Frequency !== \"None\" && Flooding_Frequency ? true : false,\n  });\n\n  const handleChange = (event) => {\n    if (event.target.checked) {\n      setSelected({ ...selected, [event.target.name]: true });\n    } else {\n      setSelected({ ...selected, [event.target.name]: false });\n    }\n  };\n\n  useEffect(() => {\n    if (\n      Flooding_Frequency === null ||\n      Flooding_Frequency === \"None\" ||\n      Flooding_Frequency === \"\"\n    ) {\n      setSelected({ ...selected, \"Flooding Tolerance\": false });\n    } else {\n      setSelected({ ...selected, \"Flooding Tolerance\": true });\n    }\n\n    if (Drainage_Class !== \"\") {\n      if (Array.isArray(Drainage_Class)) {\n        setSelected({ ...selected, \"Soil Drainage\": true });\n      } else {\n        setSelected({ ...selected, \"Soil Drainage\": false });\n      }\n    } else {\n      setSelected({ ...selected, \"Soil Drainage\": false });\n    }\n  }, [state.soilData]);\n\n  useEffect(() => {\n    if (selected[\"Soil Drainage\"]) {\n      const newActives = activeCropData.filter((crop) => {\n        if (areCommonElements(crop.fields[\"Soil Drainage\"], Drainage_Class)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const newInactives = cropData.filter((e) => !newActives.includes(e));\n\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n    } else {\n      filterSidebarItems();\n    }\n\n    if (selected[\"Flooding Tolerance\"]) {\n      const newActives = activeCropData.filter((crop) => {\n        if (crop.fields[\"Flooding Tolerance\"] === Flooding_Frequency) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      const newInactives = cropData.filter((e) => !newActives.includes(e));\n\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n    } else {\n      filterSidebarItems();\n    }\n  }, [selected]);\n\n  //   useImperativeHandle(ref, () => ({\n  //     resetFilters() {\n  //       setSelected({ \"Soil Drainage\": [], \"Flooding Tolerance\": [] });\n  //     },\n  //   }));\n\n  //   useEffect(() => {\n  //     let selections = selected;\n\n  //     props.setSidebarFilterOptions({\n  //       ...props.sidebarFilterOptions,\n  //       ...selections,\n  //     });\n  //   }, [selected]);\n\n  return (\n    <Grid container spacing={1}>\n      {props.filters.values.map((val, index) => (\n        <Grid item xs={12} key={index}>\n          <Tooltip\n            interactive\n            arrow\n            placement=\"right\"\n            title={\n              <div className=\"tooltipTextContainer text-left\">\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      val.name === \"Soil Drainage\"\n                        ? Drainage_Class.toString()\n                        : Flooding_Frequency.toString(),\n                  }}\n                ></p>\n              </div>\n            }\n            key={`tooltip${index}`}\n          >\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={selected[val.name]}\n                  onChange={handleChange}\n                  name={val.name}\n                  color=\"primary\"\n                />\n              }\n              label={<small>{val.name}</small>}\n            />\n          </Tooltip>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\n// const objFilter = (obj, predicate) => {\n//   let result = {},\n//     key;\n\n//   for (key in obj) {\n//     if (obj.hasOwnProperty(key) && !predicate(obj[key])) {\n//       result[key] = obj[key];\n//     }\n//   }\n\n//   return result;\n// };\n\nconst areCommonElements = (arr1, arr2) => {\n  const arr2Set = new Set(arr2);\n  return arr1.some((el) => arr2Set.has(el));\n};\nexport default SoilConditions;\n","import React, { Fragment, useEffect, useRef } from \"react\";\nimport filterData from \"../../shared/data-dictionary7-optimised.json\";\n\nimport {\n  makeStyles,\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemText,\n  Collapse,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Tooltip,\n  Grid,\n} from \"@material-ui/core\";\nimport {\n  ExpandLess,\n  ExpandMore,\n  CalendarTodayRounded,\n} from \"@material-ui/icons\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { List as ListMovable, arrayMove } from \"react-movable\";\n\nimport { DateRangePicker } from \"@matharumanpreet00/react-daterange-picker\";\nimport moment from \"moment\";\n\nimport CoverCropType from \"./Filters/CoverCropType\";\nimport EnvironmentalTolerance from \"./Filters/EnvironmentalTolerance\";\nimport Seeds from \"./Filters/Seeds\";\nimport SeedingMethods from \"./Filters/SeedingMethods\";\nimport Growth from \"./Filters/Growth\";\nimport TerminationMethods from \"./Filters/TerminationMethods\";\nimport Beneficials from \"./Filters/Beneficials\";\nimport Weeds from \"./Filters/Weeds\";\nimport DiseaseAndNonWeedPests from \"./Filters/DiseaseAndNonWeedPests\";\nimport Roots from \"./Filters/Roots\";\nimport \"../../styles/cropSidebar.scss\";\nimport SoilConditions from \"./Filters/SoilConditions\";\nconst _ = require(\"lodash\");\n// const jslinq = require(\"jslinq\");\n\nconst useStyles = makeStyles((theme) => ({\n  listItemRoot: {\n    borderTop: \"0px\",\n    border: \"1px solid \" + CustomStyles().primaryProgressBtnBorderColor,\n  },\n  formControlLabel: {},\n  listSubHeaderRoot: {\n    backgroundColor: CustomStyles().lightGreen,\n    color: \"black\",\n    textAlign: \"center\",\n    height: \"50px\",\n    borderTopLeftRadius: CustomStyles().semiRoundedRadius,\n    borderTopRightRadius: CustomStyles().semiRoundedRadius,\n  },\n  nested: {\n    paddingLeft: theme.spacing(3),\n  },\n  subNested: {\n    paddingLeft: theme.spacing(4),\n  },\n}));\n\nconst CropSidebarComponent = (props) => {\n  const classes = useStyles();\n  const [state, dispatch] = React.useContext(Context);\n\n  const comparisonView = props.comparisonView;\n\n  const [cropFiltersOpen, setCropFiltersOpen] = React.useState(\n    props.isListView ? true : false\n  );\n  const [showFilters, setShowFilters] = React.useState(\n    window.location.pathname === \"/\"\n      ? props.from === \"table\"\n        ? state.speciesSelectorActivationFlag\n          ? true\n          : comparisonView\n          ? true\n          : false\n        : true\n      : true\n  );\n  useEffect(() => {\n    if (window.location.pathname !== \"/\") {\n      setShowFilters(true);\n    } else {\n      if (props.from === \"table\") {\n        if (state.speciesSelectorActivationFlag) {\n          setShowFilters(true);\n        } else {\n          if (comparisonView) {\n            setShowFilters(true);\n          } else {\n            setShowFilters(false);\n          }\n        }\n      } else {\n        setShowFilters(true);\n      }\n    }\n  }, [\n    window.location.pathname,\n    state.speciesSelectorActivationFlag,\n    props.from,\n    comparisonView,\n  ]);\n\n  const [cashCropOpen, setCashCropOpen] = React.useState(false);\n  const [goalsOpen, setGoalsOpen] = React.useState(true);\n\n  const [dateRangeOpen, setDateRangeOpen] = React.useState(false);\n  const [dateRange, setDateRange] = React.useState({\n    startDate: null,\n    endDate: null,\n  });\n\n  const [sidebarFilters, setSidebarFilters] = React.useState([]);\n  const [sidebarFiltersOpen, setSidebarFiltersOpen] = React.useState([]);\n\n  // make an exhaustive array of all params in array e.g. cover crop group and use includes in linq\n  const [sidebarFilterOptions, setSidebarFilterOptions] = React.useState({\n    \"Cover Crop Group\": [], //string\n    \"Drought Tolerance\": [], //int\n    \"Flood Tolerance\": [], // int\n    \"Heat Tolerance\": [], // int\n    \"Low Fertility Tolerance\": [], // int\n    \"Salinity Tolerance\": [], // int\n    \"Shade Tolerance\": [], // int\n    \"Seed Price per Pound\": [], //int\n    \"Frost Seeding\": [], // -999 or true\n    \"Aerial Seeding\": [], // -999 or true\n    Duration: [], // array\n    \"Active Growth Period\": [], //array\n    \"Growing Window\": [], // string\n    \"Establishes Quickly\": [], // int\n    \"Ease of Establishment\": [], // int\n    \"Winter Survival\": [], // array\n    \"Early Spring Growth\": [], // int\n    \"Flowering Trigger\": [], // array\n    \"Root Architecture\": [], // array\n    \"Root Depth\": [], // string\n    \"Tillage Termination at Vegetative\": [], // int\n    \"Tillage Termination at Flowering\": [], // int\n    \"Freezing Termination at Vegetative\": [], // int\n    \"Chemical Termination at Vegetative\": [], // int\n    \"Chemical Termination at Flowering\": [], // int\n    \"Mow Termination at Flowering\": [], // int\n    \"Roller Crimp Tolerance at Flowering\": [], // int\n    \"Supports Mycorrhizae\": [], // int\n    \"Pollinator Habitat\": [], // int\n    \"Pollinator Food\": [], // int\n    \"Volunteer Establishment\": [], // int\n    Persistence: [], // int\n    \"Discourages Nematodes\": [], // int\n    \"Promotes Nematodes\": [], // int\n    \"Discourages Pest Insects\": [], // int\n    \"Promotes Pest Insects\": [], // int\n    \"Suppresses Cash Crop Disease\": [], // int\n    \"Promotes Cash Crop Disease\": [], // int\n  });\n  const seedingMethodRef = useRef();\n  const beneficialsRef = useRef();\n  const coverCropTypeRef = useRef();\n  const diseaseRef = useRef();\n  const growthRef = useRef();\n  const rootsRef = useRef();\n  const seedsRef = useRef();\n  const weedsRef = useRef();\n  const terminationRef = useRef();\n  const envTolRef = useRef();\n\n  const [resetFilters, setResetFilters] = React.useState(false);\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    filterSidebarItems();\n  }, [sidebarFilterOptions]);\n\n  const filterSidebarItems = () => {\n    const crop_data = props.cropData.filter(\n      (crop) => crop.fields[\"Zone Decision\"] === \"Include\"\n    );\n\n    const nonZeroes = Object.keys(sidebarFilterOptions).map((key) => {\n      if (sidebarFilterOptions[key].length !== 0) {\n        return { [key]: sidebarFilterOptions[key] };\n      } else return \"\";\n    });\n    const nonZeroKeys2 = nonZeroes.filter((val) => val !== \"\");\n\n    const nonZeroKeys = nonZeroKeys2.map((obj) => {\n      // console.log(obj)\n      // console.log(Object.keys(obj));\n      return Object.keys(obj).toString();\n    });\n\n    // console.log(nonZeroKeys)\n    // localStorage.setItem(\"filterKeys\", JSON.stringify(nonZeroKeys));\n    dispatch({\n      type: \"UPDATE_FILTER_KEYS\",\n      data: {\n        filterKeys: nonZeroKeys,\n      },\n    });\n    if (sidebarFilterOptions[\"Active Growth Period\"].length > 0) {\n      let growthArray = [];\n\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Fall\")) {\n        growthArray.push(\"Sep\");\n        growthArray.push(\"Oct\");\n        growthArray.push(\"Nov\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Winter\")) {\n        growthArray.push(\"Dec\");\n        growthArray.push(\"Jan\");\n        growthArray.push(\"Feb\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Spring\")) {\n        growthArray.push(\"Mar\");\n        growthArray.push(\"Apr\");\n        growthArray.push(\"May\");\n      }\n      if (sidebarFilterOptions[\"Active Growth Period\"].includes(\"Summer\")) {\n        growthArray.push(\"Jun\");\n        growthArray.push(\"Jul\");\n        growthArray.push(\"Aug\");\n      }\n\n      dispatch({\n        type: \"UPDATE_ACTIVE_GROWTH_PERIOD\",\n        data: {\n          activeGrowthPeriod: growthArray,\n        },\n      });\n    } else {\n      dispatch({\n        type: \"UPDATE_ACTIVE_GROWTH_PERIOD\",\n        data: {\n          activeGrowthPeriod: [],\n        },\n      });\n    }\n\n    if (nonZeroKeys.length > 0) {\n      // const filtered = getFilteredObjects(crop_data, nonZeroKeys);\n\n      const arrayKeys = [\n        \"Duration\",\n        \"Active Growth Period\",\n        \"Winter Survival\",\n        \"Flowering Trigger\",\n        \"Root Architecture\",\n      ];\n      const booleanKeys = [\"Aerial Seeding\", \"Frost Seeding\"];\n      const aerialOrFrost = [\"\"];\n\n      const filtered = crop_data.filter((crop) => {\n        const totalActiveFilters = Object.keys(nonZeroKeys2).length;\n        let i = 0;\n        nonZeroKeys2.forEach((keyObject) => {\n          const key = Object.keys(keyObject);\n          // console.log(key);\n          const vals = keyObject[key];\n          if (areCommonElements(arrayKeys, key)) {\n            // Handle array type havlues\n\n            if (_.intersection(vals, crop.fields[key]).length > 0) {\n              i++;\n            }\n          } else if (areCommonElements(booleanKeys, key)) {\n            //  Handle boolean types\n            if (crop.fields[key]) {\n              i++;\n            }\n          } else {\n            if (vals.includes(crop.fields[key])) {\n              i++;\n            }\n          }\n        });\n\n        if (i === totalActiveFilters) return true;\n      });\n\n      const inactives = crop_data.filter((e) => !filtered.includes(e));\n\n      // if(!firstUpdate){\n      props.setActiveCropData(filtered);\n      props.setInactiveCropData(inactives);\n      // }\n      console.log(\"total\", crop_data.length);\n      console.log(\"active\", filtered.length);\n      console.log(\"first\", filtered);\n      console.log(\"inactive\", inactives.length);\n      //\n    } else {\n      props.setActiveCropData(crop_data);\n      props.setInactiveCropData([]);\n    }\n  };\n  const areCommonElements = (arr1, arr2) => {\n    const arr2Set = new Set(arr2);\n    return arr1.some((el) => arr2Set.has(el));\n  };\n\n  function filterArray(array, filters) {\n    const filterKeys = Object.keys(filters);\n    return array.filter((crop) => {\n      // validates all filter criteria\n      return filterKeys.every((key) => {\n        // ignores non-function predicates\n        if (typeof filters[key] !== \"function\") return true;\n        // return filters[key](item[key]);\n        else if (\n          findCommonElements(crop.fields[key], sidebarFilterOptions[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else if (\n          typeof crop.fields[key] === \"boolean\" &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          if (crop.fields[key] !== -999 && sidebarFilterOptions[key] !== -999)\n            return true;\n          else return false;\n        } else if (\n          sidebarFilterOptions[key].includes(crop.fields[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    });\n  }\n\n  const [filtersSelected, setFiltersSelected] = React.useState(false);\n  useEffect(() => {\n    const sidebarKeys = Object.keys(sidebarFilterOptions);\n    // console.log(sidebarKeys);\n\n    const nonZeroKeys = sidebarKeys.filter(function (key) {\n      return sidebarFilterOptions[key].length > 0;\n    });\n\n    if (nonZeroKeys.length === 0) setFiltersSelected(false);\n    else setFiltersSelected(true);\n  }, [sidebarFilterOptions]);\n\n  const getFilteredObjects = (data = [], keys = []) => {\n    return data.filter((crop) => {\n      return keys.every((key) => {\n        if (Array.isArray(crop.fields[key])) {\n          if (\n            findCommonElements(crop.fields[key], sidebarFilterOptions[key]) &&\n            crop.fields[\"Zone Decision\"] === \"Include\"\n          )\n            return true;\n          else return false;\n        } else if (\n          typeof crop.fields[key] === \"boolean\" &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          if (crop.fields[key] !== -999 && sidebarFilterOptions[key] !== -999)\n            return true;\n          else return false;\n        } else if (\n          sidebarFilterOptions[key].includes(crop.fields[key]) &&\n          crop.fields[\"Zone Decision\"] === \"Include\"\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    });\n  };\n  useEffect(() => {\n    if (props.isListView) {\n      setCropFiltersOpen(true);\n      setCashCropOpen(false);\n    } else {\n      setCropFiltersOpen(false);\n      setCashCropOpen(true);\n    }\n  }, [props.isListView]);\n\n  const toggleSidebarFilterItems = (index) => {\n    const newSidebarFiltersOpen = sidebarFiltersOpen.map((obj, index2) => {\n      if (index2 === index) return { ...obj, open: !obj.open };\n      else return { ...obj };\n    });\n    setSidebarFiltersOpen(newSidebarFiltersOpen);\n  };\n\n  const resetAllFilters = () => {\n    beneficialsRef.current.resetFilters();\n    coverCropTypeRef.current.resetFilters();\n    diseaseRef.current.resetFilters();\n    envTolRef.current.resetFilters();\n    growthRef.current.resetFilters();\n    rootsRef.current.resetFilters();\n    seedingMethodRef.current.resetFilters();\n\n    seedsRef.current.resetFilters();\n    terminationRef.current.resetFilters();\n    weedsRef.current.resetFilters();\n    props.setActiveCropData(state.cropData);\n    props.setInactiveCropData([]);\n    setSidebarFilterOptions({\n      \"Cover Crop Group\": [], //string\n      \"Drought Tolerance\": [], //int\n      \"Flood Tolerance\": [], // int\n      \"Heat Tolerance\": [], // int\n      \"Low Fertility Tolerance\": [], // int\n      \"Salinity Tolerance\": [], // int\n      \"Shade Tolerance\": [], // int\n      \"Seed Price per Pound\": [], //int\n      \"Frost Seeding\": [], // -999 or true\n      \"Aerial Seeding\": [], // -999 or true\n      Duration: [], // array\n      \"Active Growth Period\": [], //array\n      \"Growing Window\": [], // string\n      \"Establishes Quickly\": [], // int\n      \"Ease of Establishment\": [], // int\n      \"Winter Survival\": [], // array\n      \"Early Spring Growth\": [], // int\n      \"Flowering Trigger\": [], // array\n      \"Root Architecture\": [], // array\n      \"Root Depth\": [], // string\n      \"Tillage Termination at Vegetative\": [], // int\n      \"Tillage Termination at Flowering\": [], // int\n      \"Freezing Termination at Vegetative\": [], // int\n      \"Chemical Termination at Vegetative\": [], // int\n      \"Chemical Termination at Flowering\": [], // int\n      \"Mow Termination at Flowering\": [], // int\n      \"Roller Crimp Tolerance at Flowering\": [], // int\n      \"Supports Mycorrhizae\": [], // int\n      \"Pollinator Habitat\": [], // int\n      \"Pollinator Food\": [], // int\n      \"Volunteer Establishment\": [], // int\n      Persistence: [], // int\n      \"Discourages Nematodes\": [], // int\n      \"Promotes Nematodes\": [], // int\n      \"Discourages Pest Insects\": [], // int\n      \"Promotes Pest Insects\": [], // int\n      \"Suppresses Cash Crop Disease\": [], // int\n      \"Promotes Cash Crop Disease\": [], // int\n    });\n    setResetFilters(!resetFilters);\n  };\n  React.useEffect(() => {\n    setSidebarFilters(filterData);\n    const filterTitles = filterData.map((filter) => {\n      return { name: filter.name, open: false };\n    });\n    setSidebarFiltersOpen(filterTitles);\n\n    return () => {\n      setSidebarFilters([]);\n      setSidebarFiltersOpen([]);\n    };\n  }, []);\n\n  React.useMemo(() => {\n    if (beneficialsRef.current) {\n      resetAllFilters();\n    }\n  }, [props.cropDataChanged]);\n\n  const [growthWindowVisible, setGrowthWindowVisible] = React.useState(true);\n\n  let [keysArray, setKeysArray] = React.useState([]);\n  const [keysArrChanged, setKeysArrChanges] = React.useState(false);\n\n  //DONE: this method is not being used\n  const getAirtableDictionaryURL = (zone) => {\n    switch (zone) {\n      case 2: {\n        break;\n      }\n      case 4: {\n        break;\n      }\n      case 5: {\n        break;\n      }\n      case 6: {\n        break;\n      }\n      case 7: {\n        return `https://api.airtable.com/v0/app2q3UaKHXutMQyt/tbl4l2aYdp6ra5nqH?filterByFormula=TRUE(%7BFilter+Field%7D)&sort%5B0%5D%5Bfield%5D=Category&sort%5B0%5D%5Bdirection%5D=asc`;\n        // return `./json/data-dictionary7.json`;\n      }\n\n      default: {\n        return `https://api.airtable.com/v0/app2q3UaKHXutMQyt/tbl4l2aYdp6ra5nqH?filterByFormula=TRUE(%7BFilter+Field%7D)&sort%5B0%5D%5Bfield%5D=Category&sort%5B0%5D%5Bdirection%5D=asc`;\n      }\n    }\n  };\n  const updateSelectedGoals = (newGoalArr, oldIndex, newIndex) => {\n    let newGoals = arrayMove(newGoalArr, oldIndex, newIndex);\n\n    dispatch({\n      type: \"DRAG_GOALS\",\n      data: {\n        selectedGoals: newGoals,\n        snackOpen: true,\n        snackMessage: \"Goal Priority Changed\",\n      },\n    });\n  };\n\n  const changeProgress = (type) => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\",\n        },\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\",\n        },\n      });\n    }\n  };\n\n  const handleClick = (index) => {\n    switch (index) {\n      case 0:\n        setGoalsOpen(!goalsOpen);\n        break;\n      case 1:\n        setCashCropOpen(!cashCropOpen);\n        break;\n      case 2:\n        setCropFiltersOpen(!cropFiltersOpen);\n        break;\n      default:\n        break;\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.from === \"table\") {\n      if (dateRange.startDate !== null && dateRange.endDate !== null) {\n        console.log(new Date(dateRange.startDate).toISOString());\n        dispatch({\n          type: \"UPDATE_DATE_RANGE\",\n          data: {\n            startDate: moment(\n              new Date(dateRange.startDate).toISOString(),\n              \"YYYY-MM-DD\"\n            ).format(\"MM/DD\"),\n            endDate: moment(new Date(dateRange.endDate).toISOString()).format(\n              \"MM/DD\"\n            ),\n          },\n        });\n      }\n\n      props.setGrowthWindow(growthWindowVisible);\n    }\n  }, [dateRange, growthWindowVisible, props.from]);\n\n  React.useEffect(() => {\n    if (props.from === \"table\") {\n      props.sortEnvTolCropData(keysArray);\n    }\n  }, [keysArrChanged]);\n\n  return (\n    <List\n      component=\"nav\"\n      classes={{ root: classes.listRoot }}\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader\n          classes={{ root: classes.listSubHeaderRoot }}\n          component=\"div\"\n          id=\"nested-list-subheader\"\n        >\n          FILTER\n        </ListSubheader>\n      }\n      className={classes.root}\n    >\n      {props.from === \"table\" ? (\n        <Fragment>\n          <ListItem\n            button\n            onClick={() => handleClick(0)}\n            style={\n              goalsOpen\n                ? {\n                    backgroundColor: CustomStyles().lightGreen,\n                    borderTop: \"4px solid white\",\n                  }\n                : { backgroundColor: \"inherit\", borderTop: \"4px solid white\" }\n            }\n          >\n            <ListItemText primary=\"COVER CROP GOALS\" />\n            {goalsOpen ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n\n          <Collapse in={goalsOpen} timeout=\"auto\" unmountOnExit>\n            {state.selectedGoals.length === 0 ? (\n              <List component=\"div\" disablePadding>\n                <ListItem button className={classes.nested}>\n                  <ListItemText primary=\"No Goals Selected\" />\n                </ListItem>\n                <ListItem className={classes.nested}>\n                  <Button onClick={() => changeProgress(\"decrement\")}>\n                    click to edit\n                  </Button>\n                </ListItem>\n              </List>\n            ) : (\n              <Fragment>\n                <List component=\"div\" disablePadding>\n                  <ListItem className={classes.nested}>\n                    <ListItemText primary=\"Goal Priority Order\" />\n                  </ListItem>\n                </List>\n                <ListMovable\n                  values={state.selectedGoals}\n                  onChange={({ oldIndex, newIndex }) =>\n                    updateSelectedGoals(state.selectedGoals, oldIndex, newIndex)\n                  }\n                  renderList={({ children, props }) => (\n                    <ol className=\"goalsListFilter\" {...props}>\n                      {children}\n                    </ol>\n                  )}\n                  renderItem={({ value, props }) => (\n                    <li {...props}>{value.toUpperCase()}</li>\n                  )}\n                />\n                <List component=\"div\" disablePadding>\n                  <ListItem\n                    button\n                    className={classes.nested}\n                    onClick={() => changeProgress(\"decrement\")}\n                  >\n                    <ListItemText primary=\"Drag to reorder, click to edit\" />\n                  </ListItem>\n                </List>\n              </Fragment>\n            )}\n          </Collapse>\n          <ListItem\n            button\n            onClick={() => handleClick(1)}\n            style={\n              cashCropOpen\n                ? { backgroundColor: CustomStyles().lightGreen }\n                : { backgroundColor: \"inherit\" }\n            }\n          >\n            <ListItemText primary=\"CASH CROP\" />\n            {cashCropOpen ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={cashCropOpen} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\">\n              <ListItem className={classes.nested}>\n                <TextField\n                  label=\"Cash Crop\"\n                  id=\"outlined-margin-dense\"\n                  defaultValue=\"\"\n                  helperText=\"Enter crop\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </ListItem>\n              <ListItem className={classes.nested}>\n                <TextField\n                  label=\"Planting to Harvest\"\n                  value={`${state.cashCropData.dateRange.startDate} - ${state.cashCropData.dateRange.endDate}`}\n                  fullWidth\n                  margin=\"dense\"\n                  aria-haspopup=\"true\"\n                  variant=\"outlined\"\n                  InputProps={{\n                    readOnly: true,\n                    endAdornment: (\n                      <InputAdornment>\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => setDateRangeOpen(!dateRangeOpen)}\n                        >\n                          <CalendarTodayRounded />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </ListItem>\n              <ListItem style={{ zIndex: 99 }}>\n                <DateRangePicker\n                  open={dateRangeOpen}\n                  onChange={(range) => setDateRange(range)}\n                />\n              </ListItem>\n              <ListItem className={classes.nested}>\n                <FormGroup>\n                  <FormControlLabel\n                    classes={{ root: classes.formControlLabel }}\n                    control={\n                      <Checkbox\n                        checked={growthWindowVisible}\n                        onChange={() => {\n                          setGrowthWindowVisible(!growthWindowVisible);\n                        }}\n                        value=\"Show Growth Window\"\n                      />\n                    }\n                    label={\n                      <Typography variant=\"body2\">\n                        Show Growth Window\n                      </Typography>\n                    }\n                  />\n                </FormGroup>\n              </ListItem>\n            </List>\n          </Collapse>\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n\n      {showFilters ? (\n        <Fragment>\n          <ListItem\n            button\n            onClick={() => handleClick(2)}\n            style={\n              props.from === \"table\"\n                ? cropFiltersOpen\n                  ? { backgroundColor: CustomStyles().lightGreen }\n                  : { backgroundColor: \"inherit\" }\n                : { backgroundColor: CustomStyles().lightGreen }\n            }\n          >\n            <ListItemText primary=\"COVER CROP FILTERS\" />\n            {cropFiltersOpen ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={cropFiltersOpen} timeout=\"auto\">\n            <List component=\"div\" disablePadding className=\"cropFilters\">\n              {filtersSelected ? (\n                <ListItem onClick={() => {}}>\n                  <ListItemText\n                    primary={\n                      <Button size=\"small\" onClick={resetAllFilters}>\n                        <small className=\"text-danger font-weight-bold\">\n                          CLEAR FILTERS\n                        </small>\n                      </Button>\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem></ListItem>\n              )}\n\n              {sidebarFilters.map((filter, index) => (\n                <Fragment key={index}>\n                  <ListItem\n                    // className={classes.nested}\n                    className={\n                      sidebarFiltersOpen[index].open\n                        ? \"filterOpen\"\n                        : \"filterClose\"\n                    }\n                    button\n                    onClick={() => toggleSidebarFilterItems(index)}\n                  >\n                    {filter.description !== null ? (\n                      <Tooltip\n                        enterDelay={3000}\n                        interactive\n                        arrow\n                        placement=\"right-start\"\n                        title={\n                          <div className=\"tooltipTextContainer text-left\">\n                            <p>{filter.description}</p>\n                          </div>\n                        }\n                        key={`tooltip${index}`}\n                      >\n                        <ListItemText\n                          primary={\n                            <Typography variant=\"body2\">\n                              {filter.name.toUpperCase()}\n                            </Typography>\n                          }\n                        />\n                      </Tooltip>\n                    ) : (\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"body2\">\n                            {filter.name.toUpperCase()}\n                          </Typography>\n                        }\n                      />\n                    )}\n\n                    {sidebarFiltersOpen[index].open ? (\n                      <ExpandLess />\n                    ) : (\n                      <ExpandMore />\n                    )}\n                  </ListItem>\n\n                  <Collapse in={sidebarFiltersOpen[index].open} timeout=\"auto\">\n                    <List component=\"div\" disablePadding>\n                      <ListItem\n                        // className={classes.subNested}\n                        // title={sidebarFilters[index].description}\n                        component=\"div\"\n                      >\n                        {filter.name.toUpperCase() === \"COVER CROP TYPE\" ? (\n                          <CoverCropType\n                            ref={coverCropTypeRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n\n                        {filter.name.toUpperCase() ===\n                        \"ENVIRONMENTAL TOLERANCES\" ? (\n                          <EnvironmentalTolerance\n                            ref={envTolRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n\n                        {filter.name.toUpperCase() === \"SEEDS\" ? (\n                          <Seeds\n                            ref={seedsRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() === \"SEEDING METHODS\" ? (\n                          <SeedingMethods\n                            ref={seedingMethodRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n\n                        {filter.name.toUpperCase() === \"SOIL CONDITIONS\" ? (\n                          <SoilConditions\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            filterSidebarItems={filterSidebarItems}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n\n                        {filter.name.toUpperCase() === \"GROWTH\" ? (\n                          <Grid container spacing={1}>\n                            <Grid item>\n                              <Growth\n                                ref={growthRef}\n                                filters={sidebarFilters[index]}\n                                sidebarFilterOptions={sidebarFilterOptions}\n                                setSidebarFilterOptions={\n                                  setSidebarFilterOptions\n                                }\n                                resetAllFilters={resetAllFilters}\n                                {...props}\n                              />\n                            </Grid>\n                          </Grid>\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() === \"ROOTS\" ? (\n                          <Grid container spacing={1}>\n                            <Grid item>\n                              <Roots\n                                ref={rootsRef}\n                                filters={sidebarFilters[index]}\n                                sidebarFilterOptions={sidebarFilterOptions}\n                                setSidebarFilterOptions={\n                                  setSidebarFilterOptions\n                                }\n                                resetAllFilters={resetAllFilters}\n                                {...props}\n                              />\n                            </Grid>\n                          </Grid>\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() === \"TERMINATION METHODS\" ? (\n                          <TerminationMethods\n                            ref={terminationRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() === \"BENEFICIALS\" ? (\n                          <Beneficials\n                            ref={beneficialsRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() === \"WEEDS\" ? (\n                          <Weeds\n                            ref={weedsRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                        {filter.name.toUpperCase() ===\n                        \"DISEASE & NON WEED PESTS\" ? (\n                          <DiseaseAndNonWeedPests\n                            ref={diseaseRef}\n                            filters={sidebarFilters[index]}\n                            sidebarFilterOptions={sidebarFilterOptions}\n                            setSidebarFilterOptions={setSidebarFilterOptions}\n                            resetAllFilters={resetAllFilters}\n                            {...props}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                      </ListItem>\n                    </List>\n                  </Collapse>\n                </Fragment>\n              ))}\n            </List>\n          </Collapse>\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n    </List>\n  );\n};\n\nconst findCommonElements = (arr1 = [], arr2 = []) => {\n  // Iterate through each element in the\n  // first array and if some of them\n  // include the elements in the second\n  // array then return true.\n  return arr1.some((item) => arr2.includes(item));\n};\n\nexport default CropSidebarComponent;\n","import React, { useContext, useState, Fragment, useEffect } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { Typography, Button, IconButton, TextField } from \"@material-ui/core\";\n\nimport {\n  CalendarToday,\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Compare,\n  Add,\n} from \"@material-ui/icons\";\n\nimport \"../../styles/cropSelector.scss\";\nimport CropTableComponent from \"./CropTable\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport MyCoverCropList from \"../MyCoverCropList/MyCoverCropList\";\nimport CropCalendarViewComponent from \"./CropCalendarView\";\nimport CropSidebarComponent from \"./CropSidebar\";\nimport { zoneIcon } from \"../../shared/constants\";\n\nconst _ = require(\"lodash\");\n\nconst CropSelector = () => {\n  const [state, dispatch] = useContext(Context);\n  // let [isExpansionExpanded, setIsExpansionExpanded] = useState(true);\n  let [showGrowthWindow, setShowGrowthWindow] = useState(true);\n  // sortAllGoals = false would mean default i.e.\n  const [sortAllGoals, setSortAllGoals] = useState(false);\n  const [sortPreference, setSortPreference] = useState(\"desc\");\n  const [disabledIds, setDisabledIds] = useState([]);\n  const [starDisabledIds, setStarDisabledIds] = useState([]);\n  const [activeCropData, setActiveCropData] = useState([]);\n  const [inactiveCropData, setInactiveCropData] = useState([]);\n  const [coverCropName, setCoverCropName] = useState(\"\");\n\n  let [isListView, setIsListView] = useState(true);\n\n  const [comparisonView, setComparisonView] = useState(true);\n\n  const [cropData, setCropData] = useState([]);\n\n  const sortEnvTolCropData = (objDataArr) => {\n    // console.log(objDataArr);\n    if (cropData.length !== 0) {\n      let crop_data = cropData;\n\n      // console.log(objData);\n      // const activeObjKeys = _.keys(_.pickBy(objData));\n      // console.log('activeObjKeys', activeObjKeys)\n      // console.log(\"activeObjKeys\", activeObjKeys);\n      // let objData = objDataArr;\n\n      let objData = objDataArr.map((obj) => {\n        return `fields.${obj}`;\n      });\n      // console.log(objData);\n\n      // console.log(objData);\n      if (objData.length > 0) {\n        // some values are truthy\n\n        let updatedCropData = _.sortBy(crop_data, objData);\n\n        setCropData(updatedCropData);\n      } else {\n        // reset! none are true\n        const activeObjKeys = [];\n        let { selectedGoals } = state;\n        selectedGoals.forEach((val, index) => {\n          //  Crop Data is inside cropData.fields\n          activeObjKeys[index] = `fields.${val}`;\n        });\n        let updatedCropData = _.orderBy(crop_data, activeObjKeys, [\n          \"desc\",\n          \"desc\",\n          \"desc\",\n        ]);\n\n        setCropData(updatedCropData);\n      }\n    }\n  };\n\n  // const [text, setText] = useState(\"\");\n  // const [differenceText, setDifferenceText] = useState(\"\");\n  const [disabledIdsTextNodes, setDisabledIdsTextNodes] = useState(\"\");\n  // const [split_arr, setSplit_arr] = useState([]);\n  // Debug text\n  // const [debug, setDebug] = useState(false);\n  const [cropDataChanged, setCropDataChanged] = useState(false);\n\n  useEffect(() => {\n    // setActiveCropData(state.cropData);\n    // setInactiveCropData([]);\n    // sortCropsBy(\"asc\");\n    setCropDataChanged(!cropDataChanged);\n  }, [state.cropData]);\n\n  useEffect(() => {\n    // get all ids and compare with the disabled ids array\n    let allIds = [\n      ...document.querySelectorAll(\n        \".calendarViewTableWrapper table > tbody > tr\"\n      ),\n    ].map((x) => {\n      // if (x.id !== \"\") {\n      return x.id;\n      // }\n    });\n    // filter empty nodes(strings) from above array\n    allIds = allIds.filter((x) => x !== \"\");\n    // console.log(allIds);\n\n    // if (disabledIds.length > 0) {\n    let disabledIdssTextNodes = disabledIds.map((val) => {\n      return document.querySelector(`#${val} div div span:nth-child(2)`)\n        .innerText;\n    });\n    setDisabledIdsTextNodes(JSON.stringify(disabledIdssTextNodes));\n    // }\n    // setDisabledIdsTextNodes(JSON.stringify(disabledIds));\n    // let differenceIds = allIds.filter((x) => {\n    //   if (x !== \"\") return !disabledIds.includes(x);\n    // });\n    // let differenceNames = differenceIds.map((val) => {\n    //   return document.querySelector(`#${val} div div span:nth-child(2)`)\n    //     .innerText;\n    // });\n    // setDifferenceText(JSON.stringify(differenceNames));\n\n    // if (differenceIds.length > 0) {\n    //   differenceIds.map((id) => {\n    //     let ele = document.getElementById(id);\n    //     ele.classList.remove(\"disabled\");\n    //     ele.style.opacity = \"1\";\n    //   });\n    // }\n\n    if (disabledIds.length > 0) {\n      allIds.map((id) => {\n        if (disabledIds.includes(id) || starDisabledIds.includes(id)) {\n          // need not be disabled\n          let ele = document.getElementById(id);\n          ele.classList.add(\"disabled\");\n          ele.style.opacity = \"0.2\";\n        } else {\n          // disable\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        }\n      });\n    } else {\n      if (starDisabledIds.length === 0) {\n        allIds.map((id) => {\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        });\n      } else {\n        allIds.map((id) => {\n          if (starDisabledIds.includes(id)) {\n            // need not be disabled\n            let ele = document.getElementById(id);\n            ele.classList.add(\"disabled\");\n            ele.style.opacity = \"0.2\";\n          } else {\n            // disable\n            let ele = document.getElementById(id);\n            ele.classList.remove(\"disabled\");\n            ele.style.opacity = \"1\";\n          }\n        });\n      }\n    }\n  }, [disabledIds]);\n\n  useEffect(() => {\n    // get all ids and compare with the disabled ids array\n    let allIds = [\n      ...document.querySelectorAll(\n        \".calendarViewTableWrapper table > tbody > tr\"\n      ),\n    ].map((x) => {\n      // if (x.id !== \"\") {\n      return x.id;\n      // }\n    });\n    // filter empty nodes(strings) from above array\n    allIds = allIds.filter((x) => x !== \"\");\n    // console.log(allIds);\n\n    // if (disabledIds.length > 0) {\n    let disabledIdssTextNodes = disabledIds.map((val) => {\n      return document.querySelector(`#${val} div div span:nth-child(2)`)\n        .innerText;\n    });\n    if (starDisabledIds.length > 0) {\n      allIds.map((id) => {\n        if (disabledIds.includes(id) || starDisabledIds.includes(id)) {\n          // need not be disabled\n          let ele = document.getElementById(id);\n          ele.classList.add(\"disabled\");\n          ele.style.opacity = \"0.2\";\n        } else {\n          // disable\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        }\n      });\n    } else {\n      if (disabledIds.length === 0) {\n        allIds.map((id) => {\n          let ele = document.getElementById(id);\n          ele.classList.remove(\"disabled\");\n          ele.style.opacity = \"1\";\n        });\n      } else {\n        allIds.map((id) => {\n          if (disabledIds.includes(id)) {\n            // need not be disabled\n            let ele = document.getElementById(id);\n            ele.classList.add(\"disabled\");\n            ele.style.opacity = \"0.2\";\n          } else {\n            // disable\n            let ele = document.getElementById(id);\n            ele.classList.remove(\"disabled\");\n            ele.style.opacity = \"1\";\n          }\n        });\n      }\n    }\n  }, [starDisabledIds]);\n\n  const sortCropsBy = (orderBy) => {\n    if (state.cropData.length > 0) {\n      const { selectedGoals } = state;\n      if (selectedGoals.length > 0) {\n        let crop_data = state.cropData;\n        let activeCropDataCopy =\n          activeCropData.length > 0 ? activeCropData : state.cropData;\n        let inactiveCropDataCopy =\n          inactiveCropData.length > 0 ? inactiveCropData : [];\n        // console.log(\"cropdata\", crop_data);\n        let activeObjKeys = [];\n        selectedGoals.forEach((val, index) => {\n          //  Crop Data is inside cropData.fields\n          activeObjKeys[index] = `fields.${val}`;\n        });\n        console.log(activeObjKeys);\n        switch (orderBy) {\n          case \"asc\": {\n            if (activeCropDataCopy.length > 0) {\n              let updatedCropData = _.orderBy(\n                activeCropDataCopy,\n                activeObjKeys,\n                [\"asc\", \"asc\", \"asc\"]\n              );\n              setActiveCropData(updatedCropData);\n            }\n            if (inactiveCropDataCopy.length > 0) {\n              let updatedInactives = _.orderBy(\n                inactiveCropDataCopy,\n                activeObjKeys,\n                [\"asc\", \"asc\", \"asc\"]\n              );\n              setInactiveCropData(updatedInactives);\n            }\n            // setCropData(updatedCropData);\n            setSortPreference(\"asc\");\n            break;\n          }\n          case \"desc\": {\n            if (activeCropDataCopy.length > 0) {\n              let updatedCropData = _.orderBy(\n                activeCropDataCopy,\n                activeObjKeys,\n                [\"desc\", \"desc\", \"desc\"]\n              );\n              setActiveCropData(updatedCropData);\n            }\n            if (inactiveCropDataCopy.length > 0) {\n              let updatedInactives = _.orderBy(\n                inactiveCropDataCopy,\n                activeObjKeys,\n                [\"desc\", \"desc\", \"desc\"]\n              );\n              setInactiveCropData(updatedInactives);\n            }\n            // setCropData(updatedCropData);\n            setSortPreference(\"desc\");\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (state.cropData) {\n      if (state.cropData.length > 0) {\n        // sort crop data by goal priority\n        const { selectedGoals } = state;\n        if (selectedGoals.length > 0) {\n          // let updatedCropData = _.orderBy(state.cropData, selectedGoals);\n\n          let updatedCropData = state.cropData.sort((crops1, crops2) => {\n            let result = 0;\n            for (let i = 0; i < selectedGoals.length; i++) {\n              result =\n                crops2.fields[selectedGoals[i]] -\n                crops1.fields[selectedGoals[i]];\n            }\n            return result;\n          });\n\n          setCropData(updatedCropData);\n        } else {\n          setCropData(state.cropData);\n        }\n      }\n    }\n    return () => {\n      setCropData([]);\n    };\n  }, [state.cropData]);\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\"actives\", JSON.stringify(activeCropData));\n  //   window.localStorage.setItem(\"inactives\", JSON.stringify(inactiveCropData));\n  // }, [activeCropData, inactiveCropData]);\n\n  const expandCoverCropFilter = (id) => {\n    let listItemId = `cropFilterList${id}`;\n    let x = document.querySelectorAll(`#${listItemId} div`);\n    if (document.getElementById(listItemId).classList.contains(\"active\")) {\n      document.getElementById(listItemId).classList.remove(\"active\");\n      // hide dropdown\n      // document.querySelectorAll(`#${listItemId} div`).classList.remove(\"show\");\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"show\");\n      }\n    } else {\n      document.getElementById(listItemId).classList.add(\"active\");\n      // show dropdown\n\n      for (var j = 0; j < x.length; j++) {\n        if (!x[j].classList.contains(\"show\")) {\n          x[j].classList.add(\"show\");\n        }\n      }\n    }\n  };\n\n  const toggleListView = () => {\n    setIsListView(!isListView);\n  };\n\n  const toggleComparisonView = () => {\n    setComparisonView(!comparisonView);\n  };\n\n  const covercropsNamesFilter = (e) => {\n    setCoverCropName(e.target.value);\n\n    if (e.target.value === \"\") {\n      setActiveCropData(cropData);\n      setInactiveCropData([]);\n    } else {\n      const newActives = activeCropData.filter(\n        (crops) =>\n          crops.fields[\"Cover Crop Name\"]\n            .toLowerCase()\n            .includes(e.target.value) ||\n          crops.fields[\"Scientific Name\"].toLowerCase().includes(e.target.value)\n      );\n      const newInactives = inactiveCropData.filter(\n        (crops) =>\n          crops.fields[\"Cover Crop Name\"]\n            .toLowerCase()\n            .includes(e.target.value) ||\n          crops.fields[\"Scientific Name\"].toLowerCase().includes(e.target.value)\n      );\n      setActiveCropData(newActives);\n      setInactiveCropData(newInactives);\n      // setCropData(newActives);\n    }\n  };\n  return (\n    <div className=\"container-fluid mt-2\">\n      <div className=\"row mt-3\">\n        <div className=\"col-xl-2 col-sm-12 col-lg-3\">\n          {state.myCoverCropActivationFlag ? (\n            <Fragment>\n              <div className=\"iconToggle\">\n                <Button\n                  variant=\"contained\"\n                  onClick={toggleComparisonView}\n                  size=\"large\"\n                  color=\"secondary\"\n                  startIcon={\n                    comparisonView ? (\n                      <Compare style={{ fontSize: \"larger\" }} />\n                    ) : (\n                      <ListIcon style={{ fontSize: \"larger\" }} />\n                    )\n                  }\n                >\n                  {comparisonView ? \"COMPARISON VIEW\" : \"LIST VIEW\"}\n                </Button>\n              </div>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <div className=\"iconToggle\">\n                <Button\n                  variant=\"contained\"\n                  onClick={toggleListView}\n                  size=\"large\"\n                  color=\"secondary\"\n                  startIcon={\n                    isListView ? (\n                      <CalendarToday style={{ fontSize: \"larger\" }} />\n                    ) : (\n                      <ListIcon style={{ fontSize: \"larger\" }} />\n                    )\n                  }\n                >\n                  {isListView ? \"CALENDAR VIEW\" : \"LIST VIEW\"}\n                </Button>\n              </div>\n            </Fragment>\n          )}\n        </div>\n        <div className=\"col-xl-10 col-lg-9\">\n          {state.speciesSelectorActivationFlag ? (\n            isListView ? (\n              <Fragment>\n                <div className=\"col-4\">\n                  <TextField\n                    fullWidth\n                    color=\"secondary\"\n                    label=\"Search Cover Crop Name\"\n                    value={coverCropName}\n                    onInput={covercropsNamesFilter}\n                  />\n                </div>\n                <div className=\"col-8\"></div>\n              </Fragment>\n            ) : (\n              \"\"\n            )\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n      <div className=\"row cropSelectorRow mt-3\">\n        <div className=\"col-xl-2 col-sm-12 col-lg-3\">\n          <CropSidebarComponent\n            sortEnvTolCropData={sortEnvTolCropData}\n            setGrowthWindow={setShowGrowthWindow}\n            // filterByCheckboxValues={filterByCheckboxValues}\n            isListView={isListView}\n            cropData={cropData}\n            activeCropData={\n              activeCropData.length > 0 ? activeCropData : cropData\n            }\n            inactiveCropData={inactiveCropData}\n            setActiveCropData={setActiveCropData}\n            setInactiveCropData={setInactiveCropData}\n            cropDataChanged={cropDataChanged}\n            comparisonView={comparisonView}\n            from={\"table\"}\n          />\n        </div>\n\n        <div className=\"col-xl-10 col-lg-9\">\n          {state.speciesSelectorActivationFlag ? (\n            isListView ? (\n              <CropTableComponent\n                cropData={cropData}\n                // activeCropData={\n                //   activeCropData.length > 0 ? activeCropData : cropData\n                // }\n                activeCropData={activeCropData}\n                inactiveCropData={inactiveCropData}\n                showGrowthWindow={showGrowthWindow}\n                sortAllGoals={setSortAllGoals}\n                sortAllCrops={sortCropsBy}\n                sortPreference={sortPreference}\n              />\n            ) : (\n              <CropCalendarViewComponent cropData={cropData} />\n            )\n          ) : (\n            <MyCoverCropList comparisonView={comparisonView} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CropSelector;\n","import React, { useContext, useEffect, Fragment, useState } from \"react\";\n\nimport \"./styles/App.scss\";\n// import Header from \"./components/Header/header\";\n// import Body from \"./components/body\";\nimport {\n  Box,\n  Snackbar,\n  MuiThemeProvider,\n  createMuiTheme,\n  Button,\n} from \"@material-ui/core\";\n// import Navigation from \"./components/navigation\";\n// import Footer from \"./components/Footer/footer\";\nimport Header from \"./components/Header/header\";\n\nimport Landing from \"./components/Landing/Landing\";\n\nimport { Context } from \"./store/Store\";\nimport LocationComponent from \"./components/Location/Location\";\n// import { loadProgressBar } from \"axios-progress-bar\";\nimport ProgressButtons from \"./shared/ProgressButtons\";\nimport ProgressBar from \"./shared/ProgressBar\";\nimport GoalsSelector from \"./components/GoalsSelector/GoalsSelector\";\nimport LocationConfirmation from \"./components/Location/LocationConfirmation\";\nimport CropSelector from \"./components/CropSelector/CropSelector\";\n// import { CustomStyles } from \"./shared/constants\";\n\nconst loadRelevantRoute = (progress, calcHeight) => {\n  // TODO: Handle case 3 as cropselector vs soil sample selector\n  switch (progress) {\n    case 0:\n      return <Landing height={calcHeight} bg=\"/images/cover-crop-field.webp\" />;\n    case 1:\n      return <LocationComponent />;\n    case 2:\n      return <LocationConfirmation />;\n    case 3:\n      return <LocationConfirmation />;\n    case 4:\n      return <GoalsSelector />;\n    case 5:\n      return <CropSelector />;\n\n    default:\n      return <RouteNotFound />;\n  }\n};\n\nconst RouteNotFound = () => {\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"row\">\n        <div className=\"col-4 offset-4\">\n          <h3>Unknown Route</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [state, dispatch] = useContext(Context);\n  const [calcHeight, setCalcHeight] = useState(0);\n  const handleSnackClose = () => {\n    dispatch({\n      type: \"SNACK\",\n      data: {\n        snackOpen: false,\n        snackMessage: \"\",\n      },\n    });\n  };\n\n  useEffect(() => {\n    let parentDocHeight = document\n      .getElementById(\"mainContentWrapper\")\n      .getBoundingClientRect().height;\n    let headerHeight = document.querySelector(\"header\").getBoundingClientRect()\n      .height;\n\n    let calculatedHeight = parentDocHeight - headerHeight;\n\n    setCalcHeight(calculatedHeight);\n  }, []);\n\n  return (\n    <div className=\"contentWrapper\" id=\"mainContentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n      <div className=\"container-fluid pl-0 pr-0\">\n        <div\n          className=\"contentContainer\"\n          style={\n            {\n              // height: calcHeight,\n              // width: \"100%\",\n              // position: \"absolute\",\n              // top: \"50%\",\n              // left: \"50%\",\n              // transform: \"translate(-50%, -50%)\",\n            }\n          }\n        >\n          {state.progress <= 4 && state.progress > 0 ? (\n            <div className=\"row\">\n              <div className=\"col-10\"></div>\n              <div className=\"col-2 mt-2\">\n                <Button\n                  onClick={() => {\n                    dispatch({\n                      type: \"UPDATE_PROGRESS\",\n                      data: {\n                        type: \"HOME\",\n                      },\n                    });\n                  }}\n                >\n                  reset\n                </Button>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          <div\n            className=\"col-12\"\n            style={{ paddingLeft: \"0px\", paddingRight: \"0px\" }}\n          >\n            {loadRelevantRoute(state.progress, calcHeight)}\n            {state.progress !== 0 && state.progress < 5 ? (\n              <div className=\"container-fluid mt-5 mb-5\">\n                <div className=\"row\" style={{ width: \"95%\", margin: \"0 auto\" }}>\n                  <div className=\"col-lg-5 col-12\"></div>\n                  <div className=\"col-lg-5 col-12\">\n                    <ProgressButtons />\n                  </div>\n                  <div className=\"col-lg-2 pr-0 col-12\">\n                    <ProgressBar />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: state.snackVertical,\n            horizontal: state.snackHorizontal,\n          }}\n          key={{\n            vertical: state.snackVertical,\n            horizontal: state.snackHorizontal,\n          }}\n          autoHideDuration={3000}\n          open={state.snackOpen}\n          onClose={handleSnackClose}\n          ContentProps={{\n            \"aria-describedby\": \"message-id\",\n          }}\n          message={state.snackMessage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Store, { Context } from \"./store/Store\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\n// import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./styles/progressBar.css\";\nimport Footer from \"./components/Footer/footer\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About/About\";\nimport SeedingRateCalculator from \"./components/SeedingRateCalculator/SeedingRateCalculator\";\nimport MixMaker from \"./components/MixMaker/MixMaker\";\nimport CoverCropExplorer from \"./components/CoverCropExplorer/CoverCropExplorer\";\nimport InformationSheet from \"./components/InformationSheet/InformationSheet\";\nimport HelpComponent from \"./components/Help/Help\";\nimport FeedbackComponent from \"./components/Feedback/Feedback\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\nimport { CustomStyles } from \"./shared/constants\";\nimport { SnackbarProvider } from \"notistack\";\nimport InformationSheetDictionary from \"./components/InformationSheet/InformationSheetDictionary\";\n\nconst withFooter = (WrappedComponent) => () => [\n  <WrappedComponent key=\"1\" />,\n  <Footer key=\"2\" />,\n];\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CustomStyles().lightGreen,\n    },\n    secondary: {\n      main: CustomStyles().lighterGreen,\n    },\n\n    // text: {\n    //   primary: CustomStyles().lighterGreen,\n    //   secondary: CustomStyles().primaryProgressBtnColor,\n    // },\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: CustomStyles().defaultFontSize,\n        backgroundColor: CustomStyles().secondaryProgressBtnColor,\n        color: \"black\",\n        borderRadius: CustomStyles().mildlyRoundedRadius,\n      },\n      arrow: {},\n    },\n    MuiChip: {\n      colorSecondary: {\n        backgroundColor: CustomStyles().secondaryProgressBtnColor,\n        color: \"rgba(0,0,0,0.5)\",\n        fontWeight: 500,\n      },\n      colorPrimary: {\n        backgroundColor: CustomStyles().primaryProgressBtnBorderColor,\n        color: \"rgba(0,0,0,1)\",\n        fontWeight: 500,\n      },\n    },\n  },\n});\nconst RouteNotFound = () => {\n  return (\n    <section className=\"page_404\">\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"col-sm-12 text-center\">\n              <div className=\"four_zero_four_bg\">\n                <h1 className=\"text-center \">404</h1>\n              </div>\n\n              <div className=\"contant_box_404\">\n                <h3 className=\"h2\">Look like you're lost</h3>\n\n                <p>The page you are looking for is not available!</p>\n\n                <a href=\"/\" className=\"link_404\">\n                  Go Home\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst Wrapper = () => (\n  <MuiThemeProvider theme={theme}>\n    <SnackbarProvider\n      maxSnack={5}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n    >\n      <Store>\n        <BrowserRouter>\n          <Suspense fallback={<div>Loading..</div>}>\n            <Switch>\n              <Route path={`/`} component={App} exact />\n              <Route path={\"/about\"} component={About} exact />\n              <Route path={\"/help\"} component={HelpComponent} exact />\n              <Route path={\"/feedback\"} component={FeedbackComponent} exact />\n              <Route\n                path={\"/information-sheet\"}\n                component={InformationSheet}\n                exact\n              />\n              <Route\n                path={\"/information-sheet/:cropName\"}\n                component={InformationSheet}\n                exact\n              />\n              <Route\n                path={\"/seeding-rate-calculator\"}\n                component={SeedingRateCalculator}\n                exact\n              />\n              <Route\n                path={\"/data-dictionary\"}\n                component={InformationSheetDictionary}\n                exact\n              />\n              <Route path={\"/mix-maker\"} component={MixMaker} exact />\n              <Route\n                path={\"/cover-crop-explorer\"}\n                component={CoverCropExplorer}\n                exact\n              />\n              <Route component={RouteNotFound} />\n            </Switch>\n          </Suspense>\n\n          {/* <App /> */}\n        </BrowserRouter>\n      </Store>\n    </SnackbarProvider>\n  </MuiThemeProvider>\n);\n\nconst WrapperWithFooter = withFooter(Wrapper);\n\nReactDOM.render(<WrapperWithFooter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { useEffect, useState } from \"react\";\n\nimport \"../../styles/footer.scss\";\nimport { Link } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { owner, repo, accessToken } from \"../../shared/keys\";\n\nconst Footer = () => {\n  // let currentMonthYear = now.tz(tzdata).format(\"MM/YYYY\");\n  const [monthYear, setMonthYear] = useState(\"\");\n\n  const fetchDate = async () => {\n    return await Axios({\n      url: `https://api.github.com/repos/${owner}/${repo}/commits?path=build&page=1&per_page=1`,\n      method: \"GET\",\n      auth: {\n        username: \"rbandooni\",\n        password: accessToken,\n      },\n    });\n  };\n  useEffect(() => {\n    fetchDate().then((resp) => {\n      let lastCommitDate = resp.data[0].commit.committer.date;\n      let lastCommitDateFormatted = new Date(lastCommitDate);\n      setMonthYear(\n        `${(\"0\" + (lastCommitDateFormatted.getMonth() + 1)).slice(\n          -2\n        )}/${lastCommitDateFormatted.getFullYear()}`\n      );\n    });\n  }, []);\n  return (\n    <footer className=\"primaryFooter\">\n      <div className=\"leftSideText\" style={{ color: \"black\" }}>\n        Disclaimer: Actual cover crop performance may vary. Consult your local{\" \"}\n        <a\n          className=\"footerLink\"\n          href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detailfull/national/programs/financial/csp/?&cid=nrcsdev11_000242\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          NRCS field office\n        </a>\n        ,{\" \"}\n        <a\n          href=\"https://nifa.usda.gov/land-grant-colleges-and-universities-partner-website-directory\"\n          className=\"footerLink\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Cooperative Extension Service office\n        </a>{\" \"}\n        , or{\" \"}\n        <a\n          href=\"https://www.nacdnet.org/general-resources/conservation-district-directory/\"\n          className=\"footerLink\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Conservation District\n        </a>{\" \"}\n        for detailed guidance.\n      </div>\n      <div className=\"rightSideText\" style={{ color: \"black\" }}>\n        <a href=\"/about\" style={{ paddingRight: \"50px\" }}>\n          CONTACT US\n        </a>\n        <a style={{ paddingRight: \"50px\" }}>Last Updated {monthYear}</a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nconst tableStyles = {\n  td: {\n    fontSize: \"1em\",\n    padding: \"0.1em\"\n  }\n};\nconst About = () => {\n  return (\n    <Fragment>\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n      <Box>\n        <aside\n          className=\"landingWrapper\"\n          style={{\n            background: 'url(\"/images/cover-crop-field.png\") 0% 0% / cover'\n          }}\n        >\n          <div className=\"boxWrapper\">\n            <aside className=\"text-left\">\n              <h2>About</h2>\n              <p>\n                We are a group of researchers and outreach experts from\n                universities, government agencies and NGOs, and industry\n                dedicated to increasing the sustainability of US cropping\n                systems.The Cover Crop Tools was designed and developed by a\n                Product Team with members from the{\" \"}\n                <a href=\"http://sudokita.com\" target=\"_blank\" rel=\"noreferrer\">\n                  Agricultural Informatics Lab\n                </a>{\" \"}\n                and the{\" \"}\n                <a\n                  href=\"http://precisionsustainableag.org\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Precision Sustainable Agriculture\n                </a>{\" \"}\n                team at USDA ARS, NC State, and Purdue University. The Cover\n                Crop Dataset has been assembled by six teams of cover crop\n                experts (one for each plant hardiness zone in the northeastern\n                United States) from the\n                <a\n                  href=\"http://northeastcovercrops.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {\" \"}\n                  Northeast Cover Crops Council\n                </a>\n                .\n                <br />\n                <table className=\"table table-hover table-striped mt-2\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th style={tableStyles.td}>Team</th>\n                      <th style={tableStyles.td}>Members</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td style={tableStyles.td}>Product</td>\n                      <td style={tableStyles.td}>\n                        Ankita Raturi, Victoria Ackroyd, Juliet Norton, Rohit\n                        Bandooni, Paul Salon, Steven Mirsky\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 7</td>\n                      <td style={tableStyles.td}>\n                        Mark VanGessel, Scott Raubenstein, Nevin Dawson, Aaron\n                        Cooper, Dean Hively, Steven Mirsky, Michel Cavigelli\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 6</td>\n                      <td style={tableStyles.td}>\n                        Sjoerd Duiker, John Wallace, Jim Hyde, Rebecca Brown,\n                        Zach Larson, Dave Wilson, Megan Chawner, Christian\n                        Bench, Kaitlin Farbotnik, Mark Goodson\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 5</td>\n                      <td style={tableStyles.td}>\n                        Thomas Bjorkman, Kirsten Workman, Shawnna Clark, Dorn\n                        Cox, Mark Goodson, Anne Verhallen\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 4</td>\n                      <td style={tableStyles.td}>\n                        Heather Darby, Jason Lilley, Natalie Lounsbury, Lindsey\n                        Ruhl, Derek Hines, Rebecca Long, Ellen Mallory, John\n                        Chartier, Kirsten Workman\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 2 &amp; 3</td>\n                      <td style={tableStyles.td}>TBD.</td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Misc. Participants</td>\n                      <td style={tableStyles.td}>\n                        Brandon Smith, Linda Yeung, Masoud Hashemi, Kate Tully\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>External Data Sources</td>\n                      <td style={tableStyles.td}>\n                        The NECCC dataset was built on data sourced from the{\" \"}\n                        <a href=\"http://mccc.msu.edu\" target=\"_blank\">\n                          Midwestern Cover Crops Council\n                        </a>\n                        ,{\" \"}\n                        <a href=\"https://plants.usda.gov/java/\">\n                          USDA PLANTS database\n                        </a>\n                        , and the{\" \"}\n                        <a href=\"http://itis.gov\" target=\"_blank\">\n                          Integrated Taxonomic Information Service\n                        </a>\n                        .\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </p>\n              <p>\n                <b className=\"mt-2\">\n                  This material is based upon work supported by:\n                </b>\n                <ol>\n                  <li>\n                    The National Institute of Food and Agriculture, U.S.\n                    Department of Agriculture, through the Northeast Sustainable\n                    Agriculture Research and Education program under subaward\n                    number ENE16-144,\n                  </li>\n                  <li>\n                    Post-doctoral Fellowship number 2016-67012-24711 and other\n                    awards from the USDA National Institute of Food and\n                    Agriculture,\n                  </li>\n                  <li>\n                    The U.S. Department of Agriculture Natural Resources\n                    Conservation Service.\n                  </li>\n                </ol>\n              </p>\n              <p></p>\n            </aside>\n          </div>\n        </aside>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst SeedingRateCalculator = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default SeedingRateCalculator;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst MixMaker = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default MixMaker;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport { PictureAsPdf, Add, FormatListBulleted } from \"@material-ui/icons\";\nimport {\n  Button,\n  Card,\n  CardMedia,\n  CardActionArea,\n  Typography,\n  CardContent,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { downloadAllPDF, trimString } from \"../../shared/constants\";\nimport { useSnackbar } from \"notistack\";\nimport { Context } from \"../../store/Store\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: 230,\n  },\n  media: {\n    height: 140,\n  },\n});\nconst ExplorerCardView = (props) => {\n  const [state, dispatch] = useContext(Context);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const classes = useStyles();\n\n  const [selectedBtns, setSelectedBtns] = useState(\n    state.selectedCrops.map((crop) => {\n      return crop.id;\n    })\n  );\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const handleModalOpen = (crop) => {\n    // put data inside modal\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (container.textContent === \"ADDED\") {\n        container.querySelector(\".MuiTypography-root\").innerHTML =\n          \"ADD TO LIST\";\n        container\n          .querySelector(\".MuiTypography-root\")\n          .classList.remove(\"text-white\");\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiTypography-root\").innerHTML = \"ADDED\";\n        container\n          .querySelector(\".MuiTypography-root\")\n          .classList.add(\"text-white\");\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function (item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: false,\n            snackMessage: `${cropName} Added`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Added`);\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: false,\n            snackMessage: `${cropName} Removed`,\n          },\n        });\n        enqueueSnackbar(`${cropName} Removed`);\n      }\n    } else {\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: false,\n          snackMessage: `${cropName} Added`,\n        },\n      });\n      enqueueSnackbar(`${cropName} Added`);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"d-flex flex-wrap pt-4 \">\n        {props.activeCropData.map((crop, index) => (\n          <div className=\"p-2\" key={index}>\n            <Card className={classes.card}>\n              <CardMedia\n                image={\n                  crop.fields[\"Image Data\"][\"Key Thumbnail\"]\n                    ? `/images/Cover Crop Photos/${crop.fields[\"Image Data\"][\"Directory\"]}/${crop.fields[\"Image Data\"][\"Key Thumbnail\"]}`\n                    : \"https://placehold.it/100x100?text=Placeholder\"\n                }\n                className={classes.media}\n                title={crop.fields[\"Cover Crop Name\"]}\n              />\n              <CardContent>\n                <div\n                  className=\"font-weight-bold text-muted text-uppercase\"\n                  style={{ fontSize: \"10pt\" }}\n                >\n                  {crop.fields[\"Cover Crop Group\"]}\n                </div>\n                <div className=\"font-weight-bold \" style={{ fontSize: \"16pt\" }}>\n                  {crop.fields[\"Cover Crop Name\"]}\n                </div>\n                <small className=\"font-italic text-muted\">\n                  {trimString(crop.fields[\"Scientific Name\"], 25)}\n                </small>\n                <div>\n                  <small className=\"text-muted\">\n                    <a\n                      style={{\n                        textDecoration: \"underline\",\n                        color: \"rgb(53, 153, 155)\",\n                      }}\n                      // href={`/information-sheet/${crop.fields[\"Cover Crop Name\"]}`}\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                      onClick={() => handleModalOpen(crop)}\n                    >\n                      View Crop Details\n                    </a>\n                  </small>\n                </div>\n              </CardContent>\n\n              <CardActionArea\n                id={`cartBtn${index}`}\n                style={{\n                  backgroundColor: \"#e3f2f4\",\n                  textAlign: \"center\",\n                  padding: \"0.5em\",\n                }}\n                className={\n                  selectedBtns.includes(crop.fields.id)\n                    ? \"activeCartBtn\"\n                    : \"inactiveCartBtn\"\n                }\n                onClick={() => {\n                  addCropToBasket(\n                    crop.fields[\"id\"],\n                    crop.fields[\"Cover Crop Name\"],\n                    `cartBtn${index}`,\n                    crop.fields\n                  );\n                }}\n              >\n                <Typography\n                  variant=\"body2\"\n                  className={`text-uppercase ${\n                    selectedBtns.includes(crop.fields.id) ? \"text-white\" : \"\"\n                  }`}\n                  style={{\n                    color: \"black\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {selectedBtns.includes(crop.fields.id)\n                    ? \"ADDED\"\n                    : \"ADD TO LIST\"}\n                </Typography>\n              </CardActionArea>\n            </Card>\n          </div>\n        ))}\n      </div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </Fragment>\n  );\n};\n\nexport default ExplorerCardView;\n","import React, { useState, useContext, useEffect, useMemo, useRef } from \"react\";\nimport Header from \"../Header/header\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  TextField,\n  InputAdornment,\n  createMuiTheme,\n  Button,\n  Menu,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { UnderConstructionText, CustomStyles } from \"../../shared/constants\";\nimport {\n  Search,\n  PictureAsPdf,\n  FormatListBulleted,\n  KeyboardArrowDown,\n  KeyboardArrowUp,\n} from \"@material-ui/icons\";\n// import CropExplorerFilters from \"./CropExplorerFilters\";\nimport CropSidebarComponent from \"../CropSelector/CropSidebar\";\nimport { Context } from \"../../store/Store\";\nimport ExplorerCardView from \"./ExplorerCardView\";\n\nconst CoverCropExplorer = () => {\n  const [state, dispatch] = useContext(Context);\n  const cardViewRef = useRef();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [cropDataChanged, setCropDataChanged] = useState(false);\n  const [activeCropData, setActiveCropData] = useState([]);\n  const [inactiveCropData, setInactiveCropData] = useState([]);\n  const [cropName, setCropName] = useState(\"\");\n\n  useEffect(() => {\n    setCropDataChanged(!cropDataChanged);\n  }, [state.zone]);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  useEffect(() => {\n    document.title = \"Cover Crop Explorer\";\n  }, []);\n  const handleClose = (zone) => {\n    if (typeof zone === \"number\") {\n      let zoneText = `Zone ${zone}`;\n      dispatch({\n        type: \"UPDATE_ZONE_TEXT\",\n        data: {\n          zoneText: zoneText,\n          zone: parseInt(zone),\n        },\n      });\n    }\n    setAnchorEl(null);\n  };\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <div className=\"container-fluid mt-4\">\n        <div className=\"row\">\n          <div className=\"col-2\"></div>\n          <div className=\"col-10 row\">\n            <div className=\"col-4\">\n              <TextField\n                fullWidth\n                onChange={(e) => {\n                  setCropName(e.target.value);\n                  // console.log(e.target.value.length);\n                  let { cropData } = state;\n                  const crop_data = cropData.filter((crop) => {\n                    let crop_name = crop.fields[\"Cover Crop Name\"]\n                      .split(\",\")\n                      .join(\"\")\n                      .toLowerCase();\n                    let scientific_name = crop.fields[\"Scientific Name\"]\n                      .split(\",\")\n                      .join(\"\")\n                      .toLowerCase();\n                    if (\n                      crop_name.includes(e.target.value.toLowerCase()) ||\n                      scientific_name.includes(e.target.value.toLowerCase())\n                    ) {\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  });\n                  console.log(crop_data);\n                  setActiveCropData(crop_data);\n                }}\n                value={cropName}\n                color=\"secondary\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Search />\n                    </InputAdornment>\n                  ),\n                }}\n                inputMode=\"search\"\n                title=\"Cover Crop Name Search\"\n                placeholder=\"Cover Crop Name Search\"\n                // label=\"Cover Crop Name Search\"\n              />\n            </div>\n            <div className=\"col-8\"></div>\n          </div>\n        </div>\n        <div className=\"row mt-3\">\n          <div className=\"col-2\">\n            <CropSidebarComponent\n              from={\"explorer\"}\n              cropDataChanged={cropDataChanged}\n              cropData={state.cropData}\n              activeCropData={\n                activeCropData.length > 0 ? activeCropData : state.cropData\n              }\n              setActiveCropData={setActiveCropData}\n              inactiveCropData={inactiveCropData}\n              setInactiveCropData={setInactiveCropData}\n              isListView={true}\n            />\n          </div>\n          <div className=\"col-10\">\n            <div\n              className=\"row\"\n              style={{\n                backgroundColor: \"#35999b\",\n                height: \"40px\",\n                borderTopLeftRadius: \"5px\",\n                borderTopRightRadius: \"5px\",\n              }}\n            >\n              <div className=\"col-8\">\n                <Button style={{ color: \"white\" }}>Download:</Button>\n                <Button\n                  style={{ color: \"white\" }}\n                  onClick={() => window.print()}\n                >\n                  <PictureAsPdf /> <span className=\"pl-2\">PDF</span>\n                </Button>\n\n                <Button href={`/csv/`} style={{ color: \"white\" }}>\n                  <FormatListBulleted />\n                  &nbsp; SPREADSHEET\n                </Button>\n              </div>\n              <div className=\"col-4\">\n                <Button\n                  aria-controls=\"zone-selector\"\n                  aria-haspopup=\"true\"\n                  onClick={handleClick}\n                  style={{ color: \"white\" }}\n                >\n                  Zone {state.zone}&nbsp;{\" \"}\n                  {!Boolean(anchorEl) ? (\n                    <KeyboardArrowDown />\n                  ) : (\n                    <KeyboardArrowUp />\n                  )}\n                </Button>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={anchorEl}\n                  keepMounted\n                  open={Boolean(anchorEl)}\n                  onClose={handleClose}\n                >\n                  <MenuItem onClick={() => handleClose(5)}>Zone 5</MenuItem>\n                  <MenuItem onClick={() => handleClose(6)}>Zone 6</MenuItem>\n                  <MenuItem onClick={() => handleClose(7)}>Zone 7</MenuItem>\n                </Menu>\n              </div>\n            </div>\n            <ExplorerCardView\n              cropDataChanged={cropDataChanged}\n              cropData={state.cropData}\n              activeCropData={\n                activeCropData.length > 0 ? activeCropData : state.cropData\n              }\n              setActiveCropData={setActiveCropData}\n              inactiveCropData={inactiveCropData}\n              setInactiveCropData={setInactiveCropData}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CoverCropExplorer;\n","import React, { useState, useEffect, useContext, Fragment } from \"react\";\nimport \"../../styles/InformationSheet.scss\";\nimport {\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Close,\n  Info,\n} from \"@material-ui/icons\";\nimport { Typography, Button } from \"@material-ui/core\";\nimport { zoneIcon, CropImage, flipCoverCropName } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\n\nimport html2canvas from \"html2canvas\";\nimport * as JSPDF from \"jspdf\";\nimport { saveAs } from \"file-saver\";\nimport InformationSheetContent from \"./InformationSheetContent\";\n\nconst removeHeaderContent = () => {\n  document.querySelector(\".row.greenHeader > .col-9\").classList.add(\"d-none\");\n  document.querySelector(\".row.greenHeader > .col-2\").classList.add(\"d-none\");\n  document.querySelector(\".row.greenHeader > .col-1\").classList.add(\"d-none\");\n};\n\nconst InformationSheet = (props) => {\n  const [state] = useContext(Context);\n\n  const name = props.match.params.cropName\n    ? props.match.params.cropName\n    : \"none\";\n\n  const [cropData, setCropData] = useState(\n    props.match.params.cropName\n      ? state.cropData.find(\n          (crop) =>\n            crop.fields[\"Cover Crop Name\"] === props.match.params.cropName\n        )\n      : []\n  );\n  //   check if crop data is passed as crop\n  //   elseif, check if localstorage has infosheet data else use default crop data\n  // const [referrer, setReferrer] = useState(\"direct\");\n  const [crop, setCrop] = useState(\n    name === \"none\"\n      ? props.crop\n        ? props.crop\n        : window.localStorage.getItem(\"infosheet\") !== null\n        ? JSON.parse(window.localStorage.getItem(\"infosheet\"))\n        : BasicCrop\n      : cropData.fields\n      ? cropData.fields\n      : \"\"\n  );\n  const ref = React.createRef();\n  const from = props.from || \"direct\";\n\n  useEffect(() => {\n    setCropData(\n      props.match.params.cropName\n        ? state.cropData.find(\n            (crop) =>\n              crop.fields[\"Cover Crop Name\"] === props.match.params.cropName\n          )\n        : []\n    );\n    setCrop(\n      name === \"none\"\n        ? props.crop\n          ? props.crop\n          : window.localStorage.getItem(\"infosheet\") !== null\n          ? JSON.parse(window.localStorage.getItem(\"infosheet\"))\n          : BasicCrop\n        : cropData.fields\n        ? cropData.fields\n        : \"\"\n    );\n  }, [state, props]);\n\n  useEffect(() => {\n    document.getElementsByTagName(\"footer\")[0].style.display = \"none\";\n\n    if (window.localStorage.getItem(\"infosheet\") !== null) {\n      // removeHeaderContent();\n      document.title = crop[\"Cover Crop Name\"];\n      window.print();\n    }\n\n    // delete localstorage\n    window.localStorage.removeItem(\"infosheet\");\n\n    // if (props.modal) {\n    //   // component being invoked from modal\n    //   setReferrer(\"modal\");\n    //   document\n    //     .querySelector(\".row.greenHeader > .col-1\")\n    //     .classList.remove(\"d-none\");\n    // } else {\n    //   document\n    //     .querySelector(\".row.greenHeader > .col-1\")\n    //     .classList.add(\"d-none\");\n    //   setReferrer(\"direct\");\n    // }\n  }, []);\n\n  const exportToPdf = (filename) => {\n    const input = document.body;\n    // const h = input.clientHeight;\n    const h = input.offsetHeight;\n    // const w = input.clientWidth;\n    const w = input.offsetWidth;\n\n    // const ratio = divHeight / divWidth;\n    html2canvas(input, { scale: 2, scrollY: -window.scrollY }).then(function (\n      canvas\n    ) {\n      var img = canvas.toDataURL(\"image/jpeg\", 1);\n      saveAs(img, filename + \".jpg\");\n      //   var doc = new JSPDF(\"L\", \"px\", [w, h]);\n      //   doc.addImage(img, \"JPEG\", 0, 0, w, h);\n      //   doc.save(filename + \".pdf\");\n    });\n    // html2canvas(input, { scale: \"1\" }).then((canvas) => {\n    //   const imgData = canvas.toDataURL(\"image/jpeg\");\n    //   saveAs(imgData, \"image.png\");\n    //   const pdfDOC = new JSPDF(\"l\", \"mm\", \"a4\"); //  use a4 for smaller page\n\n    //   const width = pdfDOC.internal.pageSize.getWidth();\n    //   let height = pdfDOC.internal.pageSize.getHeight();\n    //   height = ratio * width;\n\n    //   pdfDOC.addImage(imgData, \"JPEG\", 0, 0, width - 20, height - 10);\n    //   pdfDOC.save(\"summary.pdf\"); //Download the rendered PDF.\n    // });\n  };\n\n  return (\n    <div className=\"wrapper container-fluid\" ref={ref}>\n      <header className=\"row greenHeader\">\n        <div className=\"col-10\">\n          <span className=\"pr-4\">DOWNLOAD:</span>\n          <span className=\"pr-2\">\n            <Button\n              style={{ color: \"white\" }}\n              href={`/pdf/${crop[\"Cover Crop Name\"]}.pdf`}\n              target=\"_blank\"\n              rel=\"noreferer\"\n            >\n              <PictureAsPdf /> &nbsp; PDF\n            </Button>\n          </span>\n          <span className=\"pr-2\">\n            <Button\n              href={`/csv/${crop[\"Cover Crop Name\"]}.csv`}\n              style={{ color: \"white\" }}\n            >\n              <FormatListBulleted />\n              &nbsp; SPREADSHEET\n            </Button>\n          </span>\n        </div>\n        <div className=\"col-1\">\n          <Button onClick={window.print} style={{ color: \"white\" }}>\n            <Print /> &nbsp;PRINT\n          </Button>\n        </div>\n        <div className=\"col-1 text-right\">\n          <Button onClick={props.closeModal} style={{ color: \"white\" }}>\n            <Close />\n          </Button>\n        </div>\n      </header>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <div className=\"row coverCropNames\">\n            <div className=\"col-12 coverCropGroup\">\n              <Typography\n                variant=\"body1\"\n                className=\"text-uppercase text-muted font-weight-bold\"\n              >\n                {crop[\"Cover Crop Group\"]}\n              </Typography>\n            </div>\n            <div className=\"col-12 coverCropName\">\n              <Typography variant=\"h5\" className=\"pr-3\" display=\"inline\">\n                {flipCoverCropName(crop[\"Cover Crop Name\"])}\n              </Typography>\n\n              <Typography\n                variant=\"subtitle2\"\n                display=\"inline\"\n                className=\"text-muted font-italic\"\n              >\n                {crop[\"Scientific Name\"]}\n              </Typography>\n            </div>\n            <div className=\"col-12 pt-3\">\n              <span className=\"pr-2\">\n                <Info style={{ color: \"#2b7b79\" }} />\n              </span>\n              <span>\n                <Typography variant=\"body1\" display=\"inline\">\n                  This data is based on expert opinion.\n                </Typography>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-6\">\n          <div className=\"row coverCropImagesWrapper\">\n            {crop[\"Image Data\"] ? (\n              <CropImage\n                present={true}\n                view={\"information-sheet\"}\n                src={\n                  crop[\"Image Data\"][\"Key Thumbnail\"]\n                    ? `/images/Cover Crop Photos/${crop[\"Image Data\"][\"Directory\"]}/${crop[\"Image Data\"][\"Key Thumbnail\"]}`\n                    : \"https://placehold.it/100x100\"\n                }\n                alt={crop[\"Cover Crop Name\"]}\n              />\n            ) : (\n              <CropImage present={false} view={\"information-sheet\"} />\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"row middleGreenStrip\">\n        <div className=\"col-6\">\n          {zoneIcon(20, 20)}\n          <span className=\"pl-2\">\n            Plant Hardiness Zone {state.zone} Dataset\n          </span>\n        </div>\n        <div className=\"col-6 text-right\">\n          {/* <PhotoLibrary /> <span className=\"pl-2\">View Photos</span> */}\n        </div>\n      </div>\n\n      <InformationSheetContent crop={crop} />\n    </div>\n  );\n};\n\nexport default InformationSheet;\n\nconst BasicCrop = () => {\n  return {\n    _id: {\n      $oid: \"5f24456fe695147b85dd78fe\",\n    },\n    \"Cover Crop Name\": \"Pea, Spring\",\n    \"Scientific Name\": \"Pisum sativum\",\n    Synonyms: \"Garden Pea\",\n    \"cv, var, or ssp to specify\": \"Spring '1020'\",\n    \"Notes: Taxonomy\":\n      \"forage pea would be better common name - actual garden peas have been bred for unpigmented seed coats and high sugar, which reduces germination\",\n    Origin: \"MCCC Species tool\",\n    \"Drought Tolerance\": 3,\n    \"Shade Tolerance\": 2,\n    \"Flood Tolerance\": 2,\n    \"Low Fertility Tolerance\": 4,\n    \"Salinity Tolerance\": 1,\n    \"Winter Survival\": [\"Never\"],\n    \"Active Growth Period\": [\"Fall\", \"Spring\", \"Summer\"],\n    Duration: [\"Annual\"],\n    \"Shape & Orientation\": [\"Semi-Erect\", \"Climbing\"],\n    \"Notes: Basic Agronomics\":\n      \"Dry matter highly dependent on planting and termination date and precipitation. Season length, habit vary by cultivar. Biomass breaks down quickly; early planting and termination reduces winter survival. Mixes well with grains when grown for forage. Bloat potential that is easily managed. Seed vigor highly variable. For grazing purposes, restrict to 30% of total ration or mixing with a grass is recommended.\",\n    \"Review Status\": \"Zone Team Start\",\n    \"Soil Drainage\": [\n      \"Somewhat poorly drained\",\n      \"Moderately well drained\",\n      \"Well drained\",\n      \"Excessively drained\",\n      \"Well drained muck\",\n    ],\n    \"Min Germination Temp (F)\": 42,\n    \"Seeds per Pound\": 3500,\n    \"Inoculant Type (Legumes Only)\": [\"pea/vetch\"],\n    \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"58-104\",\n    \"Seeding Rate: Drilled (lbs/A)\": \"50-100\",\n    \"Seeding Rate: Aerial (lbs/A)\": \"Not Recommended\",\n    \"Drilled Depth Min\": 1,\n    \"Loosens Topsoil\": 2,\n    \"Frees P & K\": 5,\n    \"Growing Window\": \"Short\",\n    \"Ease of Establishment\": 2,\n    \"Family Common Name\": \"Pea family\",\n    \"Family Scientific Name\": \"Fabaceae\",\n    \"Soil Textures\": [\"medium\", \"coarse\"],\n    \"Minimum Tolerant Soil pH\": 6,\n    \"Maximum Tolerant Soil pH\": 7.5,\n    \"Soil Moisture Use\": \"Medium\",\n    \"Cover Crop Group\": \"Legume\",\n    \"Heat Tolerance\": 3,\n    \"Seed Price per Pound\": 3,\n    \"USDA Symbol\": \"PISA6\",\n    \"Zone Decision\": \"Include\",\n    \"Zone Use\": \"Emerging\",\n    \"Shape & Orientation-USDA PLANTS\": \"Climbing\",\n    \"Flooding Tolerance\": \"Poor\",\n    \"Nitrogen Accumulation Min, Legumes (lbs/A/y)\": 40,\n    \"Dry Matter Min (lbs/A/y)\": 1000,\n    \"C to N Ratio\": 1,\n    \"Active Growth Period-USDA PLANTS\": [\"Spring\", \"Summer\"],\n    \"Notes: Termination [Goal: Method: Timing]\":\n      \"If using herbicides to terminate use a tank mixture (e.g., glyphosate + dicamba or 2,4-d)\",\n    \"Loosens Subsurface Soil\": 1,\n    \"Supports Mycorrhizae\": 3,\n    \"Early Spring Growth\": 3,\n    \"Flowering Trigger\": [\"Plant Size\"],\n    \"Establishes Quickly\": 2,\n    \"Root Architecture\": [\"Tap\"],\n    \"Root Depth\": \"Shallow\",\n    \"Notes: Growth, Roots, and Nutrients\": \"Minimum Germination Temp. ~ 41˚F\",\n    \"Tillage Termination at Vegetative\": 4,\n    \"Pollinator Habitat\": 4,\n    \"Pollinator Food\": 2,\n    \"Tillage Termination at Flowering\": 4,\n    \"Freezing Termination at Vegetative\": 2,\n    \"Freezing Termination at Flowering\": 5,\n    \"Chemical Termination at Flowering\": 5,\n    \"Mow Termination at Flowering\": 5,\n    \"Chemical Termination at Vegetative\": 5,\n    \"Mow Tolerance at Vegetative\": 5,\n    \"Roller Crimp Tolerance at Flowering\": 3,\n    \"Roller Crimp Tolerance at Vegetative\": 1,\n    \"Volunteer Establishment\": 5,\n    Persistence: 1,\n    \"Notes: Weeds\":\n      \" Late planting increases heaving. Weak plant with low volunteer seed survivability.\",\n    \"Seed price per acre: Drilled/Cultipack and Cultivation\": 3,\n    \"Seed price per acre: Broadcast (w/cultivation)\": 3,\n    \"Improve Soil Organic Matter\": 1,\n    \"Increase Soil Aggregation\": 2,\n    \"Lasting Residue\": 1,\n    \"Penetrates Plow Pan\": 1,\n    \"Base Seeding Rate Min (lbs/A)\": 40,\n    \"Base Seeding Rate Max (lbs/A)\": 100,\n    \"Nitrogen Accumulation Max, Legumes (lbs/A/y)\": 100,\n    \"Dry Matter Max (lbs/A/y)\": 2500,\n    \"Drilled Depth Max\": 1.5,\n    \"Reduces Topsoil Compaction\": 2,\n    \"March, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"March, Mid\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"April, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"April, Mid\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"May, Early\": [\n      \"Reliable establishment/growth\",\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"May, Mid\": [\"Reliable establishment/growth\"],\n    \"August, Early\": [\"Reliable establishment/growth\", \"Early seeding rate\"],\n    \"August, Mid\": [\"Reliable establishment/growth\", \"Standard seeding rate\"],\n    \"September, Early\": [\"Reliable establishment/growth\", \"Late seeding rate\"],\n    \"September, Mid\": [\"Reliable establishment/growth\"],\n    \"Prevent Fall Soil Erosion\": 1,\n    \"Prevent Spring Soil Erosion\": 3,\n    \"Promote Water Quality\": 1,\n    \"Nitrogen Fixation\": 3,\n    \"Nitrogen Scavenging\": 1,\n    \"Good Grazing\": 3,\n    \"Forage Harvest Value\": 4,\n    \"C to N Ratio - 3 stars\": 1,\n    \"Residue Suppresses Summer Annual Weeds\": 2,\n    \"Outcompetes Summer Annual Weeds\": 3,\n    \"Disoucrages Nematodes\": 2,\n    \"Promotes Nematodes\": 3,\n    \"Discourages Pest Insects\": 2,\n    \"Promotes Pest Insects\": 1,\n    \"Notes: Disease & Non-Weed Pests\":\n      \"Information too limited to rate P and K effect. Some cultivars, nematode resistant. Poor host for soybean cyst nematode. With late planting,  biomass is low and spring pea won't suppress winter weeds. Good cool season component for grazing mixes. Quick cool season nitrogen fixer. Susceptible to sclerotinia in East;  Late planting increases heaving. Host for root knot nematode, Penetrans Root-Lesion Nematode and sugarbeet cyst nematode.  Weak plant with low volunteer seed survivability.\",\n    \"Suppresses Cash Crop Disease\": 2,\n    \"Promotes Cash Crop Disease\": 1,\n    \"Early Spring Seeding Rate Date Start\": \"2020-02-15\",\n    \"Early Spring Seeding Rate Date End\": \"2020-07-15\",\n    \"Standard Spring Seeding Rate Date Start\": \"2020-02-15\",\n    \"Standard Spring Seeding Rate Date End\": \"2020-05-15\",\n    \"Suppresses Winter Annual Weeds\": 2,\n    Notes:\n      \"Best mixed with cereals to prevent lodging. Less competitive against summer annual weeds in hot-summer areas (such as Contintental hardiness zone 6).\",\n    \"Reliable Establishment/Growth Start\": \"2020-02-15\",\n    \"Reliable Establishment/Growth End\": \"2020-05-15\",\n    \"Notes: Pollinators\":\n      \"Self-pollinated so not particularly useful for pollinators compared to other legumes\",\n    \"Notes: Nematodes\":\n      \"Some cultivars, nematode resistant. Poor host for soybean cyst nematode.  Host for root knot nematode, Penetrans Root-Lesion Nematode and sugarbeet cyst nematode. \",\n    __id: \"rec1KNI87iZslbLy2\",\n    \"February, Early\": [\n      \"Reliable Establishment/Growth\",\n      \"Standard Spring Seeding Rate Date\",\n    ],\n    \"Image Data\": {\n      \"Cover Crop\": \"Pea, Spring\",\n      \"Key Thumbnail\": \"Spring_pea_flowering_Brown_2020.JPG\",\n      Notes: null,\n      Directory: \"Pea, Spring\",\n    },\n    \"Crop Description\":\n      \"Also known as Yellow Pea or Canadian Spring Pea. Winter-kills if planted in fall. Excellent spring cover crop. Plant early for lush growth; fast-growing varieties are available. Inoculate the seed with appropriate Rhizobium spp. Cross inoculates vetch. Mixes well with spring oat, forage radish. Lower biomass and total N fixation compared to overwintered peas.\",\n    \"Discourages Nematodes\": 2,\n    id: \"rec1KNI87iZslbLy2\",\n    Drought: 3,\n    Flood: 2,\n    Heat: 3,\n    \"Low Fertility\": 4,\n    Salinity: 1,\n    Shade: 2,\n    \"Tillage at Vegetative\": 4,\n    \"Tillage at Flowering\": 4,\n    \"Freezing at Flowering\": 5,\n    \"Freezing at Vegetative\": 2,\n    \"Chemical at Vegetative\": 5,\n    \"Chemical at Flowering\": 5,\n    \"Mow at Flowering\": 5,\n    \"Roller Crimp at Flowering\": 3,\n    \"Frost Seeding\": -999,\n    \"Aerial Seeding\": -999,\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"../Header/header\";\nimport { Typography } from \"@material-ui/core\";\n\nconst HelpComponent = (props) => {\n  const resizeIframe = (obj) => {\n    obj.style.height =\n      obj.contentWindow.document.documentElement.scrollHeight + \"px\";\n  };\n  return (\n    <div className=\"contentWrapper\">\n      <Header />\n      <div className=\"container-fluid pt-4\" style={{ minHeight: \"70vh\" }}>\n        <div className=\"row\">\n          <iframe\n            src=\"https://docs.google.com/document/d/e/2PACX-1vTZ-K1pVoaJLtlUV0m24VLcJzaaPHGVbC5pABnClERFTD_YcWrgSOVg7SJ6Rr_2ab90Md_Am8MQBAFc/pub?embedded=true\"\n            frameBorder=\"none\"\n            width=\"100%\"\n            height=\"400px\"\n            style={{\n              minHeight: \"80vh\",\n            }}\n            // onLoad={resizeIframe}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HelpComponent;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"../Header/header\";\n\nconst FeedbackComponent = (props) => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header />\n      <div className=\"container-fluid pt-4\" style={{ minHeight: \"70vh\" }}>\n        <div\n          className=\"mx-auto d-flex justify-content-center align-center\"\n          style={{ width: \"80%\", height: \"50vh\", alignItems: \"center\" }}\n        >\n          <h3>Coming Soon</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FeedbackComponent;\n"],"sourceRoot":""}