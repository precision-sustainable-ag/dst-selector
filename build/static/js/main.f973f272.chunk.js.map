{"version":3,"sources":["store/Reducer.js","store/Store.js","components/Header/DateComponent.js","shared/constants.js","components/Location/StateAbbreviations.js","components/Location/Map.js","components/Location/LiveLocation.js","components/Location/AutoComplete.js","components/Location/LocationToggle.js","components/Location/Location.js","components/Location/SoilConditions.js","components/Location/WeatherConditions.js","components/Location/WeatherModal.js","components/Header/Greenbar/Greenbar.js","components/Header/ForecastComponent.js","components/Header/header.js","components/Landing/Landing.js","shared/ProgressButtonsInner.js","shared/ProgressButtons.js","shared/ProgressBar.js","components/GoalsSelector/GoalTag.js","components/GoalsSelector/GoalsSelector.js","components/Location/LocationConfirmation.js","components/CropSelector/GrowthWindow.js","components/CropSelector/CropDetailsModal.js","components/CropSelector/CropTable.js","components/MyCoverCropList/MyCoverCropCardsComponent.js","components/MyCoverCropList/MyCoverCropList.js","components/CropSelector/CropCalendarView.js","components/CropSelector/CropSidebar.js","components/CropSelector/CropSelector.js","App.js","serviceWorker.js","index.js","components/Footer/footer.js","components/About/About.js","components/SeedingRateCalculator/SeedingRateCalculator.js","components/MixMaker/MixMaker.js","components/CoverCropExplorer/CoverCropExplorer.js"],"names":["Reducer","state","action","type","data","progress","markers","address","showAddressChangeBtn","zoneText","zone","addressVerified","snackOpen","snackMessage","allGoals","selectedGoals","cropData","selectedCrops","myCoverCropActivationFlag","speciesSelectorActivationFlag","weatherData","frostFreeDays","averagePrecipitation","thisMonth","annual","ajaxInProgress","cropDetailModal","isSoilDataLoading","soilData","Map_Unit_Name","Drainage_Class","Flooding_Frequency","Ponding_Frequency","cashCropData","dateRange","startDate","endDate","initialState","zoom","snackVertical","snackHorizontal","modalOpen","modalSize","modalBody","addToCartBtnText","averageFrost","firstFrostDate","month","day","lastFrostDate","greenbarExpanded","name","Context","createContext","Store","children","useReducer","dispatch","Provider","value","setTodaysDate","moment","format","DateComponent","useState","date","setDate","useEffect","zoneIcon","w","h","height","width","viewBox","fill","xmlns","d","GreenSwitch","withStyles","thumb","backgroundColor","track","input","color","Switch","UnderConstructionText","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","Typography","variant","abbrRegion","to","i","regions","concat","replace","txt","charAt","toUpperCase","substr","toLowerCase","length","LightButton","root","borderRadius","padding","borderColor","Button","getRating","ratng","rating","parseInt","className","allMonths","localeData","monthsShort","greenBarExpansionPanelHeight","statesObject","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Guam","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Palau","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","StateAbbreviations","getAbbreviation","stateName","Object","prototype","hasOwnProperty","call","this","L","Icon","Default","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapComponent","maxzoom","minzoom","useContext","console","log","map","center","zoomControl","setView","tileLayer","attribution","maxZoom","addTo","marker","editableLayers","FeatureGroup","addLayer","drawPluginOptions","position","draw","polygon","allowIntersection","drawError","message","shapeOptions","polyline","circle","rectangle","circlemarker","edit","featureGroup","remove","fitBounds","getBounds","myMarker","title","draggable","riseOnHover","on","e","coord","String","getLatLng","split","lat","lng","bindPopup","parseFloat","drawControl","Control","Draw","addControl","layerType","layer","_latlng","queryGEORevAPI","_latlngs","latlngArr","index","latlng","push","lon","a","async","url","axios","get","then","response","fullAddress","display_name","county","abbr","postcode","setZoneState","catch","error","code","zip","undefined","id","LiveLocationComponent","React","checkedL","lstate","setlState","SetZoneState","isUndefined","val","FormGroup","row","FormControlLabel","control","checked","onChange","event","target","navigator","geolocation","getCurrentPosition","coords","latitude","long","longitude","mrkrArr","alert","enableHighAccuracy","maximumAge","timeout","label","useStyles","makeStyles","theme","formControl","margin","minWidth","selectEmpty","marginTop","modal","display","justifyContent","paper","palette","background","border","boxShadow","shadows","AutoCompleteComponent","classes","open","setOpen","setAddress","suggestedAddress","setSuggestedAddress","handleOpen","handleClose","checkAddresses","query","fetch","json","Modal","onClose","BackdropProps","BackdropComponent","Backdrop","Fade","in","key","Link","component","onClick","setBoundingBoxAndAddress","FormControl","TextField","fullWidth","aria-haspopup","InputProps","endAdornment","InputAdornment","IconButton","addressData","Search","LocationToggleComponent","props","defaultValue","setDefaultValue","ToggleButton","ToggleButtonGroup","size","exclusive","LocationComponent","fontSize","InputLabel","Select","labelId","textAlign","MenuItem","keuy","LiveLocation","AutoComplete","LocationToggle","Map","SoilConditions","drainageChange","setDrainageChange","floodingChange","setFloodingChange","caller","setCaller","defaultDrainageMark","setDefaultDrainageMark","defaultFloodingMark","setDefaultFloodingMark","initial","final","drainageValueCopy","setDrainageValueCopy","floodingValueCopy","drainageMarkText","setDrainageMarkText","drainageDictionary","drainageMarks","startObj","find","obj","endObj","getDrainageText","floodingMarks","LocalDrink","cursor","Slider","valueLabelDisplay","onChangeCommitted","mark","aria-labelledby","marks","min","max","step","Waves","textField","marginLeft","marginRight","WeatherConditions","months","setMonths","currentMonthFull","setCurrentMonthFull","setDidChange","firstFrostMonth","setFirstFrostMonth","firstFrostDay","setFirstFrostDay","lastFrostMonth","setLastFrostMonth","lastFrostDay","setLastFrostDay","setAveragePrecipitation","setFrostFreeDays","modalBtnDisabled","CircularProgress","Tooltip","href","rel","interactive","arrow","Info","aria-describedby","closeAfterTransition","htmlFor","native","inputProps","multiLine","maxLength","isNaN","helperText","disabled","broadcastObject","b","aProps","getOwnPropertyNames","bProps","propName","isEquivalent","expansionPanelBaseStyle","Greenbar","anchorEl","setAnchorEl","expansionPanelComponent","setExpansionPanelComponent","document","addEventListener","evt","getElementById","greenBarParent","targetElement","parentNode","handleClick","currentTarget","handleAddressBtnClick","greenbarExpansionElement","transform","handleSoilBtnClick","handleWeatherBtnClick","handleZoneDropdownClose","getAttribute","getAddress","Menu","keepMounted","Boolean","currentMonth","getWeatherData","Location","ForecastComponent","unit","iconURL","iconDescription","temp","setTemp","setShowFeatures","trace","callWeatherApi","iconId","weather","icon","description","tempObj","main","temp_min","temp_max","reverseGEO","addressString","staddress","makeURLString","fetchData","jsonData","params","src","alt","Number","toFixed","Header","history","useHistory","collapse","setCollapse","isRoot","setIsRoot","redirectToRoot","isActive","markersCopy","longLatString","soilDataQuery","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","result","mapUnitString","stringSplit","el","indexOf","filter","elm","join","drainageClasses","revAPIURL","Axios","resp","city","locality","principalSubdivision","frostFreeDaysURL","frostFreeDaysObject","currentMonthInt","averageRainForAMonthURL","fiveYearAvgRainURL","averagePrecipitationForCurrentMonth","status","fiveYearAvgRainAnnual","window","location","pathname","airtableUrl","records","setmyCoverCropActivationFlag","setSpeciesSelectorActivationFlag","NavLink","exact","activeClassName","Badge","badgeContent","light","fluid","isOpen","navbar","active","Landing","bg","backgroundSize","incVal","ProgressButtonsInner","isDisabled","changeProgress","renderProgressButtons","ProgressButtons","setIsDisabled","disableLogic","checkProgressStatus","actualProgress","expectedProgress","ProgressBar","GoalTag","goalDescription","goalTitle","goaltTitle","goal","enterDelay","leaveDelay","Chip","includes","avatar","Avatar","goals","fields","classList","add","splice","updateSelectedGoals","flexWrap","GoalsSelector","fetchGoals","startsWith","Skeleton","animation","LocationConfirmation","GrowthWindowComponent","from","cropLegendObj","Early","Mid","class","isCashCropMonth","fullMonth","setMonthVals","cropDataLegendLabel_Early","cropDataLegendLabel_Mid","borderLeft","paddingTop","paddingBottom","CropDetailsModalComponent","crop","modalData","setModalData","handleModalClose","setModalOpen","disableBackdropClick","borderTopLeftRadius","borderTopRightRadius","Close","paddingRight","paddingLeft","PhotoLibrary","PictureAsPdf","FormatListBulleted","Print","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpandMore","aria-controls","ExpansionPanelDetails","CropTableComponent","useSnackbar","enqueueSnackbar","closeSnackbar","showGrowthWindow","setShowGrowthWindow","TableContainer","Table","TableHead","TableBody","trim","TableRow","TableCell","flexDirection","filename","maxWidth","maxHeight","flexBasis","GrowthWindow","cropId","cropName","btnId","cropArray","contains","textContent","querySelector","innerHTML","removeIndex","selectedCropsCopy","addCropToBasket","handleModalOpen","CropDetailsModal","card","media","MyCoverCropCardsComponent","itemNo","Card","CardActionArea","CardMedia","image","CardContent","CardActions","MyCoverCropList","ListAlt","Add","CropCalendarViewComponent","legendModal","setLegendModal","currentYear","Date","getFullYear","handleLegendModal","fetchRecordsIfUnavailable","Promise","resolve","reject","lineHeight","colSpan","borderRight","borderBottom","startIcon","AddCircle","goalRating","getAverageGoalRating","CloseRounded","FiberManualRecord","listItemRoot","borderTop","formControlLabel","listSubHeaderRoot","nested","CropSidebarComponent","cropFiltersOpen","setCropFiltersOpen","cashCropOpen","setCashCropOpen","goalsOpen","setGoalsOpen","dateRangeOpen","setDateRangeOpen","setDateRange","heat","drought","shade","flood","lowFertility","salinity","winterSurvival","envTolData","setEnvTolData","growthWindowVisible","setGrowthWindowVisible","openEnvTol","setOpenEnvTol","toISOString","setGrowthWindow","sortCropData","listRoot","subheader","ListSubheader","ListItem","button","ListItemText","primary","ExpandLess","Collapse","unmountOnExit","disablePadding","values","oldIndex","newIndex","newGoalArr","newGoals","arrayMove","renderList","renderItem","readOnly","CalendarTodayRounded","zIndex","range","Checkbox","_","CropSelector","isListView","setIsListView","setCropData","toggleListView","CalendarToday","CropSidebar","by","crop_data","updatedCropData","orderBy","CropTable","CropCalendarView","createMuiTheme","secondary","overrides","MuiTooltip","tooltip","App","loadProgressBar","maxSnack","anchorOrigin","vertical","horizontal","logo","loadRelevantRoute","Snackbar","autoHideDuration","ContentProps","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","WrappedComponent","Footer","tableStyles","td","About","Box","SeedingRateCalculator","MixMaker","CoverCropExplorer","WrapperWithFooter","fallback","path","ReactDOM","render","URL","process","origin","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f973f272.chunk.js","sourcesContent":["const Reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_PROGRESS\": {\n      if (action.data.type === \"INCREMENT\") {\n        return { ...state, progress: state.progress + 1 };\n      } else if (action.data.type === \"DECREMENT\") {\n        return { ...state, progress: state.progress - 1 };\n      } else {\n      }\n    }\n    case \"CHANGE_ADDRESS_BY_TYPING\": {\n      if (action.data.markers) {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn,\n          markers: action.data.markers\n        };\n      } else {\n        return {\n          ...state,\n          address: action.data.address,\n          showAddressChangeBtn: action.data.showAddressChangeBtn\n        };\n      }\n    }\n    case \"UPDATE_ZONE_TEXT\": {\n      return {\n        ...state,\n        zoneText: action.data.zoneText,\n        zone: action.data.zone\n      };\n    }\n    case \"CHANGE_ADDRESS\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified\n      };\n    }\n    case \"UPDATE_MARKER\": {\n      return {\n        ...state,\n        markers: action.data.markers\n      };\n    }\n    case \"UPDATE_ADDRESS_ON_MAP_CLICK\": {\n      return {\n        ...state,\n        address: action.data.address,\n        addressVerified: action.data.addressVerified,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage\n      };\n    }\n    case \"TOGGLE_ADDRESS_CHANGE_BUTTON\": {\n      return {\n        ...state,\n        showAddressChangeBtn: action.data.showAddressChangeBtn\n      };\n    }\n    case \"ADD_GOALS\": {\n      return {\n        ...state,\n        allGoals: action.data\n      };\n    }\n\n    case \"SNACK\": {\n      return {\n        ...state,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage\n      };\n    }\n\n    case \"UPDATE_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data\n      };\n    }\n    case \"ADD_SELECTED_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: [...state.selectedGoals, action.data]\n      };\n    }\n\n    case \"DRAG_GOALS\": {\n      return {\n        ...state,\n        selectedGoals: action.data.selectedGoals,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage\n      };\n    }\n\n    case \"PULL_CROP_DATA\": {\n      return {\n        ...state,\n        cropData: action.data\n      };\n    }\n\n    case \"SELECTED_CROPS_MODIFIER\": {\n      return {\n        ...state,\n        selectedCrops: action.data.selectedCrops,\n        snackOpen: action.data.snackOpen,\n        snackMessage: action.data.snackMessage\n      };\n    }\n\n    case \"ACTIVATE_MY_COVER_CROP_LIST_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag: action.data.speciesSelectorActivationFlag\n      };\n    }\n\n    case \"ACTIVATE_SPECIES_SELECTOR_TILE\": {\n      return {\n        ...state,\n        myCoverCropActivationFlag: action.data.myCoverCropActivationFlag,\n        speciesSelectorActivationFlag: action.data.speciesSelectorActivationFlag\n      };\n    }\n\n    case \"UPDATE_WEATHER_CONDITIONS\": {\n      return {\n        ...state,\n        weatherData: action.data.weatherData\n      };\n    }\n\n    case \"UPDATE_FROST_FREE_DAYS\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          frostFreeDays: action.data.frostFreeDays\n        }\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            thisMonth: action.data.thisMonth\n          }\n        }\n      };\n    }\n\n    case \"UPDATE_AVERAGE_PRECIP_ANNUAL\": {\n      return {\n        ...state,\n        weatherData: {\n          ...state.weatherData,\n          averagePrecipitation: {\n            ...state.weatherData.averagePrecipitation,\n            annual: action.data.annual\n          }\n        }\n      };\n    }\n\n    case \"SET_AJAX_IN_PROGRESS\": {\n      return {\n        ...state,\n        ajaxInProgress: action.data\n      };\n    }\n    case \"TOGGLE_CROP_DETAIL_MODAL\": {\n      return {\n        ...state,\n        cropDetailModal: action.data.cropDetailModal\n      };\n    }\n\n    case \"TOGGLE_SOIL_LOADER\": {\n      return {\n        ...state,\n        isSoilDataLoading: action.data.isSoilDataLoading\n      };\n    }\n\n    case \"UPDATE_SOIL_DATA\": {\n      return {\n        ...state,\n        soilData: {\n          ...state.soilData,\n          Map_Unit_Name: action.data.Map_Unit_Name,\n          Drainage_Class: action.data.Drainage_Class,\n          Flooding_Frequency: action.data.Flooding_Frequency,\n          Ponding_Frequency: action.data.Ponding_Frequency\n        }\n      };\n    }\n\n    case \"UPDATE_DATE_RANGE\": {\n      return {\n        ...state,\n        cashCropData: {\n          ...state.cashCropData,\n          dateRange: {\n            startDate: action.data.startDate,\n            endDate: action.data.endDate\n          }\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","import React, { createContext, useReducer } from \"react\";\nimport Reducer from \"./Reducer\";\n\n// const StoreContext = createContext();\n\nconst initialState = {\n  // progress: 5,\n  progress: 0,\n  // address: \"\",\n  address: \"Beltsville Agriculture Research Center\",\n  markers: [[39.0255, -76.924]],\n  // markers: [\n  //   [39.025872701277045, -76.919398766395],\n  //   [39.02453911720003, -76.92171701589375],\n  //   [39.02343889139721, -76.92030030786674],\n  //   [39.02518924258037, -76.9176171487247]\n  // ],\n  // markers: [[35.76422, 78.69976]],\n  showAddressChangeBtn: false,\n  allGoals: [],\n  // allGoals: [\n  //   {\n  //     id: \"rec4LcUaBDq5GCcXL\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Lasting residue\",\n  //       Description:\n  //         \"Rates the effectiveness of the cover crop in providing a long-lasting mulch.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - high, C to N ratio - high (3 star)\",\n  //       Notes:\n  //         \"Since this has the same consituent variables as Improve soil organic matter, could they be lumped together some how?\",\n  //       \"Constituent Variables Priorities\": \"C to N Ratio, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T16:53:43.000Z\"\n  //   },\n  //   {\n  //     id: \"rec7y2ybQxIFdIjbC\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Nitrogen scavenging\",\n  //       Description:\n  //         \"Rates a cover crop’s ability to take up and store excess nitrogen. Bear in mind that the sooner you plant a cover after main crop harvest—or overseed a cover into the standing crop—the more N it will be able to absorb.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recHtDRj37jAAzNIj\",\n  //         \"recoB4dI7D89Dc7a6\",\n  //         \"receCQBBxMfKbWEyv\",\n  //         \"recMjAddemfDnNFqI\",\n  //         \"recqucMZjRgbifMQN\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - high, early spring growth - high (4-5 stars) , establishes quickly - high (4-5 stars), root depth - deep\",\n  //       Notes:\n  //         \"In areas where precip falls as rain for most of the winter, water will percolate causing N to move more; early planting is key to scavenging in such areas (as opposed to where ground freezes hard or snow cover is mostly present.)\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Early spring growth, Establishes quickly, Root depth, Dry Matter (lbs/A/y), Family Common Name\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"rec9qULCT41IBsVUo\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"TBD- Suppress pest (non-weed) & diseases\",\n  //       Description:\n  //         \"Rates how well the cover crop suppresses diseases, insects, slugs, and other non-weed pests.\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recCO2vWyryVqhr6S\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Forage harvest value\",\n  //       Description: \"Suitability as harvested forage (e.g., haylage).\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recH1sx9ffdPlprUq\",\n  //         \"recwPtOlsZzf8eesZ\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"grazing value - high (4-5 stars), harvestability - high (4-5 stars)\",\n  //       \"Constituent Variables Priorities\": \"Harvestability, Grazing value\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recNPzZAnuNCjqdAb\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Pollinator support\",\n  //       Description:\n  //         \"Ability to provide resources needed by beneficials (e.g., shelter, nectar)\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recwPeXH4vksA8RE6\",\n  //         \"recjWdifpop3L0cca\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"pollinator habitat - high (4-5 stars), pollinator food - high (4-5 stars)\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Pollinator food, Pollinator habitat\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recRLXdSv7FLRTceX\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Nitrogen fixation\",\n  //       Description:\n  //         \"Rates cover crops for their relative ability to supply fixed N. Limiting to Legumes.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recHtDRj37jAAzNIj\",\n  //         \"recMjAddemfDnNFqI\",\n  //         \"rec9PiL8Zj2uMWfHH\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"total N fixed - high (4-5 stars), dry matter - high (4-5 stars), early spring growth - high (4-5 stars)\",\n  //       Notes: \"total N fixed needs to be converted to a rating\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Total N Fixed (lbs/A/y)\\nEarly spring growth\\nDry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recdSAmLuTKzbcwln\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Good grazing\",\n  //       Description: \"Suitability for grazing.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recoB4dI7D89Dc7a6\",\n  //         \"recsNm4y8moJnMzw6\",\n  //         \"recwPtOlsZzf8eesZ\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"grazing value - high (4-5 stars), grazing tolerance - high (4-5 stars), establishes quickly - high (4-5 stars)\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Establishes quickly, Grazing tolerance, Grazing value\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recfo3LgGYl8iI4Qp\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Reduces subsurface soil compaction\",\n  //       Description: 'Reduces compaction in the top 0-6\" and/or 6-12\" of soil.',\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recVLbzeOzNMAdLZD\",\n  //         \"receCQBBxMfKbWEyv\",\n  //         \"rec6QUh7mboLxMjHp\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"loosens subsurface soil - high (4-5 stars), root depth - deep, root architecture - tap\",\n  //       Notes:\n  //         \"do cover crops need to be rated high on loosens subsurface and top soil? or just one? or the other? Also, doesnt' that impact which root architecture matters? There seems to be a bit of nuance to this.\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Root architecture, Root depth, Loosens subsurface soil\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recifuund3Kc4UuUt\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"TBD- Hinder crops (anti-goal)\",\n  //       Description:\n  //         \"Rates how likely the CC is to interfere with the cash crop (e.g., through creating a poor seed bed, immobilizing soil N, etc.)\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - low, C to N ratio - high (5 star)\",\n  //       \"Constituent Variables Priorities\": \"C to N Ratio, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recjQE8nDL7x25vg6\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Weed suppression\",\n  //       Description:\n  //         \"Rates how well the cover crop out-competes weeds by any means through its life cycle, including killed residue. || opposite description: \\n[Risk that a cover crop could become a weed, either due to hard seed or due to flowering/setting seed that volunteers in later seasons; made worse when herbicide resistance is a known feature of the cover crop species/cultivar]\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"recJ7JmQiCQKcgZD2\",\n  //         \"recoB4dI7D89Dc7a6\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - high,  C to N - high, establishes quickly - high (4-5 stars), shape and orientation - ?\",\n  //       \"Constituent Variables Priorities\":\n  //         \"C to N Ratio, Shape & Orientation, Establishes quickly, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recneO0wlTb4t0KdC\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Promote water quality\",\n  //       Description: \"Improve or maintain water quality.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"receCQBBxMfKbWEyv\",\n  //         \"recVLbzeOzNMAdLZD\",\n  //         \"recyMjvRTKgxpvVoX\",\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"rec9vYObq3SiwL1rK\",\n  //         \"recJ7JmQiCQKcgZD2\",\n  //         \"recxcF1h42PcoEyAz\",\n  //         \"recoB4dI7D89Dc7a6\",\n  //         \"recHtDRj37jAAzNIj\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - high, early spring growth - high (4-5 stars) , establishes quickly - high (4-5 stars), Supports Mycorrhizae - high (4 and 5 stars), [goals: nitrogen scavenging, prevents soil erosion]\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Root depth, Root architecture, Winter Survival, C to N Ratio, Growing window, Shape & Orientation, Supports mycorrhizae, Establishes quickly, Early spring growth, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recrZZvnT6xhPfTdN\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Prevent soil erosion\",\n  //       Description:\n  //         \"Rates how extensive and how quickly a root system develops, how well it holds soil against sheet and water erosion and the influence the growth habit may have on fighting water erosion.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recVLbzeOzNMAdLZD\",\n  //         \"recJ7JmQiCQKcgZD2\",\n  //         \"recyMjvRTKgxpvVoX\",\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"rec9vYObq3SiwL1rK\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Dry matter - high, growing window - long, C to N - high, winter survival - expected, shape and orientation -?, root architecture - fibrous\",\n  //       Notes: \"Don't know how shape and orientation impact this.\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Root architecture, Shape & Orientation, Winter Survival, C to N Ratio, Growing window, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T21:18:02.000Z\"\n  //   },\n  //   {\n  //     id: \"recsQbgLYFneFwXyr\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Reduces topsoil compaction\",\n  //       Description: 'Reduces compaction in the top 0-6\" and/or 6-12\" of soil.',\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recVLbzeOzNMAdLZD\",\n  //         \"receCQBBxMfKbWEyv\",\n  //         \"recLlVSvSYfmF7PZV\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"loosens topsoil - high (4-5 stars), root depth - deep, root architecture - fibrous\",\n  //       Notes:\n  //         \"do cover crops need to be rated high on loosens subsurface and top soil? or just one? or the other? Also, doesnt' that impact which root architecture matters? There seems to be a bit of nuance to this.\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Root architecture, Root depth, Loosens topsoil\"\n  //     },\n  //     createdTime: \"2019-10-28T19:23:21.000Z\"\n  //   },\n  //   {\n  //     id: \"recvb8xD7c7teakpI\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Improve soil organic matter\",\n  //       Description:\n  //         \"Rates a cover crop’s ability to produce organic matter and improve soil structure. The ratings assume that you plan to use cover crops regularly in your cropping system to provide ongoing additions to soil organic matter. Think quality and quantity.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recJPIQ6aEjfOtTgF\",\n  //         \"recMjAddemfDnNFqI\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"5 stars: Dry matter = 3, C to N ratio = 2; 4 stars: Dry matter = 3 and C to N ratio = 3, or Dry matter = 2 and C to N ratio = 2; 3 stars: Dry matter = 2 and C to N ratio = 3;  2 stars: Dry matter = 2 and C to N ratio = 1; 1 star: Dry matter = 1 and C to N ratio = 1\",\n  //       Notes:\n  //         \"Convert dry matter to a rating. C to N is currently a 3 star rating.\",\n  //       \"Constituent Variables Priorities\": \"C to N Ratio, Dry Matter (lbs/A/y)\"\n  //     },\n  //     createdTime: \"2019-08-19T16:53:43.000Z\"\n  //   },\n  //   {\n  //     id: \"recwKWXsn8Xg5vdSI\",\n  //     fields: {\n  //       \"Cover Crop Goal\": \"Increase soil aggregation\",\n  //       Description: \"Stability rather high turnover.\",\n  //       \"Constituent Variables (defined in DataDictionary)\": [\n  //         \"recVLbzeOzNMAdLZD\",\n  //         \"recxcF1h42PcoEyAz\"\n  //       ],\n  //       \"Thinking about Rules\":\n  //         \"Supports Mycorrhizae - high (4 and 5 stars), root architecture - fibrous\",\n  //       \"Constituent Variables Priorities\":\n  //         \"Root architecture, Supports mycorrhizae\"\n  //     },\n  //     createdTime: \"2019-08-19T16:53:43.000Z\"\n  //   }\n  // ],\n  cropData: [],\n  selectedCrops: [],\n  // selectedCrops: [\n  //   {\n  //     id: \"rec0fkRSPW2unbR48\",\n  //     cropName: \"Radish, Forage\",\n  //     btnId: \"cartBtn0\",\n  //     data: {\n  //       \"Cover Crop Name\": \"Radish, Forage\",\n  //       \"Scientific Name\": \"Raphanus sativus\",\n  //       \"cv, var, or ssp to specify\": \"Forage (CCS-779)\",\n  //       Origin: \"MCCC Species tool\",\n  //       \"Common Mixes\": [\"recCZSADGMOXfJRKQ\", \"rec4R86SQblxRbtBF\"],\n  //       \"Drought Tolerance\": 2,\n  //       \"Shade Tolerance\": 3,\n  //       \"Flood Tolerance\": 2,\n  //       \"Low Fertility Tolerance\": 2,\n  //       \"Salinity Tolerance\": 1,\n  //       \"Winter Survival\": [\"Seldom\"],\n  //       \"Active Growth Period\": [\"Fall\", \"Spring\"],\n  //       Duration: [\"Annual\"],\n  //       \"Shape & Orientation\": [\"Erect\"],\n  //       \"Broadcast Frost Seeding\": true,\n  //       \"Review Status\": \"Zone Team Start\",\n  //       \"Soil drainage\": [\n  //         \"Poorly drained\",\n  //         \"Somewhat poorly drained\",\n  //         \"Moderately well drained\",\n  //         \"Well drained\",\n  //         \"Well drained muck\"\n  //       ],\n  //       \"Min Germination Temp (F)\": 45,\n  //       \"Seeds per pound\": 20000,\n  //       \"Inoculant type (Legumes only)\": [\"none\"],\n  //       \"Seeding Rate: Broadcast (w/cultivation) (lbs/A)\": \"6-15\",\n  //       \"Seeding Rate: Drilled/Cultipack and Cultivation (lbs/A)\": \"5-12\",\n  //       \"Seeding Rate: Aerial (lbs/A)\": \"7-18\",\n  //       \"Drilled Depth\": \"¼-¾\",\n  //       Harvestability: 2,\n  //       \"Loosens topsoil\": 2,\n  //       \"Frees P & K\": 3,\n  //       \"Growing window\": \"Medium\",\n  //       \"Ease of establishment\": 1,\n  //       \"Family Common Name\": \"Mustard family\",\n  //       \"Family Scientific Name\": \"Brassicaceae\",\n  //       \"Soil textures\": [\"coarse\", \"medium\", \"fine\"],\n  //       \"Minimum tolerant soil pH\": 6,\n  //       \"Maximum tolerant soil pH\": 8,\n  //       \"Soil moisture use\": \"Medium\",\n  //       \"Cover Crop Group\": \"Brassica\",\n  //       \"Heat Tolerance\": 3,\n  //       \"Seed price per pound\": 2,\n  //       \"Can Aerial Seed or broadcast w/no cultivation?\": true,\n  //       \"USDA Symbol\": \"RASA2\",\n  //       \"Zone Decision\": \"Include\",\n  //       \"State Use\": \"Common\",\n  //       \"Flooding/Ponding Tolerance\": \"Poor\",\n  //       \"Total N Fixed (lbs/A/y)\": \"0\",\n  //       \"Dry Matter (lbs/A/y)\": \"1200-3000\",\n  //       \"C to N Ratio\": 1,\n  //       \"Notes: Termination [Goal: Method: Timing]\":\n  //         \"More likely to survive if frost occurs prior to formation of storage root.\",\n  //       \"Loosens subsurface soil\": 5,\n  //       \"Supports mycorrhizae\": 1,\n  //       \"Early spring growth\": 1,\n  //       \"Flowering trigger\": [\"Long day (>14 hours)\"],\n  //       \"Establishes quickly\": 4,\n  //       \"Root architecture\": \"Tap\",\n  //       \"Root depth\": \"Deep\",\n  //       \"Notes: Growth, Roots, and Nutrients\":\n  //         \"Minimum Germination Temp. ~ 45˚F\",\n  //       \"Tillage Termination at Vegetative\": 3,\n  //       \"Pollinator Habitat\": 2,\n  //       \"Grazing Value\": 4,\n  //       \"Pollinator Food\": 2,\n  //       \"Grazing Tolerance\": 4,\n  //       \"Notes: Grazers & Pollinators\":\n  //         \"Winter kills at 25°F; Attracts earthworms\",\n  //       \"Tillage Termination at Flowering\": 3,\n  //       \"Freezing Termination at Vegetative\": 4,\n  //       \"Freezing Termination at Flowering\": 5,\n  //       \"Chemical Termination at Flowering\": 5,\n  //       \"Mow Termination at Flowering\": 5,\n  //       \"Chemical Termination at Vegetative\": 4,\n  //       \"Mow Termination at Vegetative\": 5,\n  //       \"Roller Crimp Termination at Flowering\": 1,\n  //       \"Roller Crimp Tolerance at Vegetative\": 1,\n  //       \"Seed price per acre: Drilled/Cultipack and Cultivation\": 1,\n  //       \"Seed price per acre: Aerial\": 1,\n  //       \"Seed price per acre: Broadcast (w/cultivation)\": 1,\n  //       \"Dry Matter Rating\": 2,\n  //       \"March, Mid\": [\"Reliable establishment/growth\"],\n  //       \"March, Early\": [\"Reliable establishment/growth\"],\n  //       \"June, Mid\": [\"Can interseed\"],\n  //       \"June, Early\": [\"Can interseed\"],\n  //       \"May, Mid\": [\"Reliable establishment/growth\"],\n  //       \"May, Early\": [\"Reliable establishment/growth\"],\n  //       \"April, Mid\": [\"Reliable establishment/growth\"],\n  //       \"April, Early\": [\"Reliable establishment/growth\"],\n  //       \"September, Mid\": [\"Reliable establishment/growth\"],\n  //       \"September, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Late seeding rate\"\n  //       ],\n  //       \"August, Mid\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Standard seeding rate\"\n  //       ],\n  //       \"August, Early\": [\n  //         \"Reliable establishment/growth\",\n  //         \"Early seeding rate\"\n  //       ],\n  //       \"July, Mid\": [\"Early seeding rate\"],\n  //       \"July, Early\": [\"Can interseed\"],\n  //       \"October, Early\": [\"Temperature/moisture risk to establishment/growth\"],\n  //       \"Seeding Rate Calculator\": [\"recEHWardn0xNZ2bI\"],\n  //       \"Base Seeding Rate Min (lbs/A)\": 5,\n  //       \"Base Seeding Rate Max (lbs/A)\": 12,\n  //       \"Seed Price Calculator\": [\"recwqPQb3QmzxiCYv\"],\n  //       \"Base Seed Price Per Acre Min\": 1,\n  //       \"Base Seed Price Per Acre Max\": 1,\n  //       \"Improve soil aggregation\": 1,\n  //       \"Improve soil organic matter\": 2,\n  //       \"Lasting residue\": 2,\n  //       \"Prevent soil erosion\": 1,\n  //       \"Promote water quality\": 3,\n  //       \"Reduces subsurface compaction\": 5,\n  //       \"Nitrogen fixation\": 2,\n  //       \"Nitrogen scavenging\": 4,\n  //       \"Good grazing\": 5,\n  //       \"Forest harvest value\": 4,\n  //       \"Pollinator support\": 3,\n  //       \"Weed suppression\": 3,\n  //       \"Reduces topsoil compaction\": 1,\n  //       \"v Base Seed Price Per Acre Min\": 10,\n  //       \"Base Seed Price Per Acre\": 10,\n  //       \"f Base Seed Price Per Acre Min\": 1,\n  //       \"Average Seeding Rate Min\": [27.57894736842105],\n  //       \"Average Seeding Rate Max\": [56.026315789473685],\n  //       \"f Base Seed Price Per Acre Max\": 1\n  //     }\n  //   }\n  // ],\n  // selectedGoals: [\n  //   \"Lasting residue\",\n  //   \"Nitrogen scavenging\",\n  //   \"Prevent soil erosion\"\n  // ],\n  // selectedGoals: [\"Improve Soil Organic Matter\", \"Lasting Residue\"],\n  selectedGoals: [],\n  zoom: 13,\n  addressVerified: false,\n  snackOpen: false,\n  snackVertical: \"bottom\",\n  snackHorizontal: \"right\",\n  snackMessage: \"\",\n  modalOpen: false,\n  modalSize: \"lg\", //sm,md,lg,fluid\n  modalBody: {},\n  addToCartBtnText: \"add to list\",\n  zoneText: \"Zone 7\",\n  zone: 7,\n  soilData: {\n    Map_Unit_Name: \"\",\n    Drainage_Class: \"\",\n    Flooding_Frequency: \"\",\n    Ponding_Frequency: \"\"\n  },\n  // weatherData: [\n  //   {\n  //     firstFrost: \"Oct 13\",\n  //     averageRain: 3.46\n  //   }\n  // ],\n  weatherData: {\n    averageFrost: {\n      firstFrostDate: {\n        month: \"October\",\n        day: 21\n      },\n      lastFrostDate: {\n        month: \"April\",\n        day: 20\n      }\n    },\n    averagePrecipitation: {\n      thisMonth: 3.6, //inches\n      annual: 43 //inches\n    },\n    frostFreeDays: 173\n  },\n  myCoverCropActivationFlag: false,\n  speciesSelectorActivationFlag: true,\n  ajaxInProgress: false,\n  cropDetailModal: false,\n  greenbarExpanded: false,\n  isSoilDataLoading: false,\n  cashCropData: {\n    name: \"\",\n    dateRange: {\n      startDate: \"\",\n      endDate: \"\"\n    }\n  }\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\nexport const Context = createContext(initialState);\nexport default Store;\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nconst DateComponent = () => {\n  const [date, setDate] = useState(null);\n\n  useEffect(() => {\n    setDate(setTodaysDate);\n  }, []);\n\n  return date;\n};\n\nconst setTodaysDate = () => {\n  let now = moment();\n  return now.format(\"LL\");\n};\n\nexport default DateComponent;\n","import React, { useContext } from \"react\";\nimport {\n  withStyles,\n  Button,\n  Switch,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport moment from \"moment\";\n\nexport const locationIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 14 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M7 0C3.13 0 0 3.13 0 7C0 12.25 7 20 7 20C7 20 14 12.25 14 7C14 3.13 10.87 0 7 0ZM7 9.5C5.62 9.5 4.5 8.38 4.5 7C4.5 5.62 5.62 4.5 7 4.5C8.38 4.5 9.5 5.62 9.5 7C9.5 8.38 8.38 9.5 7 9.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\nexport const zoneIcon = (w, h) => {\n  return (\n    <svg\n      height={h}\n      width={w}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM6 15.5C4.62 15.5 3.5 14.38 3.5 13C3.5 11.62 4.62 10.5 6 10.5C7.38 10.5 8.5 11.62 8.5 13C8.5 14.38 7.38 15.5 6 15.5ZM7.5 6C7.5 4.62 8.62 3.5 10 3.5C11.38 3.5 12.5 4.62 12.5 6C12.5 7.38 11.38 8.5 10 8.5C8.62 8.5 7.5 7.38 7.5 6ZM14 15.5C12.62 15.5 11.5 14.38 11.5 13C11.5 11.62 12.62 10.5 14 10.5C15.38 10.5 16.5 11.62 16.5 13C16.5 14.38 15.38 15.5 14 15.5Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport const cloudIcon = (w, h) => {\n  return (\n    <svg\n      width={w}\n      height={h}\n      viewBox=\"0 0 24 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M19.35 6.04C18.67 2.59 15.64 0 12 0C9.11 0 6.6 1.64 5.35 4.04C2.34 4.36 0 6.91 0 10C0 13.31 2.69 16 6 16H19C21.76 16 24 13.76 24 11C24 8.36 21.95 6.22 19.35 6.04Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n\nexport const GreenSwitch = withStyles({\n  thumb: {\n    backgroundColor: \"rgb(138, 188, 98, 1)\"\n  },\n  track: {\n    backgroundColor: \"rgb(138, 188, 98, 0.5)\"\n  },\n  input: {\n    \"&:checked\": {\n      color: \"rgb(240, 247, 235)\"\n    }\n  },\n  \"&:checked\": {\n    color: \"rgb(240, 247, 235)\"\n  }\n})(Switch);\n\nexport const GetMonthString = month => {\n  let months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n\n  return months[month].toUpperCase();\n};\n\nexport const UnderConstructionText = () => {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Grid item xs={3}>\n        <Typography variant=\"h3\">Under Construction</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport const abbrRegion = (input, to) => {\n  var states = [\n    [\"Alabama\", \"AL\"],\n    [\"Alaska\", \"AK\"],\n    [\"American Samoa\", \"AS\"],\n    [\"Arizona\", \"AZ\"],\n    [\"Arkansas\", \"AR\"],\n    [\"Armed Forces Americas\", \"AA\"],\n    [\"Armed Forces Europe\", \"AE\"],\n    [\"Armed Forces Pacific\", \"AP\"],\n    [\"California\", \"CA\"],\n    [\"Colorado\", \"CO\"],\n    [\"Connecticut\", \"CT\"],\n    [\"Delaware\", \"DE\"],\n    [\"District Of Columbia\", \"DC\"],\n    [\"Florida\", \"FL\"],\n    [\"Georgia\", \"GA\"],\n    [\"Guam\", \"GU\"],\n    [\"Hawaii\", \"HI\"],\n    [\"Idaho\", \"ID\"],\n    [\"Illinois\", \"IL\"],\n    [\"Indiana\", \"IN\"],\n    [\"Iowa\", \"IA\"],\n    [\"Kansas\", \"KS\"],\n    [\"Kentucky\", \"KY\"],\n    [\"Louisiana\", \"LA\"],\n    [\"Maine\", \"ME\"],\n    [\"Marshall Islands\", \"MH\"],\n    [\"Maryland\", \"MD\"],\n    [\"Massachusetts\", \"MA\"],\n    [\"Michigan\", \"MI\"],\n    [\"Minnesota\", \"MN\"],\n    [\"Mississippi\", \"MS\"],\n    [\"Missouri\", \"MO\"],\n    [\"Montana\", \"MT\"],\n    [\"Nebraska\", \"NE\"],\n    [\"Nevada\", \"NV\"],\n    [\"New Hampshire\", \"NH\"],\n    [\"New Jersey\", \"NJ\"],\n    [\"New Mexico\", \"NM\"],\n    [\"New York\", \"NY\"],\n    [\"North Carolina\", \"NC\"],\n    [\"North Dakota\", \"ND\"],\n    [\"Northern Mariana Islands\", \"NP\"],\n    [\"Ohio\", \"OH\"],\n    [\"Oklahoma\", \"OK\"],\n    [\"Oregon\", \"OR\"],\n    [\"Pennsylvania\", \"PA\"],\n    [\"Puerto Rico\", \"PR\"],\n    [\"Rhode Island\", \"RI\"],\n    [\"South Carolina\", \"SC\"],\n    [\"South Dakota\", \"SD\"],\n    [\"Tennessee\", \"TN\"],\n    [\"Texas\", \"TX\"],\n    [\"US Virgin Islands\", \"VI\"],\n    [\"Utah\", \"UT\"],\n    [\"Vermont\", \"VT\"],\n    [\"Virginia\", \"VA\"],\n    [\"Washington\", \"WA\"],\n    [\"West Virginia\", \"WV\"],\n    [\"Wisconsin\", \"WI\"],\n    [\"Wyoming\", \"WY\"]\n  ];\n\n  // So happy that Canada and the US have distinct abbreviations\n  var provinces = [\n    [\"Alberta\", \"AB\"],\n    [\"British Columbia\", \"BC\"],\n    [\"Manitoba\", \"MB\"],\n    [\"New Brunswick\", \"NB\"],\n    [\"Newfoundland\", \"NF\"],\n    [\"Northwest Territory\", \"NT\"],\n    [\"Nova Scotia\", \"NS\"],\n    [\"Nunavut\", \"NU\"],\n    [\"Ontario\", \"ON\"],\n    [\"Prince Edward Island\", \"PE\"],\n    [\"Quebec\", \"QC\"],\n    [\"Saskatchewan\", \"SK\"],\n    [\"Yukon\", \"YT\"]\n  ];\n\n  var regions = states.concat(provinces);\n\n  var i; // Reusable loop variable\n  if (to === \"abbr\") {\n    input = input.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][0] === input) {\n        return regions[i][1];\n      }\n    }\n  } else if (to === \"name\") {\n    input = input.toUpperCase();\n    for (i = 0; i < regions.length; i++) {\n      if (regions[i][1] === input) {\n        return regions[i][0];\n      }\n    }\n  }\n};\n\nexport const CustomStyles = () => {\n  return {\n    defaultFontSize: \"1em\",\n    lighterGreen: \"#598445\",\n    lightGreen: \"#add08f\",\n    greenishWhite: \"#f0f7eb\",\n    primaryProgressBtnColor: \"#49a8ab\",\n    primaryProgressBtnBorderColor: \"#62b8bc\",\n    secondaryProgressBtnColor: \"#e3f2f4\",\n    secondaryProgressBtnBorderColor: \"#e3f2f4\",\n    fullyRoundedRadius: \"200px\",\n    semiRoundedRadius: \"10px\",\n    mildlyRoundedRadius: \"5px\",\n    nonRoundedRadius: \"0px\",\n    defaultButtonPadding: \"10px 20px 10px 20px\"\n  };\n};\n\nexport const LightButton = withStyles({\n  root: {\n    backgroundColor: CustomStyles().secondaryProgressBtnBorderColor,\n    borderRadius: CustomStyles().fullyRoundedRadius,\n    color: \"#000\",\n    padding: CustomStyles().defaultButtonPadding,\n    borderColor: CustomStyles().secondaryProgressBtnBorderColor,\n    \"&:hover\": {\n      borderColor: CustomStyles().primaryProgressBtnBorderColor,\n      backgroundColor: CustomStyles().primaryProgressBtnColor,\n      color: \"#fff\"\n    }\n  }\n})(Button);\n\nexport const getRating = ratng => {\n  let rating = parseInt(ratng);\n  if (rating === 0) {\n    return (\n      <div className=\"rating-0\">\n        <span></span>\n      </div>\n    );\n  } else if (rating === 1) {\n    return (\n      <div className=\"rating-1\">\n        <span></span>\n      </div>\n    );\n  } else if (rating === 2) {\n    return (\n      <div className=\"rating-2\">\n        <span></span>\n      </div>\n    );\n  } else if (rating === 3) {\n    return (\n      <div className=\"rating-3\">\n        <span></span>\n      </div>\n    );\n  } else if (rating === 4) {\n    return (\n      <div className=\"rating-4\">\n        <span></span>\n      </div>\n    );\n  } else if (rating === 5) {\n    return (\n      <div className=\"rating\">\n        <span></span>\n      </div>\n    );\n  }\n};\n\nexport const allMonths = moment()\n  .localeData()\n  .monthsShort();\nexport const cropDataURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))\";\n\n// const cropDataURL =\n// \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Zone Decision},'Exclude',''))\";\n\nexport const allGoalsURL =\n  \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crop%20Goals?maxRecords=300\";\n\nexport const greenBarExpansionPanelHeight = {\n  large: \"600px\",\n  medium: \"600px\",\n  small: \"600px\"\n};\n","const statesObject = {\n  Alabama: \"AL\",\n  Alaska: \"AK\",\n  \"American Samoa\": \"AS\",\n  Arizona: \"AZ\",\n  Arkansas: \"AR\",\n  California: \"CA\",\n  Colorado: \"CO\",\n  Connecticut: \"CT\",\n  Delaware: \"DE\",\n  \"District Of Columbia\": \"DC\",\n  \"Federated States Of Micronesia\": \"FM\",\n  Florida: \"FL\",\n  Georgia: \"GA\",\n  Guam: \"GU\",\n  Hawaii: \"HI\",\n  Idaho: \"ID\",\n  Illinois: \"IL\",\n  Indiana: \"IN\",\n  Iowa: \"IA\",\n  Kansas: \"KS\",\n  Kentucky: \"KY\",\n  Louisiana: \"LA\",\n  Maine: \"ME\",\n  \"Marshall Islands\": \"MH\",\n  Maryland: \"MD\",\n  Massachusetts: \"MA\",\n  Michigan: \"MI\",\n  Minnesota: \"MN\",\n  Mississippi: \"MS\",\n  Missouri: \"MO\",\n  Montana: \"MT\",\n  Nebraska: \"NE\",\n  Nevada: \"NV\",\n  \"New Hampshire\": \"NH\",\n  \"New Jersey\": \"NJ\",\n  \"New Mexico\": \"NM\",\n  \"New York\": \"NY\",\n  \"North Carolina\": \"NC\",\n  \"North Dakota\": \"ND\",\n  \"Northern Mariana Islands\": \"MP\",\n  Ohio: \"OH\",\n  Oklahoma: \"OK\",\n  Oregon: \"OR\",\n  Palau: \"PW\",\n  Pennsylvania: \"PA\",\n  \"Puerto Rico\": \"PR\",\n  \"Rhode Island\": \"RI\",\n  \"South Carolina\": \"SC\",\n  \"South Dakota\": \"SD\",\n  Tennessee: \"TN\",\n  Texas: \"TX\",\n  Utah: \"UT\",\n  Vermont: \"VT\",\n  \"Virgin Islands\": \"VI\",\n  Virginia: \"VA\",\n  Washington: \"WA\",\n  \"West Virginia\": \"WV\",\n  Wisconsin: \"WI\",\n  Wyoming: \"WY\"\n};\n\nexport default class StateAbbreviations {\n  constructor() {\n    this.statesObject = statesObject;\n  }\n\n  getAbbreviation = stateName => {\n    if (Object.prototype.hasOwnProperty.call(this.statesObject, stateName)) {\n      return this.statesObject[stateName];\n    }\n  };\n}\n","import React, { useEffect, useContext, useState, Fragment } from \"react\";\nimport {\n  Map,\n  TileLayer,\n  Marker,\n  Popup,\n  Polygon,\n  FeatureGroup,\n  Circle,\n  LayersControl,\n  LayerGroup\n} from \"react-leaflet\";\n// import { EditControl } from \"react-leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { Context } from \"../../store/Store\";\nimport axios from \"axios\";\nimport StateAbbreviations from \"./StateAbbreviations\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { Button } from \"@material-ui/core\";\n\nimport \"../../styles/map.scss\";\nimport { CustomStyles } from \"../../shared/constants\";\n\n// work around broken icons when using webpack, see https://github.com/PaulLeCam/react-leaflet/issues/255\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n});\n\nconst MapComponent = ({ width, height, minzoom, maxzoom }) => {\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    console.log(\"---Map.js---\");\n\n    // get default marker\n    let center = state.markers[0];\n    let map;\n    // Create the map\n    if (state.progress === 2) {\n      map = L.map(\"map\", { zoomControl: false }).setView(center, maxzoom - 4);\n    } else {\n      map = L.map(\"map\").setView(center, maxzoom - 4);\n    }\n\n    // Set up the OSM layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        'Data © <a href=\"http://osm.org/copyright\">OpenStreetMap</a>',\n      maxZoom: 18\n    }).addTo(map);\n\n    // add a default marker in the given location\n    let marker = L.marker(center).addTo(map);\n\n    // click\n\n    // map.on(\"click dragend\", function(e) {\n    //   console.log(\"clicked\", e);\n    //   let lat = e.latlng.lat;\n    //   let lng = e.latlng.lng;\n\n    //   marker.setLatLng(e.latlng);\n    //   dispatch({\n    //     type: \"UPDATE_MARKER\",\n    //     data: {\n    //       markers: [[parseFloat(lat), parseFloat(lng)]]\n    //     }\n    //   });\n    //   dispatch({\n    //     type: \"SNACK\",\n    //     data: {\n    //       snackOpen: true,\n    //       snackMessage: \"Marker Saved\"\n    //     }\n    //   });\n    //   // marker = L.marker([lat, lng]).addTo(map);\n    // });\n\n    // Initialise the FeatureGroup to store editable layers\n    let editableLayers = new L.FeatureGroup();\n    map.addLayer(editableLayers);\n    let drawPluginOptions = {\n      position: \"topright\",\n      draw: {\n        polygon: {\n          allowIntersection: false, // Restricts shapes to simple polygons\n          drawError: {\n            color: \"#e1e100\", // Color the shape will turn when intersects\n            message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n          },\n          shapeOptions: {\n            color: \"#97009c\"\n          }\n        },\n        // disable toolbar item by setting it to false\n        polyline: false,\n        circle: false, // Turns off this drawing tool\n        rectangle: false,\n        marker: true,\n        circlemarker: false\n      },\n      edit: {\n        featureGroup: editableLayers, //REQUIRED!!\n        remove: true\n      }\n    };\n    if (state.markers.length > 1) {\n      let polygon = L.polygon(state.markers, {\n        color: CustomStyles().lighterGreen\n      }).addTo(map);\n      // zoom the map to the polygon\n      map.fitBounds(polygon.getBounds());\n    }\n\n    // if (state.markers.length === 1) {\n    // show marker\n\n    var myMarker = L.marker(state.markers[0], {\n      title: state.address,\n      draggable: true,\n      riseOnHover: true\n    })\n      .addTo(map)\n      .on(\"dragend \", function(e) {\n        console.log(e);\n        var coord = String(myMarker.getLatLng()).split(\",\");\n        console.log(\"Got new coords via Map.js drag event\");\n        var lat = coord[0].split(\"(\");\n        // console.log(\"Latitude\", lat[1]);\n        var lng = coord[1].split(\")\");\n        // console.log(\"Longitude\", lng[0]);\n        myMarker.bindPopup(\"Moved to: \" + lat[1] + \", \" + lng[0] + \".\");\n\n        dispatch({\n          type: \"UPDATE_MARKER\",\n          data: {\n            markers: [[parseFloat(lat[1]), parseFloat(lng[0])]]\n          }\n        });\n        dispatch({\n          type: \"SNACK\",\n          data: {\n            snackOpen: true,\n            snackMessage: \"Marker Saved\"\n          }\n        });\n      });\n\n    // }\n    // else {\n    //   // show polygon with selected area\n    // }\n\n    // Initialise the draw control and pass it the FeatureGroup of editable layers\n    let drawControl = new L.Control.Draw(drawPluginOptions);\n    if (state.progress !== 2) {\n      map.addControl(drawControl);\n      // var editableLayers = new L.FeatureGroup();\n      // map.addLayer(editableLayers);\n      map.on(\"draw:created\", function(e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        if (type === \"marker\") {\n          layer.bindPopup(\"A popup!\");\n        }\n\n        // console.log(layer._latlngs);\n        let markers = [];\n        if (layer._latlng) {\n          // single marker\n          queryGEORevAPI(layer._latlng.lat, layer._latlng.lng);\n          L.marker([layer._latlng.lat, layer._latlng.lng]).addTo(\n            editableLayers\n          );\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: [[layer._latlng.lat, layer._latlng.lng]]\n            }\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your point has been saved.\"\n            }\n          });\n        } else {\n          // editableLayers.remove().addLayer(layer);\n          editableLayers.addLayer(layer);\n          layer._latlngs.map((latlngArr, index) => {\n            latlngArr.map((latlng, index) => {\n              // console.log(latlng);\n              markers.push([latlng.lat, latlng.lng]);\n            });\n          });\n          queryGEORevAPI(markers[0][0], markers[0][1]);\n          dispatch({\n            type: \"UPDATE_MARKER\",\n            data: {\n              markers: markers\n            }\n          });\n          dispatch({\n            type: \"SNACK\",\n            data: {\n              snackOpen: true,\n              snackMessage: \"Your field has been saved.\"\n            }\n          });\n        }\n        // console.log(polygon.getBounds().getCenter());\n      });\n    }\n  }, []);\n\n  const addMarker = e => {\n    const { markers } = state;\n\n    markers.pop();\n    markers.push(e.latlng);\n\n    // console.log(markers);\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[markers[0].lat, markers[0].lng]]\n      }\n    });\n    // this.setState({ markers });\n    // console.log(markers[0]);\n    let lon = markers[0].lng;\n    let lat = markers[0].lat;\n    queryGEORevAPI(lat, lon);\n  };\n  const queryGEORevAPI = async (lat, lon) => {\n    const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;\n\n    await axios\n      .get(url)\n      .then(response => {\n        let data = response.data;\n        let fullAddress = data.display_name;\n        console.log(\"geoorev\", data);\n        // set county, state (abbr) and zip to global state\n        let county = data.address.county;\n        let state = data.address.state;\n        let zip = data.address.postcode;\n        let stateAbbreviation = new StateAbbreviations();\n        let abbr = stateAbbreviation.getAbbreviation(state);\n        console.log(\"Abbreviation: \", abbr);\n        // console.log(data.address.postcode);\n        // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n        setZoneState(data.address.postcode);\n        return fullAddress;\n      })\n      .then(fullAddress => {\n        dispatch({\n          type: \"CHANGE_ADDRESS\",\n          data: { address: `${fullAddress}`, addressVerified: true }\n        });\n      })\n      .catch(error => {\n        console.log(\"nominatim error code\", error.response.code);\n      });\n  };\n\n  const setZoneState = async zip => {\n    // console.log(zip);\n    await axios\n      .get(`https://phzmapi.org/${zip}.json`)\n      .then(response => {\n        let data = response.data;\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n            // alert(zone);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then(zone => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: \"Zone 2 & 3\",\n                zone: 2\n              }\n            });\n          } else {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: `Zone ${zone}`,\n                zone: parseInt(zone)\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: \"Zone 7\",\n              zone: 7\n            }\n          });\n        }\n      })\n      .catch(error => {\n        console.log(\"phzmapi.org error: \", error);\n        // TODO:: Try anyther zip ?\n        // if (error.response.status === 404) {\n        //   dispatch({\n        //     type: \"SNACK\",\n        //     data: {\n        //       snackOpen: true,\n        //       snackMessage: `Zone not found for ZIP: ${zip}`\n        //     }\n        //   });\n        // }\n      });\n  };\n  return (\n    <Fragment>\n      <div id=\"map\" style={{ height: height, width: width }}></div>\n      {/* <button className=\"mapEditBtn\">Draw Field</button> */}\n    </Fragment>\n    // <Map\n    //   center={state.markers[0]}\n    //   zoom={13}\n    //   zoomControl={false}\n    //   style={{ height: height, width: width }}\n    // >\n    //   <TileLayer\n    //     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    //     url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n    //   />\n    //   <FeatureGroup>\n    //     <EditControl\n    //       position=\"topright\"\n    //       //this is the necessary function. It goes through each layer\n    //       //and runs my save function on the layer, converted to GeoJSON\n    //       //which is an organic function of leaflet layers.\n\n    //       onEdited={e => {\n    //         // console.log(e);\n    //         e.layers.eachLayer(a => {\n    //           console.log(a.toGeoJSON());\n    //           // this.props.updatePlot({\n    //           //   id: id,\n    //           //   feature: a.toGeoJSON()\n    //           // });\n    //         });\n    //       }}\n    //       edit={{ remove: true }}\n    //       draw={{\n    //         marker: false,\n    //         circle: false,\n    //         rectangle: false,\n    //         polygon: true,\n    //         polyline: false\n    //       }}\n    //     />\n    //     <Circle center={state.markers[0]} />;\n    //   </FeatureGroup>\n    // </Map>\n  );\n};\n//     import { Map, TileLayer, FeatureGroup, Circle } from 'react-leaflet';\n// import { EditControl } from \"react-leaflet-draw\"\n\n// const Component = () => (\n//   <FeatureGroup>\n//     <EditControl\n//       position='topright'\n//       onEdited={this._onEditPath}\n//       onCreated={this._onCreate}\n//       onDeleted={this._onDeleted}\n//       draw={{\n//         rectangle: false\n//       }}\n//     />\n//     <Circle center={[51.51, -0.06]} radius={200} />\n//   </FeatureGroup>\n// );\n// <Map\n//   style={{ height: height, width: width }}\n//   animate={true}\n//   center={center}\n//   zoom={state.zoom}\n//   minZoom={minzoom}\n//   maxZoom={maxzoom}\n//   // onClick={addMarker}\n//   // ref={myMap}\n// >\n{\n  /* <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?\"\n      />\n      <Polygon color=\"purple\" positions={polygon} />\n      {state.markers.map((position, idx) => (\n        <Marker key={`marker-${idx}`} position={position}>\n          <Popup>\n            <span>{state.address}</span>\n          </Popup>\n        </Marker>\n      ))} */\n}\n\n{\n  /* </Map> */\n}\n\nexport default MapComponent;\n","import React, { useContext } from \"react\";\nimport { FormGroup, FormControlLabel } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\nimport axios from \"axios\";\n// import MapComponent from \"./Map\";\n// import { UpdateLatLong } from \"../../shared/Functions\";\nimport { GreenSwitch } from \"../../shared/constants\";\n\nconst LiveLocationComponent = () => {\n  const [state, dispatch] = useContext(Context);\n  const [lstate, setlState] = React.useState({\n    checkedL: false\n  });\n\n  const handleLocationToggle = name => event => {\n    if (event.target.checked) {\n      let options = {\n        enableHighAccuracy: false,\n        maximumAge: 60000,\n        timeout: 45000\n      };\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          function(position) {\n            let lat = position.coords.latitude;\n            let long = position.coords.longitude;\n            if (isUndefined(lat) || isUndefined(long)) return false;\n            else {\n              const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${long}&format=json`;\n              axios\n                .get(url)\n                .then(response => {\n                  let data = response.data;\n                  let fullAddress = data.display_name;\n                  // console.log(data);\n                  // const { markers } = state;\n                  // markers.pop();\n                  let mrkrArr = [];\n                  mrkrArr[0] = lat;\n                  mrkrArr[1] = long;\n                  // alert(mrkrArr);\n                  // console.log(\"mrkrArr: \" + mrkrArr.lat);\n                  // markers.push(mrkrArr);\n                  // console.log(e.latlng);\n                  dispatch({\n                    type: \"UPDATE_MARKER\",\n                    data: {\n                      markers: [mrkrArr]\n                    }\n                  });\n                  // check https://phzmapi.org/[zip].json to map zone with zip probably also restricting the zips?\n                  if (data.address.postcode !== undefined) {\n                    SetZoneState(data.address.postcode);\n                  }\n\n                  console.log(\"live location zip: \", data);\n                  return fullAddress;\n                })\n                .then(fullAddress => {\n                  dispatch({\n                    type: \"CHANGE_ADDRESS\",\n                    data: { address: `${fullAddress}`, addressVerified: true }\n                  });\n\n                  // markers.push(mrkrArr);\n                  // console.log(e.latlng);\n                  // dispatch({\n                  //   type: \"UPDATE_MARKER\",\n                  //   data: {\n                  //     markers: markers\n                  //   }\n                  // });\n                })\n                .then(() => {});\n            }\n          },\n          function() {\n            alert(\"Oops! An error occurred. Please use the map\");\n          },\n          options\n        );\n      }\n    }\n\n    setlState({ [name]: event.target.checked });\n  };\n\n  const SetZoneState = async zip => {\n    await axios\n      .get(`https://phzmapi.org/${zip}.json`)\n      .then(response => {\n        let data = response.data;\n        let zone = 0;\n        if (data !== null && data !== undefined) {\n          if (data.zone.length > 1) {\n            //  strip everything except the first char and covert it to int\n            zone = data.zone.charAt(0);\n            // alert(zone);\n          } else zone = data.zone;\n          return (zone = parseInt(zone));\n        } else {\n          return 7;\n        }\n      })\n      .then(zone => {\n        // check if zone is in the NECCC range else set a default\n        if (zone <= 7 && zone > 1) {\n          if (zone === 2 || zone === 3) {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: \"Zone 2 & 3\",\n                zone: 2\n              }\n            });\n          } else {\n            dispatch({\n              type: \"UPDATE_ZONE_TEXT\",\n              data: {\n                zoneText: `Zone ${zone}`,\n                zone: parseInt(zone)\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: \"Zone 7\",\n              zone: 7\n            }\n          });\n        }\n      });\n  };\n\n  const isUndefined = val => {\n    if (val === undefined || val === \"\" || val === null) return true;\n    else return false;\n  };\n\n  return (\n    <div>\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <GreenSwitch\n              checked={state.checkedL}\n              onChange={handleLocationToggle(\"checkedL\")}\n              value=\"checkedL\"\n            />\n          }\n          label={lstate.checkedL ? \"Yes\" : \"No\"}\n        />\n      </FormGroup>\n      <small>Use Current Location</small>\n    </div>\n  );\n};\n\nexport default LiveLocationComponent;\n","// TODO: Autocomplete feature is not yet implemented\n// WHY: https://operations.osmfoundation.org/policies/nominatim/ Doesn't allow the API usage for building auto-complete\n// Lancaster, Pennsylvania as default for PASA\n\nimport React, {\n  useState,\n  useEffect,\n  useContext,\n  useRef,\n  Fragment\n} from \"react\";\n\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormControl,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  Link\n} from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\nimport { Search } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nconst AutoCompleteComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(false);\n  const [address, setAddress] = useState(state.address);\n  const [suggestedAddress, setSuggestedAddress] = useState({});\n\n  useEffect(() => {\n    setAddress(state.address);\n  }, [state.address]);\n  const setBoundingBoxAndAddress = val => {\n    // set the polygon bounding box? OR lat long and address, then close the modal\n    dispatch({\n      type: \"UPDATE_MARKER\",\n      data: {\n        markers: [[parseFloat(val.lat), parseFloat(val.lon)]]\n      }\n    });\n    dispatch({\n      type: \"CHANGE_ADDRESS\",\n      data: {\n        address: val.display_name,\n        addressVerified: true\n      }\n    });\n    handleClose();\n    console.log(val);\n  };\n\n  const handleToggle = () => {\n    if (address.length > 3) {\n      handleOpen();\n      // setOpen(true);\n      checkAddresses(address).then(addressData => {\n        setSuggestedAddress(addressData);\n        console.log(addressData);\n      });\n    }\n  };\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleChange = event => {\n    setAddress(event.target.value);\n  };\n\n  const checkAddresses = async query => {\n    let url = `https://nominatim.openstreetmap.org/search?q=${query}&country=United%20States&format=json`;\n    let response = await fetch(url);\n    response = response.json();\n    return response;\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        BackdropProps={{\n          timeout: 500\n        }}\n        BackdropComponent={Backdrop}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Suggested Locations</h2>\n            <div>\n              <p variant=\"body2\">\n                Server suggested {suggestedAddress.length}{\" \"}\n                {suggestedAddress.length > 1 ? \"addresses\" : \"address\"}\n              </p>\n              {suggestedAddress.length > 0 ? (\n                <ul>\n                  {suggestedAddress.map((val, index) => (\n                    <li key={index}>\n                      {\" \"}\n                      <Link\n                        component=\"button\"\n                        variant=\"body2\"\n                        color=\"secondary\"\n                        onClick={() => setBoundingBoxAndAddress(val)}\n                      >\n                        {val.display_name}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                \"\"\n              )}\n\n              <em>\n                If you don't find your location here, try typing a bit more\n              </em>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n      <FormControl\n        variant=\"filled\"\n        style={{ width: \"100%\" }}\n        className={classes.formControl}\n      >\n        <TextField\n          label=\"LOCATION\"\n          value={address}\n          onChange={handleChange}\n          fullWidth\n          aria-haspopup={true}\n          variant=\"filled\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton onClick={handleToggle}>\n                  <Search />\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        ></TextField>\n        {/* <TextField\n          aria-controls={open ? \"menu-list-grow\" : undefined}\n          label=\"LOCATION\"\n          value={state.address !== \"\" ? state.address : address}\n          onChange={handleChange}\n          fullWidth\n          aria-haspopup=\"true\"\n          variant=\"filled\"\n          InputProps={\n            address.length > 5\n              ? {\n                  endAdornment: (\n                    <InputAdornment>\n                      <IconButton onClick={handleToggle}>\n                        <Search />\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }\n              : \"\"\n          }\n        ></TextField> */}\n      </FormControl>\n    </Fragment>\n  );\n};\n\nexport default AutoCompleteComponent;\n","import React, { useState } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport { GreenSwitch } from \"../../shared/constants\";\n\nconst LocationToggleComponent = props => {\n  const [defaultValue, setDefaultValue] = useState(\"default\");\n  const children = [\n    <ToggleButton key={1} value=\"default\">\n      Default\n    </ToggleButton>,\n    <ToggleButton key={2} value=\"city\">\n      City\n    </ToggleButton>,\n    <ToggleButton key={3} value=\"county\">\n      County\n    </ToggleButton>,\n    <ToggleButton key={4} value=\"zip\">\n      ZIP\n    </ToggleButton>\n  ];\n\n  const handleChange = (e, value) => {\n    setDefaultValue(value);\n  };\n  return (\n    <ToggleButtonGroup\n      size=\"small\"\n      value={defaultValue}\n      exclusive\n      onChange={handleChange}\n    >\n      {children}\n    </ToggleButtonGroup>\n  );\n};\n\nexport default LocationToggleComponent;\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/location.scss\";\n\n// import { cloudIcon } from \"../../shared/constants\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  makeStyles\n  // TextField,\n  // withStyles,\n  // Button\n} from \"@material-ui/core\";\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axios from \"axios\";\nimport MapComponent from \"./Map\";\nimport LiveLocation from \"./LiveLocation\";\nimport AutoComplete from \"./AutoComplete\";\nimport LocationToggleComponent from \"./LocationToggle\";\n// import { Link, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst LocationComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    console.log(\"---Location.js started---\");\n  });\n\n  const handleAddressChangeByText = event => {\n    console.log(event.target.value);\n    dispatch({\n      type: \"CHANGE_ADDRESS_BY_TYPING\",\n      data: {\n        address: event.target.value,\n        showAddressChangeBtn: true\n      }\n    });\n  };\n\n  const updateAddressOnClick = async () => {\n    // update the new text address from state to map with a new marker!\n\n    // get currect address from state\n    var q = state.address;\n    // https://nominatim.openstreetmap.org/search/?q=1139%20crab%20orchard%20drive&format=json\n    await axios\n      .get(`https://nominatim.openstreetmap.org/search/?q=${q}&format=json`)\n      .then(response => {\n        let data = response.data;\n        // console.log(data);\n        if (data.length === 1) {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              markers: [[data[0].lat, data[0].lon]],\n              zoom: 15,\n              addressVerified: true,\n              address: data[0].display_name,\n              snackOpen: true,\n              snackMessage: \"Address Updated\"\n            }\n          });\n          // th;\n          //   this.setState({\n          //     markers: [[data[0].lat, data[0].lon]],\n          //     zoom: 15,\n          //     addressVerified: true,\n          //     address: data[0].display_name\n          //   });\n        } else {\n          dispatch({\n            action: \"UPDATE_ADDRESS_ON_MAP_CLICK\",\n            data: {\n              address: \"\",\n              addressVerified: false,\n              snackOpen: true,\n              snackMessage: \"Please complete the address\"\n            }\n          });\n        }\n\n        // let latlng = data.display_name;\n        // this.setState({\n        //   address: latlng\n        // });\n        // let latlng = data.results.map((latlng) => {\n\n        // })\n      })\n      .then(() => {\n        dispatch({\n          action: \"TOGGLE_ADDRESS_CHANGE_BUTTON\",\n          data: {\n            showAddressChangeBtn: false\n          }\n        });\n      });\n  };\n\n  return (\n    <div\n      className=\"container-fluid mt-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <div className=\"row boxContainerRow\" style={{}}>\n        <div className=\"col-lg-6 col-sm-12\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <h1>Where is your field located?</h1>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <p style={{ fontSize: \"18px\" }}>\n                  Select plant hardiness zone for least site specific results.\n                  Enter address or zip code for county-level specificity. For\n                  more specific results, mark out your field boundary in the\n                  map.\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6 col-sm-12\">\n                <FormControl\n                  variant=\"filled\"\n                  style={{ width: \"100%\" }}\n                  className={classes.formControl}\n                >\n                  <InputLabel>PLANT HARDINESS ZONE</InputLabel>\n                  <Select\n                    variant=\"filled\"\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    style={{\n                      textAlign: \"left\"\n                    }}\n                    onChange={event => {\n                      //   console.log(\"evvt\" + event.target.);\n                      if (event.target.value === 2) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 2 & 3\",\n                            zone: parseInt(event.target.value)\n                          }\n                        });\n                      } else if (event.target.value === 4) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 4\",\n                            zone: parseInt(event.target.value)\n                          }\n                        });\n                      } else if (event.target.value === 5) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 5\",\n                            zone: parseInt(event.target.value)\n                          }\n                        });\n                      } else if (event.target.value === 6) {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 6\",\n                            zone: parseInt(event.target.value)\n                          }\n                        });\n                      } else {\n                        dispatch({\n                          type: \"UPDATE_ZONE_TEXT\",\n                          data: {\n                            zoneText: \"Zone 7\",\n                            zone: parseInt(event.target.value)\n                          }\n                        });\n                      }\n                    }}\n                    value={state.zone}\n                  >\n                    <MenuItem value={0}>\n                      <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={2} key={2}>\n                      Zone 2 and 3\n                    </MenuItem>\n                    <MenuItem value={4} key={4}>\n                      Zone 4\n                    </MenuItem>\n                    <MenuItem value={5} key={5}>\n                      Zone 5\n                    </MenuItem>\n                    <MenuItem value={6} keuy={6}>\n                      Zone 6\n                    </MenuItem>\n                    <MenuItem value={7} key={7}>\n                      Zone 7\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n                <div className=\"col-md-12 row\">\n                  <LiveLocation />\n                </div>\n              </div>\n              <div className=\"col-md-6 col-sm-12 row\">\n                <AutoComplete />\n                <div className=\"col-md-12 text-left\">\n                  <LocationToggleComponent />\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div\n                className=\"col-md-6 offset-md-6 col-sm-12 row\"\n                style={{ textAlign: \"left\" }}\n              ></div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6 offset-md-6 col-sm-12\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6 col-sm-12\">\n          <MapComponent width=\"100%\" height=\"100%\" minzoom={4} maxzoom={20} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationComponent;\n","import React from \"react\";\nimport TerrainIcon from \"@material-ui/icons/Terrain\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { Context } from \"../../store/Store\";\nimport { Typography } from \"@material-ui/core\";\nimport { Waves, LocalDrink } from \"@material-ui/icons\";\n\nconst SoilConditions = props => {\n  const [state, dispatch] = React.useContext(Context);\n  const [drainageChange, setDrainageChange] = React.useState(false);\n  const [floodingChange, setFloodingChange] = React.useState(false);\n  const [caller, setCaller] = React.useState(\"\");\n  const [defaultDrainageMark, setDefaultDrainageMark] = React.useState([\n    50,\n    100\n  ]);\n  const [defaultFloodingMark, setDefaultFloodingMark] = React.useState([\n    50,\n    100\n  ]);\n  const [drainageValueCopy, setDrainageValueCopy] = React.useState({\n    initial: 0,\n    final: 0\n  });\n  const [floodingValueCopy, setfloodingValueCopy] = React.useState({\n    initial: 0,\n    final: 0\n  });\n  const [drainageMarkText, setDrainageMarkText] = React.useState(``);\n\n  const getDrainageText = () => {\n    let startObj = drainageDictionary.find(\n      obj => obj.value == defaultDrainageMark[0]\n    );\n    // console.log(\"startObj\", startObj);\n    let endObj = drainageDictionary.find(\n      obj => obj.value == defaultDrainageMark[1]\n    );\n\n    setDrainageMarkText(`Between ${startObj.label} and ${endObj.label}`);\n    // setDrainageMarkText(\"hello\");\n  };\n\n  const drainageDictionary = [\n    {\n      value: 12.5,\n      label: \"Very poorly drained\"\n    },\n    {\n      value: 25,\n      label: \"Poorly drained\"\n    },\n    {\n      value: 37.5,\n      label: \"Somewhat poorly drained\"\n    },\n    {\n      value: 50,\n      label: \"Moderately well drained\"\n    },\n    {\n      value: 62.5,\n      label: \"Well drained\"\n    },\n    {\n      value: 75,\n      label: \"Excessively drained\"\n    },\n    {\n      value: 87.5,\n      label: \"Saturated muck\"\n    },\n    {\n      value: 100,\n      label: \"Well drained muck\"\n    }\n  ];\n\n  const [drainageMarks, setDrainageMarks] = React.useState([\n    {\n      value: 12.5\n      // label: \"Very poorly drained\"\n    },\n    {\n      value: 25\n      // label: \"Poorly drained\"\n    },\n    {\n      value: 37.5\n      // label: \"Somewhat poorly drained\"\n    },\n    {\n      value: 50\n      // label: \"Moderately well drained\"\n    },\n    {\n      value: 62.5\n      // label: \"Well drained\"\n    },\n    {\n      value: 75\n      // label: \"Excessively drained\"\n    },\n    {\n      value: 87.5\n      // label: \"Saturated muck\"\n    },\n    {\n      value: 100\n      // label: \"Well drained muck\"\n    }\n  ]);\n\n  React.useEffect(() => {\n    if (props.caller) {\n      setCaller(props.caller);\n    } else {\n      setCaller(\"\");\n    }\n\n    if (state.soilData.Drainage_Class.length > 0) {\n      getDrainageText();\n      setDefaultDrainageMark([\n        drainageDictionary.find(\n          obj => obj.label === state.soilData.Drainage_Class[0]\n        ).value,\n        drainageDictionary.find(\n          obj => obj.label === state.soilData.Drainage_Class[1]\n        ).value\n      ]);\n      setDrainageValueCopy({\n        initial: drainageDictionary.find(\n          obj => obj.label === state.soilData.Drainage_Class[0]\n        ).value,\n        final: drainageDictionary.find(\n          obj => obj.label === state.soilData.Drainage_Class[1]\n        ).value\n      });\n    }\n  }, [props, drainageChange]);\n\n  // const drainageMarks = [\n  //   {\n  //     value: 0,\n  //     label: \"Poorly drained\"\n  //   },\n  //   {\n  //     value: 50,\n  //     label: \"Moderately well drained\"\n  //   },\n  //   {\n  //     value: 100,\n  //     label: \"Well drained\"\n  //   }\n  // ];\n\n  const floodingMarks = [\n    {\n      value: 0,\n      label: \"Poor\"\n    },\n    {\n      value: 50,\n      label: \"Moderate\"\n    },\n    {\n      value: 100,\n      label: \"Good\"\n    }\n  ];\n\n  return state.markers.length > 1 ? (\n    <div className=\"row\">\n      <div className=\"col-lg-12\">\n        <h1>Soil Conditions?</h1>\n      </div>\n      <div className=\"col-lg-12 mt-2\">\n        <h6 className=\"font-weight-bold text-uppercase text-left\">\n          <TerrainIcon /> &nbsp;&nbsp;SOILS COMPOSITION\n        </h6>\n        {caller == \"greenbar\" ? (\n          <p className=\"col-lg-12 text-left\">\n            {state.isSoilDataLoading\n              ? \"Loading..\"\n              : state.soilData.Map_Unit_Name}\n          </p>\n        ) : (\n          <p className=\"offset-lg-1 col-lg-12\">\n            {state.isSoilDataLoading\n              ? \"Loading..\"\n              : state.soilData.Map_Unit_Name}\n          </p>\n        )}\n      </div>\n      <div className=\"col-lg-12 mt-2 row\">\n        <h6 className=\"font-weight-bold text-uppercase text-left col-lg-4 pr-0\">\n          <LocalDrink /> &nbsp;&nbsp;DRAINAGE CLASS\n        </h6>\n        <div className=\"col-lg-8 pl-1\">\n          {drainageChange ? (\n            defaultDrainageMark[0] !== drainageValueCopy.initial ||\n            defaultDrainageMark[1] !== drainageValueCopy.final ? (\n              <h6 className=\"font-weight-bolder text-uppercase text-left\">\n                {\" \"}\n                <span className=\"text-danger\">VALUES CHANGED</span>&nbsp;&nbsp;\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    setDefaultDrainageMark([\n                      drainageValueCopy.initial,\n                      drainageValueCopy.final\n                    ]);\n                    setDrainageChange(false);\n                  }}\n                >\n                  RESET\n                </span>\n              </h6>\n            ) : (\n              \"\"\n            )\n          ) : (\n            \"\"\n          )}\n        </div>\n        {caller == \"greenbar\" ? (\n          //    <Slider\n          //    value={value}\n          //    onChange={handleChange}\n          //    valueLabelDisplay=\"auto\"\n          //    aria-labelledby=\"range-slider\"\n          //    getAriaValueText={valuetext}\n          //  />\n          <div className=\"drainageSlider col-lg-12\">\n            <Slider\n              color=\"secondary\"\n              valueLabelDisplay=\"auto\"\n              onChangeCommitted={(e, mark) => {\n                // console.log(mark);\n\n                setDrainageChange(true);\n                setDefaultDrainageMark(mark);\n              }}\n              aria-labelledby=\"drainange-slider\"\n              // getAriaValueText={state.soilData.Drainage_Class[0]}\n              value={defaultDrainageMark}\n              marks={drainageMarks}\n              min={drainageMarks[0].value}\n              max={drainageMarks[7].value}\n              step={null}\n            />\n            <span>{drainageMarkText}</span>\n            {/* <Slider\n              defaultValue={50}\n              // getAriaValueText={}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={25}\n              marks\n              min={0}\n              max={100}\n            /> */}\n            {/* <p className=\"text-center text-uppercase\">WELL DRAINED</p> */}\n          </div>\n        ) : (\n          <div className=\"drainageSlider col-lg-11 offset-lg-1\">\n            <Slider\n              color=\"secondary\"\n              valueLabelDisplay=\"auto\"\n              onChangeCommitted={(e, mark) => {\n                console.log(mark);\n\n                setDrainageChange(true);\n                setDefaultDrainageMark(mark);\n              }}\n              aria-labelledby=\"drainange-slider\"\n              // getAriaValueText={state.soilData.Drainage_Class[0]}\n              value={defaultDrainageMark}\n              marks={drainageMarks}\n              min={drainageMarks[0].value}\n              max={drainageMarks[7].value}\n              step={null}\n            />\n            <span>{drainageMarkText}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"col-lg-12 mt-2 row\">\n        <h6 className=\"font-weight-bold text-uppercase text-left col-lg-4 pr-0\">\n          <Waves /> &nbsp;&nbsp;FLOODING\n        </h6>\n        <div className=\"col-lg-8 pl-1\">\n          {floodingChange ? (\n            defaultFloodingMark[0] !== floodingValueCopy.initial ||\n            defaultFloodingMark[1] !== floodingValueCopy.final ? (\n              <h6 className=\"font-weight-bolder text-uppercase text-left\">\n                {\" \"}\n                <span className=\"text-danger\">VALUES CHANGED</span>&nbsp;&nbsp;\n                <span\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    // setDefaultFloodingMark([\n                    //   floodingValueCopy.initial,\n                    //   floodingValueCopy.final\n                    // ]);\n                    // TODO: get this data from state\n                    setDefaultFloodingMark([50, 100]);\n\n                    setFloodingChange(false);\n                  }}\n                >\n                  RESET\n                </span>\n              </h6>\n            ) : (\n              \"\"\n            )\n          ) : (\n            \"\"\n          )}\n        </div>\n        {caller == \"greenbar\" ? (\n          <div className=\"floodingSlider col-lg-12\">\n            {/*TODO: invert doesnt work */}\n            <Slider\n              color=\"secondary\"\n              valueLabelDisplay=\"auto\"\n              onChangeCommitted={(e, mark) => {\n                console.log(mark);\n                setFloodingChange(true);\n                setDefaultFloodingMark(mark);\n              }}\n              aria-labelledby=\"flooding-slider\"\n              // getAriaValueText={state.soilData.Drainage_Class[0]}\n              value={[1, 2]}\n              marks={floodingMarks}\n              // min={drainageMarks[0].value}\n              // max={drainageMarks[7].value}\n              step={null}\n              min={0}\n              max={2}\n            />\n            {/* <p className=\"text-center text-uppercase\">NONE</p> */}\n          </div>\n        ) : (\n          <div className=\"floodingSlider col-lg-11 offset-lg-1\">\n            <Slider\n              color=\"secondary\"\n              valueLabelDisplay=\"auto\"\n              onChangeCommitted={(e, mark) => {\n                console.log(mark);\n                setFloodingChange(true);\n                setDefaultFloodingMark(mark);\n              }}\n              aria-labelledby=\"flooding-slider\"\n              // getAriaValueText={state.soilData.Drainage_Class[0]}\n              value={defaultFloodingMark}\n              marks={floodingMarks}\n              // min={drainageMarks[0].value}\n              // max={drainageMarks[7].value}\n              step={50}\n              min={0}\n              max={100}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  ) : (\n    <div className=\"row\">\n      <div className=\"col-lg-12\">\n        <h1>Soil Conditions?</h1>\n      </div>\n      <div className=\"col-lg-12\">\n        <Typography variant=\"body1\" component=\"p\">\n          Please select your field from the map using the polygon icon.\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default SoilConditions;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton } from \"../../shared/constants\";\n// import Slider from \"@material-ui/core/Slider\";\nimport { Cloud, Info } from \"@material-ui/icons\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  //   FormControlLabel,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  CircularProgress,\n  Tooltip\n} from \"@material-ui/core\";\n\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport WeatherModal from \"./WeatherModal\";\n\nconst isEquivalent = (a, b) => {\n  // Create arrays of property names\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  // If number of properties is different,\n  // objects are not equivalent\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    // If values of same property are not equal,\n    // objects are not equivalent\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n\n  // If we made it this far, objects\n  // are considered equivalent\n  return true;\n};\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst WeatherConditions = props => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [didChange, setDidChange] = useState(false);\n\n  const [caller, setCaller] = React.useState(\"\");\n\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay\n        }\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual //inches\n      },\n      frostFreeDays: frostFreeDays\n    };\n    if (!isEquivalent(broadcastObject, state.weatherData)) {\n      // boardcast and close modal\n      setDidChange(true);\n      dispatch({\n        type: \"UPDATE_WEATHER_CONDITIONS\",\n        data: { weatherData: broadcastObject }\n      });\n    }\n\n    setOpen(false);\n\n    // data incorrect\n\n    // show error on modal\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n\n    setFirstFrostMonth(state.weatherData.averageFrost.firstFrostDate.month);\n    setFirstFrostDay(state.weatherData.averageFrost.firstFrostDate.day);\n    setLastFrostDay(state.weatherData.averageFrost.lastFrostDate.day);\n    setLastFrostMonth(state.weatherData.averageFrost.lastFrostDate.month);\n\n    setAveragePrecipitation({\n      thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n      annual: state.weatherData.averagePrecipitation.annual\n    });\n\n    setFrostFreeDays(state.weatherData.frostFreeDays);\n\n    if (props.caller) {\n      setCaller(props.caller);\n    } else {\n      setCaller(\"\");\n    }\n  }, [state.weatherData, props.caller]);\n  const [open, setOpen] = useState(false);\n\n  const handleModalOpen = () => {\n    setOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setOpen(false);\n  };\n\n  const getPickerValue = value => {\n    console.log(value);\n  };\n\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n\n  return state.ajaxInProgress ? (\n    <CircularProgress />\n  ) : (\n    <div className=\"row\">\n      <div className=\"col-lg-12\">\n        <h1>Weather Conditions?</h1>\n      </div>\n      <div className=\"mt-2 row\">\n        <div className=\"col-lg-5 pr-1\">\n          <h6 className=\"font-weight-bold text-uppercase\">\n            <Cloud />\n            &nbsp; HISTORICAL WEATHER &nbsp;\n            <Tooltip\n              title={\n                <div>\n                  Source{\": \"}\n                  <a\n                    href=\"#\"\n                    // target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    SSURGO\n                  </a>\n                </div>\n              }\n              interactive\n              arrow\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip>\n          </h6>\n        </div>\n        <div className=\"col-lg-7 pl-1 text-left\">\n          <Typography\n            variant=\"button\"\n            className=\"font-weight-bold text-uppercase text-left\"\n            onClick={handleModalOpen}\n            style={{ cursor: \"pointer\" }}\n          >\n            CLICK TO EDIT\n          </Typography>\n\n          {/* <Button onClick={renderModalWidget}>CLICK TO EDIT</Button> */}\n        </div>\n\n        <div className=\"offset-lg-1 col-lg-11 text-left\">\n          Average Frost Dates\n          <div className=\"offset-lg-1\">\n            First Frost Date:{\" \"}\n            <b>{`${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day}`}</b>\n          </div>\n          <div className=\"offset-lg-1\">\n            {\" \"}\n            Last Frost Date:{\" \"}\n            <b>{`${state.weatherData.averageFrost.lastFrostDate.month} ${state.weatherData.averageFrost.lastFrostDate.day}`}</b>\n          </div>\n          <div className=\"text-right font-size-small\">\n            {/* <Tooltip\n              title={\n                <div>\n                  Source{\": \"}\n                  <a\n                    href=\"#\"\n                    // target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    NOAA\n                  </a>\n                </div>\n              }\n              interactive\n              arrow\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip> */}\n          </div>\n        </div>\n        <div className=\"offset-lg-1 col-lg-11 text-left\">\n          Average Precipitation\n          <div className=\"offset-lg-1\">\n            {currentMonthFull}:{\" \"}\n            <b>{state.weatherData.averagePrecipitation.thisMonth} inches</b>\n          </div>\n          <div className=\"offset-lg-1\">\n            Annual:{\" \"}\n            <b>{state.weatherData.averagePrecipitation.annual} inches</b>\n          </div>\n          <div className=\"text-right font-size-small\">\n            {/* <Tooltip\n              title={\n                <div>\n                  Source{\": \"}\n                  <a\n                    href=\"#\"\n                    // target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    NOAA\n                  </a>\n                </div>\n              }\n              interactive\n              arrow\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip> */}\n          </div>\n        </div>\n        <div className=\"offset-lg-1 col-lg-11 text-left\">\n          Frost Free Days: <b>{state.weatherData.frostFreeDays}</b>\n          <div className=\"text-right font-size-small\">\n            {/* <Tooltip\n              title={\n                <div>\n                  Source{\": \"}\n                  <a\n                    href=\"#\"\n                    // target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    SSURGO\n                  </a>\n                </div>\n              }\n              interactive\n              arrow\n            >\n              <Info fontSize=\"small\" />\n            </Tooltip> */}\n            {/* (source: SSURGO <Info className=\"font-size-small\" /> ) */}\n          </div>\n        </div>\n      </div>\n\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"ransition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleModalClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={open}>\n          <div className={`modalContainer ${classes.paper}`}>\n            <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n            <div id=\"transition-modal-description\">\n              <div className=\"container-fluid\">\n                <FormGroup>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Average Frost Dates</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"age-native-simple\">\n                          First Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"First Frost Month\"\n                          native\n                          value={firstFrostMonth}\n                          onChange={event => {\n                            setFirstFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"age\",\n                            id: \"age-native-simple\"\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option value={moment(val, \"MMM\").format(\"MMMM\")}>\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"First Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          multiLine={true}\n                          maxLength={2}\n                          id=\"margin-none\"\n                          value={firstFrostDay}\n                          onChange={event => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFirstFrostDay(\"\");\n                              } else\n                                setFirstFrostDay(parseInt(event.target.value));\n                            } else {\n                              setFirstFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl style={{ width: \"100%\" }}>\n                        <InputLabel htmlFor=\"last-frost-month\">\n                          Last Frost Month\n                        </InputLabel>\n                        <Select\n                          label=\"Last Frost Month\"\n                          native\n                          value={lastFrostMonth}\n                          onChange={event => {\n                            setLastFrostMonth(event.target.value);\n                          }}\n                          inputProps={{\n                            name: \"last-frost-month\",\n                            id: \"last-frost-month\"\n                          }}\n                        >\n                          {months.map((val, key) => (\n                            <option value={moment(val, \"MMM\").format(\"MMMM\")}>\n                              {val}\n                            </option>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label=\"Last Frost Day\"\n                          type=\"number\"\n                          max=\"31\"\n                          min=\"1\"\n                          multiLine={true}\n                          maxLength={2}\n                          value={lastFrostDay}\n                          onChange={event => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setLastFrostDay(\"\");\n                              } else\n                                setLastFrostDay(parseInt(event.target.value));\n                            } else {\n                              setLastFrostDay(1);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">\n                        Average Precipitation\n                      </Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={currentMonthFull}\n                          type=\"number\"\n                          step=\"0.01\"\n                          multiLine={true}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.thisMonth}\n                          onChange={event => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                // setFirstFrostDay(\"\");\n\n                                setAveragePrecipitation({\n                                  ...averagePrecipitation,\n                                  thisMonth: parseFloat(\n                                    state.weatherData.averagePrecipitation\n                                      .thisMonth\n                                  )\n                                });\n                              } else\n                                setAveragePrecipitation({\n                                  ...averagePrecipitation,\n                                  thisMonth: parseFloat(event.target.value)\n                                });\n                            } else {\n                              setAveragePrecipitation(...averagePrecipitation, {\n                                thisMonth: parseFloat(\n                                  state.weatherData.averagePrecipitation\n                                    .thisMonth\n                                )\n                              });\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Annual\"}\n                          type=\"number\"\n                          step=\"0.01\"\n                          multiLine={true}\n                          maxLength={4}\n                          helperText=\"Inches\"\n                          value={averagePrecipitation.annual}\n                          onChange={event => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setAveragePrecipitation({\n                                  ...averagePrecipitation,\n                                  annual: parseFloat(\n                                    state.weatherData.averagePrecipitation\n                                      .annual\n                                  )\n                                });\n                              } else\n                                setAveragePrecipitation({\n                                  ...averagePrecipitation,\n                                  annual: parseFloat(event.target.value)\n                                });\n                            } else {\n                              setAveragePrecipitation(...averagePrecipitation, {\n                                annual: parseFloat(\n                                  state.weatherData.averagePrecipitation.annual\n                                )\n                              });\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                      </FormControl>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-12\">\n                      <Typography variant=\"h6\">Frost Free Days</Typography>\n                    </div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <FormControl>\n                        <TextField\n                          label={\"Frost Free Days\"}\n                          type=\"number\"\n                          step=\"0.01\"\n                          multiLine={true}\n                          maxLength={4}\n                          value={frostFreeDays}\n                          onChange={event => {\n                            if (!isNaN(event.target.value)) {\n                              if (event.target.value === \"\") {\n                                setFrostFreeDays(0);\n                              } else\n                                setFrostFreeDays(parseInt(event.target.value));\n                            } else {\n                              setFrostFreeDays(0);\n                            }\n                          }}\n                          className={classes.textField}\n                        />\n                      </FormControl>\n                    </div>\n                    <div className=\"col-6\"></div>\n                  </div>\n                  <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                      <LightButton\n                        disabled={modalBtnDisabled}\n                        onClick={validateAndBroadcastModalData}\n                      >\n                        update\n                      </LightButton>\n                    </div>\n                  </div>\n                </FormGroup>\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n};\n\nexport default WeatherConditions;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Modal,\n  makeStyles,\n  Fade,\n  Backdrop,\n  FormGroup,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select\n} from \"@material-ui/core\";\n\nimport moment from \"moment\";\nimport { Context } from \"../../store/Store\";\nimport { LightButton } from \"../../shared/constants\";\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst WeatherModal = props => {\n  const classes = useStyles();\n\n  const [state, dispatch] = useContext(Context);\n  const [open, setOpen] = useState(props.open);\n  const [modalBtnDisabled, setModalBtnDisabled] = useState(false);\n  const [months, setMonths] = useState([]);\n  const [currentMonthFull, setCurrentMonthFull] = useState(\"NOVEMBER\");\n  const [firstFrostMonth, setFirstFrostMonth] = useState(\n    state.weatherData.averageFrost.firstFrostDate.month\n  );\n  const [firstFrostDay, setFirstFrostDay] = useState(\n    state.weatherData.averageFrost.firstFrostDate.day\n  );\n  const [lastFrostMonth, setLastFrostMonth] = useState(\n    state.weatherData.averageFrost.lastFrostDate.month\n  );\n  const [lastFrostDay, setLastFrostDay] = useState(\n    state.weatherData.averageFrost.lastFrostDate.day\n  );\n\n  const [averagePrecipitation, setAveragePrecipitation] = useState({\n    thisMonth: state.weatherData.averagePrecipitation.thisMonth,\n    annual: state.weatherData.averagePrecipitation.annual\n  });\n\n  const [frostFreeDays, setFrostFreeDays] = useState(\n    state.weatherData.frostFreeDays\n  );\n\n  const validateAndBroadcastModalData = () => {\n    // validate existing data\n\n    // TODO: Validate Modal Data\n\n    // data correct\n\n    let broadcastObject = {\n      averageFrost: {\n        firstFrostDate: {\n          month: firstFrostMonth,\n          day: firstFrostDay\n        },\n        lastFrostDate: {\n          month: lastFrostMonth,\n          day: lastFrostDay\n        }\n      },\n      averagePrecipitation: {\n        thisMonth: averagePrecipitation.thisMonth, //inches\n        annual: averagePrecipitation.annual //inches\n      },\n      frostFreeDays: frostFreeDays\n    };\n\n    // boardcast and close modal\n\n    dispatch({\n      type: \"UPDATE_WEATHER_CONDITIONS\",\n      data: { weatherData: broadcastObject }\n    });\n\n    setOpen(!open);\n\n    // data incorrect\n\n    // show error on modal\n  };\n  const handleModalOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleModalClose = () => {\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    // get current month in long form\n    setCurrentMonthFull(moment().format(\"MMMM\"));\n    // render monthsShort on the modal\n    setMonths(moment.localeData().monthsShort());\n  }, []);\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500\n      }}\n    >\n      <Fade in={open}>\n        <div className={`modalContainer ${classes.paper}`}>\n          <h2 id=\"transition-modal-title\">Edit Weather Data</h2>\n          <div id=\"transition-modal-description\">\n            <div className=\"container-fluid\">\n              <FormGroup>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Frost Dates</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"age-native-simple\">\n                        First Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"First Frost Month\"\n                        native\n                        value={firstFrostMonth}\n                        onChange={event => {\n                          setFirstFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"age\",\n                          id: \"age-native-simple\"\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={moment(val, \"MMM\").format(\"MMMM\")}>\n                            {val}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"First Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        id=\"margin-none\"\n                        value={firstFrostDay}\n                        onChange={event => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setFirstFrostDay(\"\");\n                            } else\n                              setFirstFrostDay(parseInt(event.target.value));\n                          } else {\n                            setFirstFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl style={{ width: \"100%\" }}>\n                      <InputLabel htmlFor=\"last-frost-month\">\n                        Last Frost Month\n                      </InputLabel>\n                      <Select\n                        label=\"Last Frost Month\"\n                        native\n                        value={lastFrostMonth}\n                        onChange={event => {\n                          setLastFrostMonth(event.target.value);\n                        }}\n                        inputProps={{\n                          name: \"last-frost-month\",\n                          id: \"last-frost-month\"\n                        }}\n                      >\n                        {months.map((val, key) => (\n                          <option value={val}>{val}</option>\n                        ))}\n                      </Select>\n                    </FormControl>\n\n                    {/* <TextField\n                        label=\"Last Frost Month\"\n                        id=\"margin-none\"\n                        defaultValue=\"Oct\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label=\"Last Frost Day\"\n                        type=\"number\"\n                        max=\"31\"\n                        min=\"1\"\n                        multiLine={true}\n                        maxLength={2}\n                        value={lastFrostDay}\n                        onChange={event => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              setLastFrostDay(\"\");\n                            } else\n                              setLastFrostDay(parseInt(event.target.value));\n                          } else {\n                            setLastFrostDay(1);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Last Frost Day\"\n                        id=\"margin-none\"\n                        defaultValue=\"13\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Average Precipitation</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={currentMonthFull}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.thisMonth}\n                        onChange={event => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(\n                                  state.weatherData.averagePrecipitation\n                                    .thisMonth\n                                )\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                thisMonth: parseFloat(event.target.value)\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              thisMonth: parseFloat(\n                                state.weatherData.averagePrecipitation.thisMonth\n                              )\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"November\"\n                        id=\"margin-none\"\n                        defaultValue=\"3.6 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\">\n                    <FormControl>\n                      <TextField\n                        label={\"Annual\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        helperText=\"Inches\"\n                        value={averagePrecipitation.annual}\n                        onChange={event => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(\n                                  state.weatherData.averagePrecipitation.annual\n                                )\n                              });\n                            } else\n                              setAveragePrecipitation({\n                                ...averagePrecipitation,\n                                annual: parseFloat(event.target.value)\n                              });\n                          } else {\n                            setAveragePrecipitation(...averagePrecipitation, {\n                              annual: parseFloat(\n                                state.weatherData.averagePrecipitation.annual\n                              )\n                            });\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Annual\"\n                        id=\"margin-none\"\n                        defaultValue=\"43 inches\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-12\">\n                    <Typography variant=\"h6\">Frost Free Days</Typography>\n                  </div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <FormControl>\n                      {/* TODO */}\n                      <TextField\n                        label={\"Frost Free Days\"}\n                        type=\"number\"\n                        step=\"0.01\"\n                        multiLine={true}\n                        maxLength={4}\n                        value={frostFreeDays}\n                        onChange={event => {\n                          if (!isNaN(event.target.value)) {\n                            if (event.target.value === \"\") {\n                              // setFirstFrostDay(\"\");\n\n                              setFrostFreeDays(0);\n                            } else\n                              setFrostFreeDays(parseInt(event.target.value));\n                          } else {\n                            setFrostFreeDays(0);\n                          }\n                        }}\n                        className={classes.textField}\n                      />\n                    </FormControl>\n                    {/* <TextField\n                        label=\"Frost Free Days\"\n                        id=\"margin-none\"\n                        defaultValue=\"173\"\n                        className={classes.textField}\n                        helperText=\"\"\n                      /> */}\n                  </div>\n                  <div className=\"col-6\"></div>\n                </div>\n                <div className=\"row mt-4\">\n                  <div className=\"col-6\">\n                    <LightButton\n                      disabled={modalBtnDisabled}\n                      onClick={validateAndBroadcastModalData}\n                    >\n                      update\n                    </LightButton>\n                  </div>\n                </div>\n              </FormGroup>\n            </div>\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default WeatherModal;\n","import React, { useEffect, useContext, Fragment } from \"react\";\nimport { Context } from \"../../../store/Store\";\nimport \"../../../styles/header.scss\";\nimport {\n  locationIcon,\n  zoneIcon,\n  GetMonthString,\n  LightButton,\n  greenBarExpansionPanelHeight\n} from \"../../../shared/constants\";\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\nimport FilterHdrIcon from \"@material-ui/icons/FilterHdr\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport moment from \"moment\";\nimport LocationComponent from \"../../Location/Location\";\nimport SoilConditions from \"../../Location/SoilConditions\";\nimport WeatherConditions from \"../../Location/WeatherConditions\";\n\nconst expansionPanelBaseStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst Greenbar = () => {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [expansionPanelComponent, setExpansionPanelComponent] = React.useState({\n    component: \"\"\n  });\n  useEffect(() => {\n    console.log(\"---Greeenbar.js mounted---\");\n\n    // check if 'greenbarExpanded' === true. If it is true, it should enable\n    if (expansionPanelComponent.component !== \"\") {\n      // click anywhere outside the body of a div should close it\n      // alternatively we can have a close button somewhere in the expanded green bar\n    }\n\n    document.addEventListener(\"click\", evt => {\n      const greenbarExpansionElement = document.getElementById(\n        \"greenBarExpansionPanel\"\n      );\n      // const muiPopover = document.getElementsByClassName(\"MuiPopover-root\")[0];\n      const greenBarParent = document.getElementById(\"greenBarParent\");\n\n      let targetElement = evt.target;\n      // console.log(\n      //   targetElement.constructor.prototype === HTMLBodyElement.prototype\n      // );\n      do {\n        // console.log(\"inside do while\");\n        // console.log(targetElement);\n        if (targetElement == greenBarParent) {\n          // This is a click inside. Do nothing, just return.\n          // console.log(\"Clicked inside!.. do nothing\");\n          return;\n        }\n\n        // Go up the DOM\n        targetElement = targetElement.parentNode;\n        // if (targetElement.constructor.prototype === HTMLBodyElement.prototype) {\n        //   targetElement = greenBarParent;\n        // } else {\n        //   targetElement = targetElement.parentNode;\n        // }\n        // console.log(targetElement);\n      } while (targetElement);\n\n      // This is a click outside.\n      // console.log(\"Clicked outside!\");\n      // close the expansion panel\n      // slideToggle.slideToggle(greenbarExpansionElement, 300);\n      // can we have a close button somewhere ?\n      // greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      // greenbarExpansionElement.style.height = \"0px\";\n      // setExpansionPanelComponent({\n      //   component: \"\"\n      // });\n    });\n  }, []);\n\n  const getAddress = () => {\n    if (state.address === \"\") {\n      return \"\";\n    } else {\n      let address = state.address.split(\",\");\n      // address = address.split(\" \");\n      //console.log(\"address: \" + address[1]);\n      address = `${address[0]}${address[1]}`;\n\n      address = address.substr(0, 20);\n\n      return (\n        <Button onClick={handleAddressBtnClick}>\n          {locationIcon(14, 20)}\n          &nbsp; {address}\n        </Button>\n      );\n    }\n  };\n\n  const getZone = () => {\n    if (state.zoneText === \"\" || parseInt(state.zoneText) === 0) {\n      return \"\";\n    } else\n      return state.address === \"\" ? (\n        \"\"\n      ) : (\n        <Fragment>\n          <Button onClick={handleClick}>\n            {zoneIcon(20, 14)}\n            &nbsp;\n            {state.zone !== 2 ? `Zone ${state.zone}` : `Zone ${state.zone} & 3`}\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleZoneDropdownClose}\n          >\n            <MenuItem onClick={handleZoneDropdownClose} value={2} key={2}>\n              Zone 2 and 3\n            </MenuItem>\n            <MenuItem onClick={handleZoneDropdownClose} value={4} key={4}>\n              Zone 4\n            </MenuItem>\n            <MenuItem onClick={handleZoneDropdownClose} value={5} key={5}>\n              Zone 5\n            </MenuItem>\n            <MenuItem onClick={handleZoneDropdownClose} value={6} key={6}>\n              Zone 6\n            </MenuItem>\n            <MenuItem onClick={handleZoneDropdownClose} value={7} key={7}>\n              Zone 7\n            </MenuItem>\n          </Menu>\n        </Fragment>\n      );\n  };\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleAddressBtnClick = evt => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"location\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\"\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"location\"\n      });\n    }\n\n    // document.getElemen;\n    // }\n  };\n  const handleSoilBtnClick = evt => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n    if (\n      expansionPanelComponent.component === \"soil\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\"\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"soil\"\n      });\n    }\n  };\n\n  const handleWeatherBtnClick = evt => {\n    const greenbarExpansionElement = document.getElementById(\n      \"greenBarExpansionPanel\"\n    );\n\n    if (\n      expansionPanelComponent.component === \"weather\" &&\n      greenbarExpansionElement.style.height ===\n        greenBarExpansionPanelHeight.large\n    ) {\n      // toggle\n      console.log(\"toggled\");\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height = \"0px\";\n      setExpansionPanelComponent({\n        component: \"\"\n      });\n    } else {\n      greenbarExpansionElement.style.transform = \"translate(0px,0px)\";\n      greenbarExpansionElement.style.height =\n        greenBarExpansionPanelHeight.large;\n      setExpansionPanelComponent({\n        component: \"weather\"\n      });\n    }\n  };\n  const getSoil = () => {\n    if (state.soilData.length === 0) {\n      return \"\";\n    } else\n      return (\n        <Button onClick={handleSoilBtnClick}>\n          {<FilterHdrIcon />}\n          &nbsp;{\" \"}\n          {/* {`Soils: Map Unit Name (${state.soilData.Map_Unit_Name}%), Drainage Class: ${state.soilData.Drainage_Class}})`} */}\n          {`Soils: Drainage Class: ${state.soilData.Drainage_Class}`}\n        </Button>\n      );\n  };\n\n  const handleZoneDropdownClose = event => {\n    setAnchorEl(null);\n    let zoneText = \"\";\n    console.log(event.target.getAttribute(\"value\"));\n    let value = event.target.getAttribute(\"value\");\n\n    if (!isNaN(parseInt(value))) {\n      switch (parseInt(value)) {\n        case 2: {\n          zoneText = `Zone ${value} &amp; ${value + 1}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value\n            }\n          });\n          break;\n        }\n        case 4: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value\n            }\n          });\n          break;\n        }\n        case 5: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value\n            }\n          });\n          break;\n        }\n        case 6: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value\n            }\n          });\n          break;\n        }\n        case 7: {\n          zoneText = `Zone ${value}`;\n          dispatch({\n            type: \"UPDATE_ZONE_TEXT\",\n            data: {\n              zoneText: zoneText,\n              zone: value\n            }\n          });\n          break;\n        }\n        default: {\n        }\n      }\n    }\n  };\n\n  const getWeatherData = () => {\n    // TODO: convert month to string, currently returning int\n    // let currentMonth = GetMonthString(month);\n    let currentMonth = moment().format(\"MMM\");\n    // frost free days :-\n    // http://128.192.142.200:3000/hourly?location=raleigh%20nc&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3E0&output=json\n    if (state.weatherData.length === 0) return \"\";\n    else\n      return (\n        <Button onClick={handleWeatherBtnClick}>\n          {<CloudIcon fontSize=\"small\" />}\n          &nbsp;{\" \"}\n          {`Average First Frost: ${state.weatherData.averageFrost.firstFrostDate.month} ${state.weatherData.averageFrost.firstFrostDate.day} | Average Rain(${currentMonth}): ${state.weatherData.averagePrecipitation.thisMonth} in`}\n        </Button>\n      );\n  };\n  return (\n    <div className=\"greenBarParent\" id=\"greenBarParent\">\n      <div className=\"greenBarWrapper\">\n        <div className=\"addressBar\">\n          {state.progress > 0 ? getAddress() : \"\"}\n        </div>\n\n        <div className=\"zoneBar\">{state.progress > 0 ? getZone() : \"\"}</div>\n        <div className=\"soilBar\">{state.progress > 1 ? getSoil() : \"\"}</div>\n        <div className=\"weatherBar\">\n          {state.progress > 1 ? getWeatherData() : \"\"}\n        </div>\n      </div>\n      <div className=\"greenBarExpansionPanel\" id=\"greenBarExpansionPanel\">\n        {/* <Button>Close</Button> */}\n\n        {expansionPanelComponent.component === \"location\" ? (\n          <LocationComponent />\n        ) : expansionPanelComponent.component === \"soil\" ? (\n          <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n            <div className=\"boxContainerRow\">\n              <SoilConditions caller=\"greenbar\" />\n            </div>\n          </div>\n        ) : expansionPanelComponent.component == \"weather\" ? (\n          <div className=\"container mt-5\" style={expansionPanelBaseStyle}>\n            <div className=\"boxContainerRow\">\n              <WeatherConditions caller=\"greenbar\" />\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {/* <LightButton>CLOSE</LightButton> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Greenbar;\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { cloudIcon } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { InfoRounded, Info } from \"@material-ui/icons\";\nimport { Tooltip } from \"@material-ui/core\";\n\nconst apiBaseURL = \"https://api.openweathermap.org/data/2.5/weather\";\nconst apiBaseURL_weather_gov =\n  \"https://api.weather.gov/points/39.7456,-97.0892\";\nconst apiKey = \"***REMOVED***\";\n\nconst geocodeAuth = \"***REMOVED***\";\n\n// TODO: look at https://agromonitoring.com/ api\n\nconst ForecastComponent = () => {\n  const [state, dispatch] = useContext(Context);\n  const [show, setShow] = useState(false);\n  const [temp, setTemp] = useState({\n    min: 0,\n    max: 0,\n    unit: \"F\",\n    iconURL: `https://placehold.it/20x20`,\n    iconDescription: \"No Data\"\n  });\n  // const [loading, setLoading] = useState\n\n  useEffect(() => {\n    console.log(\"---forecastComponent---\");\n    setShowFeatures();\n    // state.progress >= 1 ? setShowFeatures(true) : setShow(false);\n    // fetchOldApi().then(data => {\n    //   console.log(data);\n    //   let url = data.properties.forecast;\n    //   fetchOldApiRecords(url).then(data => {\n    //     console.log(\"forecast\", data);\n    //   });\n    // });\n  }, [state.markers || state.progress]);\n\n  //   const fetchOldApi = async () => {\n  //     return (await fetch(apiBaseURL_weather_gov)).json();\n  //   };\n\n  //   const fetchOldApiRecords = async url => {\n  //     return (await fetch(url, { cache: \"no-cache\", mode: \"no-cors\" })).json();\n  //   };\n\n  const setShowFeatures = () => {\n    // get lat long\n    let latlng = [];\n    try {\n      latlng = state.markers[0];\n    } catch (e) {\n      console.trace(\"Forecast Component\", e);\n\n      latlng = [];\n    }\n\n    let apiCall = callWeatherApi(apiBaseURL, latlng);\n\n    apiCall.then(data => {\n      let iconId = data.weather[0].icon;\n      let iconDescription = new String(data.weather[0].description);\n\n      let tempObj = {\n        min: data.main.temp_min,\n        max: data.main.temp_max,\n        unit: \"F\",\n        iconURL: `https://openweathermap.org/img/w/${iconId}.png`,\n        iconDescription: iconDescription\n      };\n      setTemp(tempObj);\n    });\n\n    let data = reverseGEO(latlng[0], latlng[1]);\n    data.then(data => {\n      console.log(data);\n      let addressString = ``;\n      if (data.staddress) {\n        addressString = `${data.staddress}, ${data.state}`;\n      }\n      dispatch({\n        type: \"CHANGE_ADDRESS\",\n        data: {\n          address: addressString,\n          addressVerified: true\n        }\n      });\n    });\n  };\n\n  const callWeatherApi = async (url, latlng) => {\n    let fetchData = await fetch(makeURLString(url, latlng));\n    let jsonData = await fetchData.json();\n    return jsonData;\n  };\n\n  const makeURLString = (url, params) => {\n    return `${url}?lat=${params[0]}&lon=${params[1]}&appid=${apiKey}&units=imperial`;\n  };\n\n  const reverseGEO = async (lat, lng) => {\n    let url = `https://geocode.xyz/${lat},${lng}?json=1`;\n    let data = await fetch(url);\n    data = data.json();\n\n    return data;\n    // let ltlng =\n  };\n\n  return state.progress >= 1 ? (\n    <Fragment>\n      Forecast:\n      {/* <span>{cloudIcon(14, 20)}</span> */}\n      <img\n        width=\"50\"\n        height=\"50\"\n        src={temp.iconURL}\n        alt={temp.iconDescription}\n        title={temp.iconDescription}\n      />\n      {Number(temp.max.toFixed(1))} | {Number(temp.min.toFixed(1))}&nbsp;\n      {temp.unit}\n      <span className=\"ml-2\">\n        <Tooltip\n          title={\n            <div>\n              Source{\": \"}\n              <a\n                href=\"https://openweathermap.org/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                openweathermap.org\n              </a>\n            </div>\n          }\n          interactive\n          arrow\n        >\n          <Info fontSize=\"small\" />\n        </Tooltip>\n      </span>\n    </Fragment>\n  ) : (\n    \"\"\n  );\n};\n\nexport default ForecastComponent;\n","import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport \"../../styles/header.scss\";\nimport DateComponent from \"./DateComponent\";\nimport Greenbar from \"./Greenbar/Greenbar\";\nimport { cloudIcon, abbrRegion } from \"../../shared/constants\";\nimport {\n  MDBNavbar,\n  MDBContainer,\n  MDBHamburgerToggler,\n  MDBCollapse,\n  MDBNavbarNav,\n  MDBNavItem\n} from \"mdbreact\";\nimport { Button, Badge } from \"@material-ui/core\";\nimport { Redirect, Link, useHistory, NavLink } from \"react-router-dom\";\nimport ForecastComponent from \"./ForecastComponent\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\n\nvar sentimentAnalysis = require(\"sentiment-analysis\");\n// import { Link, Button } from \"@material-ui/core\";\nconst Header = () => {\n  let history = useHistory();\n  const [state, dispatch] = useContext(Context);\n  const [collapse, setCollapse] = React.useState(false);\n  const [isRoot, setIsRoot] = React.useState(false);\n  const [redirectToRoot, setRedirectToRoot] = React.useState(false);\n  let isActive = {};\n\n  const getAddressFromMarkers = async (lat, lon) => {\n    return (await fetch(`https://geocode.xyz/${lat},${lon}?geoit=json`)).json();\n  };\n\n  useEffect(() => {\n    console.log(\"---Header.js---\");\n\n    // update address on marker change\n    // ref forecastComponent\n    let { markers } = state;\n    let lat = markers[0][0];\n    let lon = markers[0][1];\n\n    // let addressObjectPromise = getAddressFromMarkers(lat, lon);\n    // addressObjectPromise.then(data => {\n    //   console.log(\"addressObject\", data);\n    // });\n    // since this updates with state; ideally, weather and soil info should be updated here\n\n    // get current lat long and get county, state and city\n    // if (isRoot && state.progress < 4 && state.progress > 1) {\n    if (state.progress >= 2 && state.markers.length > 0) {\n      let Map_Unit_Name, Drainage_Class, Flooding_Frequency, Ponding_Frequency;\n\n      let markersCopy = markers;\n      console.log(\"Inital: \", markers);\n\n      let longLatString = \"\";\n\n      markersCopy.map((val, i) => {\n        // get long lat formatted as requested by SSURGO (long lat, long lat, ...)\n        // saved as longLatString\n\n        if (i === markersCopy.length - 1) {\n          longLatString +=\n            markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\" + lon + \" \" + lat;\n        } else {\n          longLatString += markersCopy[i][1] + \" \" + markersCopy[i][0] + \",\";\n        }\n      });\n      // console.log(longLatString);\n\n      // let soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, muag.pondfreqprs AS Ponding_Frequency, mp.mupolygonkey as MPKEY FROM mapunit AS mu INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('polygon ((${longLatString}))')) AND mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))`;\n      let soilDataQuery = `SELECT mu.mukey AS MUKEY, mu.muname AS Map_Unit_Name, muag.drclassdcd AS Drainage_Class, muag.flodfreqdcd AS Flooding_Frequency, mp.mupolygonkey as MPKEY\n     FROM mapunit AS mu \n     INNER JOIN muaggatt AS muag ON muag.mukey = mu.mukey\n     INNER JOIN mupolygon AS mp ON mp.mukey = mu.mukey\n     WHERE mu.mukey IN (SELECT * from SDA_Get_Mukey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))\n     AND\n     mp.mupolygonkey IN  (SELECT * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('polygon ((${longLatString}))'))`;\n      // console.log(soilDataQuery);\n      var myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n      var urlencoded = new URLSearchParams();\n      urlencoded.append(\"query\", soilDataQuery);\n      urlencoded.append(\"format\", \"json+columnname\");\n\n      var requestOptions = {\n        method: \"POST\",\n        headers: myHeaders,\n        body: urlencoded,\n        redirect: \"follow\"\n      };\n      if (markers.length > 1) {\n        dispatch({\n          type: \"TOGGLE_SOIL_LOADER\",\n          data: {\n            isSoilDataLoading: true\n          }\n        });\n\n        fetch(\n          \"https://sdmdataaccess.sc.egov.usda.gov/Tabular/post.rest\",\n          requestOptions\n        )\n          .then(response => response.json())\n          .then(result => {\n            // success\n            console.log(\"SSURGO: \", result);\n\n            if (result !== {}) {\n              // TODO: Sentiment check\n              // console.log(\n              //   \"Sentiment for drainage_class\",\n              //   sentimentAnalysis(Drainage_Class)\n              // );\n              Map_Unit_Name = result[\"Table\"][1][1];\n              Drainage_Class = result[\"Table\"][1][2];\n              Flooding_Frequency = result[\"Table\"][1][3];\n              Ponding_Frequency = result[\"Table\"][1][4];\n              let mapUnitString = \"\";\n              // result[\"Table\"].forEach(element => {\n              //   console.log(\"From foreach: \", element);\n\n              // });\n\n              let stringSplit = [];\n\n              result[\"Table\"].map((el, index) => {\n                if (index !== 0) {\n                  // if (index < result[\"Table\"].length) {\n                  // mapUnitString += el[1].split(\",\") + \",\";\n                  // } else {\n                  if (stringSplit.indexOf(el[1].split(\",\")[0]) === -1) {\n                    stringSplit.push(el[1].split(\",\")[0]);\n                  }\n                }\n                // }\n              });\n\n              // console.log(stringSplit);\n              const filteredArr = stringSplit.filter(elm => elm);\n              mapUnitString = filteredArr.join(\", \");\n\n              let drainageClasses = [];\n              result[\"Table\"].map((el, index) => {\n                if (index !== 0) {\n                  if (drainageClasses.indexOf(el[2]) === -1) {\n                    drainageClasses.push(el[2]);\n                  }\n                }\n              });\n              drainageClasses = drainageClasses.filter(function(el) {\n                return el != null;\n              });\n              console.log(drainageClasses);\n\n              dispatch({\n                type: \"UPDATE_SOIL_DATA\",\n                data: {\n                  Map_Unit_Name: mapUnitString,\n                  Drainage_Class: drainageClasses,\n                  Flooding_Frequency: Flooding_Frequency,\n                  Ponding_Frequency: Ponding_Frequency\n                }\n              });\n            }\n\n            dispatch({\n              type: \"TOGGLE_SOIL_LOADER\",\n              data: {\n                isSoilDataLoading: false\n              }\n            });\n          })\n          .catch(error => console.log(\"SSURGO ERROR\", error));\n      }\n\n      let revAPIURL = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`;\n\n      // console.log(revAPIURL);\n      // if(!state.ajaxInProgress)\n      // {\n\n      // }\n      Axios.get(revAPIURL)\n        .then(async resp => {\n          let city = resp.data.locality.toLowerCase();\n          let zip = resp.data.postcode;\n          let state = abbrRegion(\n            resp.data.principalSubdivision,\n            \"abbr\"\n          ).toLowerCase();\n\n          // call weather API to fetch details\n\n          // Get: Frost Free Days\n          // Dynamic Dates not set!\n          let frostFreeDaysURL = `http://128.192.142.200:3000/hourly?location=${city}%20${state}&start=2015-01-01&end=2019-12-31&stats=count(date)/24/5&where=air_temperature%3e0&output=json`;\n          let frostFreeDays = 0;\n\n          await Axios.get(frostFreeDaysURL)\n            .then(resp => {\n              let frostFreeDaysObject = resp.data[0];\n              for (var key in frostFreeDaysObject) {\n                if (frostFreeDaysObject.hasOwnProperty(key)) {\n                  // alert(key);\n                  frostFreeDays = frostFreeDaysObject[key];\n                }\n              }\n              return { frostFreeDays: frostFreeDays, city: city, state: state };\n            })\n            .then(obj => {\n              dispatch({\n                type: \"UPDATE_FROST_FREE_DAYS\",\n                data: { frostFreeDays: obj.frostFreeDays }\n              });\n\n              return obj;\n            })\n            .then(async obj => {\n              let currentMonthInt = moment().month() + 1;\n\n              // What was the 5-year average rainfall for city st during the month of currentMonthInt?\n              //  Dynamic dates ?\n              let averageRainForAMonthURL = `http://128.192.142.200:3000/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&where=month=${currentMonthInt}&output=json`;\n              // console.log(averageRainForAMonthURL);\n              // What was the 5-year average annual rainfall for city st?\n              let fiveYearAvgRainURL = `http://128.192.142.200:3000/hourly?location=${obj.city}%20${obj.state}&start=2015-01-01&end=2019-12-31&stats=sum(precipitation)/5&output=json`;\n              if (!state.ajaxInProgress) {\n                dispatch({\n                  type: \"SET_AJAX_IN_PROGRESS\",\n                  data: true\n                });\n                await Axios.get(averageRainForAMonthURL)\n                  .then(resp => {\n                    // console.log(resp);\n                    let averagePrecipitationForCurrentMonth =\n                      resp.data[0][\"sum(precipitation)/5\"];\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth\n                    ).toFixed(2);\n                    averagePrecipitationForCurrentMonth = parseFloat(\n                      averagePrecipitationForCurrentMonth * 0.03937\n                    ).toFixed(2);\n                    dispatch({\n                      type: \"UPDATE_AVERAGE_PRECIP_CURRENT_MONTH\",\n                      data: { thisMonth: averagePrecipitationForCurrentMonth }\n                    });\n                  })\n                  .catch(error => {\n                    dispatch({\n                      type: \"SNACK\",\n                      data: {\n                        snackOpen: true,\n                        snackMessage: `Weather API error code: ${error.response.status} for getting 5 year average rainfall for this month`\n                      }\n                    });\n                  });\n\n                if (!state.ajaxInProgress) {\n                  dispatch({\n                    type: \"SET_AJAX_IN_PROGRESS\",\n                    data: true\n                  });\n                  await Axios.get(fiveYearAvgRainURL)\n                    .then(resp => {\n                      let fiveYearAvgRainAnnual =\n                        resp.data[0][\"sum(precipitation)/5\"];\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual\n                      ).toFixed(2);\n                      fiveYearAvgRainAnnual = parseFloat(\n                        fiveYearAvgRainAnnual * 0.03937\n                      ).toFixed(2);\n                      dispatch({\n                        type: \"UPDATE_AVERAGE_PRECIP_ANNUAL\",\n                        data: { annual: fiveYearAvgRainAnnual }\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false\n                      });\n                    })\n                    .catch(error => {\n                      dispatch({\n                        type: \"SNACK\",\n                        data: {\n                          snackOpen: true,\n                          snackMessage: `Weather API error code: ${\n                            error.response.status\n                          } for getting 5 year average rainfall for ${obj.city.toUpperCase()}, ${obj.state.toUpperCase()}`\n                        }\n                      });\n                      dispatch({\n                        type: \"SET_AJAX_IN_PROGRESS\",\n                        data: false\n                      });\n                    });\n                }\n              }\n            });\n        })\n        .then(() => {\n          dispatch({\n            type: \"SET_AJAX_IN_PROGRESS\",\n            data: false\n          });\n        });\n    }\n    // check if isRoot\n\n    if (window.location.pathname === \"/\") {\n      setIsRoot(true);\n      // setRedirectToRoot(true);\n    } else {\n      setIsRoot(false);\n    }\n    // check value of progress state\n\n    switch (state.progress) {\n      case 0:\n        isActive[\"val\"] = 0;\n    }\n\n    // document.getElementsByClassName('.nav-toggle')[0].addEventListener\n\n    if (state.progress > 4) {\n      if (state.cropData.length === 0 && !state.ajaxInProgress) {\n        const headers = new Headers();\n        let airtableUrl = \"\";\n        // example of airtable 'and+or' logic\n        // IF(AND({Attending?} = 1, OR({Dietary Restrictions} = \"Vegan\", {Dietary Restrictions} = \"Vegetarian\")), \"true\")\n        // sort[0][field]=Cover+Crop+Name&sort[0][direction]=asc\n        if (state.selectedGoals.length !== 0) {\n          airtableUrl = `https://api.airtable.com/v0/app2q3UaKHXutMQyt/Cover%20Crops%20Data?sort%5B0%5D%5Bfield%5D=${state.selectedGoals[0]}&sort%5B0%5D%5Bdirection%5D=desc&filterByFormula=NOT(%7BZone+Decision%7D+%3D+'Exclude')`;\n        } else {\n          airtableUrl = `https://api.airtable.com/v0/app2q3UaKHXutMQyt/Cover%20Crops%20Data?filterByFormula=NOT(%7BZone+Decision%7D+%3D+'Exclude')`;\n        }\n        headers.append(\"Authorization\", \"Bearer ***REMOVED***\");\n        headers.append(\"Content-Type\", \"application/json\");\n\n        if (!state.ajaxInProgress) {\n          dispatch({\n            type: \"SET_AJAX_IN_PROGRESS\",\n            data: true\n          });\n\n          fetch(airtableUrl, {\n            headers: headers\n          })\n            .then(response => {\n              return response.json();\n            })\n            .then(data => {\n              dispatch({\n                type: \"PULL_CROP_DATA\",\n                data: data.records\n              });\n              dispatch({\n                type: \"SET_AJAX_IN_PROGRESS\",\n                data: false\n              });\n              // checkCropsAddedToCart();\n            });\n        }\n      }\n    }\n  }, [state.markers, state.progress]);\n\n  const toggleClass = (el, className) => el.classList.toggle(className);\n\n  const burgurClick = () => {\n    toggleClass(document.querySelector(\"body\"), \"nav-open\");\n  };\n\n  const toggleSingleCollapse = () => {\n    setCollapse(!collapse);\n  };\n  const setmyCoverCropActivationFlag = () => {\n    if (window.location.pathname === \"/\") {\n      if (state.progress > 4) {\n        dispatch({\n          type: \"ACTIVATE_MY_COVER_CROP_LIST_TILE\",\n          data: {\n            myCoverCropActivationFlag: true,\n            speciesSelectorActivationFlag: false\n          }\n        });\n      }\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  const setSpeciesSelectorActivationFlag = () => {\n    // if (state.progress) {\n    if (window.location.pathname === \"/\") {\n      console.log(\"pathname\", \"/\");\n      dispatch({\n        type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n        data: {\n          speciesSelectorActivationFlag: true,\n          myCoverCropActivationFlag: false\n        }\n      });\n    } else {\n      // console.log(\"pathname\", window.location.pathname);\n      history.push(\"/\");\n      // return <Redirect to=\"/\" />;\n    }\n\n    // console.log(window.location.pathname);\n    // if (window.location.pathname !== \"/\") {\n    //   setIsRoot(false);\n    //   setRedirectToRoot(true);\n    //   // return <Redirect to=\"/\" />;\n    // } else {\n    //   setIsRoot(true);\n    //   setRedirectToRoot(false);\n    // }\n    // }\n  };\n\n  return redirectToRoot ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <header>\n      <div className=\"topHeader\">\n        <Link to=\"/about\" style={{ color: \"black\" }}>\n          {\" \"}\n          <div>ABOUT</div>\n        </Link>\n        <div onClick={() => window.open(\"http://northeastcovercrops.com\")}>\n          NECCC\n        </div>\n        <div\n          onClick={() =>\n            window.open(\n              \"http://www.nrcs.usda.gov/wps/portal/nrcs/site/national/home/\"\n            )\n          }\n        >\n          USDA NRCS\n        </div>\n        <div onClick={() => window.open(\"http://www.northeastsare.org/\")}>\n          NE SARE\n        </div>\n        <div>HELP</div>\n        <div>FEEDBACK</div>\n      </div>\n      <div className=\"midHeader\">\n        <div\n          className=\"logoContainer\"\n          onClick={() => window.open(\"http://northeastcovercrops.com\")}\n          style={{ cursor: \"pointer\" }}\n        >\n          {/* NECCCLOGO */}\n          {/* <img src={\"/images/neccc_wide_logo_color_web.jpg\"} /> */}\n        </div>\n        <div className=\"dataComponents\">\n          <div>\n            <DateComponent />\n          </div>\n          <div>\n            <ForecastComponent />\n          </div>\n          {/* <div></div> */}\n        </div>\n      </div>\n      <div className=\"bottomHeader\">\n        <Button\n          size=\"large\"\n          component={NavLink}\n          exact\n          to={\"/cover-crop-explorer\"}\n          activeClassName=\"active\"\n        >\n          COVER CROP EXPLORER\n        </Button>\n        <Button\n          // className={state.speciesSelectorActivationFlag ? \"active\" : \"\"}\n          className={\n            isRoot ? (state.speciesSelectorActivationFlag ? \"active\" : \"\") : \"\"\n          }\n          onClick={setSpeciesSelectorActivationFlag}\n          size=\"large\"\n        >\n          SPECIES SELECTOR\n        </Button>\n        <Button\n          size=\"large\"\n          exact\n          component={NavLink}\n          to={\"/mix-maker\"}\n          activeClassName=\"active\"\n        >\n          MIX MAKER\n        </Button>\n        {/* <Button className={state.progress === 3 ? \"active\" : \"\"}> */}\n        <Button\n          size=\"large\"\n          exact\n          component={NavLink}\n          to={\"/seeding-rate-calculator\"}\n          activeClassName=\"active\"\n        >\n          SEEDING RATE CALCULATOR\n        </Button>\n        <Badge\n          badgeContent={\n            state.selectedCrops.length > 0 ? state.selectedCrops.length : 0\n          }\n          color={\"secondary\"}\n        >\n          <Button\n            size=\"large\"\n            className={state.myCoverCropActivationFlag ? \"active\" : \"\"}\n            onClick={setmyCoverCropActivationFlag}\n          >\n            MY COVER CROP LIST\n          </Button>\n        </Badge>\n      </div>\n\n      <MDBNavbar light className=\"ham-navWrapper\">\n        <MDBContainer fluid>\n          <MDBHamburgerToggler\n            color=\"#598443\"\n            id=\"hamburger1\"\n            onClick={() => toggleSingleCollapse()}\n          />\n          <MDBCollapse isOpen={collapse} navbar>\n            <MDBNavbarNav className=\"ham-nav\">\n              <MDBNavItem>COVER CROP EXPLORER</MDBNavItem>\n              <MDBNavItem\n                onClick={setSpeciesSelectorActivationFlag}\n                active={\n                  isRoot\n                    ? state.speciesSelectorActivationFlag\n                      ? true\n                      : false\n                    : false\n                }\n              >\n                SPECIES SELECTOR\n              </MDBNavItem>\n              <MDBNavItem>MIX MAKER</MDBNavItem>\n              <MDBNavItem>SEED RATE CALCULATOR</MDBNavItem>\n              <MDBNavItem\n                onClick={setmyCoverCropActivationFlag}\n                active={state.myCoverCropActivationFlag ? true : false}\n              >\n                MY COVER CROP LIST\n              </MDBNavItem>\n            </MDBNavbarNav>\n          </MDBCollapse>\n        </MDBContainer>\n      </MDBNavbar>\n      {/* </MDBContainer> */}\n      <Greenbar />\n\n      {window.location.pathname === \"/\" ? (\n        state.progress === 0 ? (\n          <div className=\"topBar\"></div>\n        ) : (\n          <div className=\"topBarMuted\"></div>\n        )\n      ) : (\n        <div className=\"topBar\"></div>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from \"react\";\nimport \"../../styles/landing.scss\";\nimport { Context } from \"../../store/Store\";\n// import { Typography, Button } from \"@material-ui/core\";\nimport { LightButton } from \"../../shared/constants\";\n\nconst setWrapperStyle = bg => {\n  return {\n    background: `url(${bg})`,\n    backgroundSize: \"cover\"\n  };\n};\n\nconst Landing = props => {\n  const [state, dispatch] = useContext(Context);\n\n  const incrementProgress = incVal => {\n    incVal = parseInt(incVal);\n    if (incVal === 1) {\n      if (state.progress === 0) {\n        dispatch({\n          type: \"UPDATE_PROGRESS\",\n          data: {\n            type: \"INCREMENT\"\n          }\n        });\n      }\n    }\n  };\n  return (\n    <aside className=\"landingWrapper\" style={setWrapperStyle(props.bg)}>\n      <div className=\"boxWrapper\">\n        <aside className=\"text-left\">\n          <h2>Welcome to the NECCC Cover Crop Decision Support Tools</h2>\n          <p>\n            You are currently interacting with a Beta version of the Cover Crop\n            DSTs. The purpose of this interaction is so that we may gather\n            feedback about the usability and usefulness of these tools. The\n            cover crop data you will see originated in the Midwest Cover Crops\n            Council (MCCC) species selector tool, the USDA Plants database, and\n            a seeding rate calculator developed by NY NRCS. It has been reviewed\n            by cover crop experts in the Northeast in each USDA plant hardiness\n            zone.{\" \"}\n          </p>\n          <p>\n            Please note: these data are still being finalized and are shown here\n            as a preview. Thank you for your time and consideration. We look\n            forward to your feedback and hope to build a pleasant cover crop\n            tool experience that helps you to effectively select and manage your\n            cover crops.\n          </p>\n\n          <p className=\"mt-4\">\n            {\" \"}\n            Thank you for your time and consideration. We look forward to your\n            feedback and hope to build a pleasant cover crop tool experience\n            that helps you to effectively select and manage your cover crops.\n          </p>\n        </aside>\n        <div className=\"nextButton pt-4\">\n          {/* <button onClick={() => incrementProgress(1)}>NEXT</button> */}\n          <LightButton onClick={() => incrementProgress(1)}>NEXT</LightButton>\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Landing;\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../store/Store\";\nimport { LightButton } from \"./constants\";\n\nconst ProgressButtonsInner = props => {\n  let isDisabled = props.disabled;\n\n  const [state, dispatch] = useContext(Context);\n\n  const changeProgress = type => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\"\n        }\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\"\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <LightButton onClick={() => changeProgress(\"decrement\")}>\n        {\" \"}\n        back\n      </LightButton>\n      <LightButton\n        onClick={() => changeProgress(\"increment\")}\n        disabled={isDisabled}\n        className=\"ml-3\"\n      >\n        next\n      </LightButton>\n    </Fragment>\n  );\n};\n\nexport default ProgressButtonsInner;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport ProgressButtonsInner from \"./ProgressButtonsInner\";\n\nconst ProgressButtons = () => {\n  const [state, dispatch] = useContext(Context);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  useEffect(() => {\n    disableLogic();\n  }, [state]);\n  const disableLogic = () => {\n    switch (state.progress) {\n      case 1: {\n        // location selection state\n        if (state.zone === 0 || isNaN(state.zone) || state.address === \"\") {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n        break;\n      }\n      case 4: {\n        // goals selection state\n        if (state.selectedGoals.length > 3) {\n          setIsDisabled(true);\n        } else {\n          setIsDisabled(false);\n        }\n      }\n    }\n  };\n\n  return renderProgressButtons(state.progress, isDisabled);\n};\n\nconst renderProgressButtons = (progress, isDisabled) => {\n  if (progress === 0) return \"\";\n  else {\n    return (\n      <div>\n        <ProgressButtonsInner disabled={isDisabled} />\n      </div>\n    );\n  }\n};\n\nexport default ProgressButtons;\n","import React from \"react\";\n// import { LightButton } from \"./constants\";\nimport { Context } from \"../store/Store\";\nimport \"../styles/progressIndicator.scss\";\n\nconst checkProgressStatus = (actualProgress, expectedProgress) => {\n  if (actualProgress === expectedProgress) {\n    // exact progress\n    return \"progress-step active\";\n  } else if (actualProgress > expectedProgress) {\n    return \"progress-step active\";\n  } else {\n    return \"progress-step\";\n  }\n};\n\nconst ProgressBar = () => {\n  const [state, dispatch] = React.useContext(Context);\n  return (\n    <div className=\"gprogress\">\n      <div className=\"progress-track\">Question {state.progress} of 4</div>\n      <div className=\"progress-diagram\">\n        <div\n          id=\"step1\"\n          className={checkProgressStatus(state.progress, 1)}\n        ></div>\n\n        <div\n          id=\"step2\"\n          className={checkProgressStatus(state.progress, 2)}\n        ></div>\n\n        <div\n          id=\"step3\"\n          className={checkProgressStatus(state.progress, 3)}\n        ></div>\n\n        <div\n          id=\"step4\"\n          className={checkProgressStatus(state.progress, 4)}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { Badge, Chip, Tooltip, Avatar } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nconst GoalTag = props => {\n  const [state, dispatch] = useContext(Context);\n\n  let goalDescription = props.goalDescription;\n  let goalTitle = props.goaltTitle;\n  let key = props.id;\n  let goal = props.goal;\n\n  //   useEffect(() => {\n  //     if (state.selectedGoals.length !== 0) {\n  //       for (let index = 0; index < state.selectedGoals.length; index++) {\n  //         document.getElementById(`chip${index}`).classList.add(\"active\");\n  //       }\n\n  //       // state.selectedGoals.map((goalText, index) {\n  //       //     document.getElementById(`chip${key}`).classList.add(\"active\");\n  //       // });\n  //     }\n  //   }, [state.progress]);\n\n  const updateSelectedGoals = (item, key) => {\n    const goals = [...state.selectedGoals];\n\n    if (goals.indexOf(item.fields[\"Cover Crop Goal\"]) === -1) {\n      // does not exist, dispatch to state and add to local state\n\n      document.getElementById(`chip${key}`).classList.add(\"active\");\n      dispatch({\n        type: \"ADD_SELECTED_GOALS\",\n        data: item.fields[\"Cover Crop Goal\"]\n      });\n\n      //   document.getElementById(`avatar${key}`).innerHTML =\n    } else {\n      // exists, remove it from the state and update the state\n      let index = goals.indexOf(item.fields[\"Cover Crop Goal\"]);\n      goals.splice(index, 1);\n\n      // make it lighter on the ui\n\n      document.getElementById(`chip${key}`).classList.remove(\"active\");\n\n      dispatch({\n        type: \"UPDATE_SELECTED_GOALS\",\n        data: goals\n      });\n    }\n  };\n  return (\n    <Tooltip\n      enterDelay={1000}\n      leaveDelay={300}\n      interactive\n      arrow\n      title={\n        <div className=\"tooltipTextContainer text-center\">\n          <p>{goalDescription}</p>\n        </div>\n      }\n      key={`tooltip${key}`}\n    >\n      <Chip\n        disabled={\n          state.selectedGoals.length >= 3\n            ? state.selectedGoals.includes(goalTitle)\n              ? false\n              : true\n            : false\n        }\n        avatar={\n          state.selectedGoals.length !== 0 &&\n          state.selectedGoals.includes(goalTitle) ? (\n            <Avatar id={`avatar${key}`}>\n              {state.selectedGoals.indexOf(goalTitle) + 1}\n            </Avatar>\n          ) : (\n            \"\"\n          )\n        }\n        // style={{ textAlign: \"left\" }}\n        label={goalTitle.toUpperCase()}\n        onClick={() => updateSelectedGoals(goal, key)}\n        key={`chip${key}`}\n        id={`chip${key}`}\n        size=\"medium\"\n        variant=\"outlined\"\n        // color={\"primary\"}\n        className=\"goal enabled\"\n      />\n    </Tooltip>\n  );\n};\n\nexport default GoalTag;\n","// TODO: Goal tags are not responsive!\nimport React, { useContext, useEffect, Fragment, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/goalsSelector.scss\";\nimport {\n  Tooltip,\n  Chip,\n  CircularProgress,\n  Badge,\n  makeStyles\n} from \"@material-ui/core\";\n\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport GoalTag from \"./GoalTag\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nconst GoalsSelector = () => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n\n  const goalsURL =\n    \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crop%20Goals?maxRecords=300\";\n  const headers = new Headers();\n\n  useEffect(() => {\n    if (state.allGoals.length === 0) {\n      console.log(\"fetching goals..\");\n      fetchGoals();\n    }\n  }, []);\n\n  const fetchGoals = async () => {\n    dispatch({\n      type: \"SET_AJAX_IN_PROGRESS\",\n      data: true\n    });\n    headers.append(\"Authorization\", \"Bearer ***REMOVED***\");\n    await fetch(goalsURL, { headers: headers })\n      .then(response => {\n        return response.json();\n      })\n      .then(response => {\n        dispatch({\n          type: \"ADD_GOALS\",\n          data: response.records\n        });\n      })\n      .then(() => {\n        dispatch({\n          type: \"SET_AJAX_IN_PROGRESS\",\n          data: false\n        });\n      });\n  };\n\n  return (\n    <div className=\"goalsContainer mt-5\">\n      <div className=\"row boxContainerRow goalsBoxContainer\">\n        <div className=\"col-lg-12\">\n          <h1 className=\"text-center\">What are your cover cropping goals</h1>\n        </div>\n        <div className=\"col-lg-12\">\n          <p className=\"text-center\" color=\"secondary\">\n            Select up to three. Hover for more information\n          </p>\n        </div>\n        {state.ajaxInProgress ? (\n          <div className=\"goals col-lg-12\">\n            <CircularProgress />\n          </div>\n        ) : (\n          <div className=\"goals row\" style={{ justifyContent: \"center\" }}>\n            {state.allGoals.length > 0 ? (\n              state.allGoals.map((goal, key) =>\n                !goal.fields[\"Cover Crop Goal\"].startsWith(\"TBD\") ? (\n                  <div key={key} className={classes.root}>\n                    {/* //   <Badge badgeContent={4} color=\"primary\"> */}\n                    {/* updateSelectedGoals(goal, key) */}\n                    <GoalTag\n                      goal={goal}\n                      id={key}\n                      goaltTitle={goal.fields[\"Cover Crop Goal\"]}\n                      goalDescription={goal.fields[\"Description\"]}\n                    />\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )\n            ) : (\n              <Skeleton\n                animation=\"pulse\"\n                height=\"100\"\n                width=\"100\"\n                variant=\"rect\"\n              />\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GoalsSelector;\n","import React, { useContext } from \"react\";\nimport MapComponent from \"./Map\";\nimport { Context } from \"../../store/Store\";\nimport AutoCompleteComponent from \"./AutoComplete\";\nimport SoilConditions from \"./SoilConditions\";\nimport WeatherConditions from \"./WeatherConditions\";\nimport { TextField } from \"@material-ui/core\";\n\nconst LocationConfirmation = () => {\n  const [state, dispatch] = useContext(Context);\n  return (\n    <div\n      className=\"container-fluid mt-5\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <div className=\"row boxContainerRow\" style={{ textAlign: \"left\" }}>\n        <div className=\"col-lg-6\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-lg-6\">\n                <MapComponent\n                  width=\"100%\"\n                  height=\"100%\"\n                  minzoom={4}\n                  maxzoom={20}\n                />\n              </div>\n              <div className=\"col-lg-6\">\n                <h1>Location Details</h1>\n                <p>\n                  Your cover crop recommendations will come from the Plant\n                  Hardiness Zone {state.zone} NECCC dataset.\n                </p>\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\">\n                {/* <AutoCompleteComponent /> */}\n                <TextField\n                  style={{ width: \"100%\" }}\n                  disabled\n                  id=\"filled-disabled-address\"\n                  label=\"Location\"\n                  value={state.address}\n                  variant=\"filled\"\n                />\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-lg-12\">\n                <p>\n                  Disclaimer: Cover crop recommendations are based on expert\n                  opinions. Your cover crop performance will vary based on\n                  location, management, cultivars, and many other variables.\n                  Consult an{\" \"}\n                  <a href=\"/\" title=\"click to consult an nrcs extension expert\">\n                    NRCS Extension Expert\n                  </a>{\" \"}\n                  for detailed guidance\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-5 offset-lg-1\">\n          <div className=\"container-fluid\">\n            {state.progress === 2 ? <SoilConditions /> : \"\"}\n            {state.progress === 3 ? <WeatherConditions /> : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationConfirmation;\n","import React, { useEffect, useState, Fragment, useContext } from \"react\";\nimport moment from \"moment\";\nimport { Tooltip, withStyles, Typography } from \"@material-ui/core\";\nimport { Context } from \"../../store/Store\";\n\nimport \"../../styles/growthWindow.scss\";\n\nconst GrowthWindowComponent = props => {\n  const [state, dispatch] = useContext(Context);\n  //   const [isCashCropMonth, setIsCashCropMonth] = useState(false);\n  let isCashCropMonth = false;\n  let from = props.from;\n  let cropData = props.data;\n  let month = props.month;\n  let id = props.id;\n  let cropLegendObj = {\n    Early: \"\",\n    Mid: \"\",\n    class: \"\",\n    isCashCropMonth: false\n  };\n\n  var fullMonth = moment()\n    .localeData()\n    .months();\n\n  const setMonthVals = id => {\n    let cropDataLegendLabel_Early = cropData[`${fullMonth[id]}, Early`];\n    let cropDataLegendLabel_Mid = cropData[`${fullMonth[id]}, Mid`];\n\n    if (\n      state.cashCropData.dateRange.startDate !== \"\" &&\n      state.cashCropData.dateRange.endDate !== \"\"\n    ) {\n      if (\n        id >= state.cashCropData.dateRange.startDate - 1 ||\n        id <= state.cashCropData.dateRange.endDate - 1\n      ) {\n        cropLegendObj.isCashCropMonth = true;\n      } else {\n        cropLegendObj.isCashCropMonth = false;\n      }\n    }\n\n    if (cropDataLegendLabel_Early || cropDataLegendLabel_Mid) {\n      if (cropDataLegendLabel_Early) {\n        cropLegendObj.Early = cropDataLegendLabel_Early;\n      } else {\n        cropLegendObj.Early = \"\";\n      }\n      if (cropDataLegendLabel_Mid) {\n        cropLegendObj.Mid = cropDataLegendLabel_Mid;\n      } else {\n        cropLegendObj.Mid = \"\";\n      }\n    } else {\n      cropLegendObj.Early = \"\";\n      cropLegendObj.Mid = \"\";\n    }\n\n    // console.log(\"Month\", id);\n  };\n\n  const sanitizeLabels = () => {\n    // IF: check if cropLegendObj values are same ? or different.\n    // Reliable establishment/growth : className = \"reliableEstablishment\"\n    // Temperature/moisture risk to establishment/growth: \"t_mRiskToEstablishment\"\n    // Frost Seeding: \"frostSeeding\"\n\n    if (cropLegendObj.Early === cropLegendObj.Mid) {\n      // good to go\n    } else {\n    }\n  };\n\n  switch (month) {\n    case 0: {\n      setMonthVals(0);\n\n      break;\n    }\n    case 1: {\n      setMonthVals(1);\n      break;\n    }\n    case 2: {\n      setMonthVals(2);\n      break;\n    }\n    case 3: {\n      setMonthVals(3);\n      break;\n    }\n    case 4: {\n      setMonthVals(4);\n      break;\n    }\n    case 5: {\n      setMonthVals(5);\n      break;\n    }\n    case 6: {\n      setMonthVals(6);\n      break;\n    }\n    case 7: {\n      setMonthVals(7);\n      break;\n    }\n    case 8: {\n      setMonthVals(8);\n    }\n    case 9: {\n      setMonthVals(9);\n      break;\n    }\n    case 10: {\n      setMonthVals(10);\n      break;\n    }\n    case 11: {\n      setMonthVals(11);\n      break;\n    }\n    default: {\n      setMonthVals(0);\n      break;\n    }\n  }\n\n  // useEffect(() => {\n  //   // console.log(`isCashCropMonth ? `, cropLegendObj.isCashCropMonth);\n  //   // console.log(cropLegendObj);\n  // }, []);\n\n  return from === \"calendar\" ? (\n    <td\n      className={`growthWindowCell ${id}`}\n      style={\n        month >= 11\n          ? { borderLeft: \"none\", paddingTop: \"0px\", paddingBottom: \"0px\" }\n          : { paddingTop: \"0px\", paddingBottom: \"0px\" }\n      }\n    >\n      {/* {month} */}\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? \"legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row\"\n                : \"legendContainer legendColor d-flex flex-direction-row\"\n              : \"legendContainer legendColor d-flex flex-direction-row\"\n            : \"legendContainer legendColor d-flex flex-direction-row\"\n        }\n      >\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Early}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`midPart ${cropLegendObj.Mid}`}\n            style={{ height: \"30px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  ) : from === \"tableOnlyCashCropWindow\" ? (\n    <td className=\"tableGrowthCell growthWindowCell\">\n      <div\n        className={\n          state.cashCropData.dateRange.startDate !== \"\"\n            ? month >=\n              moment(state.cashCropData.dateRange.startDate, \"MM/dd\").format(\n                \"M\"\n              ) -\n                1 //these two should come from sidebar dateRange\n              ? month <=\n                moment(state.cashCropData.dateRange.endDate, \"MM/dd\").format(\n                  \"M\"\n                ) -\n                  1\n                ? `legendContainer cashCropLegendContainer legendColor d-flex flex-direction-row `\n                : \"legendContainer legendColor d-flex flex-direction-row \"\n              : \"legendContainer legendColor d-flex flex-direction-row \"\n            : `legendContainer legendColor d-flex flex-direction-row `\n        }\n      >\n        <div\n          className={`earlyPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n        <div\n          className={`midPart ${\n            cropLegendObj.isCashCropMonth ? \"cashCropMonth\" : \"\"\n          }`}\n          style={{ height: \"20px\", width: \"50%\" }}\n        ></div>\n      </div>\n    </td>\n  ) : (\n    <td className=\"tableGrowthCell growthWindowCell\">\n      <div className=\"legendContainer legendColor d-flex flex-direction-row \">\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, EARLY\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Early}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Early}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n        <Tooltip\n          arrow\n          title={\n            <Fragment>\n              <Typography color=\"secondary\">\n                {fullMonth[month].toUpperCase()}, MID\n              </Typography>\n              <em>\n                <Typography variant=\"body1\">{cropLegendObj.Mid}</Typography>\n              </em>\n            </Fragment>\n          }\n        >\n          <div\n            className={`earlyPart ${cropLegendObj.Mid}`}\n            style={{ height: \"20px\", width: \"50%\" }}\n          ></div>\n        </Tooltip>\n      </div>\n    </td>\n  );\n};\n\nexport default GrowthWindowComponent;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { zoneIcon } from \"../../shared/constants\";\nimport {\n  Button,\n  Typography,\n  Modal,\n  Fade,\n  Backdrop,\n  makeStyles,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  CircularProgress\n} from \"@material-ui/core\";\nimport {\n  PhotoLibrary,\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Info,\n  Close,\n  ExpandMore\n} from \"@material-ui/icons\";\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"0px\"\n    // padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst CropDetailsModalComponent = props => {\n  let crop = props.crop;\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  // const [modalOpen, setModalOpen] = useState(true);\n  const [modalData, setModalData] = useState({});\n\n  useEffect(() => {\n    setModalData(crop);\n  }, [crop]);\n\n  const handleModalClose = () => {\n    props.setModalOpen(!props.modalOpen);\n    // dispatch({\n    //   type: \"TOGGLE_CROP_DETAIL_MODAL\",\n    //   data: { cropDetailModal: false }\n    // });\n    // setModalOpen(false);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"ransition-modal-description\"\n      className={classes.modal}\n      open={props.modalOpen}\n      onClose={handleModalClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500\n      }}\n      disableBackdropClick={true}\n    >\n      <Fade in={props.modalOpen}>\n        {modalData.fields ? (\n          <div className={`cropTableModal modalContainer ${classes.paper}`}>\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div\n                  className=\"col-12\"\n                  style={{\n                    background: \"#2D7B7B\",\n                    color: \"white\",\n                    height: \"auto\",\n                    borderTopLeftRadius: \"5px\",\n                    borderTopRightRadius: \"5px\"\n                  }}\n                >\n                  <div className=\"row\">\n                    <div className=\"col-2 offset-10 text-right\">\n                      {\" \"}\n                      <Button\n                        style={{ color: \"white\" }}\n                        onClick={handleModalClose}\n                      >\n                        <Close />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <div className=\"row\">\n                    <div className=\"col mt-2\">\n                      <div>{modalData.fields[\"Cover Crop Group\"]}</div>\n                      <div className=\"font-weight-bold\">\n                        {modalData.fields[\"Cover Crop Name\"]}\n                      </div>\n                      <div>{modalData.fields[\"Scientific Name\"]}</div>\n                    </div>\n                    <div\n                      className=\"col\"\n                      style={{\n                        textAlign: \"right\",\n                        paddingRight: \"0px\",\n                        paddingLeft: \"0px\"\n                      }}\n                    >\n                      <img src=\"//placehold.it/100x100\" />\n                      <img src=\"//placehold.it/100x100\" />\n                      <img src=\"//placehold.it/100x100\" />\n                      <img src=\"//placehold.it/100x100\" />\n                      <img src=\"//placehold.it/100x100\" />\n                      <img src=\"//placehold.it/100x100\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div\n                  className=\"col-12\"\n                  style={{ background: \"#2D7B7B\", color: \"white\" }}\n                >\n                  <div className=\"row\">\n                    <div className=\"col-4\">\n                      <Button style={{ color: \"white\" }}>\n                        {zoneIcon(20, 20)}\n                        <span className=\"pl-2\">\n                          Plant Hardiness Zone {state.zone} Dataset\n                        </span>\n                      </Button>\n                    </div>\n                    <div className=\"col-2\">\n                      <Button style={{ color: \"white\" }}>\n                        <PhotoLibrary />{\" \"}\n                        <span className=\"pl-2\">View Photos</span>\n                      </Button>\n                    </div>\n                    <div className=\"col-4\">\n                      <Button style={{ color: \"white\" }}>Download :</Button>\n                      <Button style={{ color: \"white\" }}>\n                        <PictureAsPdf />\n                        <span className=\"pl-2\">PDF</span>\n                      </Button>\n                      <Button style={{ color: \"white\" }}>\n                        <FormatListBulleted />\n                        <span className=\"pl-2\">SPREADSHEET</span>\n                      </Button>\n                    </div>\n                    <div className=\"col-2 text-right\">\n                      <Button style={{ color: \"white\" }}>\n                        <Print /> <span className=\"pl-2\">PRINT</span>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row mt-4\">\n                <div className=\"col-8\">\n                  <div className=\"row\">\n                    <div className=\"col-6\">\n                      <Typography variant=\"h6\">Cover Crop Uses</Typography>\n                    </div>\n                    <div className=\"col-6 text-right\">\n                      <small>\n                        (Source: NRCS Plant Guide{\" \"}\n                        <Info style={{ fontSize: \"10pt\" }} /> )\n                      </small>\n                    </div>\n\n                    <div className=\"col-12 mt-2\">\n                      <p>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                        Duis eu interdum elit, nec convallis ex. Sed in posuere\n                        ipsum. Vivamus eget scelerisque urna, at maximus mauris.\n                        Suspendisse potenti. Nullam eget vulputate nulla. Morbi\n                        eget suscipit libero. Phasellus eleifend velit vitae leo\n                        efficitur luctus. Donec euismod odio et urna elementum\n                        elementum. Curabitur quam nisi, blandit eu libero at,\n                        efficitur dignissim dui. Aenean viverra consectetur odio\n                        ac sodales. Nunc elit sem, tincidunt et ligula ac,\n                        volutpat venenatis ex. Sed feugiat suscipit lorem vitae\n                        efficitur. Morbi malesuada elit a urna ornare faucibus.\n                        Curabitur id varius enim. Praesent dui erat, faucibus\n                        quis consequat quis, condimentum eget diam. Phasellus\n                        efficitur sapien ac ex suscipit pretium. Quisque ut nisi\n                        fringilla, scelerisque purus sit amet, fermentum justo.\n                        Maecenas dignissim ornare lectus, eget congue elit\n                        vulputate vel. Quisque pellentesque quam eget ante\n                        commodo, a porta dolor interdum. Donec ut nisi ligula.\n                        Aenean eget cursus lectus, vel mattis enim. Nunc rutrum\n                        pulvinar imperdiet. In finibus nunc eu mattis semper.\n                        Nunc pharetra dui velit, eget pellentesque nulla\n                        molestie in. Ut gravida ac leo sit amet blandit. Duis\n                        sapien ipsum, volutpat quis nisl quis, ornare laoreet\n                        diam. Nunc sit amet eros vel ante rutrum ullamcorper a\n                        scelerisque magna. Etiam semper orci eget lorem dictum,\n                        in varius est laoreet. Curabitur enim velit, pharetra ut\n                        ullamcorper in, volutpat nec lacus. Cras sed nunc\n                        iaculis, dignissim enim id, elementum lectus. Fusce\n                        auctor turpis\n                      </p>{\" \"}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-4\">\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">Agronomic</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">\n                        Environmental Tolerance\n                      </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">Soil Conditions</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">Growth</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">\n                        Planting &amp; Termination\n                      </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">\n                        Grazers &amp; Pollinators\n                      </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                  <ExpansionPanel\n                    className=\"modalSideBar\"\n                    defaultExpanded={false}\n                  >\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMore />}\n                      aria-controls=\"modal-side-panel-content\"\n                    >\n                      <Typography variant=\"body1\">\n                        Pests &amp; Disease\n                      </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div></div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div></div>\n        )}\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default CropDetailsModalComponent;\n","/* TODO: RENDER CROPS BY: \n    1. Zone decision === include\n    2. sortBy default: First Selected Goal\n\n*/\nimport React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  LightButton,\n  zoneIcon,\n  CustomStyles,\n  allMonths,\n  getRating\n} from \"../../shared/constants\";\nimport {\n  Button,\n  Typography,\n  Modal,\n  Fade,\n  Backdrop,\n  makeStyles,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Table,\n  CircularProgress,\n  TableHead,\n  TableBody,\n  TableContainer,\n  TableRow,\n  TableCell\n} from \"@material-ui/core\";\n\nimport \"../../styles/cropTable.scss\";\nimport {\n  PhotoLibrary,\n  PictureAsPdf,\n  FormatListBulleted,\n  Print,\n  Info,\n  Close,\n  ExpandMore\n} from \"@material-ui/icons\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport CropDetailsModalComponent from \"./CropDetailsModal\";\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"0px\"\n    // padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst CropTableComponent = props => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const handleModalOpen = crop => {\n    // setModalOpen(true);\n    // put data inside modal\n    setModalData(crop);\n\n    setModalOpen(true);\n  };\n\n  const [showGrowthWindow, setShowGrowthWindow] = useState(true);\n\n  // const handleModalClose = () => {\n  //   setModalOpen(false);\n  // };\n  // zone7 appid = app2q3UaKHXutMQyt\n  // const url =\n  // \"https://api.airtable.com/v0/appC47111lCOTaMYe/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))\";\n  // const url = `https://api.airtable.com/v0/app2q3UaKHXutMQyt/Cover%20Crops%20Data?maxRecords=300&timeZone=America_NewYork&sort=[{field: ${state.selectedGoals[0]}, direction: \"asc\"}]&filterByFormula=NOT(SWITCH({Cover Crop Name},'__Open Discussion Row','Ok hopefully he answers me soon.'))`;\n  useEffect(() => {\n    props.showGrowthWindow\n      ? setShowGrowthWindow(true)\n      : setShowGrowthWindow(false);\n    // if (state.cropData.length === 0) {\n    //   const headers = new Headers();\n    //   headers.append(\"Authorization\", \"Bearer ***REMOVED***\");\n    //   fetch(url, {\n    //     headers: headers\n    //   })\n    //     .then(response => {\n    //       return response.json();\n    //     })\n    //     .then(data => {\n    //       dispatch({\n    //         type: \"PULL_CROP_DATA\",\n    //         data: data.records\n    //       });\n    //       checkCropsAddedToCart();\n    //     });\n    // }\n  }, [props]);\n\n  const checkCropsAddedToCart = () => {\n    if (state.selectedCrops.length !== 0) {\n      try {\n        state.selectedCrops.map((crop, index) => {\n          let btnId = crop.btnId;\n          let container = document.getElementById(btnId);\n          container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n          container.classList.add(\"activeCartBtn\");\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (document.getElementById(btnId).textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n      console.log(document.getElementById(btnId).textContent);\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function(item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: false,\n            snackMessage: `${cropName} Added`\n          }\n        });\n        enqueueSnackbar(`${cropName} Added`);\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: false,\n            snackMessage: `${cropName} Removed`\n          }\n        });\n        enqueueSnackbar(`${cropName} Removed`);\n\n        // this.state.selectedCrops.splice(removeIndex, 1);\n      }\n    } else {\n      // DONE: add the selected crop to state and change the state, show snackbar\n\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: false,\n          snackMessage: `${cropName} Added`\n        }\n      });\n      enqueueSnackbar(`${cropName} Added`);\n    }\n  };\n\n  return props.cropData.length !== 0 ? (\n    <TableContainer>\n      <div className=\"table-responsive calendarViewTableWrapper\">\n        {state.ajaxInProgress ? (\n          <div className=\"circularCentered\">\n            <CircularProgress size={\"6em\"} />\n          </div>\n        ) : (\n          <Table className=\"table table-borderless table-sm\">\n            {/* <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            /> */}\n            <TableHead className=\"tableHeadWrapper\">\n              <tr>\n                <th>\n                  <Typography variant=\"body1\">COVER CROPS</Typography>\n                </th>\n                {state.selectedGoals.length !== 0\n                  ? state.selectedGoals.map((goal, index) => (\n                      <th key={index}>\n                        <Typography variant=\"body1\">\n                          {goal.toUpperCase()}\n                        </Typography>\n                      </th>\n                    ))\n                  : \"\"}\n                {showGrowthWindow ? (\n                  <th style={{ minWidth: \"300px\" }}>\n                    <Typography variant=\"body1\">GROWTH WINDOW</Typography>\n                  </th>\n                ) : (\n                  \"\"\n                )}\n\n                <th>\n                  <Typography variant=\"body1\">MY LIST</Typography>\n                  {/* <Typography variant=\"subtitle1\">\n                    \n                    {`[${state.selectedCrops.length} CROPS]`}\n                  </Typography> */}\n                </th>\n              </tr>\n            </TableHead>\n            <TableBody className=\"tableBodyWrapper\">\n              {props.cropData.map((crop, index) => {\n                if (\n                  !crop.fields[\"Cover Crop Name\"].trim() !==\n                  \"Ok hopefully he answers me soon.\".trim()\n                ) {\n                  if (crop.fields[\"Zone Decision\"] === \"Include\")\n                    return (\n                      <TableRow key={`croprow${index}`}>\n                        <TableCell\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\"\n                          }}\n                        >\n                          {/* {this.getCropImageFromAPI(\n                          crop.fields[\"Cover Crop Name\"]\n                        )} */}\n                          {crop.fields[\"Image\"] ? (\n                            <img\n                              src={crop.fields[\"Image\"][0].url}\n                              alt={crop.fields[\"Image\"][0].filename}\n                              style={{\n                                maxWidth: \"100px\",\n                                maxHeight: \"100px\",\n                                flexBasis: \"20%\"\n                              }}\n                            />\n                          ) : (\n                            <img\n                              src=\"//placehold.it/100x100\"\n                              alt=\"placeholder\"\n                              style={{\n                                flexBasis: \"20%\"\n                              }}\n                            />\n                          )}\n\n                          <div className=\"cropDetailsText\" style={{}}>\n                            <div className=\"part1_ut\">\n                              <span className=\"cropCategory text-uppercase\">\n                                {crop.fields[\"Cover Crop Group\"]}\n                              </span>\n                              <span className=\"cropName font-weight-lighter\">\n                                {crop.fields[\"Cover Crop Name\"]}\n                              </span>\n                              <span className=\"cropScientificName\">\n                                {crop.fields[\"Scientific Name\"]}\n                              </span>\n                            </div>\n                            <div className=\"part2_lt\">\n                              <span className=\"cropDuration text-uppercase font-weight-bold\">\n                                {crop.fields[\"Duration\"]}\n                              </span>\n                            </div>\n                          </div>\n                        </TableCell>\n                        {state.selectedGoals.length !== 0\n                          ? state.selectedGoals.map((goal, index) => (\n                              <td key={`rating${index}`}>\n                                {getRating(crop.fields[goal])}\n                                <span className=\"d-none\">\n                                  {crop.fields[goal]}\n                                </span>\n                              </td>\n                            ))\n                          : \"\"}\n                        {showGrowthWindow ? (\n                          <td>\n                            {/* <table className=\"table calendarViewTable table-sm table-borderless\">\n                              <tbody>\n                                <tr> */}\n                            <table style={{ width: \"100%\" }}>\n                              <tbody>\n                                <tr>\n                                  {allMonths.map((month, index) => (\n                                    <GrowthWindowComponent\n                                      from=\"tableOnlyCashCropWindow\"\n                                      data={crop.fields}\n                                      key={index}\n                                      id={`growthCell${index}`}\n                                      month={index}\n                                    />\n                                  ))}\n                                </tr>\n                                <tr>\n                                  {allMonths.map((month, index) => (\n                                    <GrowthWindowComponent\n                                      from=\"tableAll\"\n                                      data={crop.fields}\n                                      key={index}\n                                      id={`growthCell${index}`}\n                                      month={index}\n                                    />\n                                  ))}\n                                </tr>\n                              </tbody>\n                            </table>\n                            {/* </tr> */}\n                            {/* </tbody> */}\n                            {/* </table> */}\n                          </td>\n                        ) : (\n                          \"\"\n                        )}\n\n                        <td style={{}}>\n                          <div className=\"button1\">\n                            <LightButton\n                              id={`cartBtn${index}`}\n                              style={{\n                                borderRadius: CustomStyles().nonRoundedRadius,\n                                width: \"130px\"\n                              }}\n                              onClick={() => {\n                                addCropToBasket(\n                                  crop.id,\n                                  crop.fields[\"Cover Crop Name\"],\n                                  `cartBtn${index}`,\n                                  crop.fields\n                                );\n                              }}\n                            >\n                              ADD TO LIST\n                            </LightButton>\n                          </div>\n                          <br />\n                          <div className=\"button2\">\n                            <Button\n                              size=\"small\"\n                              onClick={() => handleModalOpen(crop)}\n                            >\n                              View Crop Details\n                            </Button>\n                          </div>\n                        </td>\n                      </TableRow>\n                    );\n                } else return \"\";\n              })}\n            </TableBody>\n          </Table>\n        )}\n      </div>\n\n      <div className=\"cropGoals\"></div>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </TableContainer>\n  ) : (\n    \"\"\n  );\n};\n\nexport default CropTableComponent;\n","import React, { useContext, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Context } from \"../../store/Store\";\nimport CropDetailsModalComponent from \"../CropSelector/CropDetailsModal\";\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: 230\n  },\n  media: {\n    height: 140\n  }\n});\n\nconst MyCoverCropCardsComponent = props => {\n  const [state, dispatch] = useContext(Context);\n  const data = props.data;\n  const btnId = props.btnId;\n  const classes = useStyles();\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const handleModalOpen = crop => {\n    // setModalOpen(true);\n    // put data inside modal\n    console.log(crop);\n    // setModalData(crop);\n\n    // setModalOpen(true);\n  };\n\n  const removeCrop = () => {\n    var removeIndex = state.selectedCrops\n      .map(function(item) {\n        return item.btnId;\n      })\n      .indexOf(`${btnId}`);\n\n    if (removeIndex === -1) {\n      // element not in array\n      // not possible ?\n    } else {\n      // alert(removeIndex);\n      let selectedCropsCopy = state.selectedCrops;\n\n      selectedCropsCopy.splice(removeIndex, 1);\n      // console.log(selectedCropsCopy);\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: selectedCropsCopy,\n          snackOpen: true,\n          snackMessage: `Removed`\n        }\n      });\n\n      // this.state.selectedCrops.splice(removeIndex, 1);\n    }\n  };\n  return (\n    //   {state.selectedCrops.length === 1 ? \"<div>\" : \"<div className='pl-5'>\"}\n    <div className={props.itemNo > 0 ? \"pl-5\" : \"\"}>\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image=\"https://placehold.it/230x140\"\n            title={data[\"Cover Crop Name\"]}\n          />\n          <CardContent>\n            <div\n              className=\"font-weight-bold text-muted text-uppercase\"\n              style={{ fontSize: \"10pt\" }}\n            >\n              {data[\"Family Common Name\"]}\n            </div>\n            <div className=\"font-weight-bold \" style={{ fontSize: \"16pt\" }}>\n              {data[\"Cover Crop Name\"]}\n            </div>\n            <small className=\"font-italic text-muted\">\n              {data[\"Scientific Name\"]}\n            </small>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            onClick={() => handleModalOpen(data)}\n          >\n            View Crop Details\n          </Button>\n          <Button size=\"small\" color=\"seconday\" onClick={removeCrop}>\n            Remove\n          </Button>\n        </CardActions>\n      </Card>\n      <CropDetailsModalComponent\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        crop={modalData}\n      />\n    </div>\n  );\n};\n\nexport default MyCoverCropCardsComponent;\n","import React, { useContext, Fragment } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport MyCoverCropCardsComponent from \"./MyCoverCropCardsComponent\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { PictureAsPdf, ListAlt, Add } from \"@material-ui/icons\";\n\nconst MyCoverCropList = () => {\n  const [state, dispatch] = useContext(Context);\n\n  const redirectToSpeciesSelector = () => {\n    dispatch({\n      type: \"ACTIVATE_SPECIES_SELECTOR_TILE\",\n      data: {\n        speciesSelectorActivationFlag: true,\n        myCoverCropActivationFlag: false\n      }\n    });\n  };\n  return (\n    <div className=\"container-fluid\">\n      {state.selectedCrops.length === 0 ? (\n        <Typography variant=\"body1\">\n          Your list is empty. Use the Species Selector to add plants.\n        </Typography>\n      ) : (\n        <Fragment>\n          <div className=\"row\">\n            <div\n              className=\"col-12 myCoverCropsBlueBar\"\n              style={{\n                backgroundColor: \"#35999b\",\n                height: \"40px\",\n                borderTopLeftRadius: \"5px\",\n                borderTopRightRadius: \"5px\"\n              }}\n            >\n              <div className=\"row\">\n                <div className=\"col-8\">\n                  <Button style={{ color: \"white\" }}>Download:</Button>\n                  <Button style={{ color: \"white\" }}>\n                    <PictureAsPdf /> <span className=\"pl-2\">PDF</span>\n                  </Button>\n                  <Button style={{ color: \"white\" }}>\n                    <ListAlt /> <span className=\"pl-2\">SPREADSHEET</span>\n                  </Button>\n                  <Button\n                    style={{ color: \"white\" }}\n                    onClick={redirectToSpeciesSelector}\n                  >\n                    <Add /> <span className=\"pl-2\">ADD A CROP</span>\n                  </Button>\n                </div>\n                <div className=\"col-6\"></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mt-2\">\n            {state.selectedCrops.map((crop, index) => (\n              <MyCoverCropCardsComponent\n                key={index}\n                data={crop.data}\n                btnId={crop.btnId}\n                itemNo={index}\n              />\n            ))}\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default MyCoverCropList;\n","import React, { useContext, Fragment, useEffect, useState } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport moment from \"moment\";\nimport {\n  Typography,\n  Button,\n  makeStyles,\n  Modal,\n  Backdrop,\n  Fade,\n  CircularProgress\n} from \"@material-ui/core\";\nimport {\n  LightButton,\n  allMonths,\n  cropDataURL,\n  allGoalsURL,\n  getRating\n} from \"../../shared/constants\";\nimport \"../../styles/cropCalendarViewComponent.scss\";\nimport GrowthWindowComponent from \"./GrowthWindow\";\nimport { AddCircle, FiberManualRecord, CloseRounded } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: \"1em\",\n    width: \"30%\"\n    // padding: theme.spacing(2, 4, 3)\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst CropCalendarViewComponent = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useContext(Context);\n  const [goalRatings, setGoalRatings] = useState(0);\n  const [legendModal, setLegendModal] = useState(false);\n\n  // DONE: Check year logic ? currently Juliet wants to return current year if month is before november\n  // ref. useeffect();\n  let currentYear = new Date().getFullYear();\n  const addCropToBasket = (cropId, cropName, btnId, cropData) => {\n    let container = document.getElementById(btnId);\n    let selectedCrops = {};\n    let toAdd = false;\n    var cropArray = [];\n    selectedCrops[\"id\"] = cropId;\n    selectedCrops[\"cropName\"] = cropName;\n    selectedCrops[\"btnId\"] = btnId;\n    selectedCrops[\"data\"] = cropData;\n    cropArray = selectedCrops;\n    // change the UI\n    if (container.classList.contains(\"activeCartBtn\")) {\n      // change text back to 'add to list' and remove element from state\n\n      if (document.getElementById(btnId).textContent === \"ADDED\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADD TO LIST\";\n        container.classList.remove(\"activeCartBtn\");\n        toAdd = false;\n      } else toAdd = true;\n\n      // this.state.selectedCrops.splice(x, 1);\n      // get index of the element\n    } else {\n      // change text to 'added' and add element to state\n      console.log(document.getElementById(btnId).textContent);\n      if (container.textContent === \"ADD TO LIST\") {\n        container.querySelector(\".MuiButton-label\").innerHTML = \"ADDED\";\n        container.classList.add(\"activeCartBtn\");\n        toAdd = true;\n      } else toAdd = false;\n    }\n\n    // // check if crop id exists inside state, if yes then remove it\n\n    if (state.selectedCrops.length > 0) {\n      // DONE: Remove crop from basket\n      var removeIndex = state.selectedCrops\n        .map(function(item) {\n          return item.btnId;\n        })\n        .indexOf(`${btnId}`);\n      if (removeIndex === -1) {\n        // element not in array\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: [...state.selectedCrops, selectedCrops],\n            snackOpen: true,\n            snackMessage: `${cropName} Added`\n          }\n        });\n      } else {\n        // alert(removeIndex);\n        let selectedCropsCopy = state.selectedCrops;\n\n        selectedCropsCopy.splice(removeIndex, 1);\n        // console.log(selectedCropsCopy);\n        dispatch({\n          type: \"SELECTED_CROPS_MODIFIER\",\n          data: {\n            selectedCrops: selectedCropsCopy,\n            snackOpen: true,\n            snackMessage: `${cropName} Removed`\n          }\n        });\n\n        // this.state.selectedCrops.splice(removeIndex, 1);\n      }\n    } else {\n      // DONE: add the selected crop to state and change the state, show snackbar\n\n      dispatch({\n        type: \"SELECTED_CROPS_MODIFIER\",\n        data: {\n          selectedCrops: [cropArray],\n          snackOpen: true,\n          snackMessage: `${cropName} Added`\n        }\n      });\n    }\n  };\n\n  const headers = new Headers();\n  headers.append(\"Authorization\", \"Bearer ***REMOVED***\");\n\n  const handleLegendModal = () => {\n    setLegendModal(!legendModal);\n  };\n  useEffect(() => {\n    let initialized = fetchRecordsIfUnavailable();\n    initialized.then(() => {\n      let currentMonth = moment().format(\"MMM\");\n      // console.log(currentMonth);\n      if (currentMonth === \"Nov\" || currentMonth === \"Dec\") {\n        currentYear = currentYear + 1;\n      }\n      console.log(\"goal values set\");\n\n      // putGoalValues();\n    });\n\n    // setGoalRatings(getAverageGoalRating(state.selectedGoals));\n  }, []);\n\n  const getAverageGoalRating = (selectedGoals, crop) => {\n    // get goal rating for each crop and calculate+render rating\n    let goalRating = 0;\n    selectedGoals.map((goal, index) => {\n      if (crop.fields[goal]) {\n        goalRating += crop.fields[goal];\n      }\n    });\n\n    return getRating(goalRating / selectedGoals.length);\n  };\n\n  const putGoalValues = () => {\n    console.log(state.allGoals.length);\n    state.allGoals.map((goal, index) => {\n      let goalName = goal.fields[\"Cover Crop Goal\"];\n      state.cropData.map((crop, index2) => {\n        // let cropId =\n\n        console.log(\n          goalName + \" for \" + crop.fields[\"Cover Crop Name\"],\n          crop.fields[goalName]\n        );\n      });\n    });\n  };\n  const fetchRecordsIfUnavailable = () => {\n    // get crop data if unavailable\n    dispatch({\n      type: \"SET_AJAX_IN_PROGRESS\",\n      data: true\n    });\n    let _promise = new Promise(async function(resolve, reject) {\n      if (state.cropData.length === 0) {\n        // get crop data\n        let records = await fetch(cropDataURL, { headers: headers });\n        let json = records.json();\n\n        json\n          .then(val => {\n            // console.log(val);\n            dispatch({\n              type: \"PULL_CROP_DATA\",\n              data: val.records\n            });\n          })\n          .then(async () => {\n            if (state.allGoals.length === 0) {\n              // get all goals\n              let records = await fetch(allGoalsURL, { headers: headers });\n              // console.log(records.json());\n              let json = records.json();\n              json\n                .then(val => {\n                  dispatch({\n                    type: \"ADD_GOALS\",\n                    data: val.records\n                  });\n                })\n                .then(() => {\n                  resolve(\"worked\");\n                });\n            } else resolve(\"worked\");\n          });\n      } else resolve(\"worked\");\n    }).then(() => {\n      dispatch({\n        type: \"SET_AJAX_IN_PROGRESS\",\n        data: false\n      });\n    });\n    // let isResolved = false;\n\n    return _promise;\n  };\n\n  return (\n    <Fragment>\n      <div className=\"table-responsive calendarViewTableWrapper\">\n        {state.ajaxInProgress ? (\n          <div className=\"circularCentered\">\n            <CircularProgress size={\"6em\"} />\n          </div>\n        ) : (\n          <div className=\"row\">\n            <div className=\"col-md-12\" style={{ lineHeight: \"0.5\" }}>\n              <table\n                className=\"table calendarViewTable table-sm table-borderless\"\n                style={{}}\n              >\n                <thead className=\"tableHeadWrapper\">\n                  <tr>\n                    <td\n                      colSpan=\"2\"\n                      style={{ width: \"30%\", backgroundColor: \"white\" }}\n                    ></td>\n                    <td\n                      colSpan=\"12\"\n                      style={{\n                        width: \"60%\",\n                        borderRight: \"0px\",\n                        borderBottom: \"5px solid white\",\n                        borderTopLeftRadius: \"10px\",\n                        borderTopRightRadius: \"10px\"\n                      }}\n                    >\n                      <Typography\n                        variant=\"body1\"\n                        style={{\n                          width: \"50%\",\n                          display: \"inline-block\",\n                          textAlign: \"right\"\n                        }}\n                      >\n                        {currentYear} COVER CROP GROWTH WINDOW\n                      </Typography>\n                      <Typography\n                        variant=\"body1\"\n                        style={{ width: \"50%\", display: \"inline-block\" }}\n                      >\n                        <Button\n                          startIcon={<AddCircle />}\n                          onClick={handleLegendModal}\n                        >\n                          {\" \"}\n                          <Typography variant=\"body1\">Legend</Typography>\n                        </Button>\n                      </Typography>\n                    </td>\n                    <td style={{ width: \"10%\", backgroundColor: \"white\" }}></td>\n                  </tr>\n                  <tr>\n                    <td style={{ width: \"20%\" }}>\n                      <Typography variant=\"body1\">COVER CROPS</Typography>\n                    </td>\n                    {/* {state.selectedGoals.length !== 0\n     ? state.selectedGoals.map((goal, index) => (\n         <th key={index}>\n           <Typography variant=\"body1\">\n             {goal.toUpperCase()}\n           </Typography>\n         </th>\n       ))\n     : \"\"} */}\n                    {state.selectedGoals.length === 0 ? (\n                      \"\"\n                    ) : (\n                      <td style={{ width: \"10%\" }}>\n                        <Typography variant=\"body1\">\n                          AVERAGE GOAL RATING\n                        </Typography>\n                      </td>\n                    )}\n\n                    {allMonths.map((month, index) => (\n                      <td key={`monthskey${index}`} style={{ width: \"5%\" }}>\n                        <Typography variant=\"body1\">{month}</Typography>\n                      </td>\n                    ))}\n\n                    <td style={{ width: \"10%\" }}>\n                      <Typography variant=\"body1\">MY LIST</Typography>\n                      <Typography variant=\"subtitle1\">\n                        {/* <br /> */}\n                        {`[${state.selectedCrops.length} CROPS]`}\n                      </Typography>\n                    </td>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {state.cropData\n                    ? state.cropData.map((crop, index) => {\n                        if (crop.fields[\"Zone Decision\"] === \"Include\")\n                          return (\n                            <tr key={`cropRow${index}`}>\n                              <td\n                                className=\"calendarTableCell\"\n                                style={{\n                                  paddingTop: \"0px\",\n                                  paddingBottom: \"0px\"\n                                  // fontSize: '10px'\n                                }}\n                              >\n                                <div className=\"tdContainer d-flex justify-content-between flex-wrap\">\n                                  <img\n                                    src=\"//placehold.it/50x50\"\n                                    alt=\"Placeholder\"\n                                  />\n                                  <Button style={{ borderRadius: \"0px\" }}>\n                                    {crop.fields[\"Cover Crop Name\"]}\n                                  </Button>\n                                </div>\n                              </td>\n                              {state.selectedGoals.length === 0 ? (\n                                \"\"\n                              ) : (\n                                <td\n                                  style={{\n                                    paddingTop: \"0px\",\n                                    paddingBottom: \"0px\"\n                                    // fontSize: '10px'\n                                  }}\n                                >\n                                  {getAverageGoalRating(\n                                    state.selectedGoals,\n                                    crop\n                                  )}\n                                  {/*average goal rating */}\n                                </td>\n                              )}\n\n                              {allMonths.map((month, index) => (\n                                <GrowthWindowComponent\n                                  from=\"calendar\"\n                                  data={crop.fields}\n                                  key={index}\n                                  id={`growthCell${index}`}\n                                  month={index}\n                                />\n                              ))}\n\n                              <td\n                                style={{\n                                  paddingTop: \"0px\",\n                                  paddingBottom: \"0px\"\n                                }}\n                              >\n                                {\" \"}\n                                <LightButton\n                                  id={`cartBtn${index}`}\n                                  style={{\n                                    borderRadius: \"0px\",\n                                    width: \"130px\"\n                                  }}\n                                  onClick={() => {\n                                    addCropToBasket(\n                                      crop.id,\n                                      crop.fields[\"Cover Crop Name\"],\n                                      `cartBtn${index}`,\n                                      crop.fields\n                                    );\n                                  }}\n                                >\n                                  ADD TO LIST\n                                </LightButton>\n                              </td>\n                            </tr>\n                          );\n                      })\n                    : \"\"}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n      <Modal\n        open={legendModal}\n        onClose={handleLegendModal}\n        BackdropComponent={Backdrop}\n        disableBackdropClick={false}\n        className={classes.modal}\n        BackdropProps={{\n          timeout: 500\n        }}\n      >\n        <Fade in={legendModal}>\n          <div className={`modalLegendPaper ${classes.paper}`}>\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-6\">\n                  <Typography variant=\"h4\">LEGEND</Typography>\n                </div>\n                <div className=\"col-6 text-right\">\n                  <Button onClick={handleLegendModal}>\n                    <CloseRounded />\n                  </Button>\n                </div>\n              </div>\n              <div className=\"row mt-5\">\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"reliable\" />\n                    <span className=\"pl-3\">{\"Reliable Establishment\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"temperatureRisk\" />\n                    <span className=\"pl-3\">\n                      {\"Temperature Risk To Establishment\"}\n                    </span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"frostPossible\" />\n                    <span className=\"pl-3\">{\"Frost Seeding Possible\"}</span>\n                  </Typography>\n                </div>\n                <div className=\"col-12 legendModalRow\">\n                  <Typography variant=\"body1\">\n                    <FiberManualRecord className=\"cashCrop\" />\n                    <span className=\"pl-3\">{\"Cash Crop Growth Window\"}</span>\n                  </Typography>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default CropCalendarViewComponent;\n","import React, { Fragment } from \"react\";\nimport {\n  makeStyles,\n  List,\n  ListSubheader,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Collapse,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormGroup,\n  FormControlLabel,\n  Checkbox\n} from \"@material-ui/core\";\nimport {\n  Send,\n  Drafts,\n  Inbox,\n  ExpandLess,\n  ExpandMore,\n  StarBorder,\n  CalendarTodayRounded\n} from \"@material-ui/icons\";\nimport { CustomStyles } from \"../../shared/constants\";\nimport { Context } from \"../../store/Store\";\nimport { List as ListMovable, arrayMove } from \"react-movable\";\n\nimport {\n  DateRangePicker,\n  DateRange\n} from \"@matharumanpreet00/react-daterange-picker\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n  listItemRoot: {\n    borderTop: \"0px\",\n    border: \"1px solid \" + CustomStyles().primaryProgressBtnBorderColor\n  },\n  formControlLabel: {},\n  listSubHeaderRoot: {\n    backgroundColor: CustomStyles().lightGreen,\n    color: \"black\",\n    textAlign: \"center\",\n    height: \"50px\",\n    borderTopLeftRadius: CustomStyles().semiRoundedRadius,\n    borderTopRightRadius: CustomStyles().semiRoundedRadius\n  },\n  nested: {\n    paddingLeft: theme.spacing(4)\n  }\n}));\n\nconst CropSidebarComponent = props => {\n  const classes = useStyles();\n  const [state, dispatch] = React.useContext(Context);\n  const [cropFiltersOpen, setCropFiltersOpen] = React.useState(false);\n  const [cashCropOpen, setCashCropOpen] = React.useState(false);\n  const [goalsOpen, setGoalsOpen] = React.useState(true);\n\n  const [dateRangeOpen, setDateRangeOpen] = React.useState(false);\n  const [dateRange, setDateRange] = React.useState({\n    startDate: null,\n    endDate: null\n  });\n\n  const [envTolData, setEnvTolData] = React.useState({\n    heat: false,\n    drought: false,\n    shade: false,\n    flood: false,\n    lowFertility: false,\n    salinity: false,\n    winterSurvival: false\n  });\n  const [growthWindowVisible, setGrowthWindowVisible] = React.useState(true);\n\n  const [openEnvTol, setOpenEnvTol] = React.useState(false);\n\n  const updateSelectedGoals = (newGoalArr, oldIndex, newIndex) => {\n    let newGoals = arrayMove(newGoalArr, oldIndex, newIndex);\n\n    dispatch({\n      type: \"DRAG_GOALS\",\n      data: {\n        selectedGoals: newGoals,\n        snackOpen: true,\n        snackMessage: \"Goal Priority Changed\"\n      }\n    });\n  };\n\n  const changeProgress = type => {\n    if (type === \"increment\") {\n      // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n      // if(state.progress === 1) {\n      //   if(document.getElementById('google-map-autocompletebar').)\n      // }\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"INCREMENT\"\n        }\n      });\n    }\n\n    if (type === \"decrement\") {\n      dispatch({\n        type: \"UPDATE_PROGRESS\",\n        data: {\n          type: \"DECREMENT\"\n        }\n      });\n    }\n  };\n\n  const handleClick = index => {\n    switch (index) {\n      case 0:\n        setGoalsOpen(!goalsOpen);\n        break;\n      case 1:\n        setCashCropOpen(!cashCropOpen);\n        break;\n      case 2:\n        setCropFiltersOpen(!cropFiltersOpen);\n        break;\n      default:\n        break;\n    }\n  };\n\n  React.useEffect(() => {\n    if (dateRange.startDate !== null && dateRange.endDate !== null) {\n      //   setFormattedDateRange({\n      //     startDate: moment(dateRange.startDate).format(\"MM/DD\"),\n      //     endDate: moment(dateRange.endDate).format(\"MM/DD\")\n      //   });\n      console.log(new Date(dateRange.startDate).toISOString());\n      dispatch({\n        type: \"UPDATE_DATE_RANGE\",\n        data: {\n          startDate: moment(\n            new Date(dateRange.startDate).toISOString(),\n            \"YYYY-MM-DD\"\n          ).format(\"MM/DD\"),\n          endDate: moment(new Date(dateRange.endDate).toISOString()).format(\n            \"MM/DD\"\n          )\n        }\n      });\n    }\n\n    props.setGrowthWindow(growthWindowVisible);\n\n    if (envTolData.heat) {\n      props.sortCropData(\"heat\");\n    } else {\n      props.sortCropData(\"\");\n    }\n  }, [dateRange, growthWindowVisible, envTolData]);\n  return (\n    <List\n      component=\"nav\"\n      classes={{ root: classes.listRoot }}\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader\n          classes={{ root: classes.listSubHeaderRoot }}\n          component=\"div\"\n          id=\"nested-list-subheader\"\n        >\n          FILTER\n        </ListSubheader>\n      }\n      className={classes.root}\n    >\n      <ListItem button onClick={() => handleClick(0)}>\n        <ListItemText primary=\"COVER CROP GOALS\" />\n        {goalsOpen ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={goalsOpen} timeout=\"auto\" unmountOnExit>\n        {state.selectedGoals.length === 0 ? (\n          <List component=\"div\" disablePadding>\n            <ListItem button className={classes.nested}>\n              <ListItemText primary=\"No Goals Selected\" />\n            </ListItem>\n            <ListItem className={classes.nested}>\n              <Button onClick={() => changeProgress(\"decrement\")}>\n                click to edit\n              </Button>\n            </ListItem>\n          </List>\n        ) : (\n          <Fragment>\n            <List component=\"div\" disablePadding>\n              <ListItem className={classes.nested}>\n                <ListItemText primary=\"Goal Priority Order\" />\n              </ListItem>\n            </List>\n            <ListMovable\n              values={state.selectedGoals}\n              onChange={({ oldIndex, newIndex }) =>\n                updateSelectedGoals(state.selectedGoals, oldIndex, newIndex)\n              }\n              renderList={({ children, props }) => (\n                <ol className=\"goalsListFilter\" {...props}>\n                  {children}\n                </ol>\n              )}\n              renderItem={({ value, props }) => (\n                <li {...props}>{value.toUpperCase()}</li>\n              )}\n            />\n            <List component=\"div\" disablePadding>\n              <ListItem\n                button\n                className={classes.nested}\n                onClick={() => changeProgress(\"decrement\")}\n              >\n                <ListItemText primary=\"Drag to reorder, click to edit\" />\n              </ListItem>\n            </List>\n          </Fragment>\n        )}\n      </Collapse>\n      <ListItem button onClick={() => handleClick(1)}>\n        {/* <ListItemIcon>\n          <Inbox />\n        </ListItemIcon> */}\n        <ListItemText primary=\"CASH CROP\" />\n        {cashCropOpen ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={cashCropOpen} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\">\n          <ListItem className={classes.nested}>\n            <TextField\n              label=\"Cash Crop\"\n              id=\"outlined-margin-dense\"\n              defaultValue=\"\"\n              //   className={classes.textField}\n              helperText=\"Enter crop\"\n              margin=\"dense\"\n              variant=\"outlined\"\n            />\n          </ListItem>\n          <ListItem className={classes.nested}>\n            {/* <TextField\n              label=\"Planting to Harvest\"\n              id=\"outlined-margin-dense\"\n              defaultValue=\"\"\n              //   className={classes.textField}\n              helperText=\"Enter dates\"\n              margin=\"dense\"\n              variant=\"outlined\"\n            /> */}\n            <TextField\n              label=\"Planting to Harvest\"\n              //   defaultValue={\"\"}\n              value={`${state.cashCropData.dateRange.startDate} - ${state.cashCropData.dateRange.endDate}`}\n              //   onChange={handleChange}\n              fullWidth\n              margin=\"dense\"\n              aria-haspopup=\"true\"\n              variant=\"outlined\"\n              InputProps={{\n                readOnly: true,\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => setDateRangeOpen(!dateRangeOpen)}\n                    >\n                      <CalendarTodayRounded />\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n          </ListItem>\n          <ListItem style={{ zIndex: 99 }}>\n            <DateRangePicker\n              open={dateRangeOpen}\n              onChange={range => setDateRange(range)}\n            />\n          </ListItem>\n          <ListItem className={classes.nested}>\n            <FormGroup>\n              <FormControlLabel\n                classes={{ root: classes.formControlLabel }}\n                control={\n                  <Checkbox\n                    checked={growthWindowVisible}\n                    onChange={() => {\n                      setGrowthWindowVisible(!growthWindowVisible);\n                    }}\n                    value=\"Show Growth Window\"\n                  />\n                }\n                label={\n                  <Typography variant=\"body2\">Show Growth Window</Typography>\n                }\n              />\n            </FormGroup>\n          </ListItem>\n        </List>\n      </Collapse>\n      <ListItem button onClick={() => handleClick(2)}>\n        {/* <ListItemIcon>\n          <Inbox />\n        </ListItemIcon> */}\n        <ListItemText primary=\"COVER CROP FILTERS\" />\n        {cropFiltersOpen ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={cropFiltersOpen} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={<Typography variant=\"body2\">Agronomic</Typography>}\n            />\n          </ListItem>\n          <ListItem\n            button\n            className={classes.nested}\n            onClick={() => setOpenEnvTol(!openEnvTol)}\n          >\n            <ListItemText\n              primary={\n                <Typography variant=\"body2\">Environmental Tolerance</Typography>\n              }\n            />\n            {openEnvTol ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={openEnvTol} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              <ListItem button className={classes.nested}>\n                <div>\n                  <FormGroup>\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.heat}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              heat: !envTolData.heat\n                            });\n                          }}\n                          value=\"HEAT\"\n                        />\n                      }\n                      label={<Typography variant=\"body2\">HEAT</Typography>}\n                    />\n                    {/* </FormGroup>\n                  <FormGroup> */}\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.drought}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              drought: !envTolData.drought\n                            });\n                          }}\n                          value=\"DROUGHT\"\n                        />\n                      }\n                      label={<Typography variant=\"body2\">DROUGHT</Typography>}\n                    />\n                    {/* </FormGroup>\n                  <FormGroup> */}\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.shade}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              shade: !envTolData.shade\n                            });\n                          }}\n                          value=\"SHADE\"\n                        />\n                      }\n                      label={<Typography variant=\"body2\">SHADE</Typography>}\n                    />\n                    {/* </FormGroup>\n                  <FormGroup> */}\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.flood}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              flood: !envTolData.flood\n                            });\n                          }}\n                          value=\"FLOOD\"\n                        />\n                      }\n                      label={<Typography variant=\"body2\">FLOOD</Typography>}\n                    />\n                    {/* </FormGroup>\n                  <FormGroup> */}\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.lowFertility}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              lowFertility: !envTolData.lowFertility\n                            });\n                          }}\n                          value=\"LOW FERTILITY\"\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\">LOW FERTILITY</Typography>\n                      }\n                    />\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.salinity}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              salinity: !envTolData.salinity\n                            });\n                          }}\n                          value=\"SALINITY\"\n                        />\n                      }\n                      label={<Typography variant=\"body2\">SALINITY</Typography>}\n                    />\n                    <FormControlLabel\n                      classes={{ root: classes.formControlLabel }}\n                      control={\n                        <Checkbox\n                          checked={envTolData.winterSurvival}\n                          onChange={() => {\n                            setEnvTolData({\n                              ...envTolData,\n                              winterSurvival: !envTolData.winterSurvival\n                            });\n                          }}\n                          value=\"WINTER SURVIVAL\"\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body2\">WINTER SURVIVAL</Typography>\n                      }\n                    />\n                  </FormGroup>\n                </div>\n              </ListItem>\n            </List>\n          </Collapse>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={<Typography variant=\"body2\">Soil Conditions</Typography>}\n            />\n          </ListItem>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={<Typography variant=\"body2\">Growth</Typography>}\n            />\n          </ListItem>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={\n                <Typography variant=\"body2\">Planting & Termination</Typography>\n              }\n            />\n          </ListItem>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={\n                <Typography variant=\"body2\">Grazers & Pollinators</Typography>\n              }\n            />\n          </ListItem>\n          <ListItem button className={classes.nested}>\n            <ListItemText\n              primary={<Typography variant=\"body2\">Pests & Disease</Typography>}\n            />\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n};\n\nexport default CropSidebarComponent;\n","import React, { useContext, useState, Fragment, useEffect } from \"react\";\nimport { Context } from \"../../store/Store\";\nimport {\n  Typography,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  FormGroup,\n  FormControl,\n  FormControlLabel,\n  Checkbox,\n  Button,\n  IconButton,\n  makeStyles\n} from \"@material-ui/core\";\nimport { List, arrayMove } from \"react-movable\";\n\nimport { ExpandMore, CalendarToday } from \"@material-ui/icons\";\n\nimport \"../../styles/cropSelector.scss\";\nimport CropTableComponent from \"./CropTable\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport MyCoverCropList from \"../MyCoverCropList/MyCoverCropList\";\nimport CropCalendarViewComponent from \"./CropCalendarView\";\nimport CropSidebarComponent from \"./CropSidebar\";\nimport CropCardViewComponent from \"./CardView/CropCardView\";\n\nconst _ = require(\"lodash\");\n\nconst CropSelector = () => {\n  const [state, dispatch] = useContext(Context);\n  // let [isExpansionExpanded, setIsExpansionExpanded] = useState(true);\n  let [showGrowthWindow, setShowGrowthWindow] = useState(true);\n\n  // let [isListView, setIsListView] = useState(true);\n\n  // TODO: set list view as default. Calendar component is activated currently\n  let [isListView, setIsListView] = useState(true);\n\n  const [cropData, setCropData] = useState([]);\n\n  const sortCropData = by => {\n    if (cropData.length !== 0) {\n      let crop_data = cropData;\n      switch (by) {\n        case \"heat\": {\n          // console.log(crop_data[\"fields\"]);\n\n          let updatedCropData = _.orderBy(\n            crop_data,\n            function(e) {\n              return e.fields[\"Heat Tolerance\"];\n            },\n            [\"desc\"]\n          );\n          // console.log(\"updated crop data\", updatedCropData);\n          setCropData(updatedCropData);\n\n          break;\n        }\n\n        default: {\n          let updatedCropData = _.orderBy(\n            crop_data,\n            function(e) {\n              return e.fields[state.selectedGoals[0]];\n            },\n            [\"desc\"]\n          );\n          // updatedCropData = _.orderBy(\n          //   updatedCropData,\n          //   function(e) {\n          //     return e.fields[\"Cover Crop Name\"];\n          //   },\n          //   [\"asc\"]\n          // );\n          setCropData(updatedCropData);\n          break;\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    setCropData(state.cropData);\n  }, [state.cropData]);\n  // useEffect(() => {\n  //   if (state.speciesSelectorActivationFlag) {\n  //     setIsExpansionExpanded(false);\n  //   } else {\n  //     setIsExpansionExpanded(true);\n  //   }\n  //   // return isExpansionExpanded;\n  // }, [isExpansionExpanded]);\n  // const updateSelectedGoals = (newGoalArr, oldIndex, newIndex) => {\n  //   let newGoals = arrayMove(newGoalArr, oldIndex, newIndex);\n\n  //   dispatch({\n  //     type: \"DRAG_GOALS\",\n  //     data: {\n  //       selectedGoals: newGoals,\n  //       snackOpen: true,\n  //       snackMessage: \"Goal Priority Changed\"\n  //     }\n  //   });\n  // };\n  // const changeProgressToGoals = () => {\n  //   changeProgress(\"decrement\");\n  // };\n  // const changeProgress = type => {\n  //   if (type === \"increment\") {\n  //     // if progress = 1 (location stage), check if textfield has a value? then set state address to that value\n  //     // if(state.progress === 1) {\n  //     //   if(document.getElementById('google-map-autocompletebar').)\n  //     // }\n  //     dispatch({\n  //       type: \"UPDATE_PROGRESS\",\n  //       data: {\n  //         type: \"INCREMENT\"\n  //       }\n  //     });\n  //   }\n\n  //   if (type === \"decrement\") {\n  //     dispatch({\n  //       type: \"UPDATE_PROGRESS\",\n  //       data: {\n  //         type: \"DECREMENT\"\n  //       }\n  //     });\n  //   }\n  // };\n  const expandCoverCropFilter = id => {\n    let listItemId = `cropFilterList${id}`;\n    let x = document.querySelectorAll(`#${listItemId} div`);\n    if (document.getElementById(listItemId).classList.contains(\"active\")) {\n      document.getElementById(listItemId).classList.remove(\"active\");\n      // hide dropdown\n      // document.querySelectorAll(`#${listItemId} div`).classList.remove(\"show\");\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"show\");\n      }\n    } else {\n      document.getElementById(listItemId).classList.add(\"active\");\n      // show dropdown\n\n      for (var j = 0; j < x.length; j++) {\n        if (!x[j].classList.contains(\"show\")) {\n          x[j].classList.add(\"show\");\n        }\n      }\n    }\n  };\n\n  const toggleListView = () => {\n    setIsListView(!isListView);\n  };\n  // const renderRelevantComponent = () => {\n  //   if (isListView) {\n\n  //   }\n  // };\n  return (\n    <div className=\"container-fluid mt-2\">\n      <div className=\"row toggleComparisonRow\">\n        <div className=\"col-lg-12\">\n          <div className=\"row\">\n            <div className=\"col-lg-12 col-sm-12\">\n              {/* <div className=\"iconsWrapper\"> */}\n              <div className=\"\">\n                {state.myCoverCropActivationFlag ? (\n                  <Fragment>\n                    {/* <div className=\"iconToggle\">\n                      <IconButton\n                        className={isListView ? `iconActive` : \"\"}\n                        onClick={toggleListView}\n                      >\n                        <ListIcon style={{ fontSize: \"larger\" }} />\n                      </IconButton>\n                    </div> */}\n                    <div className=\"iconToggle\">\n                      <Typography component=\"div\" variant=\"body1\">\n                        <IconButton\n                          color={\"secondary\"}\n                          className={`iconActive`}\n                          onClick={toggleListView}\n                        >\n                          {isListView ? (\n                            <CalendarToday style={{ fontSize: \"larger\" }} />\n                          ) : (\n                            <ListIcon style={{ fontSize: \"larger\" }} />\n                          )}\n                        </IconButton>\n                        {isListView ? \"CALENDAR VIEW\" : \"LIST VIEW\"}\n                      </Typography>\n                    </div>{\" \"}\n                    <br />\n                    <small>LIST VIEW</small>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <div className=\"iconToggle\">\n                      {/* <IconButton\n                        className={isListView ? `iconActive` : \"\"}\n                        onClick={toggleListView}\n                      >\n                        <ListIcon style={{ fontSize: \"larger\" }} />\n                      </IconButton>\n                    </div>\n                    <div className=\"iconToggle\">\n                      <IconButton\n                        className={isListView ? `` : `iconActive`}\n                        onClick={toggleListView}\n                      >\n                        <CalendarToday style={{ fontSize: \"larger\" }} />\n                      </IconButton> */}\n                      {/* <Typography component=\"div\" variant=\"body1\">\n                        <IconButton\n                          color={\"secondary\"}\n                          className={`iconActive`}\n                          onClick={toggleListView}\n                        >\n                          {isListView ? (\n                            <ListIcon style={{ fontSize: \"larger\" }} />\n                          ) : (\n                            <CalendarToday style={{ fontSize: \"larger\" }} />\n                          )}\n                        </IconButton>\n                        {isListView ? \"LIST VIEW\" : \"CALENDAR VIEW\"}\n                      </Typography> */}\n                      <Button\n                        variant=\"contained\"\n                        onClick={toggleListView}\n                        size=\"large\"\n                        color=\"secondary\"\n                        startIcon={\n                          isListView ? (\n                            <CalendarToday style={{ fontSize: \"larger\" }} />\n                          ) : (\n                            <ListIcon style={{ fontSize: \"larger\" }} />\n                          )\n                        }\n                      >\n                        {isListView ? \"CALENDAR VIEW\" : \"LIST VIEW\"}\n                      </Button>\n                    </div>\n                    {/* <small className=\"mt-2\">\n                      {isListView ? \"LIST VIEW\" : \"CALENDAR VIEW\"}\n                    </small> */}\n                  </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row cropSelectorRow mt-3\">\n        <div className=\"col-lg-2 col-sm-12\">\n          <CropSidebarComponent\n            sortCropData={sortCropData}\n            setGrowthWindow={setShowGrowthWindow}\n          />\n        </div>\n\n        <div className=\"col-lg-10\">\n          {state.speciesSelectorActivationFlag ? (\n            isListView ? (\n              <CropTableComponent\n                cropData={cropData}\n                showGrowthWindow={showGrowthWindow}\n              />\n            ) : (\n              // <CropCardViewComponent\n              //   cropData={cropData}\n              //   showGrowthWindow={showGrowthWindow}\n              // />\n              <CropCalendarViewComponent />\n            )\n          ) : (\n            <MyCoverCropList />\n          )}\n          {/* {renderRelevantComponent} */}\n          {/* {isListView ? (\n            state.myCoverCropActivationFlag ? (\n              <MyCoverCropList />\n            ) : (\n              <CropTableComponent />\n            )\n          ) : (\n            <CropCalendarViewComponent />\n          )} */}\n          {/* {state.myCoverCropActivationFlag ? (\n            <MyCoverCropList />\n          ) : (\n            <CropTableComponent />\n          )} */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CropSelector;\n","import React, { useContext, useEffect } from \"react\";\n\nimport \"./App.scss\";\n// import Header from \"./components/Header/header\";\n// import Body from \"./components/body\";\nimport {\n  Box,\n  Snackbar,\n  MuiThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core\";\n// import Navigation from \"./components/navigation\";\n// import Footer from \"./components/Footer/footer\";\nimport Header from \"./components/Header/header\";\n\nimport Landing from \"./components/Landing/Landing\";\n\nimport { Context } from \"./store/Store\";\nimport LocationComponent from \"./components/Location/Location\";\nimport { loadProgressBar } from \"axios-progress-bar\";\nimport ProgressButtons from \"./shared/ProgressButtons\";\nimport ProgressBar from \"./shared/ProgressBar\";\nimport GoalsSelector from \"./components/GoalsSelector/GoalsSelector\";\nimport LocationConfirmation from \"./components/Location/LocationConfirmation\";\nimport CropSelector from \"./components/CropSelector/CropSelector\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { CustomStyles } from \"./shared/constants\";\nimport { SnackbarProvider } from \"notistack\";\n// import { GreenBarComponent } from \"./components/GreenBar/greenBarComponent\";\n// import BodyComponent from \"./components/body\";\n\nconst logoPath = \"/images/neccc_wide_logo_color_web.jpg\";\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CustomStyles().lightGreen\n    },\n    secondary: {\n      main: CustomStyles().lighterGreen\n    }\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: CustomStyles().defaultFontSize,\n        backgroundColor: CustomStyles().secondaryProgressBtnColor,\n        color: \"black\",\n        borderRadius: CustomStyles().mildlyRoundedRadius\n      },\n      arrow: {}\n    }\n  }\n});\n\nconst loadRelevantRoute = progress => {\n  // TODO: Handle case 3 as cropselector vs soil sample selector\n  switch (progress) {\n    case 0:\n      return <Landing bg=\"/images/cover-crop-field.png\" />;\n    case 1:\n      return <LocationComponent />;\n    case 2:\n      return <LocationConfirmation />;\n    case 3:\n      return <LocationConfirmation />;\n    case 4:\n      return <GoalsSelector />;\n    case 5:\n      return <CropSelector />;\n\n    default:\n      return \"Non handled case\";\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useContext(Context);\n  useEffect(() => {\n    document.title = \"Cover Crop Decision Support Tool\";\n    loadProgressBar();\n  }, [state.ajaxInProgress]);\n\n  // const isRootRoute = this.props.path == \"/\" ? true : false;\n  const handleSnackClose = () => {\n    dispatch({\n      type: \"SNACK\",\n      data: {\n        snackOpen: false,\n        snackMessage: \"\"\n      }\n    });\n  };\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <SnackbarProvider\n        maxSnack={5}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }}\n      >\n        <div className=\"contentWrapper\">\n          <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n          {loadRelevantRoute(state.progress)}\n\n          {state.progress !== 0 && state.progress < 5 ? (\n            <div className=\"row progressIndicatorWrapper mt-4\">\n              <div\n                className=\"col-lg-12\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <div\n                  className=\"row\"\n                  style={{\n                    width: \"90%\"\n                  }}\n                >\n                  <div className=\"col-lg-4\">\n                    <ProgressButtons />\n                  </div>\n                  <div\n                    className=\"col-lg-4 offset-lg-4\"\n                    style={{\n                      textAlign: \"right\"\n                    }}\n                  >\n                    <ProgressBar />\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          <div>\n            <Snackbar\n              anchorOrigin={{\n                vertical: state.snackVertical,\n                horizontal: state.snackHorizontal\n              }}\n              key={{\n                vertical: state.snackVertical,\n                horizontal: state.snackHorizontal\n              }}\n              autoHideDuration={5000}\n              open={state.snackOpen}\n              onClose={handleSnackClose}\n              ContentProps={{\n                \"aria-describedby\": \"message-id\"\n              }}\n              message={state.snackMessage}\n            />\n          </div>\n        </div>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Store, { Context } from \"./store/Store\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./styles/progressBar.css\";\nimport Footer from \"./components/Footer/footer\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About/About\";\nimport SeedingRateCalculator from \"./components/SeedingRateCalculator/SeedingRateCalculator\";\nimport MixMaker from \"./components/MixMaker/MixMaker\";\nimport CoverCropExplorer from \"./components/CoverCropExplorer/CoverCropExplorer\";\n\nconst withFooter = WrappedComponent => () => [\n  <WrappedComponent key=\"1\" />,\n  <Footer key=\"2\" />\n];\n\nconst Wrapper = () => (\n  <Store>\n    <BrowserRouter>\n      <Suspense fallback={<div>Loading..</div>}>\n        <Switch>\n          <Route path={`/`} component={App} exact />\n          <Route path={\"/about\"} component={About} exact />\n          <Route\n            path={\"/seeding-rate-calculator\"}\n            component={SeedingRateCalculator}\n            exact\n          />\n          <Route path={\"/mix-maker\"} component={MixMaker} exact />\n          <Route\n            path={\"/cover-crop-explorer\"}\n            component={CoverCropExplorer}\n            exact\n          />\n        </Switch>\n      </Suspense>\n\n      {/* <App /> */}\n    </BrowserRouter>\n  </Store>\n);\n\nconst WrapperWithFooter = withFooter(Wrapper);\n\nReactDOM.render(<WrapperWithFooter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\nimport { Link } from \"@material-ui/core\";\n\n// import \"../../styles/header.css\";\nimport \"../../styles/footer.scss\";\n\nconst Footer = () => {\n  let currentYear = new Date().getFullYear();\n  return (\n    <footer className=\"primaryFooter\">\n      <div className=\"leftSideText\">\n        Disclaimer: Actual cover crop performance may vary. Consult your local{\" \"}\n        <a\n          className=\"footerLink\"\n          href=\"https://www.nrcs.usda.gov/wps/portal/nrcs/detailfull/national/programs/financial/csp/?&cid=nrcsdev11_000242\"\n          style={{\n            color: \"#fff\"\n          }}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          NRCS field office\n        </a>\n        ,{\" \"}\n        <a\n          href=\"https://nifa.usda.gov/land-grant-colleges-and-universities-partner-website-directory\"\n          className=\"footerLink\"\n          style={{\n            color: \"#fff\"\n          }}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Cooperative Extension Service office\n        </a>{\" \"}\n        , or{\" \"}\n        <a\n          href=\"https://www.nacdnet.org/general-resources/conservation-district-directory/\"\n          className=\"footerLink\"\n          style={{\n            color: \"#fff\"\n          }}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Conservation District\n        </a>{\" \"}\n        for detailed guidance.\n      </div>\n      <div className=\"rightSideText\">\n        <Link\n          href=\"https://opensource.org/docs/osd\"\n          style={{ paddingRight: \"50px\", color: \"#000\" }}\n          target=\"_blank\"\n        >\n          OPEN SOURCE\n        </Link>\n        <Link style={{ paddingRight: \"50px\", color: \"#000\" }}>CONTACT US</Link>\n        <Link style={{ paddingRight: \"50px\", color: \"#000\" }}>\n          {currentYear}\n        </Link>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nconst tableStyles = {\n  td: {\n    fontSize: \"1em\",\n    padding: \"0.1em\"\n  }\n};\nconst About = () => {\n  return (\n    <Fragment>\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n\n      <Box>\n        <aside\n          className=\"landingWrapper\"\n          style={{\n            background: 'url(\"/images/cover-crop-field.png\") 0% 0% / cover'\n          }}\n        >\n          <div className=\"boxWrapper\">\n            <aside className=\"text-left\">\n              <h2>About</h2>\n              <p>\n                We are a group of researchers and outreach experts from\n                universities, government agencies and NGOs, and industry\n                dedicated to increasing the sustainability of US cropping\n                systems.The Cover Crop Tools was designed and developed by a\n                Product Team with members from the{\" \"}\n                <a href=\"http://sudokita.com\" target=\"_blank\" rel=\"noreferrer\">\n                  Agricultural Informatics Lab\n                </a>{\" \"}\n                and the{\" \"}\n                <a\n                  href=\"http://precisionsustainableag.org\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Precision Sustainable Agriculture\n                </a>{\" \"}\n                team at USDA ARS, NC State, and Purdue University. The Cover\n                Crop Dataset has been assembled by six teams of cover crop\n                experts (one for each plant hardiness zone in the northeastern\n                United States) from the\n                <a\n                  href=\"http://northeastcovercrops.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {\" \"}\n                  Northeast Cover Crops Council\n                </a>\n                .\n                <br />\n                <table className=\"table table-hover table-striped mt-2\">\n                  <thead className=\"thead-dark\">\n                    <tr>\n                      <th style={tableStyles.td}>Team</th>\n                      <th style={tableStyles.td}>Members</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td style={tableStyles.td}>Product</td>\n                      <td style={tableStyles.td}>\n                        Ankita Raturi, Victoria Ackroyd, Juliet Norton, Rohit\n                        Bandooni, Paul Salon, Steven Mirsky\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 7</td>\n                      <td style={tableStyles.td}>\n                        Mark VanGessel, Scott Raubenstein, Nevin Dawson, Aaron\n                        Cooper, Dean Hively, Steven Mirsky, Michel Cavigelli\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 6</td>\n                      <td style={tableStyles.td}>\n                        Sjoerd Duiker, John Wallace, Jim Hyde, Rebecca Brown,\n                        Zach Larson, Dave Wilson, Megan Chawner, Christian\n                        Bench, Kaitlin Farbotnik, Mark Goodson\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 5</td>\n                      <td style={tableStyles.td}>\n                        Thomas Bjorkman, Kirsten Workman, Shawnna Clark, Dorn\n                        Cox, Mark Goodson, Anne Verhallen\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 4</td>\n                      <td style={tableStyles.td}>\n                        Heather Darby, Jason Lilley, Natalie Lounsbury, Lindsey\n                        Ruhl, Derek Hines, Rebecca Long, Ellen Mallory, John\n                        Chartier, Kirsten Workman\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Zone 2 &amp; 3</td>\n                      <td style={tableStyles.td}>TBD.</td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>Misc. Participants</td>\n                      <td style={tableStyles.td}>\n                        Brandon Smith, Linda Yeung, Masoud Hashemi, Kate Tully\n                      </td>\n                    </tr>\n                    <tr>\n                      <td style={tableStyles.td}>External Data Sources</td>\n                      <td style={tableStyles.td}>\n                        The NECCC dataset was built on data sourced from the{\" \"}\n                        <a href=\"http://mccc.msu.edu\" target=\"_blank\">\n                          Midwestern Cover Crops Council\n                        </a>\n                        ,{\" \"}\n                        <a href=\"https://plants.usda.gov/java/\">\n                          USDA PLANTS database\n                        </a>\n                        , and the{\" \"}\n                        <a href=\"http://itis.gov\" target=\"_blank\">\n                          Integrated Taxonomic Information Service\n                        </a>\n                        .\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </p>\n              <p>\n                <b className=\"mt-2\">\n                  This material is based upon work supported by:\n                </b>\n                <ol>\n                  <li>\n                    The National Institute of Food and Agriculture, U.S.\n                    Department of Agriculture, through the Northeast Sustainable\n                    Agriculture Research and Education program under subaward\n                    number ENE16-144,\n                  </li>\n                  <li>\n                    Post-doctoral Fellowship number 2016-67012-24711 and other\n                    awards from the USDA National Institute of Food and\n                    Agriculture,\n                  </li>\n                  <li>\n                    The U.S. Department of Agriculture Natural Resources\n                    Conservation Service.\n                  </li>\n                </ol>\n              </p>\n              <p></p>\n            </aside>\n          </div>\n        </aside>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst SeedingRateCalculator = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default SeedingRateCalculator;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst MixMaker = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default MixMaker;\n","import React from \"react\";\nimport Header from \"../Header/header\";\nimport { Box, Grid, Typography } from \"@material-ui/core\";\nimport { UnderConstructionText } from \"../../shared/constants\";\n\nconst CoverCropExplorer = () => {\n  return (\n    <div className=\"contentWrapper\">\n      <Header logo=\"neccc_wide_logo_color_web.jpg\" />\n      <Box>{UnderConstructionText}</Box>\n    </div>\n  );\n};\n\nexport default CoverCropExplorer;\n"],"sourceRoot":""}